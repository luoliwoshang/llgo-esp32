// Generated by gen-device-svd.go from esp32.svd, see https://github.com/posborne/cmsis-svd/tree/master/data/Espressif

//go:build esp && esp32

/*
// 32-bit MCU & 2.4 GHz Wi-Fi & Bluetooth/Bluetooth LE
*/
//     Copyright 2023 Espressif Systems (Shanghai) PTE LTD Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
package esp

import (
	"unsafe"

	"github.com/luoliwoshang/llgo-esp32/emb/runtime/volatile"
)

// Some information about this device.
const (
	Device       = "ESP32"
	CPU          = "Xtensa LX6"
	FPUPresent   = true
	NVICPrioBits = 0
)

// Interrupt numbers.
const (
	// DPORT Peripheral
	IRQ_WIFI_MAC = 0

	// DPORT Peripheral
	IRQ_WIFI_NMI = 1

	// DPORT Peripheral
	IRQ_WIFI_BB = 2

	// DPORT Peripheral
	IRQ_BT_MAC = 3

	// DPORT Peripheral
	IRQ_BT_BB = 4

	// DPORT Peripheral
	IRQ_BT_BB_NMI = 5

	// DPORT Peripheral
	IRQ_RWBT = 6

	// DPORT Peripheral
	IRQ_RWBLE = 7

	// DPORT Peripheral
	IRQ_RWBT_NMI = 8

	// DPORT Peripheral
	IRQ_RWBLE_NMI = 9

	// Universal Host Controller Interface 0
	IRQ_UHCI0 = 12

	// Universal Host Controller Interface 1
	IRQ_UHCI1 = 13

	// Timer Group 0
	IRQ_TG0_T0_LEVEL = 14

	// Timer Group 0
	IRQ_TG0_T1_LEVEL = 15

	// Timer Group 0
	IRQ_TG0_WDT_LEVEL = 16

	// Timer Group 0
	IRQ_TG0_LACT_LEVEL = 17

	// Timer Group 1
	IRQ_TG1_T0_LEVEL = 18

	// Timer Group 1
	IRQ_TG1_T1_LEVEL = 19

	// Timer Group 1
	IRQ_TG1_WDT_LEVEL = 20

	// Timer Group 1
	IRQ_TG1_LACT_LEVEL = 21

	// General Purpose Input/Output
	IRQ_GPIO = 22

	// General Purpose Input/Output
	IRQ_GPIO_NMI = 23

	// DPORT Peripheral
	IRQ_FROM_CPU_INTR0 = 24

	// DPORT Peripheral
	IRQ_FROM_CPU_INTR1 = 25

	// DPORT Peripheral
	IRQ_FROM_CPU_INTR2 = 26

	// DPORT Peripheral
	IRQ_FROM_CPU_INTR3 = 27

	// SPI (Serial Peripheral Interface) Controller 0
	IRQ_SPI0 = 28

	// SPI (Serial Peripheral Interface) Controller 1
	IRQ_SPI1 = 29

	// SPI (Serial Peripheral Interface) Controller 2
	IRQ_SPI2 = 30

	// SPI (Serial Peripheral Interface) Controller 3
	IRQ_SPI3 = 31

	// I2S (Inter-IC Sound) Controller 0
	IRQ_I2S0 = 32

	// I2S (Inter-IC Sound) Controller 1
	IRQ_I2S1 = 33

	// UART (Universal Asynchronous Receiver-Transmitter) Controller 0
	IRQ_UART0 = 34

	// UART (Universal Asynchronous Receiver-Transmitter) Controller 1
	IRQ_UART1 = 35

	// UART (Universal Asynchronous Receiver-Transmitter) Controller 2
	IRQ_UART2 = 36

	// DPORT Peripheral
	IRQ_SDIO_HOST = 37

	// DPORT Peripheral
	IRQ_ETH_MAC = 38

	// Motor Control Pulse-Width Modulation 0
	IRQ_MCPWM0 = 39

	// Motor Control Pulse-Width Modulation 0
	IRQ_MCPWM1 = 40

	// Motor Control Pulse-Width Modulation 0
	IRQ_MCPWM2 = 41

	// Motor Control Pulse-Width Modulation 0
	IRQ_MCPWM3 = 42

	// LED Control PWM (Pulse Width Modulation)
	IRQ_LEDC = 43

	// eFuse Controller
	IRQ_EFUSE = 44

	// Two-Wire Automotive Interface
	IRQ_TWAI0 = 45

	// Real-Time Clock Control
	IRQ_RTC_CORE = 46

	// Remote Control
	IRQ_RMT = 47

	// Pulse Count Controller
	IRQ_PCNT = 48

	// I2C (Inter-Integrated Circuit) Controller 0
	IRQ_I2C_EXT0 = 49

	// I2C (Inter-Integrated Circuit) Controller 1
	IRQ_I2C_EXT1 = 50

	// RSA (Rivest Shamir Adleman) Accelerator
	IRQ_RSA = 51

	// SPI (Serial Peripheral Interface) Controller 1
	IRQ_SPI1_DMA = 52

	// SPI (Serial Peripheral Interface) Controller 2
	IRQ_SPI2_DMA = 53

	// SPI (Serial Peripheral Interface) Controller 3
	IRQ_SPI3_DMA = 54

	// DPORT Peripheral
	IRQ_WDT = 55

	// LED Control PWM (Pulse Width Modulation)
	IRQ_TIMER1 = 56

	// LED Control PWM (Pulse Width Modulation)
	IRQ_TIMER2 = 57

	// Timer Group 0
	IRQ_TG0_T0_EDGE = 58

	// Timer Group 0
	IRQ_TG0_T1_EDGE = 59

	// Timer Group 0
	IRQ_TG0_WDT_EDGE = 60

	// Timer Group 0
	IRQ_TG0_LACT_EDGE = 61

	// Timer Group 1
	IRQ_TG1_T0_EDGE = 62

	// Timer Group 1
	IRQ_TG1_T1_EDGE = 63

	// Timer Group 1
	IRQ_TG1_WDT_EDGE = 64

	// Timer Group 1
	IRQ_TG1_LACT_EDGE = 65

	// DPORT Peripheral
	IRQ_MMU_IA = 66

	// DPORT Peripheral
	IRQ_MPU_IA = 67

	// DPORT Peripheral
	IRQ_CACHE_IA = 68

	// Highest interrupt number on this device.
	IRQ_max = 68
)

// Pseudo function call that is replaced by the compiler with the actual
// functions registered through interrupt.New.
//
//go:linkname callHandlers runtime/interrupt.callHandlers
func callHandlers(num int)
func HandleInterrupt(num int) {
	switch num {
	case IRQ_WIFI_MAC:
		callHandlers(IRQ_WIFI_MAC)
	case IRQ_WIFI_NMI:
		callHandlers(IRQ_WIFI_NMI)
	case IRQ_WIFI_BB:
		callHandlers(IRQ_WIFI_BB)
	case IRQ_BT_MAC:
		callHandlers(IRQ_BT_MAC)
	case IRQ_BT_BB:
		callHandlers(IRQ_BT_BB)
	case IRQ_BT_BB_NMI:
		callHandlers(IRQ_BT_BB_NMI)
	case IRQ_RWBT:
		callHandlers(IRQ_RWBT)
	case IRQ_RWBLE:
		callHandlers(IRQ_RWBLE)
	case IRQ_RWBT_NMI:
		callHandlers(IRQ_RWBT_NMI)
	case IRQ_RWBLE_NMI:
		callHandlers(IRQ_RWBLE_NMI)
	case IRQ_UHCI0:
		callHandlers(IRQ_UHCI0)
	case IRQ_UHCI1:
		callHandlers(IRQ_UHCI1)
	case IRQ_TG0_T0_LEVEL:
		callHandlers(IRQ_TG0_T0_LEVEL)
	case IRQ_TG0_T1_LEVEL:
		callHandlers(IRQ_TG0_T1_LEVEL)
	case IRQ_TG0_WDT_LEVEL:
		callHandlers(IRQ_TG0_WDT_LEVEL)
	case IRQ_TG0_LACT_LEVEL:
		callHandlers(IRQ_TG0_LACT_LEVEL)
	case IRQ_TG1_T0_LEVEL:
		callHandlers(IRQ_TG1_T0_LEVEL)
	case IRQ_TG1_T1_LEVEL:
		callHandlers(IRQ_TG1_T1_LEVEL)
	case IRQ_TG1_WDT_LEVEL:
		callHandlers(IRQ_TG1_WDT_LEVEL)
	case IRQ_TG1_LACT_LEVEL:
		callHandlers(IRQ_TG1_LACT_LEVEL)
	case IRQ_GPIO:
		callHandlers(IRQ_GPIO)
	case IRQ_GPIO_NMI:
		callHandlers(IRQ_GPIO_NMI)
	case IRQ_FROM_CPU_INTR0:
		callHandlers(IRQ_FROM_CPU_INTR0)
	case IRQ_FROM_CPU_INTR1:
		callHandlers(IRQ_FROM_CPU_INTR1)
	case IRQ_FROM_CPU_INTR2:
		callHandlers(IRQ_FROM_CPU_INTR2)
	case IRQ_FROM_CPU_INTR3:
		callHandlers(IRQ_FROM_CPU_INTR3)
	case IRQ_SPI0:
		callHandlers(IRQ_SPI0)
	case IRQ_SPI1:
		callHandlers(IRQ_SPI1)
	case IRQ_SPI2:
		callHandlers(IRQ_SPI2)
	case IRQ_SPI3:
		callHandlers(IRQ_SPI3)
	case IRQ_I2S0:
		callHandlers(IRQ_I2S0)
	case IRQ_I2S1:
		callHandlers(IRQ_I2S1)
	case IRQ_UART0:
		callHandlers(IRQ_UART0)
	case IRQ_UART1:
		callHandlers(IRQ_UART1)
	case IRQ_UART2:
		callHandlers(IRQ_UART2)
	case IRQ_SDIO_HOST:
		callHandlers(IRQ_SDIO_HOST)
	case IRQ_ETH_MAC:
		callHandlers(IRQ_ETH_MAC)
	case IRQ_MCPWM0:
		callHandlers(IRQ_MCPWM0)
	case IRQ_MCPWM1:
		callHandlers(IRQ_MCPWM1)
	case IRQ_MCPWM2:
		callHandlers(IRQ_MCPWM2)
	case IRQ_MCPWM3:
		callHandlers(IRQ_MCPWM3)
	case IRQ_LEDC:
		callHandlers(IRQ_LEDC)
	case IRQ_EFUSE:
		callHandlers(IRQ_EFUSE)
	case IRQ_TWAI0:
		callHandlers(IRQ_TWAI0)
	case IRQ_RTC_CORE:
		callHandlers(IRQ_RTC_CORE)
	case IRQ_RMT:
		callHandlers(IRQ_RMT)
	case IRQ_PCNT:
		callHandlers(IRQ_PCNT)
	case IRQ_I2C_EXT0:
		callHandlers(IRQ_I2C_EXT0)
	case IRQ_I2C_EXT1:
		callHandlers(IRQ_I2C_EXT1)
	case IRQ_RSA:
		callHandlers(IRQ_RSA)
	case IRQ_SPI1_DMA:
		callHandlers(IRQ_SPI1_DMA)
	case IRQ_SPI2_DMA:
		callHandlers(IRQ_SPI2_DMA)
	case IRQ_SPI3_DMA:
		callHandlers(IRQ_SPI3_DMA)
	case IRQ_WDT:
		callHandlers(IRQ_WDT)
	case IRQ_TIMER1:
		callHandlers(IRQ_TIMER1)
	case IRQ_TIMER2:
		callHandlers(IRQ_TIMER2)
	case IRQ_TG0_T0_EDGE:
		callHandlers(IRQ_TG0_T0_EDGE)
	case IRQ_TG0_T1_EDGE:
		callHandlers(IRQ_TG0_T1_EDGE)
	case IRQ_TG0_WDT_EDGE:
		callHandlers(IRQ_TG0_WDT_EDGE)
	case IRQ_TG0_LACT_EDGE:
		callHandlers(IRQ_TG0_LACT_EDGE)
	case IRQ_TG1_T0_EDGE:
		callHandlers(IRQ_TG1_T0_EDGE)
	case IRQ_TG1_T1_EDGE:
		callHandlers(IRQ_TG1_T1_EDGE)
	case IRQ_TG1_WDT_EDGE:
		callHandlers(IRQ_TG1_WDT_EDGE)
	case IRQ_TG1_LACT_EDGE:
		callHandlers(IRQ_TG1_LACT_EDGE)
	case IRQ_MMU_IA:
		callHandlers(IRQ_MMU_IA)
	case IRQ_MPU_IA:
		callHandlers(IRQ_MPU_IA)
	case IRQ_CACHE_IA:
		callHandlers(IRQ_CACHE_IA)
	}
}

// Peripherals.
var (
	// AES (Advanced Encryption Standard) Accelerator
	AES = (*AES_Type)(unsafe.Pointer(uintptr(0x3ff01000)))

	// APB (Advanced Peripheral Bus) Controller
	APB_CTRL = (*APB_CTRL_Type)(unsafe.Pointer(uintptr(0x3ff66000)))

	// BB Peripheral
	BB = (*BB_Type)(unsafe.Pointer(uintptr(0x3ff5d000)))

	// DPORT Peripheral
	DPORT = (*DPORT_Type)(unsafe.Pointer(uintptr(0x3ff00000)))

	// eFuse Controller
	EFUSE = (*EFUSE_Type)(unsafe.Pointer(uintptr(0x3ff5a000)))

	// Ethernet DMA configuration and control registers
	EMAC_DMA = (*EMAC_DMA_Type)(unsafe.Pointer(uintptr(0x3ff69000)))

	// Ethernet Clock, PHY type, and SRAM configuration registers
	EMAC_EXT = (*EMAC_EXT_Type)(unsafe.Pointer(uintptr(0x3ff69800)))

	// Ethernet MAC configuration and control registers
	EMAC_MAC = (*EMAC_MAC_Type)(unsafe.Pointer(uintptr(0x3ff6a000)))

	// FLASH_ENCRYPTION Peripheral
	FLASH_ENCRYPTION = (*FLASH_ENCRYPTION_Type)(unsafe.Pointer(uintptr(0x3ff46000)))

	// FRC_TIMER Peripheral
	FRC_TIMER = (*FRC_Type)(unsafe.Pointer(uintptr(0x3ff47000)))

	// General Purpose Input/Output
	GPIO = (*GPIO_Type)(unsafe.Pointer(uintptr(0x3ff44000)))

	// Sigma-Delta Modulation
	GPIO_SD = (*GPIO_SIGMADELTA_Type)(unsafe.Pointer(uintptr(0x3ff44f00)))

	// HINF Peripheral
	HINF = (*HINF_Type)(unsafe.Pointer(uintptr(0x3ff4b000)))

	// I2C (Inter-Integrated Circuit) Controller 0
	I2C0 = (*I2C_Type)(unsafe.Pointer(uintptr(0x3ff53000)))

	// I2S (Inter-IC Sound) Controller 0
	I2S0 = (*I2S_Type)(unsafe.Pointer(uintptr(0x3ff4f000)))

	// Input/Output Multiplexer
	IO_MUX = (*IO_MUX_Type)(unsafe.Pointer(uintptr(0x3ff49000)))

	// LED Control PWM (Pulse Width Modulation)
	LEDC = (*LEDC_Type)(unsafe.Pointer(uintptr(0x3ff59000)))

	// Motor Control Pulse-Width Modulation 0
	MCPWM0 = (*MCPWM_Type)(unsafe.Pointer(uintptr(0x3ff5e000)))

	// NRX Peripheral
	NRX = (*NRX_Type)(unsafe.Pointer(uintptr(0x3ff5cc00)))

	// Pulse Count Controller
	PCNT = (*PCNT_Type)(unsafe.Pointer(uintptr(0x3ff57000)))

	// Remote Control
	RMT = (*RMT_Type)(unsafe.Pointer(uintptr(0x3ff56000)))

	// Hardware Random Number Generator
	RNG = (*RNG_Type)(unsafe.Pointer(uintptr(0x60035000)))

	// RSA (Rivest Shamir Adleman) Accelerator
	RSA = (*RSA_Type)(unsafe.Pointer(uintptr(0x3ff02000)))

	// Real-Time Clock Control
	RTC_CNTL = (*RTC_CNTL_Type)(unsafe.Pointer(uintptr(0x3ff48000)))

	// Low-power Input/Output
	RTC_IO = (*RTC_GPIO_Type)(unsafe.Pointer(uintptr(0x3ff48400)))

	// Low-power I2C (Inter-Integrated Circuit) Controller
	RTC_I2C = (*RTC_I2C_Type)(unsafe.Pointer(uintptr(0x3ff48c00)))

	// SD/MMC Host Controller
	SDHOST = (*SDHOST_Type)(unsafe.Pointer(uintptr(0x3ff68000)))

	// SENS Peripheral
	SENS = (*SENS_Type)(unsafe.Pointer(uintptr(0x3ff48800)))

	// SHA (Secure Hash Algorithm) Accelerator
	SHA = (*SHA_Type)(unsafe.Pointer(uintptr(0x3ff03000)))

	// SLC Peripheral
	SLC = (*SLC_Type)(unsafe.Pointer(uintptr(0x3ff58000)))

	// SLCHOST Peripheral
	SLCHOST = (*SLCHOST_Type)(unsafe.Pointer(uintptr(0x3ff55000)))

	// SPI (Serial Peripheral Interface) Controller 0
	SPI0 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff43000)))

	// Timer Group 0
	TIMG0 = (*TIMG_Type)(unsafe.Pointer(uintptr(0x3ff5f000)))

	// Two-Wire Automotive Interface
	TWAI0 = (*TWAI_Type)(unsafe.Pointer(uintptr(0x3ff6b000)))

	// UART (Universal Asynchronous Receiver-Transmitter) Controller 0
	UART0 = (*UART_Type)(unsafe.Pointer(uintptr(0x3ff40000)))

	// Universal Host Controller Interface 0
	UHCI0 = (*UHCI_Type)(unsafe.Pointer(uintptr(0x3ff54000)))

	// I2C (Inter-Integrated Circuit) Controller 1
	I2C1 = (*I2C_Type)(unsafe.Pointer(uintptr(0x3ff67000)))

	// I2S (Inter-IC Sound) Controller 1
	I2S1 = (*I2S_Type)(unsafe.Pointer(uintptr(0x3ff6d000)))

	// Motor Control Pulse-Width Modulation 1
	MCPWM1 = (*MCPWM_Type)(unsafe.Pointer(uintptr(0x3ff6c000)))

	// SPI (Serial Peripheral Interface) Controller 1
	SPI1 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff42000)))

	// SPI (Serial Peripheral Interface) Controller 2
	SPI2 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff64000)))

	// SPI (Serial Peripheral Interface) Controller 3
	SPI3 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff65000)))

	// Timer Group 1
	TIMG1 = (*TIMG_Type)(unsafe.Pointer(uintptr(0x3ff60000)))

	// UART (Universal Asynchronous Receiver-Transmitter) Controller 1
	UART1 = (*UART_Type)(unsafe.Pointer(uintptr(0x3ff50000)))

	// UART (Universal Asynchronous Receiver-Transmitter) Controller 2
	UART2 = (*UART_Type)(unsafe.Pointer(uintptr(0x3ff6e000)))

	// Universal Host Controller Interface 1
	UHCI1 = (*UHCI_Type)(unsafe.Pointer(uintptr(0x3ff4c000)))
)

// AES (Advanced Encryption Standard) Accelerator
type AES_Type struct {
	START  volatile.Register32 // 0x0
	IDLE   volatile.Register32 // 0x4
	MODE   volatile.Register32 // 0x8
	_      [4]byte
	KEY_0  volatile.Register32 // 0x10
	KEY_1  volatile.Register32 // 0x14
	KEY_2  volatile.Register32 // 0x18
	KEY_3  volatile.Register32 // 0x1C
	KEY_4  volatile.Register32 // 0x20
	KEY_5  volatile.Register32 // 0x24
	KEY_6  volatile.Register32 // 0x28
	KEY_7  volatile.Register32 // 0x2C
	TEXT_0 volatile.Register32 // 0x30
	TEXT_1 volatile.Register32 // 0x34
	TEXT_2 volatile.Register32 // 0x38
	TEXT_3 volatile.Register32 // 0x3C
	ENDIAN volatile.Register32 // 0x40
}

// AES.START
func (o *AES_Type) SetSTART(value uint32) {
	volatile.StoreUint32(&o.START.Reg, volatile.LoadUint32(&o.START.Reg)&^(0x1)|value)
}
func (o *AES_Type) GetSTART() uint32 {
	return volatile.LoadUint32(&o.START.Reg) & 0x1
}

// AES.IDLE
func (o *AES_Type) SetIDLE(value uint32) {
	volatile.StoreUint32(&o.IDLE.Reg, volatile.LoadUint32(&o.IDLE.Reg)&^(0x1)|value)
}
func (o *AES_Type) GetIDLE() uint32 {
	return volatile.LoadUint32(&o.IDLE.Reg) & 0x1
}

// AES.MODE
func (o *AES_Type) SetMODE(value uint32) {
	volatile.StoreUint32(&o.MODE.Reg, volatile.LoadUint32(&o.MODE.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetMODE() uint32 {
	return volatile.LoadUint32(&o.MODE.Reg) & 0xff
}

// AES.KEY_0
func (o *AES_Type) SetKEY_0_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_0.Reg, volatile.LoadUint32(&o.KEY_0.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_0_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_0.Reg) & 0xff
}

// AES.KEY_1
func (o *AES_Type) SetKEY_1_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_1.Reg, volatile.LoadUint32(&o.KEY_1.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_1_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_1.Reg) & 0xff
}

// AES.KEY_2
func (o *AES_Type) SetKEY_2_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_2.Reg, volatile.LoadUint32(&o.KEY_2.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_2_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_2.Reg) & 0xff
}

// AES.KEY_3
func (o *AES_Type) SetKEY_3_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_3.Reg, volatile.LoadUint32(&o.KEY_3.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_3_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_3.Reg) & 0xff
}

// AES.KEY_4
func (o *AES_Type) SetKEY_4_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_4.Reg, volatile.LoadUint32(&o.KEY_4.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_4_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_4.Reg) & 0xff
}

// AES.KEY_5
func (o *AES_Type) SetKEY_5_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_5.Reg, volatile.LoadUint32(&o.KEY_5.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_5_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_5.Reg) & 0xff
}

// AES.KEY_6
func (o *AES_Type) SetKEY_6_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_6.Reg, volatile.LoadUint32(&o.KEY_6.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_6_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_6.Reg) & 0xff
}

// AES.KEY_7
func (o *AES_Type) SetKEY_7_KEY(value uint32) {
	volatile.StoreUint32(&o.KEY_7.Reg, volatile.LoadUint32(&o.KEY_7.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetKEY_7_KEY() uint32 {
	return volatile.LoadUint32(&o.KEY_7.Reg) & 0xff
}

// AES.TEXT_0
func (o *AES_Type) SetTEXT_0_TEXT(value uint32) {
	volatile.StoreUint32(&o.TEXT_0.Reg, volatile.LoadUint32(&o.TEXT_0.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetTEXT_0_TEXT() uint32 {
	return volatile.LoadUint32(&o.TEXT_0.Reg) & 0xff
}

// AES.TEXT_1
func (o *AES_Type) SetTEXT_1_TEXT(value uint32) {
	volatile.StoreUint32(&o.TEXT_1.Reg, volatile.LoadUint32(&o.TEXT_1.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetTEXT_1_TEXT() uint32 {
	return volatile.LoadUint32(&o.TEXT_1.Reg) & 0xff
}

// AES.TEXT_2
func (o *AES_Type) SetTEXT_2_TEXT(value uint32) {
	volatile.StoreUint32(&o.TEXT_2.Reg, volatile.LoadUint32(&o.TEXT_2.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetTEXT_2_TEXT() uint32 {
	return volatile.LoadUint32(&o.TEXT_2.Reg) & 0xff
}

// AES.TEXT_3
func (o *AES_Type) SetTEXT_3_TEXT(value uint32) {
	volatile.StoreUint32(&o.TEXT_3.Reg, volatile.LoadUint32(&o.TEXT_3.Reg)&^(0xff)|value)
}
func (o *AES_Type) GetTEXT_3_TEXT() uint32 {
	return volatile.LoadUint32(&o.TEXT_3.Reg) & 0xff
}

// AES.ENDIAN
func (o *AES_Type) SetENDIAN(value uint32) {
	volatile.StoreUint32(&o.ENDIAN.Reg, volatile.LoadUint32(&o.ENDIAN.Reg)&^(0x3)|value)
}
func (o *AES_Type) GetENDIAN() uint32 {
	return volatile.LoadUint32(&o.ENDIAN.Reg) & 0x3
}

// APB (Advanced Peripheral Bus) Controller
type APB_CTRL_Type struct {
	SYSCLK_CONF               volatile.Register32 // 0x0
	XTAL_TICK_CONF            volatile.Register32 // 0x4
	PLL_TICK_CONF             volatile.Register32 // 0x8
	CK8M_TICK_CONF            volatile.Register32 // 0xC
	APB_SARADC_CTRL           volatile.Register32 // 0x10
	APB_SARADC_CTRL2          volatile.Register32 // 0x14
	APB_SARADC_FSM            volatile.Register32 // 0x18
	APB_SARADC_SAR1_PATT_TAB1 volatile.Register32 // 0x1C
	APB_SARADC_SAR1_PATT_TAB2 volatile.Register32 // 0x20
	APB_SARADC_SAR1_PATT_TAB3 volatile.Register32 // 0x24
	APB_SARADC_SAR1_PATT_TAB4 volatile.Register32 // 0x28
	APB_SARADC_SAR2_PATT_TAB1 volatile.Register32 // 0x2C
	APB_SARADC_SAR2_PATT_TAB2 volatile.Register32 // 0x30
	APB_SARADC_SAR2_PATT_TAB3 volatile.Register32 // 0x34
	APB_SARADC_SAR2_PATT_TAB4 volatile.Register32 // 0x38
	APLL_TICK_CONF            volatile.Register32 // 0x3C
	_                         [60]byte
	DATE                      volatile.Register32 // 0x7C
}

// APB_CTRL.SYSCLK_CONF
func (o *APB_CTRL_Type) SetSYSCLK_CONF_PRE_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x3ff)|value)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_PRE_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x3ff
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_CLK_320M_EN(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x400)|value<<10)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_CLK_320M_EN() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x400) >> 10
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x800)|value<<11)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x800) >> 11
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_RST_TICK_CNT(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_RST_TICK_CNT() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x1000) >> 12
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_QUICK_CLK_CHNG(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_QUICK_CLK_CHNG() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x2000) >> 13
}

// APB_CTRL.XTAL_TICK_CONF
func (o *APB_CTRL_Type) SetXTAL_TICK_CONF_XTAL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.XTAL_TICK_CONF.Reg, volatile.LoadUint32(&o.XTAL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetXTAL_TICK_CONF_XTAL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.XTAL_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.PLL_TICK_CONF
func (o *APB_CTRL_Type) SetPLL_TICK_CONF_PLL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.PLL_TICK_CONF.Reg, volatile.LoadUint32(&o.PLL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetPLL_TICK_CONF_PLL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.PLL_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.CK8M_TICK_CONF
func (o *APB_CTRL_Type) SetCK8M_TICK_CONF_CK8M_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.CK8M_TICK_CONF.Reg, volatile.LoadUint32(&o.CK8M_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetCK8M_TICK_CONF_CK8M_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.CK8M_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.APB_SARADC_CTRL
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x1)|value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_START_FORCE() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x1
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_START(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_START() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x2) >> 1
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR2_MUX(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR2_MUX() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x4) >> 2
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_WORK_MODE(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x18)|value<<3)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_WORK_MODE() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x18) >> 3
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR_SEL(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR_SEL() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x20) >> 5
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x40) >> 6
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x7f80)|value<<7)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR_CLK_DIV() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x7f80) >> 7
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR1_PATT_LEN(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x78000)|value<<15)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR1_PATT_LEN() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x78000) >> 15
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR2_PATT_LEN(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x780000)|value<<19)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR2_PATT_LEN() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x780000) >> 19
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x800000)|value<<23)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x800000) >> 23
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x1000000)|value<<24)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x1000000) >> 24
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_DATA_SAR_SEL(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x2000000)|value<<25)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_DATA_SAR_SEL() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x2000000) >> 25
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_DATA_TO_I2S(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x4000000)|value<<26)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_DATA_TO_I2S() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x4000000) >> 26
}

// APB_CTRL.APB_SARADC_CTRL2
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x1)|value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x1
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x1fe)|value<<1)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x1fe) >> 1
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_SAR1_INV(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x200)|value<<9)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_SAR1_INV() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x200) >> 9
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_SAR2_INV(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x400)|value<<10)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_SAR2_INV() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x400) >> 10
}

// APB_CTRL.APB_SARADC_FSM
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_RSTB_WAIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_RSTB_WAIT() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff
}
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_STANDBY_WAIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff00)|value<<8)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_STANDBY_WAIT() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff00) >> 8
}
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_START_WAIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff0000)|value<<16)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_START_WAIT() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff0000) >> 16
}
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_SAMPLE_CYCLE(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff000000)|value<<24)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_SAMPLE_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff000000) >> 24
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB1
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB1(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB1.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB1() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB1.Reg)
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB2
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB2(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB2.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB2() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB2.Reg)
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB3
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB3(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB3.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB3() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB3.Reg)
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB4
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB4(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB4.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB4() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB4.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB1
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB1(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB1.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB1() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB1.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB2
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB2(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB2.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB2() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB2.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB3
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB3(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB3.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB3() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB3.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB4
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB4(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB4.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB4() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB4.Reg)
}

// APB_CTRL.APLL_TICK_CONF
func (o *APB_CTRL_Type) SetAPLL_TICK_CONF_APLL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.APLL_TICK_CONF.Reg, volatile.LoadUint32(&o.APLL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetAPLL_TICK_CONF_APLL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.APLL_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.DATE
func (o *APB_CTRL_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *APB_CTRL_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// BB Peripheral
type BB_Type struct {
	_         [84]byte
	BBPD_CTRL volatile.Register32 // 0x54
}

// BB.BBPD_CTRL: Baseband control register
func (o *BB_Type) SetBBPD_CTRL_DC_EST_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.BBPD_CTRL.Reg, volatile.LoadUint32(&o.BBPD_CTRL.Reg)&^(0x1)|value)
}
func (o *BB_Type) GetBBPD_CTRL_DC_EST_FORCE_PD() uint32 {
	return volatile.LoadUint32(&o.BBPD_CTRL.Reg) & 0x1
}
func (o *BB_Type) SetBBPD_CTRL_DC_EST_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.BBPD_CTRL.Reg, volatile.LoadUint32(&o.BBPD_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *BB_Type) GetBBPD_CTRL_DC_EST_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.BBPD_CTRL.Reg) & 0x2) >> 1
}
func (o *BB_Type) SetBBPD_CTRL_FFT_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.BBPD_CTRL.Reg, volatile.LoadUint32(&o.BBPD_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *BB_Type) GetBBPD_CTRL_FFT_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.BBPD_CTRL.Reg) & 0x4) >> 2
}
func (o *BB_Type) SetBBPD_CTRL_FFT_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.BBPD_CTRL.Reg, volatile.LoadUint32(&o.BBPD_CTRL.Reg)&^(0x8)|value<<3)
}
func (o *BB_Type) GetBBPD_CTRL_FFT_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.BBPD_CTRL.Reg) & 0x8) >> 3
}

// DPORT Peripheral
type DPORT_Type struct {
	PRO_BOOT_REMAP_CTRL           volatile.Register32 // 0x0
	APP_BOOT_REMAP_CTRL           volatile.Register32 // 0x4
	ACCESS_CHECK                  volatile.Register32 // 0x8
	PRO_DPORT_APB_MASK0           volatile.Register32 // 0xC
	PRO_DPORT_APB_MASK1           volatile.Register32 // 0x10
	APP_DPORT_APB_MASK0           volatile.Register32 // 0x14
	APP_DPORT_APB_MASK1           volatile.Register32 // 0x18
	PERI_CLK_EN                   volatile.Register32 // 0x1C
	PERI_RST_EN                   volatile.Register32 // 0x20
	WIFI_BB_CFG                   volatile.Register32 // 0x24
	WIFI_BB_CFG_2                 volatile.Register32 // 0x28
	APPCPU_CTRL_A                 volatile.Register32 // 0x2C
	APPCPU_CTRL_B                 volatile.Register32 // 0x30
	APPCPU_CTRL_C                 volatile.Register32 // 0x34
	APPCPU_CTRL_D                 volatile.Register32 // 0x38
	CPU_PER_CONF                  volatile.Register32 // 0x3C
	PRO_CACHE_CTRL                volatile.Register32 // 0x40
	PRO_CACHE_CTRL1               volatile.Register32 // 0x44
	PRO_CACHE_LOCK_0_ADDR         volatile.Register32 // 0x48
	PRO_CACHE_LOCK_1_ADDR         volatile.Register32 // 0x4C
	PRO_CACHE_LOCK_2_ADDR         volatile.Register32 // 0x50
	PRO_CACHE_LOCK_3_ADDR         volatile.Register32 // 0x54
	APP_CACHE_CTRL                volatile.Register32 // 0x58
	APP_CACHE_CTRL1               volatile.Register32 // 0x5C
	APP_CACHE_LOCK_0_ADDR         volatile.Register32 // 0x60
	APP_CACHE_LOCK_1_ADDR         volatile.Register32 // 0x64
	APP_CACHE_LOCK_2_ADDR         volatile.Register32 // 0x68
	APP_CACHE_LOCK_3_ADDR         volatile.Register32 // 0x6C
	TRACEMEM_MUX_MODE             volatile.Register32 // 0x70
	PRO_TRACEMEM_ENA              volatile.Register32 // 0x74
	APP_TRACEMEM_ENA              volatile.Register32 // 0x78
	CACHE_MUX_MODE                volatile.Register32 // 0x7C
	IMMU_PAGE_MODE                volatile.Register32 // 0x80
	DMMU_PAGE_MODE                volatile.Register32 // 0x84
	ROM_MPU_ENA                   volatile.Register32 // 0x88
	MEM_PD_MASK                   volatile.Register32 // 0x8C
	ROM_PD_CTRL                   volatile.Register32 // 0x90
	ROM_FO_CTRL                   volatile.Register32 // 0x94
	SRAM_PD_CTRL_0                volatile.Register32 // 0x98
	SRAM_PD_CTRL_1                volatile.Register32 // 0x9C
	SRAM_FO_CTRL_0                volatile.Register32 // 0xA0
	SRAM_FO_CTRL_1                volatile.Register32 // 0xA4
	IRAM_DRAM_AHB_SEL             volatile.Register32 // 0xA8
	TAG_FO_CTRL                   volatile.Register32 // 0xAC
	AHB_LITE_MASK                 volatile.Register32 // 0xB0
	AHB_MPU_TABLE_0               volatile.Register32 // 0xB4
	AHB_MPU_TABLE_1               volatile.Register32 // 0xB8
	HOST_INF_SEL                  volatile.Register32 // 0xBC
	PERIP_CLK_EN                  volatile.Register32 // 0xC0
	PERIP_RST_EN                  volatile.Register32 // 0xC4
	SLAVE_SPI_CONFIG              volatile.Register32 // 0xC8
	WIFI_CLK_EN                   volatile.Register32 // 0xCC
	CORE_RST_EN                   volatile.Register32 // 0xD0
	BT_LPCK_DIV_INT               volatile.Register32 // 0xD4
	BT_LPCK_DIV_FRAC              volatile.Register32 // 0xD8
	CPU_INTR_FROM_CPU_0           volatile.Register32 // 0xDC
	CPU_INTR_FROM_CPU_1           volatile.Register32 // 0xE0
	CPU_INTR_FROM_CPU_2           volatile.Register32 // 0xE4
	CPU_INTR_FROM_CPU_3           volatile.Register32 // 0xE8
	PRO_INTR_STATUS_0             volatile.Register32 // 0xEC
	PRO_INTR_STATUS_1             volatile.Register32 // 0xF0
	PRO_INTR_STATUS_2             volatile.Register32 // 0xF4
	APP_INTR_STATUS_0             volatile.Register32 // 0xF8
	APP_INTR_STATUS_1             volatile.Register32 // 0xFC
	APP_INTR_STATUS_2             volatile.Register32 // 0x100
	PRO_MAC_INTR_MAP              volatile.Register32 // 0x104
	PRO_MAC_NMI_MAP               volatile.Register32 // 0x108
	PRO_BB_INT_MAP                volatile.Register32 // 0x10C
	PRO_BT_MAC_INT_MAP            volatile.Register32 // 0x110
	PRO_BT_BB_INT_MAP             volatile.Register32 // 0x114
	PRO_BT_BB_NMI_MAP             volatile.Register32 // 0x118
	PRO_RWBT_IRQ_MAP              volatile.Register32 // 0x11C
	PRO_RWBLE_IRQ_MAP             volatile.Register32 // 0x120
	PRO_RWBT_NMI_MAP              volatile.Register32 // 0x124
	PRO_RWBLE_NMI_MAP             volatile.Register32 // 0x128
	PRO_SLC0_INTR_MAP             volatile.Register32 // 0x12C
	PRO_SLC1_INTR_MAP             volatile.Register32 // 0x130
	PRO_UHCI0_INTR_MAP            volatile.Register32 // 0x134
	PRO_UHCI1_INTR_MAP            volatile.Register32 // 0x138
	PRO_TG_T0_LEVEL_INT_MAP       volatile.Register32 // 0x13C
	PRO_TG_T1_LEVEL_INT_MAP       volatile.Register32 // 0x140
	PRO_TG_WDT_LEVEL_INT_MAP      volatile.Register32 // 0x144
	PRO_TG_LACT_LEVEL_INT_MAP     volatile.Register32 // 0x148
	PRO_TG1_T0_LEVEL_INT_MAP      volatile.Register32 // 0x14C
	PRO_TG1_T1_LEVEL_INT_MAP      volatile.Register32 // 0x150
	PRO_TG1_WDT_LEVEL_INT_MAP     volatile.Register32 // 0x154
	PRO_TG1_LACT_LEVEL_INT_MAP    volatile.Register32 // 0x158
	PRO_GPIO_INTERRUPT_MAP        volatile.Register32 // 0x15C
	PRO_GPIO_INTERRUPT_NMI_MAP    volatile.Register32 // 0x160
	PRO_CPU_INTR_FROM_CPU_0_MAP   volatile.Register32 // 0x164
	PRO_CPU_INTR_FROM_CPU_1_MAP   volatile.Register32 // 0x168
	PRO_CPU_INTR_FROM_CPU_2_MAP   volatile.Register32 // 0x16C
	PRO_CPU_INTR_FROM_CPU_3_MAP   volatile.Register32 // 0x170
	PRO_SPI_INTR_0_MAP            volatile.Register32 // 0x174
	PRO_SPI_INTR_1_MAP            volatile.Register32 // 0x178
	PRO_SPI_INTR_2_MAP            volatile.Register32 // 0x17C
	PRO_SPI_INTR_3_MAP            volatile.Register32 // 0x180
	PRO_I2S0_INT_MAP              volatile.Register32 // 0x184
	PRO_I2S1_INT_MAP              volatile.Register32 // 0x188
	PRO_UART_INTR_MAP             volatile.Register32 // 0x18C
	PRO_UART1_INTR_MAP            volatile.Register32 // 0x190
	PRO_UART2_INTR_MAP            volatile.Register32 // 0x194
	PRO_SDIO_HOST_INTERRUPT_MAP   volatile.Register32 // 0x198
	PRO_EMAC_INT_MAP              volatile.Register32 // 0x19C
	PRO_PWM0_INTR_MAP             volatile.Register32 // 0x1A0
	PRO_PWM1_INTR_MAP             volatile.Register32 // 0x1A4
	PRO_PWM2_INTR_MAP             volatile.Register32 // 0x1A8
	PRO_PWM3_INTR_MAP             volatile.Register32 // 0x1AC
	PRO_LEDC_INT_MAP              volatile.Register32 // 0x1B0
	PRO_EFUSE_INT_MAP             volatile.Register32 // 0x1B4
	PRO_CAN_INT_MAP               volatile.Register32 // 0x1B8
	PRO_RTC_CORE_INTR_MAP         volatile.Register32 // 0x1BC
	PRO_RMT_INTR_MAP              volatile.Register32 // 0x1C0
	PRO_PCNT_INTR_MAP             volatile.Register32 // 0x1C4
	PRO_I2C_EXT0_INTR_MAP         volatile.Register32 // 0x1C8
	PRO_I2C_EXT1_INTR_MAP         volatile.Register32 // 0x1CC
	PRO_RSA_INTR_MAP              volatile.Register32 // 0x1D0
	PRO_SPI1_DMA_INT_MAP          volatile.Register32 // 0x1D4
	PRO_SPI2_DMA_INT_MAP          volatile.Register32 // 0x1D8
	PRO_SPI3_DMA_INT_MAP          volatile.Register32 // 0x1DC
	PRO_WDG_INT_MAP               volatile.Register32 // 0x1E0
	PRO_TIMER_INT1_MAP            volatile.Register32 // 0x1E4
	PRO_TIMER_INT2_MAP            volatile.Register32 // 0x1E8
	PRO_TG_T0_EDGE_INT_MAP        volatile.Register32 // 0x1EC
	PRO_TG_T1_EDGE_INT_MAP        volatile.Register32 // 0x1F0
	PRO_TG_WDT_EDGE_INT_MAP       volatile.Register32 // 0x1F4
	PRO_TG_LACT_EDGE_INT_MAP      volatile.Register32 // 0x1F8
	PRO_TG1_T0_EDGE_INT_MAP       volatile.Register32 // 0x1FC
	PRO_TG1_T1_EDGE_INT_MAP       volatile.Register32 // 0x200
	PRO_TG1_WDT_EDGE_INT_MAP      volatile.Register32 // 0x204
	PRO_TG1_LACT_EDGE_INT_MAP     volatile.Register32 // 0x208
	PRO_MMU_IA_INT_MAP            volatile.Register32 // 0x20C
	PRO_MPU_IA_INT_MAP            volatile.Register32 // 0x210
	PRO_CACHE_IA_INT_MAP          volatile.Register32 // 0x214
	APP_MAC_INTR_MAP              volatile.Register32 // 0x218
	APP_MAC_NMI_MAP               volatile.Register32 // 0x21C
	APP_BB_INT_MAP                volatile.Register32 // 0x220
	APP_BT_MAC_INT_MAP            volatile.Register32 // 0x224
	APP_BT_BB_INT_MAP             volatile.Register32 // 0x228
	APP_BT_BB_NMI_MAP             volatile.Register32 // 0x22C
	APP_RWBT_IRQ_MAP              volatile.Register32 // 0x230
	APP_RWBLE_IRQ_MAP             volatile.Register32 // 0x234
	APP_RWBT_NMI_MAP              volatile.Register32 // 0x238
	APP_RWBLE_NMI_MAP             volatile.Register32 // 0x23C
	APP_SLC0_INTR_MAP             volatile.Register32 // 0x240
	APP_SLC1_INTR_MAP             volatile.Register32 // 0x244
	APP_UHCI0_INTR_MAP            volatile.Register32 // 0x248
	APP_UHCI1_INTR_MAP            volatile.Register32 // 0x24C
	APP_TG_T0_LEVEL_INT_MAP       volatile.Register32 // 0x250
	APP_TG_T1_LEVEL_INT_MAP       volatile.Register32 // 0x254
	APP_TG_WDT_LEVEL_INT_MAP      volatile.Register32 // 0x258
	APP_TG_LACT_LEVEL_INT_MAP     volatile.Register32 // 0x25C
	APP_TG1_T0_LEVEL_INT_MAP      volatile.Register32 // 0x260
	APP_TG1_T1_LEVEL_INT_MAP      volatile.Register32 // 0x264
	APP_TG1_WDT_LEVEL_INT_MAP     volatile.Register32 // 0x268
	APP_TG1_LACT_LEVEL_INT_MAP    volatile.Register32 // 0x26C
	APP_GPIO_INTERRUPT_MAP        volatile.Register32 // 0x270
	APP_GPIO_INTERRUPT_NMI_MAP    volatile.Register32 // 0x274
	APP_CPU_INTR_FROM_CPU_0_MAP   volatile.Register32 // 0x278
	APP_CPU_INTR_FROM_CPU_1_MAP   volatile.Register32 // 0x27C
	APP_CPU_INTR_FROM_CPU_2_MAP   volatile.Register32 // 0x280
	APP_CPU_INTR_FROM_CPU_3_MAP   volatile.Register32 // 0x284
	APP_SPI_INTR_0_MAP            volatile.Register32 // 0x288
	APP_SPI_INTR_1_MAP            volatile.Register32 // 0x28C
	APP_SPI_INTR_2_MAP            volatile.Register32 // 0x290
	APP_SPI_INTR_3_MAP            volatile.Register32 // 0x294
	APP_I2S0_INT_MAP              volatile.Register32 // 0x298
	APP_I2S1_INT_MAP              volatile.Register32 // 0x29C
	APP_UART_INTR_MAP             volatile.Register32 // 0x2A0
	APP_UART1_INTR_MAP            volatile.Register32 // 0x2A4
	APP_UART2_INTR_MAP            volatile.Register32 // 0x2A8
	APP_SDIO_HOST_INTERRUPT_MAP   volatile.Register32 // 0x2AC
	APP_EMAC_INT_MAP              volatile.Register32 // 0x2B0
	APP_PWM0_INTR_MAP             volatile.Register32 // 0x2B4
	APP_PWM1_INTR_MAP             volatile.Register32 // 0x2B8
	APP_PWM2_INTR_MAP             volatile.Register32 // 0x2BC
	APP_PWM3_INTR_MAP             volatile.Register32 // 0x2C0
	APP_LEDC_INT_MAP              volatile.Register32 // 0x2C4
	APP_EFUSE_INT_MAP             volatile.Register32 // 0x2C8
	APP_CAN_INT_MAP               volatile.Register32 // 0x2CC
	APP_RTC_CORE_INTR_MAP         volatile.Register32 // 0x2D0
	APP_RMT_INTR_MAP              volatile.Register32 // 0x2D4
	APP_PCNT_INTR_MAP             volatile.Register32 // 0x2D8
	APP_I2C_EXT0_INTR_MAP         volatile.Register32 // 0x2DC
	APP_I2C_EXT1_INTR_MAP         volatile.Register32 // 0x2E0
	APP_RSA_INTR_MAP              volatile.Register32 // 0x2E4
	APP_SPI1_DMA_INT_MAP          volatile.Register32 // 0x2E8
	APP_SPI2_DMA_INT_MAP          volatile.Register32 // 0x2EC
	APP_SPI3_DMA_INT_MAP          volatile.Register32 // 0x2F0
	APP_WDG_INT_MAP               volatile.Register32 // 0x2F4
	APP_TIMER_INT1_MAP            volatile.Register32 // 0x2F8
	APP_TIMER_INT2_MAP            volatile.Register32 // 0x2FC
	APP_TG_T0_EDGE_INT_MAP        volatile.Register32 // 0x300
	APP_TG_T1_EDGE_INT_MAP        volatile.Register32 // 0x304
	APP_TG_WDT_EDGE_INT_MAP       volatile.Register32 // 0x308
	APP_TG_LACT_EDGE_INT_MAP      volatile.Register32 // 0x30C
	APP_TG1_T0_EDGE_INT_MAP       volatile.Register32 // 0x310
	APP_TG1_T1_EDGE_INT_MAP       volatile.Register32 // 0x314
	APP_TG1_WDT_EDGE_INT_MAP      volatile.Register32 // 0x318
	APP_TG1_LACT_EDGE_INT_MAP     volatile.Register32 // 0x31C
	APP_MMU_IA_INT_MAP            volatile.Register32 // 0x320
	APP_MPU_IA_INT_MAP            volatile.Register32 // 0x324
	APP_CACHE_IA_INT_MAP          volatile.Register32 // 0x328
	AHBLITE_MPU_TABLE_UART        volatile.Register32 // 0x32C
	AHBLITE_MPU_TABLE_SPI1        volatile.Register32 // 0x330
	AHBLITE_MPU_TABLE_SPI0        volatile.Register32 // 0x334
	AHBLITE_MPU_TABLE_GPIO        volatile.Register32 // 0x338
	AHBLITE_MPU_TABLE_FE2         volatile.Register32 // 0x33C
	AHBLITE_MPU_TABLE_FE          volatile.Register32 // 0x340
	AHBLITE_MPU_TABLE_TIMER       volatile.Register32 // 0x344
	AHBLITE_MPU_TABLE_RTC         volatile.Register32 // 0x348
	AHBLITE_MPU_TABLE_IO_MUX      volatile.Register32 // 0x34C
	AHBLITE_MPU_TABLE_WDG         volatile.Register32 // 0x350
	AHBLITE_MPU_TABLE_HINF        volatile.Register32 // 0x354
	AHBLITE_MPU_TABLE_UHCI1       volatile.Register32 // 0x358
	AHBLITE_MPU_TABLE_MISC        volatile.Register32 // 0x35C
	AHBLITE_MPU_TABLE_I2C         volatile.Register32 // 0x360
	AHBLITE_MPU_TABLE_I2S0        volatile.Register32 // 0x364
	AHBLITE_MPU_TABLE_UART1       volatile.Register32 // 0x368
	AHBLITE_MPU_TABLE_BT          volatile.Register32 // 0x36C
	AHBLITE_MPU_TABLE_BT_BUFFER   volatile.Register32 // 0x370
	AHBLITE_MPU_TABLE_I2C_EXT0    volatile.Register32 // 0x374
	AHBLITE_MPU_TABLE_UHCI0       volatile.Register32 // 0x378
	AHBLITE_MPU_TABLE_SLCHOST     volatile.Register32 // 0x37C
	AHBLITE_MPU_TABLE_RMT         volatile.Register32 // 0x380
	AHBLITE_MPU_TABLE_PCNT        volatile.Register32 // 0x384
	AHBLITE_MPU_TABLE_SLC         volatile.Register32 // 0x388
	AHBLITE_MPU_TABLE_LEDC        volatile.Register32 // 0x38C
	AHBLITE_MPU_TABLE_EFUSE       volatile.Register32 // 0x390
	AHBLITE_MPU_TABLE_SPI_ENCRYPT volatile.Register32 // 0x394
	AHBLITE_MPU_TABLE_BB          volatile.Register32 // 0x398
	AHBLITE_MPU_TABLE_PWM0        volatile.Register32 // 0x39C
	AHBLITE_MPU_TABLE_TIMERGROUP  volatile.Register32 // 0x3A0
	AHBLITE_MPU_TABLE_TIMERGROUP1 volatile.Register32 // 0x3A4
	AHBLITE_MPU_TABLE_SPI2        volatile.Register32 // 0x3A8
	AHBLITE_MPU_TABLE_SPI3        volatile.Register32 // 0x3AC
	AHBLITE_MPU_TABLE_APB_CTRL    volatile.Register32 // 0x3B0
	AHBLITE_MPU_TABLE_I2C_EXT1    volatile.Register32 // 0x3B4
	AHBLITE_MPU_TABLE_SDIO_HOST   volatile.Register32 // 0x3B8
	AHBLITE_MPU_TABLE_EMAC        volatile.Register32 // 0x3BC
	AHBLITE_MPU_TABLE_CAN         volatile.Register32 // 0x3C0
	AHBLITE_MPU_TABLE_PWM1        volatile.Register32 // 0x3C4
	AHBLITE_MPU_TABLE_I2S1        volatile.Register32 // 0x3C8
	AHBLITE_MPU_TABLE_UART2       volatile.Register32 // 0x3CC
	AHBLITE_MPU_TABLE_PWM2        volatile.Register32 // 0x3D0
	AHBLITE_MPU_TABLE_PWM3        volatile.Register32 // 0x3D4
	AHBLITE_MPU_TABLE_RWBT        volatile.Register32 // 0x3D8
	AHBLITE_MPU_TABLE_BTMAC       volatile.Register32 // 0x3DC
	AHBLITE_MPU_TABLE_WIFIMAC     volatile.Register32 // 0x3E0
	AHBLITE_MPU_TABLE_PWR         volatile.Register32 // 0x3E4
	MEM_ACCESS_DBUG0              volatile.Register32 // 0x3E8
	MEM_ACCESS_DBUG1              volatile.Register32 // 0x3EC
	PRO_DCACHE_DBUG0              volatile.Register32 // 0x3F0
	PRO_DCACHE_DBUG1              volatile.Register32 // 0x3F4
	PRO_DCACHE_DBUG2              volatile.Register32 // 0x3F8
	PRO_DCACHE_DBUG3              volatile.Register32 // 0x3FC
	PRO_DCACHE_DBUG4              volatile.Register32 // 0x400
	PRO_DCACHE_DBUG5              volatile.Register32 // 0x404
	PRO_DCACHE_DBUG6              volatile.Register32 // 0x408
	PRO_DCACHE_DBUG7              volatile.Register32 // 0x40C
	PRO_DCACHE_DBUG8              volatile.Register32 // 0x410
	PRO_DCACHE_DBUG9              volatile.Register32 // 0x414
	APP_DCACHE_DBUG0              volatile.Register32 // 0x418
	APP_DCACHE_DBUG1              volatile.Register32 // 0x41C
	APP_DCACHE_DBUG2              volatile.Register32 // 0x420
	APP_DCACHE_DBUG3              volatile.Register32 // 0x424
	APP_DCACHE_DBUG4              volatile.Register32 // 0x428
	APP_DCACHE_DBUG5              volatile.Register32 // 0x42C
	APP_DCACHE_DBUG6              volatile.Register32 // 0x430
	APP_DCACHE_DBUG7              volatile.Register32 // 0x434
	APP_DCACHE_DBUG8              volatile.Register32 // 0x438
	APP_DCACHE_DBUG9              volatile.Register32 // 0x43C
	PRO_CPU_RECORD_CTRL           volatile.Register32 // 0x440
	PRO_CPU_RECORD_STATUS         volatile.Register32 // 0x444
	PRO_CPU_RECORD_PID            volatile.Register32 // 0x448
	PRO_CPU_RECORD_PDEBUGINST     volatile.Register32 // 0x44C
	PRO_CPU_RECORD_PDEBUGSTATUS   volatile.Register32 // 0x450
	PRO_CPU_RECORD_PDEBUGDATA     volatile.Register32 // 0x454
	PRO_CPU_RECORD_PDEBUGPC       volatile.Register32 // 0x458
	PRO_CPU_RECORD_PDEBUGLS0STAT  volatile.Register32 // 0x45C
	PRO_CPU_RECORD_PDEBUGLS0ADDR  volatile.Register32 // 0x460
	PRO_CPU_RECORD_PDEBUGLS0DATA  volatile.Register32 // 0x464
	APP_CPU_RECORD_CTRL           volatile.Register32 // 0x468
	APP_CPU_RECORD_STATUS         volatile.Register32 // 0x46C
	APP_CPU_RECORD_PID            volatile.Register32 // 0x470
	APP_CPU_RECORD_PDEBUGINST     volatile.Register32 // 0x474
	APP_CPU_RECORD_PDEBUGSTATUS   volatile.Register32 // 0x478
	APP_CPU_RECORD_PDEBUGDATA     volatile.Register32 // 0x47C
	APP_CPU_RECORD_PDEBUGPC       volatile.Register32 // 0x480
	APP_CPU_RECORD_PDEBUGLS0STAT  volatile.Register32 // 0x484
	APP_CPU_RECORD_PDEBUGLS0ADDR  volatile.Register32 // 0x488
	APP_CPU_RECORD_PDEBUGLS0DATA  volatile.Register32 // 0x48C
	RSA_PD_CTRL                   volatile.Register32 // 0x490
	ROM_MPU_TABLE0                volatile.Register32 // 0x494
	ROM_MPU_TABLE1                volatile.Register32 // 0x498
	ROM_MPU_TABLE2                volatile.Register32 // 0x49C
	ROM_MPU_TABLE3                volatile.Register32 // 0x4A0
	SHROM_MPU_TABLE0              volatile.Register32 // 0x4A4
	SHROM_MPU_TABLE1              volatile.Register32 // 0x4A8
	SHROM_MPU_TABLE2              volatile.Register32 // 0x4AC
	SHROM_MPU_TABLE3              volatile.Register32 // 0x4B0
	SHROM_MPU_TABLE4              volatile.Register32 // 0x4B4
	SHROM_MPU_TABLE5              volatile.Register32 // 0x4B8
	SHROM_MPU_TABLE6              volatile.Register32 // 0x4BC
	SHROM_MPU_TABLE7              volatile.Register32 // 0x4C0
	SHROM_MPU_TABLE8              volatile.Register32 // 0x4C4
	SHROM_MPU_TABLE9              volatile.Register32 // 0x4C8
	SHROM_MPU_TABLE10             volatile.Register32 // 0x4CC
	SHROM_MPU_TABLE11             volatile.Register32 // 0x4D0
	SHROM_MPU_TABLE12             volatile.Register32 // 0x4D4
	SHROM_MPU_TABLE13             volatile.Register32 // 0x4D8
	SHROM_MPU_TABLE14             volatile.Register32 // 0x4DC
	SHROM_MPU_TABLE15             volatile.Register32 // 0x4E0
	SHROM_MPU_TABLE16             volatile.Register32 // 0x4E4
	SHROM_MPU_TABLE17             volatile.Register32 // 0x4E8
	SHROM_MPU_TABLE18             volatile.Register32 // 0x4EC
	SHROM_MPU_TABLE19             volatile.Register32 // 0x4F0
	SHROM_MPU_TABLE20             volatile.Register32 // 0x4F4
	SHROM_MPU_TABLE21             volatile.Register32 // 0x4F8
	SHROM_MPU_TABLE22             volatile.Register32 // 0x4FC
	SHROM_MPU_TABLE23             volatile.Register32 // 0x500
	IMMU_TABLE0                   volatile.Register32 // 0x504
	IMMU_TABLE1                   volatile.Register32 // 0x508
	IMMU_TABLE2                   volatile.Register32 // 0x50C
	IMMU_TABLE3                   volatile.Register32 // 0x510
	IMMU_TABLE4                   volatile.Register32 // 0x514
	IMMU_TABLE5                   volatile.Register32 // 0x518
	IMMU_TABLE6                   volatile.Register32 // 0x51C
	IMMU_TABLE7                   volatile.Register32 // 0x520
	IMMU_TABLE8                   volatile.Register32 // 0x524
	IMMU_TABLE9                   volatile.Register32 // 0x528
	IMMU_TABLE10                  volatile.Register32 // 0x52C
	IMMU_TABLE11                  volatile.Register32 // 0x530
	IMMU_TABLE12                  volatile.Register32 // 0x534
	IMMU_TABLE13                  volatile.Register32 // 0x538
	IMMU_TABLE14                  volatile.Register32 // 0x53C
	IMMU_TABLE15                  volatile.Register32 // 0x540
	DMMU_TABLE0                   volatile.Register32 // 0x544
	DMMU_TABLE1                   volatile.Register32 // 0x548
	DMMU_TABLE2                   volatile.Register32 // 0x54C
	DMMU_TABLE3                   volatile.Register32 // 0x550
	DMMU_TABLE4                   volatile.Register32 // 0x554
	DMMU_TABLE5                   volatile.Register32 // 0x558
	DMMU_TABLE6                   volatile.Register32 // 0x55C
	DMMU_TABLE7                   volatile.Register32 // 0x560
	DMMU_TABLE8                   volatile.Register32 // 0x564
	DMMU_TABLE9                   volatile.Register32 // 0x568
	DMMU_TABLE10                  volatile.Register32 // 0x56C
	DMMU_TABLE11                  volatile.Register32 // 0x570
	DMMU_TABLE12                  volatile.Register32 // 0x574
	DMMU_TABLE13                  volatile.Register32 // 0x578
	DMMU_TABLE14                  volatile.Register32 // 0x57C
	DMMU_TABLE15                  volatile.Register32 // 0x580
	PRO_INTRUSION_CTRL            volatile.Register32 // 0x584
	PRO_INTRUSION_STATUS          volatile.Register32 // 0x588
	APP_INTRUSION_CTRL            volatile.Register32 // 0x58C
	APP_INTRUSION_STATUS          volatile.Register32 // 0x590
	FRONT_END_MEM_PD              volatile.Register32 // 0x594
	MMU_IA_INT_EN                 volatile.Register32 // 0x598
	MPU_IA_INT_EN                 volatile.Register32 // 0x59C
	CACHE_IA_INT_EN               volatile.Register32 // 0x5A0
	SECURE_BOOT_CTRL              volatile.Register32 // 0x5A4
	SPI_DMA_CHAN_SEL              volatile.Register32 // 0x5A8
	PRO_VECBASE_CTRL              volatile.Register32 // 0x5AC
	PRO_VECBASE_SET               volatile.Register32 // 0x5B0
	APP_VECBASE_CTRL              volatile.Register32 // 0x5B4
	APP_VECBASE_SET               volatile.Register32 // 0x5B8
	_                             [2624]byte
	DATE                          volatile.Register32 // 0xFFC
}

// DPORT.PRO_BOOT_REMAP_CTRL
func (o *DPORT_Type) SetPRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BOOT_REMAP_CTRL.Reg, volatile.LoadUint32(&o.PRO_BOOT_REMAP_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BOOT_REMAP_CTRL.Reg) & 0x1
}

// DPORT.APP_BOOT_REMAP_CTRL
func (o *DPORT_Type) SetAPP_BOOT_REMAP_CTRL_APP_BOOT_REMAP(value uint32) {
	volatile.StoreUint32(&o.APP_BOOT_REMAP_CTRL.Reg, volatile.LoadUint32(&o.APP_BOOT_REMAP_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_BOOT_REMAP_CTRL_APP_BOOT_REMAP() uint32 {
	return volatile.LoadUint32(&o.APP_BOOT_REMAP_CTRL.Reg) & 0x1
}

// DPORT.ACCESS_CHECK
func (o *DPORT_Type) SetACCESS_CHECK_PRO(value uint32) {
	volatile.StoreUint32(&o.ACCESS_CHECK.Reg, volatile.LoadUint32(&o.ACCESS_CHECK.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetACCESS_CHECK_PRO() uint32 {
	return volatile.LoadUint32(&o.ACCESS_CHECK.Reg) & 0x1
}
func (o *DPORT_Type) SetACCESS_CHECK_APP(value uint32) {
	volatile.StoreUint32(&o.ACCESS_CHECK.Reg, volatile.LoadUint32(&o.ACCESS_CHECK.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetACCESS_CHECK_APP() uint32 {
	return (volatile.LoadUint32(&o.ACCESS_CHECK.Reg) & 0x100) >> 8
}

// DPORT.PRO_DPORT_APB_MASK0
func (o *DPORT_Type) SetPRO_DPORT_APB_MASK0(value uint32) {
	volatile.StoreUint32(&o.PRO_DPORT_APB_MASK0.Reg, value)
}
func (o *DPORT_Type) GetPRO_DPORT_APB_MASK0() uint32 {
	return volatile.LoadUint32(&o.PRO_DPORT_APB_MASK0.Reg)
}

// DPORT.PRO_DPORT_APB_MASK1
func (o *DPORT_Type) SetPRO_DPORT_APB_MASK1(value uint32) {
	volatile.StoreUint32(&o.PRO_DPORT_APB_MASK1.Reg, value)
}
func (o *DPORT_Type) GetPRO_DPORT_APB_MASK1() uint32 {
	return volatile.LoadUint32(&o.PRO_DPORT_APB_MASK1.Reg)
}

// DPORT.APP_DPORT_APB_MASK0
func (o *DPORT_Type) SetAPP_DPORT_APB_MASK0(value uint32) {
	volatile.StoreUint32(&o.APP_DPORT_APB_MASK0.Reg, value)
}
func (o *DPORT_Type) GetAPP_DPORT_APB_MASK0() uint32 {
	return volatile.LoadUint32(&o.APP_DPORT_APB_MASK0.Reg)
}

// DPORT.APP_DPORT_APB_MASK1
func (o *DPORT_Type) SetAPP_DPORT_APB_MASK1(value uint32) {
	volatile.StoreUint32(&o.APP_DPORT_APB_MASK1.Reg, value)
}
func (o *DPORT_Type) GetAPP_DPORT_APB_MASK1() uint32 {
	return volatile.LoadUint32(&o.APP_DPORT_APB_MASK1.Reg)
}

// DPORT.PERI_CLK_EN
func (o *DPORT_Type) SetPERI_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERI_CLK_EN.Reg, value)
}
func (o *DPORT_Type) GetPERI_CLK_EN() uint32 {
	return volatile.LoadUint32(&o.PERI_CLK_EN.Reg)
}

// DPORT.PERI_RST_EN
func (o *DPORT_Type) SetPERI_RST_EN(value uint32) {
	volatile.StoreUint32(&o.PERI_RST_EN.Reg, value)
}
func (o *DPORT_Type) GetPERI_RST_EN() uint32 {
	return volatile.LoadUint32(&o.PERI_RST_EN.Reg)
}

// DPORT.WIFI_BB_CFG
func (o *DPORT_Type) SetWIFI_BB_CFG(value uint32) {
	volatile.StoreUint32(&o.WIFI_BB_CFG.Reg, value)
}
func (o *DPORT_Type) GetWIFI_BB_CFG() uint32 {
	return volatile.LoadUint32(&o.WIFI_BB_CFG.Reg)
}

// DPORT.WIFI_BB_CFG_2
func (o *DPORT_Type) SetWIFI_BB_CFG_2(value uint32) {
	volatile.StoreUint32(&o.WIFI_BB_CFG_2.Reg, value)
}
func (o *DPORT_Type) GetWIFI_BB_CFG_2() uint32 {
	return volatile.LoadUint32(&o.WIFI_BB_CFG_2.Reg)
}

// DPORT.APPCPU_CTRL_A
func (o *DPORT_Type) SetAPPCPU_CTRL_A_APPCPU_RESETTING(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_A.Reg, volatile.LoadUint32(&o.APPCPU_CTRL_A.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_A_APPCPU_RESETTING() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_A.Reg) & 0x1
}

// DPORT.APPCPU_CTRL_B
func (o *DPORT_Type) SetAPPCPU_CTRL_B_APPCPU_CLKGATE_EN(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_B.Reg, volatile.LoadUint32(&o.APPCPU_CTRL_B.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_B_APPCPU_CLKGATE_EN() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_B.Reg) & 0x1
}

// DPORT.APPCPU_CTRL_C
func (o *DPORT_Type) SetAPPCPU_CTRL_C_APPCPU_RUNSTALL(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_C.Reg, volatile.LoadUint32(&o.APPCPU_CTRL_C.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_C_APPCPU_RUNSTALL() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_C.Reg) & 0x1
}

// DPORT.APPCPU_CTRL_D
func (o *DPORT_Type) SetAPPCPU_CTRL_D(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_D.Reg, value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_D() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_D.Reg)
}

// DPORT.CPU_PER_CONF
func (o *DPORT_Type) SetCPU_PER_CONF_CPUPERIOD_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PER_CONF.Reg, volatile.LoadUint32(&o.CPU_PER_CONF.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetCPU_PER_CONF_CPUPERIOD_SEL() uint32 {
	return volatile.LoadUint32(&o.CPU_PER_CONF.Reg) & 0x3
}
func (o *DPORT_Type) SetCPU_PER_CONF_LOWSPEED_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PER_CONF.Reg, volatile.LoadUint32(&o.CPU_PER_CONF.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetCPU_PER_CONF_LOWSPEED_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.CPU_PER_CONF.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetCPU_PER_CONF_FAST_CLK_RTC_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PER_CONF.Reg, volatile.LoadUint32(&o.CPU_PER_CONF.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetCPU_PER_CONF_FAST_CLK_RTC_SEL() uint32 {
	return (volatile.LoadUint32(&o.CPU_PER_CONF.Reg) & 0x8) >> 3
}

// DPORT.PRO_CACHE_CTRL
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_MODE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_MODE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_DRAM_SPLIT(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_DRAM_SPLIT() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_AHB_SPI_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_AHB_SPI_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_SLAVE_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_SLAVE_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_AHB_SPI_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_AHB_SPI_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_SLAVE_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_SLAVE_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_DRAM_HL(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_DRAM_HL() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x10000) >> 16
}

// DPORT.PRO_CACHE_CTRL1
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x1
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x1c0)|value<<6)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x1c0) >> 6
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x600)|value<<9)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x600) >> 9
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_PD(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_PD() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x2000) >> 13
}

// DPORT.PRO_CACHE_LOCK_0_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_0_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_0_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_0_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_0_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_0_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_0_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.PRO_CACHE_LOCK_1_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_1_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_1_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_1_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_1_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_1_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_1_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.PRO_CACHE_LOCK_2_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_2_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_2_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_2_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_2_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_2_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_2_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.PRO_CACHE_LOCK_3_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_3_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_3_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_3_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_3_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_3_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_3_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.APP_CACHE_CTRL
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_MODE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_MODE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_ENABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_FLUSH_ENA(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_FLUSH_ENA() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_FLUSH_DONE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_FLUSH_DONE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_0_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_0_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_1_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_1_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_2_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_2_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_3_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_3_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_SINGLE_IRAM_ENA(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_SINGLE_IRAM_ENA() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_DRAM_SPLIT(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_DRAM_SPLIT() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_AHB_SPI_REQ(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_AHB_SPI_REQ() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_SLAVE_REQ(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_SLAVE_REQ() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_DRAM_HL(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_DRAM_HL() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x4000) >> 14
}

// DPORT.APP_CACHE_CTRL1
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x1
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_IROM0(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_IROM0() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_DROM0(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_DROM0() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x1c0)|value<<6)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x1c0) >> 6
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x600)|value<<9)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x600) >> 9
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_PD(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_PD() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x2000) >> 13
}

// DPORT.APP_CACHE_LOCK_0_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_0_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_0_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_0_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_0_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_0_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_0_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.APP_CACHE_LOCK_1_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_1_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_1_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_1_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_1_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_1_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_1_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.APP_CACHE_LOCK_2_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_2_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_2_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_2_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_2_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_2_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_2_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.APP_CACHE_LOCK_3_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_3_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_3_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg) & 0x3fff
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_3_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_3_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_3_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_3_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg) & 0x3c0000) >> 18
}

// DPORT.TRACEMEM_MUX_MODE
func (o *DPORT_Type) SetTRACEMEM_MUX_MODE(value uint32) {
	volatile.StoreUint32(&o.TRACEMEM_MUX_MODE.Reg, volatile.LoadUint32(&o.TRACEMEM_MUX_MODE.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetTRACEMEM_MUX_MODE() uint32 {
	return volatile.LoadUint32(&o.TRACEMEM_MUX_MODE.Reg) & 0x3
}

// DPORT.PRO_TRACEMEM_ENA
func (o *DPORT_Type) SetPRO_TRACEMEM_ENA(value uint32) {
	volatile.StoreUint32(&o.PRO_TRACEMEM_ENA.Reg, volatile.LoadUint32(&o.PRO_TRACEMEM_ENA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_TRACEMEM_ENA() uint32 {
	return volatile.LoadUint32(&o.PRO_TRACEMEM_ENA.Reg) & 0x1
}

// DPORT.APP_TRACEMEM_ENA
func (o *DPORT_Type) SetAPP_TRACEMEM_ENA(value uint32) {
	volatile.StoreUint32(&o.APP_TRACEMEM_ENA.Reg, volatile.LoadUint32(&o.APP_TRACEMEM_ENA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_TRACEMEM_ENA() uint32 {
	return volatile.LoadUint32(&o.APP_TRACEMEM_ENA.Reg) & 0x1
}

// DPORT.CACHE_MUX_MODE
func (o *DPORT_Type) SetCACHE_MUX_MODE(value uint32) {
	volatile.StoreUint32(&o.CACHE_MUX_MODE.Reg, volatile.LoadUint32(&o.CACHE_MUX_MODE.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetCACHE_MUX_MODE() uint32 {
	return volatile.LoadUint32(&o.CACHE_MUX_MODE.Reg) & 0x3
}

// DPORT.IMMU_PAGE_MODE
func (o *DPORT_Type) SetIMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA(value uint32) {
	volatile.StoreUint32(&o.IMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetIMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA() uint32 {
	return volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg) & 0x1
}
func (o *DPORT_Type) SetIMMU_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.IMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg)&^(0x6)|value<<1)
}
func (o *DPORT_Type) GetIMMU_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg) & 0x6) >> 1
}

// DPORT.DMMU_PAGE_MODE
func (o *DPORT_Type) SetDMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA(value uint32) {
	volatile.StoreUint32(&o.DMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetDMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA() uint32 {
	return volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg) & 0x1
}
func (o *DPORT_Type) SetDMMU_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.DMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg)&^(0x6)|value<<1)
}
func (o *DPORT_Type) GetDMMU_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg) & 0x6) >> 1
}

// DPORT.ROM_MPU_ENA
func (o *DPORT_Type) SetROM_MPU_ENA_SHARE_ROM_MPU_ENA(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_ENA.Reg, volatile.LoadUint32(&o.ROM_MPU_ENA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetROM_MPU_ENA_SHARE_ROM_MPU_ENA() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_ENA.Reg) & 0x1
}
func (o *DPORT_Type) SetROM_MPU_ENA_PRO_ROM_MPU_ENA(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_ENA.Reg, volatile.LoadUint32(&o.ROM_MPU_ENA.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetROM_MPU_ENA_PRO_ROM_MPU_ENA() uint32 {
	return (volatile.LoadUint32(&o.ROM_MPU_ENA.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetROM_MPU_ENA_APP_ROM_MPU_ENA(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_ENA.Reg, volatile.LoadUint32(&o.ROM_MPU_ENA.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetROM_MPU_ENA_APP_ROM_MPU_ENA() uint32 {
	return (volatile.LoadUint32(&o.ROM_MPU_ENA.Reg) & 0x4) >> 2
}

// DPORT.MEM_PD_MASK
func (o *DPORT_Type) SetMEM_PD_MASK_LSLP_MEM_PD_MASK(value uint32) {
	volatile.StoreUint32(&o.MEM_PD_MASK.Reg, volatile.LoadUint32(&o.MEM_PD_MASK.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetMEM_PD_MASK_LSLP_MEM_PD_MASK() uint32 {
	return volatile.LoadUint32(&o.MEM_PD_MASK.Reg) & 0x1
}

// DPORT.ROM_PD_CTRL
func (o *DPORT_Type) SetROM_PD_CTRL_PRO_ROM_PD(value uint32) {
	volatile.StoreUint32(&o.ROM_PD_CTRL.Reg, volatile.LoadUint32(&o.ROM_PD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetROM_PD_CTRL_PRO_ROM_PD() uint32 {
	return volatile.LoadUint32(&o.ROM_PD_CTRL.Reg) & 0x1
}
func (o *DPORT_Type) SetROM_PD_CTRL_APP_ROM_PD(value uint32) {
	volatile.StoreUint32(&o.ROM_PD_CTRL.Reg, volatile.LoadUint32(&o.ROM_PD_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetROM_PD_CTRL_APP_ROM_PD() uint32 {
	return (volatile.LoadUint32(&o.ROM_PD_CTRL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetROM_PD_CTRL_SHARE_ROM_PD(value uint32) {
	volatile.StoreUint32(&o.ROM_PD_CTRL.Reg, volatile.LoadUint32(&o.ROM_PD_CTRL.Reg)&^(0xfc)|value<<2)
}
func (o *DPORT_Type) GetROM_PD_CTRL_SHARE_ROM_PD() uint32 {
	return (volatile.LoadUint32(&o.ROM_PD_CTRL.Reg) & 0xfc) >> 2
}

// DPORT.ROM_FO_CTRL
func (o *DPORT_Type) SetROM_FO_CTRL_PRO_ROM_FO(value uint32) {
	volatile.StoreUint32(&o.ROM_FO_CTRL.Reg, volatile.LoadUint32(&o.ROM_FO_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetROM_FO_CTRL_PRO_ROM_FO() uint32 {
	return volatile.LoadUint32(&o.ROM_FO_CTRL.Reg) & 0x1
}
func (o *DPORT_Type) SetROM_FO_CTRL_APP_ROM_FO(value uint32) {
	volatile.StoreUint32(&o.ROM_FO_CTRL.Reg, volatile.LoadUint32(&o.ROM_FO_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetROM_FO_CTRL_APP_ROM_FO() uint32 {
	return (volatile.LoadUint32(&o.ROM_FO_CTRL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetROM_FO_CTRL_SHARE_ROM_FO(value uint32) {
	volatile.StoreUint32(&o.ROM_FO_CTRL.Reg, volatile.LoadUint32(&o.ROM_FO_CTRL.Reg)&^(0xfc)|value<<2)
}
func (o *DPORT_Type) GetROM_FO_CTRL_SHARE_ROM_FO() uint32 {
	return (volatile.LoadUint32(&o.ROM_FO_CTRL.Reg) & 0xfc) >> 2
}

// DPORT.SRAM_PD_CTRL_0
func (o *DPORT_Type) SetSRAM_PD_CTRL_0(value uint32) {
	volatile.StoreUint32(&o.SRAM_PD_CTRL_0.Reg, value)
}
func (o *DPORT_Type) GetSRAM_PD_CTRL_0() uint32 {
	return volatile.LoadUint32(&o.SRAM_PD_CTRL_0.Reg)
}

// DPORT.SRAM_PD_CTRL_1
func (o *DPORT_Type) SetSRAM_PD_CTRL_1_SRAM_PD_1(value uint32) {
	volatile.StoreUint32(&o.SRAM_PD_CTRL_1.Reg, volatile.LoadUint32(&o.SRAM_PD_CTRL_1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetSRAM_PD_CTRL_1_SRAM_PD_1() uint32 {
	return volatile.LoadUint32(&o.SRAM_PD_CTRL_1.Reg) & 0x1
}

// DPORT.SRAM_FO_CTRL_0
func (o *DPORT_Type) SetSRAM_FO_CTRL_0(value uint32) {
	volatile.StoreUint32(&o.SRAM_FO_CTRL_0.Reg, value)
}
func (o *DPORT_Type) GetSRAM_FO_CTRL_0() uint32 {
	return volatile.LoadUint32(&o.SRAM_FO_CTRL_0.Reg)
}

// DPORT.SRAM_FO_CTRL_1
func (o *DPORT_Type) SetSRAM_FO_CTRL_1_SRAM_FO_1(value uint32) {
	volatile.StoreUint32(&o.SRAM_FO_CTRL_1.Reg, volatile.LoadUint32(&o.SRAM_FO_CTRL_1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetSRAM_FO_CTRL_1_SRAM_FO_1() uint32 {
	return volatile.LoadUint32(&o.SRAM_FO_CTRL_1.Reg) & 0x1
}

// DPORT.IRAM_DRAM_AHB_SEL
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_PRO_IRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_PRO_IRAM() uint32 {
	return volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x1
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_APP_IRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_APP_IRAM() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_PRO_DRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_PRO_DRAM() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_APP_DRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_APP_DRAM() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_AHB(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_AHB() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MAC_DUMP_MODE(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x60)|value<<5)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MAC_DUMP_MODE() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x60) >> 5
}

// DPORT.TAG_FO_CTRL
func (o *DPORT_Type) SetTAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON() uint32 {
	return volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x1
}
func (o *DPORT_Type) SetTAG_FO_CTRL_PRO_CACHE_TAG_PD(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_PRO_CACHE_TAG_PD() uint32 {
	return (volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetTAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetTAG_FO_CTRL_APP_CACHE_TAG_PD(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_APP_CACHE_TAG_PD() uint32 {
	return (volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x200) >> 9
}

// DPORT.AHB_LITE_MASK
func (o *DPORT_Type) SetAHB_LITE_MASK_PRO(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_PRO() uint32 {
	return volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x1
}
func (o *DPORT_Type) SetAHB_LITE_MASK_APP(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_APP() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAHB_LITE_MASK_SDIO(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_SDIO() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetAHB_LITE_MASK_PRODPORT(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_PRODPORT() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetAHB_LITE_MASK_APPDPORT(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_APPDPORT() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetAHB_LITE_MASK_AHB_LITE_SDHOST_PID(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x3800)|value<<11)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_AHB_LITE_SDHOST_PID() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x3800) >> 11
}

// DPORT.AHB_MPU_TABLE_0
func (o *DPORT_Type) SetAHB_MPU_TABLE_0(value uint32) {
	volatile.StoreUint32(&o.AHB_MPU_TABLE_0.Reg, value)
}
func (o *DPORT_Type) GetAHB_MPU_TABLE_0() uint32 {
	return volatile.LoadUint32(&o.AHB_MPU_TABLE_0.Reg)
}

// DPORT.AHB_MPU_TABLE_1
func (o *DPORT_Type) SetAHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1(value uint32) {
	volatile.StoreUint32(&o.AHB_MPU_TABLE_1.Reg, volatile.LoadUint32(&o.AHB_MPU_TABLE_1.Reg)&^(0x1ff)|value)
}
func (o *DPORT_Type) GetAHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1() uint32 {
	return volatile.LoadUint32(&o.AHB_MPU_TABLE_1.Reg) & 0x1ff
}

// DPORT.HOST_INF_SEL
func (o *DPORT_Type) SetHOST_INF_SEL_PERI_IO_SWAP(value uint32) {
	volatile.StoreUint32(&o.HOST_INF_SEL.Reg, volatile.LoadUint32(&o.HOST_INF_SEL.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetHOST_INF_SEL_PERI_IO_SWAP() uint32 {
	return volatile.LoadUint32(&o.HOST_INF_SEL.Reg) & 0xff
}
func (o *DPORT_Type) SetHOST_INF_SEL_LINK_DEVICE_SEL(value uint32) {
	volatile.StoreUint32(&o.HOST_INF_SEL.Reg, volatile.LoadUint32(&o.HOST_INF_SEL.Reg)&^(0xff00)|value<<8)
}
func (o *DPORT_Type) GetHOST_INF_SEL_LINK_DEVICE_SEL() uint32 {
	return (volatile.LoadUint32(&o.HOST_INF_SEL.Reg) & 0xff00) >> 8
}

// DPORT.PERIP_CLK_EN
func (o *DPORT_Type) SetPERIP_CLK_EN_TIMERS_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_TIMERS_CLK_EN() uint32 {
	return volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x1
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI01_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI01_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPERIP_CLK_EN_WDG_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_WDG_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2S0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2S0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI2_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI2_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2C0_EXT0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2C0_EXT0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UHCI0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UHCI0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPERIP_CLK_EN_RMT_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_RMT_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PCNT_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PCNT_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPERIP_CLK_EN_LEDC_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_LEDC_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UHCI1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UHCI1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPERIP_CLK_EN_TIMERGROUP_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_TIMERGROUP_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPERIP_CLK_EN_EFUSE_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_EFUSE_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPERIP_CLK_EN_TIMERGROUP1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_TIMERGROUP1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI3_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI3_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x20000)|value<<17)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x20000) >> 17
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2C_EXT1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x40000)|value<<18)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2C_EXT1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x40000) >> 18
}
func (o *DPORT_Type) SetPERIP_CLK_EN_TWAI_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_TWAI_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2S1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2S1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI_DMA_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI_DMA_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART2_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART2_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x800000) >> 23
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART_MEM_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x1000000)|value<<24)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART_MEM_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x1000000) >> 24
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM2_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x2000000)|value<<25)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM2_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x2000000) >> 25
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM3_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x4000000)|value<<26)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM3_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x4000000) >> 26
}

// DPORT.PERIP_RST_EN
func (o *DPORT_Type) SetPERIP_RST_EN_TIMERS_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPERIP_RST_EN_TIMERS_RST() uint32 {
	return volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI01_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI01_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPERIP_RST_EN_WDG_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPERIP_RST_EN_WDG_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2S0_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2S0_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART1_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART1_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI2_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI2_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2C0_EXT0_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2C0_EXT0_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetPERIP_RST_EN_UHCI0_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UHCI0_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPERIP_RST_EN_RMT_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPERIP_RST_EN_RMT_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPERIP_RST_EN_PCNT_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PCNT_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPERIP_RST_EN_LEDC_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPERIP_RST_EN_LEDC_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPERIP_RST_EN_UHCI1_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UHCI1_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPERIP_RST_EN_TIMERGROUP_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPERIP_RST_EN_TIMERGROUP_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPERIP_RST_EN_EFUSE_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPERIP_RST_EN_EFUSE_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPERIP_RST_EN_TIMERGROUP1_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPERIP_RST_EN_TIMERGROUP1_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI3_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI3_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM0_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x20000)|value<<17)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM0_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x20000) >> 17
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2C_EXT1_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x40000)|value<<18)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2C_EXT1_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x40000) >> 18
}
func (o *DPORT_Type) SetPERIP_RST_EN_TWAI_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetPERIP_RST_EN_TWAI_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM1_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM1_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2S1_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2S1_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI_DMA_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI_DMA_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART2_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART2_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x800000) >> 23
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1000000)|value<<24)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1000000) >> 24
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM2_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x2000000)|value<<25)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM2_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x2000000) >> 25
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM3_RST(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x4000000)|value<<26)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM3_RST() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x4000000) >> 26
}

// DPORT.SLAVE_SPI_CONFIG
func (o *DPORT_Type) SetSLAVE_SPI_CONFIG_SLAVE_SPI_MASK_PRO(value uint32) {
	volatile.StoreUint32(&o.SLAVE_SPI_CONFIG.Reg, volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetSLAVE_SPI_CONFIG_SLAVE_SPI_MASK_PRO() uint32 {
	return volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg) & 0x1
}
func (o *DPORT_Type) SetSLAVE_SPI_CONFIG_SLAVE_SPI_MASK_APP(value uint32) {
	volatile.StoreUint32(&o.SLAVE_SPI_CONFIG.Reg, volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetSLAVE_SPI_CONFIG_SLAVE_SPI_MASK_APP() uint32 {
	return (volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetSLAVE_SPI_CONFIG_SPI_ENCRYPT_ENABLE(value uint32) {
	volatile.StoreUint32(&o.SLAVE_SPI_CONFIG.Reg, volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetSLAVE_SPI_CONFIG_SPI_ENCRYPT_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetSLAVE_SPI_CONFIG_SPI_DECRYPT_ENABLE(value uint32) {
	volatile.StoreUint32(&o.SLAVE_SPI_CONFIG.Reg, volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetSLAVE_SPI_CONFIG_SPI_DECRYPT_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE_SPI_CONFIG.Reg) & 0x1000) >> 12
}

// DPORT.WIFI_CLK_EN
func (o *DPORT_Type) SetWIFI_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.WIFI_CLK_EN.Reg, value)
}
func (o *DPORT_Type) GetWIFI_CLK_EN() uint32 {
	return volatile.LoadUint32(&o.WIFI_CLK_EN.Reg)
}
func (o *DPORT_Type) SetWIFI_CLK_EN_WIFI_CLK_WIFI_EN(value uint32) {
	volatile.StoreUint32(&o.WIFI_CLK_EN.Reg, volatile.LoadUint32(&o.WIFI_CLK_EN.Reg)&^(0x7)|value)
}
func (o *DPORT_Type) GetWIFI_CLK_EN_WIFI_CLK_WIFI_EN() uint32 {
	return volatile.LoadUint32(&o.WIFI_CLK_EN.Reg) & 0x7
}
func (o *DPORT_Type) SetWIFI_CLK_EN_WIFI_CLK_WIFI_BT_COMMON(value uint32) {
	volatile.StoreUint32(&o.WIFI_CLK_EN.Reg, volatile.LoadUint32(&o.WIFI_CLK_EN.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetWIFI_CLK_EN_WIFI_CLK_WIFI_BT_COMMON() uint32 {
	return volatile.LoadUint32(&o.WIFI_CLK_EN.Reg) & 0x3f
}
func (o *DPORT_Type) SetWIFI_CLK_EN_WIFI_CLK_BT_EN(value uint32) {
	volatile.StoreUint32(&o.WIFI_CLK_EN.Reg, volatile.LoadUint32(&o.WIFI_CLK_EN.Reg)&^(0x3800)|value<<11)
}
func (o *DPORT_Type) GetWIFI_CLK_EN_WIFI_CLK_BT_EN() uint32 {
	return (volatile.LoadUint32(&o.WIFI_CLK_EN.Reg) & 0x3800) >> 11
}

// DPORT.CORE_RST_EN
func (o *DPORT_Type) SetCORE_RST_EN_CORE_RST(value uint32) {
	volatile.StoreUint32(&o.CORE_RST_EN.Reg, volatile.LoadUint32(&o.CORE_RST_EN.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetCORE_RST_EN_CORE_RST() uint32 {
	return volatile.LoadUint32(&o.CORE_RST_EN.Reg) & 0xff
}

// DPORT.BT_LPCK_DIV_INT
func (o *DPORT_Type) SetBT_LPCK_DIV_INT_BT_LPCK_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_INT.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg)&^(0xfff)|value)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_INT_BT_LPCK_DIV_NUM() uint32 {
	return volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg) & 0xfff
}
func (o *DPORT_Type) SetBT_LPCK_DIV_INT_BTEXTWAKEUP_REQ(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_INT.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_INT_BTEXTWAKEUP_REQ() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg) & 0x1000) >> 12
}

// DPORT.BT_LPCK_DIV_FRAC
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_B(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0xfff)|value)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_B() uint32 {
	return volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0xfff
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_A(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0xfff000)|value<<12)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_A() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0xfff000) >> 12
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x1000000)|value<<24)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x1000000) >> 24
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_8M(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x2000000)|value<<25)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_8M() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x2000000) >> 25
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x4000000)|value<<26)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x4000000) >> 26
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x8000000)|value<<27)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x8000000) >> 27
}

// DPORT.CPU_INTR_FROM_CPU_0
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_0(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_0.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_0() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_0.Reg) & 0x1
}

// DPORT.CPU_INTR_FROM_CPU_1
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_1(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_1.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_1() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_1.Reg) & 0x1
}

// DPORT.CPU_INTR_FROM_CPU_2
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_2(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_2.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_2.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_2() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_2.Reg) & 0x1
}

// DPORT.CPU_INTR_FROM_CPU_3
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_3(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_3.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_3.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_3() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_3.Reg) & 0x1
}

// DPORT.PRO_INTR_STATUS_0
func (o *DPORT_Type) SetPRO_INTR_STATUS_0(value uint32) {
	volatile.StoreUint32(&o.PRO_INTR_STATUS_0.Reg, value)
}
func (o *DPORT_Type) GetPRO_INTR_STATUS_0() uint32 {
	return volatile.LoadUint32(&o.PRO_INTR_STATUS_0.Reg)
}

// DPORT.PRO_INTR_STATUS_1
func (o *DPORT_Type) SetPRO_INTR_STATUS_1(value uint32) {
	volatile.StoreUint32(&o.PRO_INTR_STATUS_1.Reg, value)
}
func (o *DPORT_Type) GetPRO_INTR_STATUS_1() uint32 {
	return volatile.LoadUint32(&o.PRO_INTR_STATUS_1.Reg)
}

// DPORT.PRO_INTR_STATUS_2
func (o *DPORT_Type) SetPRO_INTR_STATUS_2(value uint32) {
	volatile.StoreUint32(&o.PRO_INTR_STATUS_2.Reg, value)
}
func (o *DPORT_Type) GetPRO_INTR_STATUS_2() uint32 {
	return volatile.LoadUint32(&o.PRO_INTR_STATUS_2.Reg)
}

// DPORT.APP_INTR_STATUS_0
func (o *DPORT_Type) SetAPP_INTR_STATUS_0(value uint32) {
	volatile.StoreUint32(&o.APP_INTR_STATUS_0.Reg, value)
}
func (o *DPORT_Type) GetAPP_INTR_STATUS_0() uint32 {
	return volatile.LoadUint32(&o.APP_INTR_STATUS_0.Reg)
}

// DPORT.APP_INTR_STATUS_1
func (o *DPORT_Type) SetAPP_INTR_STATUS_1(value uint32) {
	volatile.StoreUint32(&o.APP_INTR_STATUS_1.Reg, value)
}
func (o *DPORT_Type) GetAPP_INTR_STATUS_1() uint32 {
	return volatile.LoadUint32(&o.APP_INTR_STATUS_1.Reg)
}

// DPORT.APP_INTR_STATUS_2
func (o *DPORT_Type) SetAPP_INTR_STATUS_2(value uint32) {
	volatile.StoreUint32(&o.APP_INTR_STATUS_2.Reg, value)
}
func (o *DPORT_Type) GetAPP_INTR_STATUS_2() uint32 {
	return volatile.LoadUint32(&o.APP_INTR_STATUS_2.Reg)
}

// DPORT.PRO_MAC_INTR_MAP
func (o *DPORT_Type) SetPRO_MAC_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MAC_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_MAC_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MAC_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MAC_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_MAC_NMI_MAP
func (o *DPORT_Type) SetPRO_MAC_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MAC_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_MAC_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MAC_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MAC_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_BB_INT_MAP
func (o *DPORT_Type) SetPRO_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BB_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_BT_MAC_INT_MAP
func (o *DPORT_Type) SetPRO_BT_MAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BT_MAC_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_BT_MAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BT_MAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BT_MAC_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_BT_BB_INT_MAP
func (o *DPORT_Type) SetPRO_BT_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BT_BB_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_BT_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BT_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BT_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_BT_BB_NMI_MAP
func (o *DPORT_Type) SetPRO_BT_BB_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BT_BB_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_BT_BB_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BT_BB_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BT_BB_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBT_IRQ_MAP
func (o *DPORT_Type) SetPRO_RWBT_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBT_IRQ_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBT_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBT_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBT_IRQ_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBLE_IRQ_MAP
func (o *DPORT_Type) SetPRO_RWBLE_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBLE_IRQ_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBLE_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBLE_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBLE_IRQ_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBT_NMI_MAP
func (o *DPORT_Type) SetPRO_RWBT_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBT_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBT_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBT_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBLE_NMI_MAP
func (o *DPORT_Type) SetPRO_RWBLE_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBLE_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBLE_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBLE_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBLE_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_SLC0_INTR_MAP
func (o *DPORT_Type) SetPRO_SLC0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SLC0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_SLC0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SLC0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SLC0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_SLC1_INTR_MAP
func (o *DPORT_Type) SetPRO_SLC1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SLC1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_SLC1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SLC1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SLC1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UHCI0_INTR_MAP
func (o *DPORT_Type) SetPRO_UHCI0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UHCI0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UHCI0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UHCI0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UHCI0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UHCI1_INTR_MAP
func (o *DPORT_Type) SetPRO_UHCI1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UHCI1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UHCI1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UHCI1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UHCI1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_GPIO_INTERRUPT_MAP
func (o *DPORT_Type) SetPRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_GPIO_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.PRO_GPIO_INTERRUPT_NMI_MAP
func (o *DPORT_Type) SetPRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_GPIO_INTERRUPT_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_0_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_0_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_0_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_0_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_0_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_1_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_1_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_1_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_1_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_1_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_2_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_2_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_2_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_2_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_2_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_3_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_3_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_3_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_3_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_3_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_0_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_0_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_0_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_0_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_0_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_1_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_1_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_1_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_1_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_1_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_2_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_2_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_2_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_2_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_2_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_3_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_3_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_3_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_3_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_3_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2S0_INT_MAP
func (o *DPORT_Type) SetPRO_I2S0_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2S0_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_I2S0_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2S0_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2S0_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2S1_INT_MAP
func (o *DPORT_Type) SetPRO_I2S1_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2S1_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_I2S1_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2S1_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2S1_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_UART_INTR_MAP
func (o *DPORT_Type) SetPRO_UART_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UART_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UART_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UART_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UART_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UART1_INTR_MAP
func (o *DPORT_Type) SetPRO_UART1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UART1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UART1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UART1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UART1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UART2_INTR_MAP
func (o *DPORT_Type) SetPRO_UART2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UART2_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UART2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UART2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UART2_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_SDIO_HOST_INTERRUPT_MAP
func (o *DPORT_Type) SetPRO_SDIO_HOST_INTERRUPT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SDIO_HOST_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.PRO_SDIO_HOST_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SDIO_HOST_INTERRUPT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SDIO_HOST_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.PRO_EMAC_INT_MAP
func (o *DPORT_Type) SetPRO_EMAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_EMAC_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_EMAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_EMAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_EMAC_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM0_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM1_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM2_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM2_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM2_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM3_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM3_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM3_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM3_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM3_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM3_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_LEDC_INT_MAP
func (o *DPORT_Type) SetPRO_LEDC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_LEDC_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_LEDC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_LEDC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_LEDC_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_EFUSE_INT_MAP
func (o *DPORT_Type) SetPRO_EFUSE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_EFUSE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_EFUSE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_EFUSE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_EFUSE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_CAN_INT_MAP
func (o *DPORT_Type) SetPRO_CAN_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CAN_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_CAN_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CAN_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CAN_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_RTC_CORE_INTR_MAP
func (o *DPORT_Type) SetPRO_RTC_CORE_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RTC_CORE_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_RTC_CORE_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RTC_CORE_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RTC_CORE_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_RMT_INTR_MAP
func (o *DPORT_Type) SetPRO_RMT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RMT_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_RMT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RMT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RMT_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PCNT_INTR_MAP
func (o *DPORT_Type) SetPRO_PCNT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PCNT_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PCNT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PCNT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PCNT_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2C_EXT0_INTR_MAP
func (o *DPORT_Type) SetPRO_I2C_EXT0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2C_EXT0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_I2C_EXT0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2C_EXT0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2C_EXT0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2C_EXT1_INTR_MAP
func (o *DPORT_Type) SetPRO_I2C_EXT1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2C_EXT1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_I2C_EXT1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2C_EXT1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2C_EXT1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_RSA_INTR_MAP
func (o *DPORT_Type) SetPRO_RSA_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RSA_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_RSA_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RSA_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RSA_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI1_DMA_INT_MAP
func (o *DPORT_Type) SetPRO_SPI1_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI1_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI1_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI1_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI1_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI2_DMA_INT_MAP
func (o *DPORT_Type) SetPRO_SPI2_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI2_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI2_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI2_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI2_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI3_DMA_INT_MAP
func (o *DPORT_Type) SetPRO_SPI3_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI3_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI3_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI3_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI3_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_WDG_INT_MAP
func (o *DPORT_Type) SetPRO_WDG_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_WDG_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_WDG_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_WDG_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_WDG_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TIMER_INT1_MAP
func (o *DPORT_Type) SetPRO_TIMER_INT1_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TIMER_INT1_MAP.Reg, volatile.LoadUint32(&o.PRO_TIMER_INT1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TIMER_INT1_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TIMER_INT1_MAP.Reg) & 0x1f
}

// DPORT.PRO_TIMER_INT2_MAP
func (o *DPORT_Type) SetPRO_TIMER_INT2_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TIMER_INT2_MAP.Reg, volatile.LoadUint32(&o.PRO_TIMER_INT2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TIMER_INT2_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TIMER_INT2_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_MMU_IA_INT_MAP
func (o *DPORT_Type) SetPRO_MMU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MMU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_MMU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MMU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MMU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_MPU_IA_INT_MAP
func (o *DPORT_Type) SetPRO_MPU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MPU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_MPU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MPU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MPU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_CACHE_IA_INT_MAP
func (o *DPORT_Type) SetPRO_CACHE_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_IA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_CACHE_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_MAC_INTR_MAP
func (o *DPORT_Type) SetAPP_MAC_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MAC_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_MAC_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MAC_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MAC_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_MAC_NMI_MAP
func (o *DPORT_Type) SetAPP_MAC_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MAC_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_MAC_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MAC_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MAC_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_BB_INT_MAP
func (o *DPORT_Type) SetAPP_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BB_INT_MAP.Reg, volatile.LoadUint32(&o.APP_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_BT_MAC_INT_MAP
func (o *DPORT_Type) SetAPP_BT_MAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BT_MAC_INT_MAP.Reg, volatile.LoadUint32(&o.APP_BT_MAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BT_MAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BT_MAC_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_BT_BB_INT_MAP
func (o *DPORT_Type) SetAPP_BT_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BT_BB_INT_MAP.Reg, volatile.LoadUint32(&o.APP_BT_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BT_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BT_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_BT_BB_NMI_MAP
func (o *DPORT_Type) SetAPP_BT_BB_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BT_BB_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_BT_BB_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BT_BB_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BT_BB_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBT_IRQ_MAP
func (o *DPORT_Type) SetAPP_RWBT_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBT_IRQ_MAP.Reg, volatile.LoadUint32(&o.APP_RWBT_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBT_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBT_IRQ_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBLE_IRQ_MAP
func (o *DPORT_Type) SetAPP_RWBLE_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBLE_IRQ_MAP.Reg, volatile.LoadUint32(&o.APP_RWBLE_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBLE_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBLE_IRQ_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBT_NMI_MAP
func (o *DPORT_Type) SetAPP_RWBT_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBT_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_RWBT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBT_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBT_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBLE_NMI_MAP
func (o *DPORT_Type) SetAPP_RWBLE_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBLE_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_RWBLE_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBLE_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBLE_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_SLC0_INTR_MAP
func (o *DPORT_Type) SetAPP_SLC0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SLC0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_SLC0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SLC0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SLC0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_SLC1_INTR_MAP
func (o *DPORT_Type) SetAPP_SLC1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SLC1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_SLC1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SLC1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SLC1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UHCI0_INTR_MAP
func (o *DPORT_Type) SetAPP_UHCI0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UHCI0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UHCI0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UHCI0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UHCI0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UHCI1_INTR_MAP
func (o *DPORT_Type) SetAPP_UHCI1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UHCI1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UHCI1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UHCI1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UHCI1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_GPIO_INTERRUPT_MAP
func (o *DPORT_Type) SetAPP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_GPIO_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.APP_GPIO_INTERRUPT_NMI_MAP
func (o *DPORT_Type) SetAPP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_GPIO_INTERRUPT_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_0_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_0_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_0_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_0_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_0_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_1_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_1_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_1_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_1_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_1_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_2_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_2_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_2_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_2_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_2_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_3_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_3_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_3_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_3_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_3_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_0_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_0_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_0_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_0_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_0_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_1_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_1_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_1_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_1_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_1_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_2_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_2_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_2_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_2_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_2_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_3_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_3_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_3_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_3_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_3_MAP.Reg) & 0x1f
}

// DPORT.APP_I2S0_INT_MAP
func (o *DPORT_Type) SetAPP_I2S0_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2S0_INT_MAP.Reg, volatile.LoadUint32(&o.APP_I2S0_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2S0_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2S0_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_I2S1_INT_MAP
func (o *DPORT_Type) SetAPP_I2S1_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2S1_INT_MAP.Reg, volatile.LoadUint32(&o.APP_I2S1_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2S1_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2S1_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_UART_INTR_MAP
func (o *DPORT_Type) SetAPP_UART_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UART_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UART_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UART_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UART_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UART1_INTR_MAP
func (o *DPORT_Type) SetAPP_UART1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UART1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UART1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UART1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UART1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UART2_INTR_MAP
func (o *DPORT_Type) SetAPP_UART2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UART2_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UART2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UART2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UART2_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_SDIO_HOST_INTERRUPT_MAP
func (o *DPORT_Type) SetAPP_SDIO_HOST_INTERRUPT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SDIO_HOST_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.APP_SDIO_HOST_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SDIO_HOST_INTERRUPT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SDIO_HOST_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.APP_EMAC_INT_MAP
func (o *DPORT_Type) SetAPP_EMAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_EMAC_INT_MAP.Reg, volatile.LoadUint32(&o.APP_EMAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_EMAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_EMAC_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM0_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM1_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM2_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM2_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM2_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM3_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM3_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM3_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM3_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM3_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM3_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_LEDC_INT_MAP
func (o *DPORT_Type) SetAPP_LEDC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_LEDC_INT_MAP.Reg, volatile.LoadUint32(&o.APP_LEDC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_LEDC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_LEDC_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_EFUSE_INT_MAP
func (o *DPORT_Type) SetAPP_EFUSE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_EFUSE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_EFUSE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_EFUSE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_EFUSE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_CAN_INT_MAP
func (o *DPORT_Type) SetAPP_CAN_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CAN_INT_MAP.Reg, volatile.LoadUint32(&o.APP_CAN_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CAN_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CAN_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_RTC_CORE_INTR_MAP
func (o *DPORT_Type) SetAPP_RTC_CORE_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RTC_CORE_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_RTC_CORE_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RTC_CORE_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RTC_CORE_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_RMT_INTR_MAP
func (o *DPORT_Type) SetAPP_RMT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RMT_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_RMT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RMT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RMT_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PCNT_INTR_MAP
func (o *DPORT_Type) SetAPP_PCNT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PCNT_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PCNT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PCNT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PCNT_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_I2C_EXT0_INTR_MAP
func (o *DPORT_Type) SetAPP_I2C_EXT0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2C_EXT0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_I2C_EXT0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2C_EXT0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2C_EXT0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_I2C_EXT1_INTR_MAP
func (o *DPORT_Type) SetAPP_I2C_EXT1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2C_EXT1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_I2C_EXT1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2C_EXT1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2C_EXT1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_RSA_INTR_MAP
func (o *DPORT_Type) SetAPP_RSA_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RSA_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_RSA_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RSA_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RSA_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI1_DMA_INT_MAP
func (o *DPORT_Type) SetAPP_SPI1_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI1_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_SPI1_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI1_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI1_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI2_DMA_INT_MAP
func (o *DPORT_Type) SetAPP_SPI2_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI2_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_SPI2_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI2_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI2_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI3_DMA_INT_MAP
func (o *DPORT_Type) SetAPP_SPI3_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI3_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_SPI3_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI3_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI3_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_WDG_INT_MAP
func (o *DPORT_Type) SetAPP_WDG_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_WDG_INT_MAP.Reg, volatile.LoadUint32(&o.APP_WDG_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_WDG_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_WDG_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TIMER_INT1_MAP
func (o *DPORT_Type) SetAPP_TIMER_INT1_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TIMER_INT1_MAP.Reg, volatile.LoadUint32(&o.APP_TIMER_INT1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TIMER_INT1_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TIMER_INT1_MAP.Reg) & 0x1f
}

// DPORT.APP_TIMER_INT2_MAP
func (o *DPORT_Type) SetAPP_TIMER_INT2_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TIMER_INT2_MAP.Reg, volatile.LoadUint32(&o.APP_TIMER_INT2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TIMER_INT2_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TIMER_INT2_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_MMU_IA_INT_MAP
func (o *DPORT_Type) SetAPP_MMU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MMU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_MMU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MMU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MMU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_MPU_IA_INT_MAP
func (o *DPORT_Type) SetAPP_MPU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MPU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_MPU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MPU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MPU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_CACHE_IA_INT_MAP
func (o *DPORT_Type) SetAPP_CACHE_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_IA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_CACHE_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.AHBLITE_MPU_TABLE_UART
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UART.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_GPIO
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_GPIO.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_GPIO.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_GPIO.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_FE2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_FE2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_FE
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_FE.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_TIMER
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_TIMER.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMER.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMER.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_RTC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_RTC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RTC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RTC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_IO_MUX
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_IO_MUX.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_IO_MUX.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_IO_MUX.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_WDG
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_WDG.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WDG.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WDG.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_HINF
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_HINF.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_HINF.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_HINF.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UHCI1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UHCI1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_MISC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_MISC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_MISC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_MISC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2C
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2C.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2S0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2S0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UART1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UART1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BT_BUFFER
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BT_BUFFER.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT_BUFFER.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT_BUFFER.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2C_EXT0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UHCI0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UHCI0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SLCHOST
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SLCHOST.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLCHOST.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLCHOST.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_RMT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_RMT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RMT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RMT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PCNT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PCNT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PCNT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PCNT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SLC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SLC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_LEDC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_LEDC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_LEDC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_LEDC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_EFUSE
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_EFUSE.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EFUSE.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EFUSE.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI_ENCRYPT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI_ENCRYPT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI_ENCRYPT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI_ENCRYPT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BB
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BB.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BB.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BB.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_TIMERGROUP
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_TIMERGROUP1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI3
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI3.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI3.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI3.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_APB_CTRL
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_APB_CTRL.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_APB_CTRL.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_APB_CTRL.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2C_EXT1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SDIO_HOST
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SDIO_HOST.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SDIO_HOST.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SDIO_HOST.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_EMAC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_EMAC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EMAC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EMAC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_CAN
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_CAN.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_CAN.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_CAN.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2S1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2S1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UART2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UART2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM3
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM3.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM3.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM3.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_RWBT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_RWBT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RWBT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RWBT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BTMAC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BTMAC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BTMAC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BTMAC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_WIFIMAC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_WIFIMAC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WIFIMAC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WIFIMAC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWR
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWR.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWR.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWR.Reg) & 0x3f
}

// DPORT.MEM_ACCESS_DBUG0
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_PRO_ROM_MPU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_PRO_ROM_MPU_AD() uint32 {
	return volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x1
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_PRO_ROM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_PRO_ROM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_APP_ROM_MPU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_APP_ROM_MPU_AD() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_APP_ROM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_APP_ROM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x30)|value<<4)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x30) >> 4
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_SHARE_ROM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3c0)|value<<6)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_SHARE_ROM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3c0) >> 6
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3c00)|value<<10)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3c00) >> 10
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_INTERNAL_SRAM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3ffc000)|value<<14)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_INTERNAL_SRAM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3ffc000) >> 14
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3c000000)|value<<26)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3c000000) >> 26
}

// DPORT.MEM_ACCESS_DBUG1
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0xf)|value)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS() uint32 {
	return volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0xf
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_ARB_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x30)|value<<4)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_ARB_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x30) >> 4
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_PIDGEN_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0xc0)|value<<6)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_PIDGEN_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0xc0) >> 6
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_AHB_ACCESS_DENY(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_AHB_ACCESS_DENY() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_AHBLITE_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_AHBLITE_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x400) >> 10
}

// DPORT.PRO_DCACHE_DBUG0
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_SLAVE_WDATA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_SLAVE_WDATA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x1
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x1
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x7e)|value<<1)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x7e) >> 1
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_CACHE_STATE(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x7ff80)|value<<7)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_CACHE_STATE() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x7ff80) >> 7
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_TX_END(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_TX_END() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_SLAVE_WR(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_SLAVE_WR() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_RX_END(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_RX_END() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x800000) >> 23
}

// DPORT.PRO_DCACHE_DBUG1
func (o *DPORT_Type) SetPRO_DCACHE_DBUG1(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG1.Reg, value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG1() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG1.Reg)
}

// DPORT.PRO_DCACHE_DBUG2
func (o *DPORT_Type) SetPRO_DCACHE_DBUG2_PRO_CACHE_VADDR(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG2.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG2.Reg)&^(0x7ffffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG2_PRO_CACHE_VADDR() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG2.Reg) & 0x7ffffff
}

// DPORT.PRO_DCACHE_DBUG3
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_MMU_RDATA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x1ff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_MMU_RDATA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x1ff
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x7e00)|value<<9)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x7e00) >> 9
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_OPPOSITE(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_OPPOSITE() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DRAM1(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IROM0(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IROM0() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM1(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM0(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM0() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DROM0(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DROM0() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x8000) >> 15
}

// DPORT.PRO_DCACHE_DBUG4
func (o *DPORT_Type) SetPRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG4.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG4.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG4.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG5
func (o *DPORT_Type) SetPRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG5.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG5.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG5.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG6
func (o *DPORT_Type) SetPRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG6.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG6.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG6.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG7
func (o *DPORT_Type) SetPRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG7.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG7.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG7.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG8
func (o *DPORT_Type) SetPRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG8.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG8.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG8.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG9
func (o *DPORT_Type) SetPRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG9.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG9.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG9.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG0
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_SLAVE_WDATA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_SLAVE_WDATA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x1
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_CACHE_MMU_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_CACHE_MMU_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x1
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x7e)|value<<1)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x7e) >> 1
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_CACHE_STATE(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x7ff80)|value<<7)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_CACHE_STATE() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x7ff80) >> 7
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_WR_BAK_TO_READ(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_WR_BAK_TO_READ() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_TX_END(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_TX_END() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_SLAVE_WR(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_SLAVE_WR() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_SLAVE_WDATA_V(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_SLAVE_WDATA_V() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_RX_END(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_RX_END() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x800000) >> 23
}

// DPORT.APP_DCACHE_DBUG1
func (o *DPORT_Type) SetAPP_DCACHE_DBUG1(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG1.Reg, value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG1() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG1.Reg)
}

// DPORT.APP_DCACHE_DBUG2
func (o *DPORT_Type) SetAPP_DCACHE_DBUG2_APP_CACHE_VADDR(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG2.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG2.Reg)&^(0x7ffffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG2_APP_CACHE_VADDR() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG2.Reg) & 0x7ffffff
}

// DPORT.APP_DCACHE_DBUG3
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_MMU_RDATA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x1ff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_MMU_RDATA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x1ff
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x7e00)|value<<9)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x7e00) >> 9
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_OPPOSITE(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_OPPOSITE() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DRAM1(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IROM0(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IROM0() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM1(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM0(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM0() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DROM0(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DROM0() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x8000) >> 15
}

// DPORT.APP_DCACHE_DBUG4
func (o *DPORT_Type) SetAPP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG4.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG4.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG4.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG5
func (o *DPORT_Type) SetAPP_DCACHE_DBUG5_APP_DROM0ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG5.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG5.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG5_APP_DROM0ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG5.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG6
func (o *DPORT_Type) SetAPP_DCACHE_DBUG6_APP_IRAM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG6.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG6.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG6_APP_IRAM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG6.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG7
func (o *DPORT_Type) SetAPP_DCACHE_DBUG7_APP_IRAM1ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG7.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG7.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG7_APP_IRAM1ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG7.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG8
func (o *DPORT_Type) SetAPP_DCACHE_DBUG8_APP_IROM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG8.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG8.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG8_APP_IROM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG8.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG9
func (o *DPORT_Type) SetAPP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG9.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG9.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG9.Reg) & 0xfffff
}

// DPORT.PRO_CPU_RECORD_CTRL
func (o *DPORT_Type) SetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg) & 0x1
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg) & 0x100) >> 8
}

// DPORT.PRO_CPU_RECORD_STATUS
func (o *DPORT_Type) SetPRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_STATUS.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_STATUS.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_STATUS.Reg) & 0x1
}

// DPORT.PRO_CPU_RECORD_PID
func (o *DPORT_Type) SetPRO_CPU_RECORD_PID_RECORD_PRO_PID(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PID.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PID.Reg)&^(0x7)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PID_RECORD_PRO_PID() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PID.Reg) & 0x7
}

// DPORT.PRO_CPU_RECORD_PDEBUGINST
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGINST(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGINST() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg)
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_SZ(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_SZ() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg) & 0xff
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_ISRC(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg)&^(0x7000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_ISRC() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg) & 0x7000) >> 12
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP_REP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP_REP() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_CINTL(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg)&^(0xf000000)|value<<24)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_CINTL() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg) & 0xf000000) >> 24
}

// DPORT.PRO_CPU_RECORD_PDEBUGSTATUS
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg) & 0xff
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_BBCAUSE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_BBCAUSE() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg) & 0x3f
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_INSNTYPE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_INSNTYPE() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg) & 0x3f
}

// DPORT.PRO_CPU_RECORD_PDEBUGDATA
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_OTHER(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_OTHER() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x1
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCVEC(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCVEC() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x1f
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_SR(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_SR() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0xff
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RER(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RER() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x1
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFF(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFF() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WER(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WER() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFFCONFL(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFFCONFL() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_ER(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x3ffc)|value<<2)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_ER() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x3ffc) >> 2
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_DCM(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_DCM() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSU(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSU() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ICM(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ICM() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IRAMBUSY(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IRAMBUSY() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_LSU(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_LSU() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IPIF(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IPIF() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RSR(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RSR() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_TIE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_TIE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WSR(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WSR() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_RUN(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_RUN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_XSR(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_XSR() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_STR(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_STR() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPIFETCH(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPIFETCH() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_L32R(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_L32R() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSPROC(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSPROC() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPLOAD(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPLOAD() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_MEMW(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_MEMW() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCCAUSE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x3f0000)|value<<16)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCCAUSE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x3f0000) >> 16
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BANKCONFL(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BANKCONFL() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_HALT(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x20000)|value<<17)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_HALT() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x20000) >> 17
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERMUL(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x40000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERMUL() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x40000) >> 18
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERDIV(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERDIV() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg) & 0x80000) >> 19
}

// DPORT.PRO_CPU_RECORD_PDEBUGPC
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGPC(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGPC.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGPC() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGPC.Reg)
}

// DPORT.PRO_CPU_RECORD_PDEBUGLS0STAT
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0xf)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TYPE() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0xf
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_SZ(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0xf0)|value<<4)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_SZ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0xf0) >> 4
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DTLBM(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DTLBM() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCM(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCM() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCH(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCH() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_UC(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_UC() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_WB(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_WB() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_COH(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_COH() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_STCOH(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0x60000)|value<<17)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_STCOH() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0x60000) >> 17
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TGT(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)&^(0xf00000)|value<<20)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TGT() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg) & 0xf00000) >> 20
}

// DPORT.PRO_CPU_RECORD_PDEBUGLS0ADDR
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0ADDR(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0ADDR.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0ADDR() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0ADDR.Reg)
}

// DPORT.PRO_CPU_RECORD_PDEBUGLS0DATA
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0DATA(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0DATA.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0DATA() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0DATA.Reg)
}

// DPORT.APP_CPU_RECORD_CTRL
func (o *DPORT_Type) SetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg) & 0x1
}
func (o *DPORT_Type) SetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAPP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg) & 0x100) >> 8
}

// DPORT.APP_CPU_RECORD_STATUS
func (o *DPORT_Type) SetAPP_CPU_RECORD_STATUS_APP_CPU_RECORDING(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_STATUS.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_STATUS.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_STATUS_APP_CPU_RECORDING() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_STATUS.Reg) & 0x1
}

// DPORT.APP_CPU_RECORD_PID
func (o *DPORT_Type) SetAPP_CPU_RECORD_PID_RECORD_APP_PID(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PID.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_PID.Reg)&^(0x7)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PID_RECORD_APP_PID() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PID.Reg) & 0x7
}

// DPORT.APP_CPU_RECORD_PDEBUGINST
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGINST(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGINST.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGINST() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGINST.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGSTATUS
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGSTATUS.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGSTATUS.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGSTATUS.Reg) & 0xff
}

// DPORT.APP_CPU_RECORD_PDEBUGDATA
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGDATA(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGDATA.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGDATA() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGDATA.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGPC
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGPC(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGPC.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGPC() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGPC.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGLS0STAT
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGLS0STAT(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGLS0STAT.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGLS0STAT() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGLS0STAT.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGLS0ADDR
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGLS0ADDR(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGLS0ADDR.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGLS0ADDR() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGLS0ADDR.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGLS0DATA
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGLS0DATA(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGLS0DATA.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGLS0DATA() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGLS0DATA.Reg)
}

// DPORT.RSA_PD_CTRL
func (o *DPORT_Type) SetRSA_PD_CTRL_RSA_PD(value uint32) {
	volatile.StoreUint32(&o.RSA_PD_CTRL.Reg, volatile.LoadUint32(&o.RSA_PD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetRSA_PD_CTRL_RSA_PD() uint32 {
	return volatile.LoadUint32(&o.RSA_PD_CTRL.Reg) & 0x1
}

// DPORT.ROM_MPU_TABLE0
func (o *DPORT_Type) SetROM_MPU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE0.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE0.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE0.Reg) & 0x3
}

// DPORT.ROM_MPU_TABLE1
func (o *DPORT_Type) SetROM_MPU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE1.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE1.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE1.Reg) & 0x3
}

// DPORT.ROM_MPU_TABLE2
func (o *DPORT_Type) SetROM_MPU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE2.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE2.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE2.Reg) & 0x3
}

// DPORT.ROM_MPU_TABLE3
func (o *DPORT_Type) SetROM_MPU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE3.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE3.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE3.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE0
func (o *DPORT_Type) SetSHROM_MPU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE0.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE0.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE0.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE1
func (o *DPORT_Type) SetSHROM_MPU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE1.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE1.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE1.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE2
func (o *DPORT_Type) SetSHROM_MPU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE2.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE2.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE2.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE3
func (o *DPORT_Type) SetSHROM_MPU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE3.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE3.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE3.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE4
func (o *DPORT_Type) SetSHROM_MPU_TABLE4(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE4.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE4.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE4() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE4.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE5
func (o *DPORT_Type) SetSHROM_MPU_TABLE5(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE5.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE5.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE5() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE5.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE6
func (o *DPORT_Type) SetSHROM_MPU_TABLE6(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE6.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE6.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE6() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE6.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE7
func (o *DPORT_Type) SetSHROM_MPU_TABLE7(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE7.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE7.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE7() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE7.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE8
func (o *DPORT_Type) SetSHROM_MPU_TABLE8(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE8.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE8.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE8() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE8.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE9
func (o *DPORT_Type) SetSHROM_MPU_TABLE9(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE9.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE9.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE9() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE9.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE10
func (o *DPORT_Type) SetSHROM_MPU_TABLE10(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE10.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE10.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE10() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE10.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE11
func (o *DPORT_Type) SetSHROM_MPU_TABLE11(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE11.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE11.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE11() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE11.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE12
func (o *DPORT_Type) SetSHROM_MPU_TABLE12(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE12.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE12.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE12() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE12.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE13
func (o *DPORT_Type) SetSHROM_MPU_TABLE13(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE13.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE13.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE13() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE13.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE14
func (o *DPORT_Type) SetSHROM_MPU_TABLE14(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE14.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE14.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE14() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE14.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE15
func (o *DPORT_Type) SetSHROM_MPU_TABLE15(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE15.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE15.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE15() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE15.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE16
func (o *DPORT_Type) SetSHROM_MPU_TABLE16(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE16.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE16.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE16() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE16.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE17
func (o *DPORT_Type) SetSHROM_MPU_TABLE17(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE17.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE17.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE17() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE17.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE18
func (o *DPORT_Type) SetSHROM_MPU_TABLE18(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE18.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE18.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE18() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE18.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE19
func (o *DPORT_Type) SetSHROM_MPU_TABLE19(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE19.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE19.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE19() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE19.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE20
func (o *DPORT_Type) SetSHROM_MPU_TABLE20(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE20.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE20.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE20() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE20.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE21
func (o *DPORT_Type) SetSHROM_MPU_TABLE21(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE21.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE21.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE21() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE21.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE22
func (o *DPORT_Type) SetSHROM_MPU_TABLE22(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE22.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE22.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE22() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE22.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE23
func (o *DPORT_Type) SetSHROM_MPU_TABLE23(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE23.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE23.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE23() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE23.Reg) & 0x3
}

// DPORT.IMMU_TABLE0
func (o *DPORT_Type) SetIMMU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE0.Reg, volatile.LoadUint32(&o.IMMU_TABLE0.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE0.Reg) & 0x7f
}

// DPORT.IMMU_TABLE1
func (o *DPORT_Type) SetIMMU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE1.Reg, volatile.LoadUint32(&o.IMMU_TABLE1.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE1.Reg) & 0x7f
}

// DPORT.IMMU_TABLE2
func (o *DPORT_Type) SetIMMU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE2.Reg, volatile.LoadUint32(&o.IMMU_TABLE2.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE2.Reg) & 0x7f
}

// DPORT.IMMU_TABLE3
func (o *DPORT_Type) SetIMMU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE3.Reg, volatile.LoadUint32(&o.IMMU_TABLE3.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE3.Reg) & 0x7f
}

// DPORT.IMMU_TABLE4
func (o *DPORT_Type) SetIMMU_TABLE4(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE4.Reg, volatile.LoadUint32(&o.IMMU_TABLE4.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE4() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE4.Reg) & 0x7f
}

// DPORT.IMMU_TABLE5
func (o *DPORT_Type) SetIMMU_TABLE5(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE5.Reg, volatile.LoadUint32(&o.IMMU_TABLE5.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE5() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE5.Reg) & 0x7f
}

// DPORT.IMMU_TABLE6
func (o *DPORT_Type) SetIMMU_TABLE6(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE6.Reg, volatile.LoadUint32(&o.IMMU_TABLE6.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE6() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE6.Reg) & 0x7f
}

// DPORT.IMMU_TABLE7
func (o *DPORT_Type) SetIMMU_TABLE7(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE7.Reg, volatile.LoadUint32(&o.IMMU_TABLE7.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE7() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE7.Reg) & 0x7f
}

// DPORT.IMMU_TABLE8
func (o *DPORT_Type) SetIMMU_TABLE8(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE8.Reg, volatile.LoadUint32(&o.IMMU_TABLE8.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE8() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE8.Reg) & 0x7f
}

// DPORT.IMMU_TABLE9
func (o *DPORT_Type) SetIMMU_TABLE9(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE9.Reg, volatile.LoadUint32(&o.IMMU_TABLE9.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE9() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE9.Reg) & 0x7f
}

// DPORT.IMMU_TABLE10
func (o *DPORT_Type) SetIMMU_TABLE10(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE10.Reg, volatile.LoadUint32(&o.IMMU_TABLE10.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE10() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE10.Reg) & 0x7f
}

// DPORT.IMMU_TABLE11
func (o *DPORT_Type) SetIMMU_TABLE11(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE11.Reg, volatile.LoadUint32(&o.IMMU_TABLE11.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE11() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE11.Reg) & 0x7f
}

// DPORT.IMMU_TABLE12
func (o *DPORT_Type) SetIMMU_TABLE12(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE12.Reg, volatile.LoadUint32(&o.IMMU_TABLE12.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE12() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE12.Reg) & 0x7f
}

// DPORT.IMMU_TABLE13
func (o *DPORT_Type) SetIMMU_TABLE13(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE13.Reg, volatile.LoadUint32(&o.IMMU_TABLE13.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE13() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE13.Reg) & 0x7f
}

// DPORT.IMMU_TABLE14
func (o *DPORT_Type) SetIMMU_TABLE14(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE14.Reg, volatile.LoadUint32(&o.IMMU_TABLE14.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE14() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE14.Reg) & 0x7f
}

// DPORT.IMMU_TABLE15
func (o *DPORT_Type) SetIMMU_TABLE15(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE15.Reg, volatile.LoadUint32(&o.IMMU_TABLE15.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE15() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE15.Reg) & 0x7f
}

// DPORT.DMMU_TABLE0
func (o *DPORT_Type) SetDMMU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE0.Reg, volatile.LoadUint32(&o.DMMU_TABLE0.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE0.Reg) & 0x7f
}

// DPORT.DMMU_TABLE1
func (o *DPORT_Type) SetDMMU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE1.Reg, volatile.LoadUint32(&o.DMMU_TABLE1.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE1.Reg) & 0x7f
}

// DPORT.DMMU_TABLE2
func (o *DPORT_Type) SetDMMU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE2.Reg, volatile.LoadUint32(&o.DMMU_TABLE2.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE2.Reg) & 0x7f
}

// DPORT.DMMU_TABLE3
func (o *DPORT_Type) SetDMMU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE3.Reg, volatile.LoadUint32(&o.DMMU_TABLE3.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE3.Reg) & 0x7f
}

// DPORT.DMMU_TABLE4
func (o *DPORT_Type) SetDMMU_TABLE4(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE4.Reg, volatile.LoadUint32(&o.DMMU_TABLE4.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE4() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE4.Reg) & 0x7f
}

// DPORT.DMMU_TABLE5
func (o *DPORT_Type) SetDMMU_TABLE5(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE5.Reg, volatile.LoadUint32(&o.DMMU_TABLE5.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE5() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE5.Reg) & 0x7f
}

// DPORT.DMMU_TABLE6
func (o *DPORT_Type) SetDMMU_TABLE6(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE6.Reg, volatile.LoadUint32(&o.DMMU_TABLE6.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE6() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE6.Reg) & 0x7f
}

// DPORT.DMMU_TABLE7
func (o *DPORT_Type) SetDMMU_TABLE7(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE7.Reg, volatile.LoadUint32(&o.DMMU_TABLE7.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE7() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE7.Reg) & 0x7f
}

// DPORT.DMMU_TABLE8
func (o *DPORT_Type) SetDMMU_TABLE8(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE8.Reg, volatile.LoadUint32(&o.DMMU_TABLE8.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE8() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE8.Reg) & 0x7f
}

// DPORT.DMMU_TABLE9
func (o *DPORT_Type) SetDMMU_TABLE9(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE9.Reg, volatile.LoadUint32(&o.DMMU_TABLE9.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE9() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE9.Reg) & 0x7f
}

// DPORT.DMMU_TABLE10
func (o *DPORT_Type) SetDMMU_TABLE10(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE10.Reg, volatile.LoadUint32(&o.DMMU_TABLE10.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE10() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE10.Reg) & 0x7f
}

// DPORT.DMMU_TABLE11
func (o *DPORT_Type) SetDMMU_TABLE11(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE11.Reg, volatile.LoadUint32(&o.DMMU_TABLE11.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE11() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE11.Reg) & 0x7f
}

// DPORT.DMMU_TABLE12
func (o *DPORT_Type) SetDMMU_TABLE12(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE12.Reg, volatile.LoadUint32(&o.DMMU_TABLE12.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE12() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE12.Reg) & 0x7f
}

// DPORT.DMMU_TABLE13
func (o *DPORT_Type) SetDMMU_TABLE13(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE13.Reg, volatile.LoadUint32(&o.DMMU_TABLE13.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE13() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE13.Reg) & 0x7f
}

// DPORT.DMMU_TABLE14
func (o *DPORT_Type) SetDMMU_TABLE14(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE14.Reg, volatile.LoadUint32(&o.DMMU_TABLE14.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE14() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE14.Reg) & 0x7f
}

// DPORT.DMMU_TABLE15
func (o *DPORT_Type) SetDMMU_TABLE15(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE15.Reg, volatile.LoadUint32(&o.DMMU_TABLE15.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE15() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE15.Reg) & 0x7f
}

// DPORT.PRO_INTRUSION_CTRL
func (o *DPORT_Type) SetPRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N(value uint32) {
	volatile.StoreUint32(&o.PRO_INTRUSION_CTRL.Reg, volatile.LoadUint32(&o.PRO_INTRUSION_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N() uint32 {
	return volatile.LoadUint32(&o.PRO_INTRUSION_CTRL.Reg) & 0x1
}

// DPORT.PRO_INTRUSION_STATUS
func (o *DPORT_Type) SetPRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD(value uint32) {
	volatile.StoreUint32(&o.PRO_INTRUSION_STATUS.Reg, volatile.LoadUint32(&o.PRO_INTRUSION_STATUS.Reg)&^(0xf)|value)
}
func (o *DPORT_Type) GetPRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD() uint32 {
	return volatile.LoadUint32(&o.PRO_INTRUSION_STATUS.Reg) & 0xf
}

// DPORT.APP_INTRUSION_CTRL
func (o *DPORT_Type) SetAPP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N(value uint32) {
	volatile.StoreUint32(&o.APP_INTRUSION_CTRL.Reg, volatile.LoadUint32(&o.APP_INTRUSION_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N() uint32 {
	return volatile.LoadUint32(&o.APP_INTRUSION_CTRL.Reg) & 0x1
}

// DPORT.APP_INTRUSION_STATUS
func (o *DPORT_Type) SetAPP_INTRUSION_STATUS_APP_INTRUSION_RECORD(value uint32) {
	volatile.StoreUint32(&o.APP_INTRUSION_STATUS.Reg, volatile.LoadUint32(&o.APP_INTRUSION_STATUS.Reg)&^(0xf)|value)
}
func (o *DPORT_Type) GetAPP_INTRUSION_STATUS_APP_INTRUSION_RECORD() uint32 {
	return volatile.LoadUint32(&o.APP_INTRUSION_STATUS.Reg) & 0xf
}

// DPORT.FRONT_END_MEM_PD
func (o *DPORT_Type) SetFRONT_END_MEM_PD_AGC_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_AGC_MEM_FORCE_PU() uint32 {
	return volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x1
}
func (o *DPORT_Type) SetFRONT_END_MEM_PD_AGC_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_AGC_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x8) >> 3
}

// DPORT.MMU_IA_INT_EN
func (o *DPORT_Type) SetMMU_IA_INT_EN(value uint32) {
	volatile.StoreUint32(&o.MMU_IA_INT_EN.Reg, volatile.LoadUint32(&o.MMU_IA_INT_EN.Reg)&^(0xffffff)|value)
}
func (o *DPORT_Type) GetMMU_IA_INT_EN() uint32 {
	return volatile.LoadUint32(&o.MMU_IA_INT_EN.Reg) & 0xffffff
}

// DPORT.MPU_IA_INT_EN
func (o *DPORT_Type) SetMPU_IA_INT_EN(value uint32) {
	volatile.StoreUint32(&o.MPU_IA_INT_EN.Reg, volatile.LoadUint32(&o.MPU_IA_INT_EN.Reg)&^(0x1ffff)|value)
}
func (o *DPORT_Type) GetMPU_IA_INT_EN() uint32 {
	return volatile.LoadUint32(&o.MPU_IA_INT_EN.Reg) & 0x1ffff
}

// DPORT.CACHE_IA_INT_EN
func (o *DPORT_Type) SetCACHE_IA_INT_EN(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0xfffffff)|value)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN() uint32 {
	return volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0xfffffff
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0() uint32 {
	return volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x1
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_DRAM1(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x20000)|value<<17)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x20000) >> 17
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x40000)|value<<18)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x40000) >> 18
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x80000) >> 19
}

// DPORT.SECURE_BOOT_CTRL
func (o *DPORT_Type) SetSECURE_BOOT_CTRL_SW_BOOTLOADER_SEL(value uint32) {
	volatile.StoreUint32(&o.SECURE_BOOT_CTRL.Reg, volatile.LoadUint32(&o.SECURE_BOOT_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetSECURE_BOOT_CTRL_SW_BOOTLOADER_SEL() uint32 {
	return volatile.LoadUint32(&o.SECURE_BOOT_CTRL.Reg) & 0x1
}

// DPORT.SPI_DMA_CHAN_SEL
func (o *DPORT_Type) SetSPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL(value uint32) {
	volatile.StoreUint32(&o.SPI_DMA_CHAN_SEL.Reg, volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL() uint32 {
	return volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg) & 0x3
}
func (o *DPORT_Type) SetSPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL(value uint32) {
	volatile.StoreUint32(&o.SPI_DMA_CHAN_SEL.Reg, volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg)&^(0xc)|value<<2)
}
func (o *DPORT_Type) GetSPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg) & 0xc) >> 2
}
func (o *DPORT_Type) SetSPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL(value uint32) {
	volatile.StoreUint32(&o.SPI_DMA_CHAN_SEL.Reg, volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg)&^(0x30)|value<<4)
}
func (o *DPORT_Type) GetSPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg) & 0x30) >> 4
}

// DPORT.PRO_VECBASE_CTRL
func (o *DPORT_Type) SetPRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL(value uint32) {
	volatile.StoreUint32(&o.PRO_VECBASE_CTRL.Reg, volatile.LoadUint32(&o.PRO_VECBASE_CTRL.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetPRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL() uint32 {
	return volatile.LoadUint32(&o.PRO_VECBASE_CTRL.Reg) & 0x3
}

// DPORT.PRO_VECBASE_SET
func (o *DPORT_Type) SetPRO_VECBASE_SET_PRO_OUT_VECBASE(value uint32) {
	volatile.StoreUint32(&o.PRO_VECBASE_SET.Reg, volatile.LoadUint32(&o.PRO_VECBASE_SET.Reg)&^(0x3fffff)|value)
}
func (o *DPORT_Type) GetPRO_VECBASE_SET_PRO_OUT_VECBASE() uint32 {
	return volatile.LoadUint32(&o.PRO_VECBASE_SET.Reg) & 0x3fffff
}

// DPORT.APP_VECBASE_CTRL
func (o *DPORT_Type) SetAPP_VECBASE_CTRL_APP_OUT_VECBASE_SEL(value uint32) {
	volatile.StoreUint32(&o.APP_VECBASE_CTRL.Reg, volatile.LoadUint32(&o.APP_VECBASE_CTRL.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetAPP_VECBASE_CTRL_APP_OUT_VECBASE_SEL() uint32 {
	return volatile.LoadUint32(&o.APP_VECBASE_CTRL.Reg) & 0x3
}

// DPORT.APP_VECBASE_SET
func (o *DPORT_Type) SetAPP_VECBASE_SET_APP_OUT_VECBASE(value uint32) {
	volatile.StoreUint32(&o.APP_VECBASE_SET.Reg, volatile.LoadUint32(&o.APP_VECBASE_SET.Reg)&^(0x3fffff)|value)
}
func (o *DPORT_Type) GetAPP_VECBASE_SET_APP_OUT_VECBASE() uint32 {
	return volatile.LoadUint32(&o.APP_VECBASE_SET.Reg) & 0x3fffff
}

// DPORT.DATE
func (o *DPORT_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *DPORT_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

// eFuse Controller
type EFUSE_Type struct {
	BLK0_RDATA0 volatile.Register32 // 0x0
	BLK0_RDATA1 volatile.Register32 // 0x4
	BLK0_RDATA2 volatile.Register32 // 0x8
	BLK0_RDATA3 volatile.Register32 // 0xC
	BLK0_RDATA4 volatile.Register32 // 0x10
	BLK0_RDATA5 volatile.Register32 // 0x14
	BLK0_RDATA6 volatile.Register32 // 0x18
	BLK0_WDATA0 volatile.Register32 // 0x1C
	BLK0_WDATA1 volatile.Register32 // 0x20
	BLK0_WDATA2 volatile.Register32 // 0x24
	BLK0_WDATA3 volatile.Register32 // 0x28
	BLK0_WDATA4 volatile.Register32 // 0x2C
	BLK0_WDATA5 volatile.Register32 // 0x30
	BLK0_WDATA6 volatile.Register32 // 0x34
	BLK1_RDATA0 volatile.Register32 // 0x38
	BLK1_RDATA1 volatile.Register32 // 0x3C
	BLK1_RDATA2 volatile.Register32 // 0x40
	BLK1_RDATA3 volatile.Register32 // 0x44
	BLK1_RDATA4 volatile.Register32 // 0x48
	BLK1_RDATA5 volatile.Register32 // 0x4C
	BLK1_RDATA6 volatile.Register32 // 0x50
	BLK1_RDATA7 volatile.Register32 // 0x54
	BLK2_RDATA0 volatile.Register32 // 0x58
	BLK2_RDATA1 volatile.Register32 // 0x5C
	BLK2_RDATA2 volatile.Register32 // 0x60
	BLK2_RDATA3 volatile.Register32 // 0x64
	BLK2_RDATA4 volatile.Register32 // 0x68
	BLK2_RDATA5 volatile.Register32 // 0x6C
	BLK2_RDATA6 volatile.Register32 // 0x70
	BLK2_RDATA7 volatile.Register32 // 0x74
	BLK3_RDATA0 volatile.Register32 // 0x78
	BLK3_RDATA1 volatile.Register32 // 0x7C
	BLK3_RDATA2 volatile.Register32 // 0x80
	BLK3_RDATA3 volatile.Register32 // 0x84
	BLK3_RDATA4 volatile.Register32 // 0x88
	BLK3_RDATA5 volatile.Register32 // 0x8C
	BLK3_RDATA6 volatile.Register32 // 0x90
	BLK3_RDATA7 volatile.Register32 // 0x94
	BLK1_WDATA0 volatile.Register32 // 0x98
	BLK1_WDATA1 volatile.Register32 // 0x9C
	BLK1_WDATA2 volatile.Register32 // 0xA0
	BLK1_WDATA3 volatile.Register32 // 0xA4
	BLK1_WDATA4 volatile.Register32 // 0xA8
	BLK1_WDATA5 volatile.Register32 // 0xAC
	BLK1_WDATA6 volatile.Register32 // 0xB0
	BLK1_WDATA7 volatile.Register32 // 0xB4
	BLK2_WDATA0 volatile.Register32 // 0xB8
	BLK2_WDATA1 volatile.Register32 // 0xBC
	BLK2_WDATA2 volatile.Register32 // 0xC0
	BLK2_WDATA3 volatile.Register32 // 0xC4
	BLK2_WDATA4 volatile.Register32 // 0xC8
	BLK2_WDATA5 volatile.Register32 // 0xCC
	BLK2_WDATA6 volatile.Register32 // 0xD0
	BLK2_WDATA7 volatile.Register32 // 0xD4
	BLK3_WDATA0 volatile.Register32 // 0xD8
	BLK3_WDATA1 volatile.Register32 // 0xDC
	BLK3_WDATA2 volatile.Register32 // 0xE0
	BLK3_WDATA3 volatile.Register32 // 0xE4
	BLK3_WDATA4 volatile.Register32 // 0xE8
	BLK3_WDATA5 volatile.Register32 // 0xEC
	BLK3_WDATA6 volatile.Register32 // 0xF0
	BLK3_WDATA7 volatile.Register32 // 0xF4
	CLK         volatile.Register32 // 0xF8
	CONF        volatile.Register32 // 0xFC
	STATUS      volatile.Register32 // 0x100
	CMD         volatile.Register32 // 0x104
	INT_RAW     volatile.Register32 // 0x108
	INT_ST      volatile.Register32 // 0x10C
	INT_ENA     volatile.Register32 // 0x110
	INT_CLR     volatile.Register32 // 0x114
	DAC_CONF    volatile.Register32 // 0x118
	DEC_STATUS  volatile.Register32 // 0x11C
	_           [220]byte
	DATE        volatile.Register32 // 0x1FC
}

// EFUSE.BLK0_RDATA0
func (o *EFUSE_Type) SetBLK0_RDATA0_RD_EFUSE_WR_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA0.Reg, volatile.LoadUint32(&o.BLK0_RDATA0.Reg)&^(0xffff)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA0_RD_EFUSE_WR_DIS() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA0.Reg) & 0xffff
}
func (o *EFUSE_Type) SetBLK0_RDATA0_RD_EFUSE_RD_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA0.Reg, volatile.LoadUint32(&o.BLK0_RDATA0.Reg)&^(0xf0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_RDATA0_RD_EFUSE_RD_DIS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA0.Reg) & 0xf0000) >> 16
}
func (o *EFUSE_Type) SetBLK0_RDATA0_RD_FLASH_CRYPT_CNT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA0.Reg, volatile.LoadUint32(&o.BLK0_RDATA0.Reg)&^(0x7f00000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_RDATA0_RD_FLASH_CRYPT_CNT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA0.Reg) & 0x7f00000) >> 20
}
func (o *EFUSE_Type) SetBLK0_RDATA0_RD_UART_DOWNLOAD_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA0.Reg, volatile.LoadUint32(&o.BLK0_RDATA0.Reg)&^(0x8000000)|value<<27)
}
func (o *EFUSE_Type) GetBLK0_RDATA0_RD_UART_DOWNLOAD_DIS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA0.Reg) & 0x8000000) >> 27
}
func (o *EFUSE_Type) SetBLK0_RDATA0_RESERVED_0_28(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA0.Reg, volatile.LoadUint32(&o.BLK0_RDATA0.Reg)&^(0xf0000000)|value<<28)
}
func (o *EFUSE_Type) GetBLK0_RDATA0_RESERVED_0_28() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA0.Reg) & 0xf0000000) >> 28
}

// EFUSE.BLK0_RDATA1
func (o *EFUSE_Type) SetBLK0_RDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK0_RDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA1.Reg)
}

// EFUSE.BLK0_RDATA2
func (o *EFUSE_Type) SetBLK0_RDATA2_RD_MAC_1(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA2.Reg, volatile.LoadUint32(&o.BLK0_RDATA2.Reg)&^(0xffff)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA2_RD_MAC_1() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA2.Reg) & 0xffff
}
func (o *EFUSE_Type) SetBLK0_RDATA2_RD_MAC_CRC(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA2.Reg, volatile.LoadUint32(&o.BLK0_RDATA2.Reg)&^(0xff0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_RDATA2_RD_MAC_CRC() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA2.Reg) & 0xff0000) >> 16
}
func (o *EFUSE_Type) SetBLK0_RDATA2_RD_RESERVE_0_88(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA2.Reg, volatile.LoadUint32(&o.BLK0_RDATA2.Reg)&^(0xff000000)|value<<24)
}
func (o *EFUSE_Type) GetBLK0_RDATA2_RD_RESERVE_0_88() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA2.Reg) & 0xff000000) >> 24
}

// EFUSE.BLK0_RDATA3
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_DISABLE_APP_CPU(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_DISABLE_APP_CPU() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x1
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_DISABLE_BT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_DISABLE_BT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_PACKAGE_4BIT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_PACKAGE_4BIT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_DIS_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_DIS_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_SPI_PAD_CONFIG_HD(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x1f0)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_SPI_PAD_CONFIG_HD() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x1f0) >> 4
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_PACKAGE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0xe00)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_PACKAGE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0xe00) >> 9
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x1000)|value<<12)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x1000) >> 12
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x2000)|value<<13)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x2000) >> 13
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_BLK3_PART_RESERVE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x4000)|value<<14)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_BLK3_PART_RESERVE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x4000) >> 14
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_VER_REV1(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_VER_REV1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_RESERVE_0_112(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0xffff0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_RESERVE_0_112() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0xffff0000) >> 16
}

// EFUSE.BLK0_RDATA4
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_CLK8M_FREQ(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_CLK8M_FREQ() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0xff
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_ADC_VREF(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x1f00)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_ADC_VREF() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x1f00) >> 8
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_RESERVE_0_141(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x2000)|value<<13)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_RESERVE_0_141() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x2000) >> 13
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_XPD_SDIO(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x4000)|value<<14)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_XPD_SDIO() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x4000) >> 14
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_XPD_SDIO_TIEH(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_XPD_SDIO_TIEH() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_XPD_SDIO_FORCE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_XPD_SDIO_FORCE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x10000) >> 16
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_RESERVE_0_145(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0xfffe0000)|value<<17)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_RESERVE_0_145() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0xfffe0000) >> 17
}

// EFUSE.BLK0_RDATA5
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x1f)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x1f
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_SPI_PAD_CONFIG_Q(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x3e0)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_SPI_PAD_CONFIG_Q() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x3e0) >> 5
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_SPI_PAD_CONFIG_D(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x7c00)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_SPI_PAD_CONFIG_D() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x7c00) >> 10
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_SPI_PAD_CONFIG_CS0(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0xf8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_SPI_PAD_CONFIG_CS0() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0xf8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_CHIP_VER_REV2(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x100000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_CHIP_VER_REV2() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x100000) >> 20
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_RESERVE_0_181(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x200000)|value<<21)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_RESERVE_0_181() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x200000) >> 21
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_VOL_LEVEL_HP_INV(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0xc00000)|value<<22)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_VOL_LEVEL_HP_INV() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0xc00000) >> 22
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_WAFER_VERSION_MINOR(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x3000000)|value<<24)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_WAFER_VERSION_MINOR() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x3000000) >> 24
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_RESERVE_0_186(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0xc000000)|value<<26)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_RESERVE_0_186() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0xc000000) >> 26
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_FLASH_CRYPT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0xf0000000)|value<<28)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_FLASH_CRYPT_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0xf0000000) >> 28
}

// EFUSE.BLK0_RDATA6
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_CODING_SCHEME(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x3)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_CODING_SCHEME() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x3
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_SDIO_HOST(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_SDIO_HOST() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_ABS_DONE_0(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x10)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_ABS_DONE_0() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x10) >> 4
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_ABS_DONE_1(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x20)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_ABS_DONE_1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x20) >> 5
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_JTAG_DISABLE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x40)|value<<6)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_JTAG_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x40) >> 6
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_DL_ENCRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x80)|value<<7)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_DL_ENCRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x80) >> 7
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_DL_DECRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x100)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_DL_DECRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x100) >> 8
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_DL_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x200)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_DL_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x200) >> 9
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_KEY_STATUS(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x400)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_KEY_STATUS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x400) >> 10
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_RESERVE_0_203(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0xfffff800)|value<<11)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_RESERVE_0_203() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0xfffff800) >> 11
}

// EFUSE.BLK0_WDATA0
func (o *EFUSE_Type) SetBLK0_WDATA0_WR_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA0.Reg, volatile.LoadUint32(&o.BLK0_WDATA0.Reg)&^(0xffff)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA0_WR_DIS() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA0.Reg) & 0xffff
}
func (o *EFUSE_Type) SetBLK0_WDATA0_RD_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA0.Reg, volatile.LoadUint32(&o.BLK0_WDATA0.Reg)&^(0xf0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_WDATA0_RD_DIS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA0.Reg) & 0xf0000) >> 16
}
func (o *EFUSE_Type) SetBLK0_WDATA0_FLASH_CRYPT_CNT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA0.Reg, volatile.LoadUint32(&o.BLK0_WDATA0.Reg)&^(0x7f00000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_WDATA0_FLASH_CRYPT_CNT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA0.Reg) & 0x7f00000) >> 20
}

// EFUSE.BLK0_WDATA1
func (o *EFUSE_Type) SetBLK0_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK0_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA1.Reg)
}

// EFUSE.BLK0_WDATA2
func (o *EFUSE_Type) SetBLK0_WDATA2_WIFI_MAC_CRC_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA2.Reg, volatile.LoadUint32(&o.BLK0_WDATA2.Reg)&^(0xffffff)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA2_WIFI_MAC_CRC_HIGH() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA2.Reg) & 0xffffff
}

// EFUSE.BLK0_WDATA3
func (o *EFUSE_Type) SetBLK0_WDATA3_DISABLE_APP_CPU(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_DISABLE_APP_CPU() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x1
}
func (o *EFUSE_Type) SetBLK0_WDATA3_DISABLE_BT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_DISABLE_BT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_PACKAGE_4BIT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_PACKAGE_4BIT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_WDATA3_DIS_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_DIS_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_WDATA3_SPI_PAD_CONFIG_HD(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x1f0)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_SPI_PAD_CONFIG_HD() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x1f0) >> 4
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_PACKAGE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0xe00)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_PACKAGE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0xe00) >> 9
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_CPU_FREQ_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x1000)|value<<12)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_CPU_FREQ_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x1000) >> 12
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_CPU_FREQ_RATED(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x2000)|value<<13)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_CPU_FREQ_RATED() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x2000) >> 13
}
func (o *EFUSE_Type) SetBLK0_WDATA3_BLK3_PART_RESERVE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x4000)|value<<14)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_BLK3_PART_RESERVE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x4000) >> 14
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_VER_REV1(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_VER_REV1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_WDATA3_RESERVE_0_112(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0xffff0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_RESERVE_0_112() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0xffff0000) >> 16
}

// EFUSE.BLK0_WDATA4
func (o *EFUSE_Type) SetBLK0_WDATA4_CLK8M_FREQ(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_CLK8M_FREQ() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0xff
}
func (o *EFUSE_Type) SetBLK0_WDATA4_ADC_VREF(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x1f00)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_ADC_VREF() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x1f00) >> 8
}
func (o *EFUSE_Type) SetBLK0_WDATA4_RESERVE_0_141(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x2000)|value<<13)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_RESERVE_0_141() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x2000) >> 13
}
func (o *EFUSE_Type) SetBLK0_WDATA4_XPD_SDIO(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x4000)|value<<14)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_XPD_SDIO() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x4000) >> 14
}
func (o *EFUSE_Type) SetBLK0_WDATA4_XPD_SDIO_TIEH(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_XPD_SDIO_TIEH() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_WDATA4_XPD_SDIO_FORCE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_XPD_SDIO_FORCE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x10000) >> 16
}
func (o *EFUSE_Type) SetBLK0_WDATA4_RESERVE_0_145(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0xfffe0000)|value<<17)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_RESERVE_0_145() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0xfffe0000) >> 17
}

// EFUSE.BLK0_WDATA5
func (o *EFUSE_Type) SetBLK0_WDATA5_SPI_PAD_CONFIG_CLK(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x1f)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_SPI_PAD_CONFIG_CLK() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x1f
}
func (o *EFUSE_Type) SetBLK0_WDATA5_SPI_PAD_CONFIG_Q(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x3e0)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_SPI_PAD_CONFIG_Q() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x3e0) >> 5
}
func (o *EFUSE_Type) SetBLK0_WDATA5_SPI_PAD_CONFIG_D(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x7c00)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_SPI_PAD_CONFIG_D() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x7c00) >> 10
}
func (o *EFUSE_Type) SetBLK0_WDATA5_SPI_PAD_CONFIG_CS0(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0xf8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_SPI_PAD_CONFIG_CS0() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0xf8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_WDATA5_CHIP_VER_REV2(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x100000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_CHIP_VER_REV2() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x100000) >> 20
}
func (o *EFUSE_Type) SetBLK0_WDATA5_RESERVE_0_181(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x200000)|value<<21)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_RESERVE_0_181() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x200000) >> 21
}
func (o *EFUSE_Type) SetBLK0_WDATA5_VOL_LEVEL_HP_INV(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0xc00000)|value<<22)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_VOL_LEVEL_HP_INV() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0xc00000) >> 22
}
func (o *EFUSE_Type) SetBLK0_WDATA5_WAFER_VERSION_MINOR(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x3000000)|value<<24)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_WAFER_VERSION_MINOR() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x3000000) >> 24
}
func (o *EFUSE_Type) SetBLK0_WDATA5_RESERVE_0_186(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0xc000000)|value<<26)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_RESERVE_0_186() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0xc000000) >> 26
}
func (o *EFUSE_Type) SetBLK0_WDATA5_FLASH_CRYPT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0xf0000000)|value<<28)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_FLASH_CRYPT_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0xf0000000) >> 28
}

// EFUSE.BLK0_WDATA6
func (o *EFUSE_Type) SetBLK0_WDATA6_CODING_SCHEME(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x3)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_CODING_SCHEME() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x3
}
func (o *EFUSE_Type) SetBLK0_WDATA6_CONSOLE_DEBUG_DISABLE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_CONSOLE_DEBUG_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_SDIO_HOST(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_SDIO_HOST() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_WDATA6_ABS_DONE_0(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x10)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_ABS_DONE_0() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x10) >> 4
}
func (o *EFUSE_Type) SetBLK0_WDATA6_ABS_DONE_1(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x20)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_ABS_DONE_1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x20) >> 5
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_JTAG(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x40)|value<<6)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_JTAG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x40) >> 6
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_DL_ENCRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x80)|value<<7)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_DL_ENCRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x80) >> 7
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_DL_DECRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x100)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_DL_DECRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x100) >> 8
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_DL_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x200)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_DL_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x200) >> 9
}
func (o *EFUSE_Type) SetBLK0_WDATA6_KEY_STATUS(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x400)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_KEY_STATUS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x400) >> 10
}

// EFUSE.BLK1_RDATA0
func (o *EFUSE_Type) SetBLK1_RDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA0.Reg)
}

// EFUSE.BLK1_RDATA1
func (o *EFUSE_Type) SetBLK1_RDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA1.Reg)
}

// EFUSE.BLK1_RDATA2
func (o *EFUSE_Type) SetBLK1_RDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA2.Reg)
}

// EFUSE.BLK1_RDATA3
func (o *EFUSE_Type) SetBLK1_RDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA3.Reg)
}

// EFUSE.BLK1_RDATA4
func (o *EFUSE_Type) SetBLK1_RDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA4.Reg)
}

// EFUSE.BLK1_RDATA5
func (o *EFUSE_Type) SetBLK1_RDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA5.Reg)
}

// EFUSE.BLK1_RDATA6
func (o *EFUSE_Type) SetBLK1_RDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA6.Reg)
}

// EFUSE.BLK1_RDATA7
func (o *EFUSE_Type) SetBLK1_RDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA7.Reg)
}

// EFUSE.BLK2_RDATA0
func (o *EFUSE_Type) SetBLK2_RDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA0.Reg)
}

// EFUSE.BLK2_RDATA1
func (o *EFUSE_Type) SetBLK2_RDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA1.Reg)
}

// EFUSE.BLK2_RDATA2
func (o *EFUSE_Type) SetBLK2_RDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA2.Reg)
}

// EFUSE.BLK2_RDATA3
func (o *EFUSE_Type) SetBLK2_RDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA3.Reg)
}

// EFUSE.BLK2_RDATA4
func (o *EFUSE_Type) SetBLK2_RDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA4.Reg)
}

// EFUSE.BLK2_RDATA5
func (o *EFUSE_Type) SetBLK2_RDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA5.Reg)
}

// EFUSE.BLK2_RDATA6
func (o *EFUSE_Type) SetBLK2_RDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA6.Reg)
}

// EFUSE.BLK2_RDATA7
func (o *EFUSE_Type) SetBLK2_RDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA7.Reg)
}

// EFUSE.BLK3_RDATA0
func (o *EFUSE_Type) SetBLK3_RDATA0_RD_CUSTOM_MAC_CRC(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA0.Reg, volatile.LoadUint32(&o.BLK3_RDATA0.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetBLK3_RDATA0_RD_CUSTOM_MAC_CRC() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA0.Reg) & 0xff
}
func (o *EFUSE_Type) SetBLK3_RDATA0_RD_CUSTOM_MAC(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA0.Reg, volatile.LoadUint32(&o.BLK3_RDATA0.Reg)&^(0xffffff00)|value<<8)
}
func (o *EFUSE_Type) GetBLK3_RDATA0_RD_CUSTOM_MAC() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA0.Reg) & 0xffffff00) >> 8
}

// EFUSE.BLK3_RDATA1
func (o *EFUSE_Type) SetBLK3_RDATA1_RD_CUSTOM_MAC_1(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA1.Reg, volatile.LoadUint32(&o.BLK3_RDATA1.Reg)&^(0xffffff)|value)
}
func (o *EFUSE_Type) GetBLK3_RDATA1_RD_CUSTOM_MAC_1() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA1.Reg) & 0xffffff
}
func (o *EFUSE_Type) SetBLK3_RDATA1_RESERVED_3_56(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA1.Reg, volatile.LoadUint32(&o.BLK3_RDATA1.Reg)&^(0xff000000)|value<<24)
}
func (o *EFUSE_Type) GetBLK3_RDATA1_RESERVED_3_56() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA1.Reg) & 0xff000000) >> 24
}

// EFUSE.BLK3_RDATA2
func (o *EFUSE_Type) SetBLK3_RDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA2.Reg)
}

// EFUSE.BLK3_RDATA3
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC1_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0x7f)|value)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC1_TP_LOW() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0x7f
}
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC1_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0xff80)|value<<7)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC1_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0xff80) >> 7
}
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC2_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0x7f0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC2_TP_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0x7f0000) >> 16
}
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC2_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0xff800000)|value<<23)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC2_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0xff800000) >> 23
}

// EFUSE.BLK3_RDATA4
func (o *EFUSE_Type) SetBLK3_RDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA4.Reg)
}

// EFUSE.BLK3_RDATA5
func (o *EFUSE_Type) SetBLK3_RDATA5_RESERVED_3_160(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA5.Reg, volatile.LoadUint32(&o.BLK3_RDATA5.Reg)&^(0xffffff)|value)
}
func (o *EFUSE_Type) GetBLK3_RDATA5_RESERVED_3_160() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA5.Reg) & 0xffffff
}
func (o *EFUSE_Type) SetBLK3_RDATA5_RD_MAC_VERSION(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA5.Reg, volatile.LoadUint32(&o.BLK3_RDATA5.Reg)&^(0xff000000)|value<<24)
}
func (o *EFUSE_Type) GetBLK3_RDATA5_RD_MAC_VERSION() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA5.Reg) & 0xff000000) >> 24
}

// EFUSE.BLK3_RDATA6
func (o *EFUSE_Type) SetBLK3_RDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA6.Reg)
}

// EFUSE.BLK3_RDATA7
func (o *EFUSE_Type) SetBLK3_RDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA7.Reg)
}

// EFUSE.BLK1_WDATA0
func (o *EFUSE_Type) SetBLK1_WDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA0.Reg)
}

// EFUSE.BLK1_WDATA1
func (o *EFUSE_Type) SetBLK1_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA1.Reg)
}

// EFUSE.BLK1_WDATA2
func (o *EFUSE_Type) SetBLK1_WDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA2.Reg)
}

// EFUSE.BLK1_WDATA3
func (o *EFUSE_Type) SetBLK1_WDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA3.Reg)
}

// EFUSE.BLK1_WDATA4
func (o *EFUSE_Type) SetBLK1_WDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA4.Reg)
}

// EFUSE.BLK1_WDATA5
func (o *EFUSE_Type) SetBLK1_WDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA5.Reg)
}

// EFUSE.BLK1_WDATA6
func (o *EFUSE_Type) SetBLK1_WDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA6.Reg)
}

// EFUSE.BLK1_WDATA7
func (o *EFUSE_Type) SetBLK1_WDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA7.Reg)
}

// EFUSE.BLK2_WDATA0
func (o *EFUSE_Type) SetBLK2_WDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA0.Reg)
}

// EFUSE.BLK2_WDATA1
func (o *EFUSE_Type) SetBLK2_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA1.Reg)
}

// EFUSE.BLK2_WDATA2
func (o *EFUSE_Type) SetBLK2_WDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA2.Reg)
}

// EFUSE.BLK2_WDATA3
func (o *EFUSE_Type) SetBLK2_WDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA3.Reg)
}

// EFUSE.BLK2_WDATA4
func (o *EFUSE_Type) SetBLK2_WDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA4.Reg)
}

// EFUSE.BLK2_WDATA5
func (o *EFUSE_Type) SetBLK2_WDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA5.Reg)
}

// EFUSE.BLK2_WDATA6
func (o *EFUSE_Type) SetBLK2_WDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA6.Reg)
}

// EFUSE.BLK2_WDATA7
func (o *EFUSE_Type) SetBLK2_WDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA7.Reg)
}

// EFUSE.BLK3_WDATA0
func (o *EFUSE_Type) SetBLK3_WDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA0.Reg)
}

// EFUSE.BLK3_WDATA1
func (o *EFUSE_Type) SetBLK3_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA1.Reg)
}

// EFUSE.BLK3_WDATA2
func (o *EFUSE_Type) SetBLK3_WDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA2.Reg)
}

// EFUSE.BLK3_WDATA3
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC1_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0x7f)|value)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC1_TP_LOW() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0x7f
}
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC1_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0xff80)|value<<7)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC1_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0xff80) >> 7
}
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC2_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0x7f0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC2_TP_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0x7f0000) >> 16
}
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC2_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0xff800000)|value<<23)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC2_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0xff800000) >> 23
}

// EFUSE.BLK3_WDATA4
func (o *EFUSE_Type) SetBLK3_WDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA4.Reg)
}

// EFUSE.BLK3_WDATA5
func (o *EFUSE_Type) SetBLK3_WDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA5.Reg)
}

// EFUSE.BLK3_WDATA6
func (o *EFUSE_Type) SetBLK3_WDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA6.Reg)
}

// EFUSE.BLK3_WDATA7
func (o *EFUSE_Type) SetBLK3_WDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA7.Reg)
}

// EFUSE.CLK
func (o *EFUSE_Type) SetCLK_SEL0(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetCLK_SEL0() uint32 {
	return volatile.LoadUint32(&o.CLK.Reg) & 0xff
}
func (o *EFUSE_Type) SetCLK_SEL1(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0xff00)|value<<8)
}
func (o *EFUSE_Type) GetCLK_SEL1() uint32 {
	return (volatile.LoadUint32(&o.CLK.Reg) & 0xff00) >> 8
}
func (o *EFUSE_Type) SetCLK_EN(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetCLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK.Reg) & 0x10000) >> 16
}

// EFUSE.CONF
func (o *EFUSE_Type) SetCONF_OP_CODE(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0xffff)|value)
}
func (o *EFUSE_Type) GetCONF_OP_CODE() uint32 {
	return volatile.LoadUint32(&o.CONF.Reg) & 0xffff
}
func (o *EFUSE_Type) SetCONF_FORCE_NO_WR_RD_DIS(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetCONF_FORCE_NO_WR_RD_DIS() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x10000) >> 16
}

// EFUSE.STATUS
func (o *EFUSE_Type) SetSTATUS(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, value)
}
func (o *EFUSE_Type) GetSTATUS() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg)
}

// EFUSE.CMD
func (o *EFUSE_Type) SetCMD_READ_CMD(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetCMD_READ_CMD() uint32 {
	return volatile.LoadUint32(&o.CMD.Reg) & 0x1
}
func (o *EFUSE_Type) SetCMD_PGM_CMD(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetCMD_PGM_CMD() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x2) >> 1
}

// EFUSE.INT_RAW
func (o *EFUSE_Type) SetINT_RAW_READ_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_RAW_READ_DONE_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *EFUSE_Type) SetINT_RAW_PGM_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_RAW_PGM_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}

// EFUSE.INT_ST
func (o *EFUSE_Type) SetINT_ST_READ_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_ST_READ_DONE_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *EFUSE_Type) SetINT_ST_PGM_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_ST_PGM_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}

// EFUSE.INT_ENA
func (o *EFUSE_Type) SetINT_ENA_READ_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_ENA_READ_DONE_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *EFUSE_Type) SetINT_ENA_PGM_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_ENA_PGM_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}

// EFUSE.INT_CLR
func (o *EFUSE_Type) SetINT_CLR_READ_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_CLR_READ_DONE_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *EFUSE_Type) SetINT_CLR_PGM_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_CLR_PGM_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}

// EFUSE.DAC_CONF
func (o *EFUSE_Type) SetDAC_CONF_DAC_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.DAC_CONF.Reg, volatile.LoadUint32(&o.DAC_CONF.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetDAC_CONF_DAC_CLK_DIV() uint32 {
	return volatile.LoadUint32(&o.DAC_CONF.Reg) & 0xff
}
func (o *EFUSE_Type) SetDAC_CONF_DAC_CLK_PAD_SEL(value uint32) {
	volatile.StoreUint32(&o.DAC_CONF.Reg, volatile.LoadUint32(&o.DAC_CONF.Reg)&^(0x100)|value<<8)
}
func (o *EFUSE_Type) GetDAC_CONF_DAC_CLK_PAD_SEL() uint32 {
	return (volatile.LoadUint32(&o.DAC_CONF.Reg) & 0x100) >> 8
}

// EFUSE.DEC_STATUS
func (o *EFUSE_Type) SetDEC_STATUS_DEC_WARNINGS(value uint32) {
	volatile.StoreUint32(&o.DEC_STATUS.Reg, volatile.LoadUint32(&o.DEC_STATUS.Reg)&^(0xfff)|value)
}
func (o *EFUSE_Type) GetDEC_STATUS_DEC_WARNINGS() uint32 {
	return volatile.LoadUint32(&o.DEC_STATUS.Reg) & 0xfff
}

// EFUSE.DATE
func (o *EFUSE_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *EFUSE_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// Ethernet DMA configuration and control registers
type EMAC_DMA_Type struct {
	DMABUSMODE        volatile.Register32 // 0x0
	DMATXPOLLDEMAND   volatile.Register32 // 0x4
	DMARXPOLLDEMAND   volatile.Register32 // 0x8
	DMARXBASEADDR     volatile.Register32 // 0xC
	DMATXBASEADDR     volatile.Register32 // 0x10
	DMASTATUS         volatile.Register32 // 0x14
	DMAOPERATION_MODE volatile.Register32 // 0x18
	DMAIN_EN          volatile.Register32 // 0x1C
	DMAMISSEDFR       volatile.Register32 // 0x20
	DMARINTWDTIMER    volatile.Register32 // 0x24
	_                 [32]byte
	DMATXCURRDESC     volatile.Register32 // 0x48
	DMARXCURRDESC     volatile.Register32 // 0x4C
	DMATXCURRADDR_BUF volatile.Register32 // 0x50
	DMARXCURRADDR_BUF volatile.Register32 // 0x54
}

// EMAC_DMA.DMABUSMODE: Bus mode configuration
func (o *EMAC_DMA_Type) SetDMABUSMODE_SW_RST(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x1)|value)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_SW_RST() uint32 {
	return volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x1
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_DMA_ARB_SCH(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_DMA_ARB_SCH() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x2) >> 1
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_DESC_SKIP_LEN(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x7c)|value<<2)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_DESC_SKIP_LEN() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x7c) >> 2
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_ALT_DESC_SIZE(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x80)|value<<7)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_ALT_DESC_SIZE() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x80) >> 7
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_PROG_BURST_LEN(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x3f00)|value<<8)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_PROG_BURST_LEN() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x3f00) >> 8
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_PRI_RATIO(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0xc000)|value<<14)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_PRI_RATIO() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0xc000) >> 14
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_FIXED_BURST(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_FIXED_BURST() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x10000) >> 16
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_RX_DMA_PBL(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x7e0000)|value<<17)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_RX_DMA_PBL() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x7e0000) >> 17
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_USE_SEP_PBL(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x800000)|value<<23)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_USE_SEP_PBL() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x800000) >> 23
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_PBLX8_MODE(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x1000000)|value<<24)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_PBLX8_MODE() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x1000000) >> 24
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_DMAADDRALIBEA(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x2000000)|value<<25)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_DMAADDRALIBEA() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x2000000) >> 25
}
func (o *EMAC_DMA_Type) SetDMABUSMODE_DMAMIXEDBURST(value uint32) {
	volatile.StoreUint32(&o.DMABUSMODE.Reg, volatile.LoadUint32(&o.DMABUSMODE.Reg)&^(0x4000000)|value<<26)
}
func (o *EMAC_DMA_Type) GetDMABUSMODE_DMAMIXEDBURST() uint32 {
	return (volatile.LoadUint32(&o.DMABUSMODE.Reg) & 0x4000000) >> 26
}

// EMAC_DMA.DMASTATUS: State of interrupts, errors and other events
func (o *EMAC_DMA_Type) SetDMASTATUS_TRANS_INT(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x1)|value)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_TRANS_INT() uint32 {
	return volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x1
}
func (o *EMAC_DMA_Type) SetDMASTATUS_TRANS_PROC_STOP(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_TRANS_PROC_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x2) >> 1
}
func (o *EMAC_DMA_Type) SetDMASTATUS_TRANS_BUF_UNAVAIL(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_TRANS_BUF_UNAVAIL() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x4) >> 2
}
func (o *EMAC_DMA_Type) SetDMASTATUS_TRANS_JABBER_TO(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_TRANS_JABBER_TO() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x8) >> 3
}
func (o *EMAC_DMA_Type) SetDMASTATUS_RECV_OVFLOW(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x10)|value<<4)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_RECV_OVFLOW() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x10) >> 4
}
func (o *EMAC_DMA_Type) SetDMASTATUS_TRANS_UNDFLOW(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x20)|value<<5)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_TRANS_UNDFLOW() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x20) >> 5
}
func (o *EMAC_DMA_Type) SetDMASTATUS_RECV_INT(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x40)|value<<6)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_RECV_INT() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x40) >> 6
}
func (o *EMAC_DMA_Type) SetDMASTATUS_RECV_BUF_UNAVAIL(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x80)|value<<7)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_RECV_BUF_UNAVAIL() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x80) >> 7
}
func (o *EMAC_DMA_Type) SetDMASTATUS_RECV_PROC_STOP(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x100)|value<<8)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_RECV_PROC_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x100) >> 8
}
func (o *EMAC_DMA_Type) SetDMASTATUS_RECV_WDT_TO(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x200)|value<<9)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_RECV_WDT_TO() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x200) >> 9
}
func (o *EMAC_DMA_Type) SetDMASTATUS_EARLY_TRANS_INT(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x400)|value<<10)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_EARLY_TRANS_INT() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x400) >> 10
}
func (o *EMAC_DMA_Type) SetDMASTATUS_FATAL_BUS_ERR_INT(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x2000)|value<<13)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_FATAL_BUS_ERR_INT() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x2000) >> 13
}
func (o *EMAC_DMA_Type) SetDMASTATUS_EARLY_RECV_INT(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x4000)|value<<14)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_EARLY_RECV_INT() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x4000) >> 14
}
func (o *EMAC_DMA_Type) SetDMASTATUS_ABN_INT_SUMM(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x8000)|value<<15)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_ABN_INT_SUMM() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x8000) >> 15
}
func (o *EMAC_DMA_Type) SetDMASTATUS_NORM_INT_SUMM(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_NORM_INT_SUMM() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x10000) >> 16
}
func (o *EMAC_DMA_Type) SetDMASTATUS_RECV_PROC_STATE(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0xe0000)|value<<17)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_RECV_PROC_STATE() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0xe0000) >> 17
}
func (o *EMAC_DMA_Type) SetDMASTATUS_TRANS_PROC_STATE(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x700000)|value<<20)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_TRANS_PROC_STATE() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x700000) >> 20
}
func (o *EMAC_DMA_Type) SetDMASTATUS_ERROR_BITS(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x3800000)|value<<23)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_ERROR_BITS() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x3800000) >> 23
}
func (o *EMAC_DMA_Type) SetDMASTATUS_PMT_INT(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_PMT_INT() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x10000000) >> 28
}
func (o *EMAC_DMA_Type) SetDMASTATUS_TS_TRI_INT(value uint32) {
	volatile.StoreUint32(&o.DMASTATUS.Reg, volatile.LoadUint32(&o.DMASTATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *EMAC_DMA_Type) GetDMASTATUS_TS_TRI_INT() uint32 {
	return (volatile.LoadUint32(&o.DMASTATUS.Reg) & 0x20000000) >> 29
}

// EMAC_DMA.DMAOPERATION_MODE: Receive and Transmit operating modes and command
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_START_STOP_RX(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_START_STOP_RX() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x2) >> 1
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_OPT_SECOND_FRAME(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_OPT_SECOND_FRAME() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x4) >> 2
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_RX_THRESH_CTRL(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x18)|value<<3)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_RX_THRESH_CTRL() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x18) >> 3
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_DROP_GFRM(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x20)|value<<5)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_DROP_GFRM() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x20) >> 5
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_FWD_UNDER_GF(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x40)|value<<6)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_FWD_UNDER_GF() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x40) >> 6
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_FWD_ERR_FRAME(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x80)|value<<7)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_FWD_ERR_FRAME() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x80) >> 7
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_START_STOP_TRANSMISSION_COMMAND(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x2000)|value<<13)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_START_STOP_TRANSMISSION_COMMAND() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x2000) >> 13
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_TX_THRESH_CTRL(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x1c000)|value<<14)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_TX_THRESH_CTRL() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x1c000) >> 14
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_FLUSH_TX_FIFO(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x100000)|value<<20)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_FLUSH_TX_FIFO() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x100000) >> 20
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_TX_STR_FWD(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x200000)|value<<21)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_TX_STR_FWD() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x200000) >> 21
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_DIS_FLUSH_RECV_FRAMES(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x1000000)|value<<24)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_DIS_FLUSH_RECV_FRAMES() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x1000000) >> 24
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_RX_STORE_FORWARD(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x2000000)|value<<25)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_RX_STORE_FORWARD() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x2000000) >> 25
}
func (o *EMAC_DMA_Type) SetDMAOPERATION_MODE_DIS_DROP_TCPIP_ERR_FRAM(value uint32) {
	volatile.StoreUint32(&o.DMAOPERATION_MODE.Reg, volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg)&^(0x4000000)|value<<26)
}
func (o *EMAC_DMA_Type) GetDMAOPERATION_MODE_DIS_DROP_TCPIP_ERR_FRAM() uint32 {
	return (volatile.LoadUint32(&o.DMAOPERATION_MODE.Reg) & 0x4000000) >> 26
}

// EMAC_DMA.DMAIN_EN
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_TIE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x1)|value)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_TIE() uint32 {
	return volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x1
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_TSE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_TSE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x2) >> 1
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_TBUE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_TBUE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x4) >> 2
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_TJTE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_TJTE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x8) >> 3
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_OIE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x10)|value<<4)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_OIE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x10) >> 4
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_UIE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x20)|value<<5)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_UIE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x20) >> 5
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_RIE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x40)|value<<6)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_RIE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x40) >> 6
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_RBUE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x80)|value<<7)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_RBUE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x80) >> 7
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_RSE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x100)|value<<8)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_RSE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x100) >> 8
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_RWTE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x200)|value<<9)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_RWTE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x200) >> 9
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_ETIE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x400)|value<<10)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_ETIE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x400) >> 10
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_FBEE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x2000)|value<<13)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_FBEE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x2000) >> 13
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_ERIE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x4000)|value<<14)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_ERIE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x4000) >> 14
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_AISE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x8000)|value<<15)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_AISE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x8000) >> 15
}
func (o *EMAC_DMA_Type) SetDMAIN_EN_DMAIN_NISE(value uint32) {
	volatile.StoreUint32(&o.DMAIN_EN.Reg, volatile.LoadUint32(&o.DMAIN_EN.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_DMA_Type) GetDMAIN_EN_DMAIN_NISE() uint32 {
	return (volatile.LoadUint32(&o.DMAIN_EN.Reg) & 0x10000) >> 16
}

// EMAC_DMA.DMAMISSEDFR: Missed Frame and Buffer Overflow Counter Register
func (o *EMAC_DMA_Type) SetDMAMISSEDFR_MISSED_FC(value uint32) {
	volatile.StoreUint32(&o.DMAMISSEDFR.Reg, volatile.LoadUint32(&o.DMAMISSEDFR.Reg)&^(0xffff)|value)
}
func (o *EMAC_DMA_Type) GetDMAMISSEDFR_MISSED_FC() uint32 {
	return volatile.LoadUint32(&o.DMAMISSEDFR.Reg) & 0xffff
}
func (o *EMAC_DMA_Type) SetDMAMISSEDFR_OVERFLOW_BMFC(value uint32) {
	volatile.StoreUint32(&o.DMAMISSEDFR.Reg, volatile.LoadUint32(&o.DMAMISSEDFR.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_DMA_Type) GetDMAMISSEDFR_OVERFLOW_BMFC() uint32 {
	return (volatile.LoadUint32(&o.DMAMISSEDFR.Reg) & 0x10000) >> 16
}
func (o *EMAC_DMA_Type) SetDMAMISSEDFR_OVERFLOW_FC(value uint32) {
	volatile.StoreUint32(&o.DMAMISSEDFR.Reg, volatile.LoadUint32(&o.DMAMISSEDFR.Reg)&^(0xffe0000)|value<<17)
}
func (o *EMAC_DMA_Type) GetDMAMISSEDFR_OVERFLOW_FC() uint32 {
	return (volatile.LoadUint32(&o.DMAMISSEDFR.Reg) & 0xffe0000) >> 17
}
func (o *EMAC_DMA_Type) SetDMAMISSEDFR_OVERFLOW_BFOC(value uint32) {
	volatile.StoreUint32(&o.DMAMISSEDFR.Reg, volatile.LoadUint32(&o.DMAMISSEDFR.Reg)&^(0x10000000)|value<<28)
}
func (o *EMAC_DMA_Type) GetDMAMISSEDFR_OVERFLOW_BFOC() uint32 {
	return (volatile.LoadUint32(&o.DMAMISSEDFR.Reg) & 0x10000000) >> 28
}

// EMAC_DMA.DMARINTWDTIMER: Watchdog timer count on receive
func (o *EMAC_DMA_Type) SetDMARINTWDTIMER_RIWTC(value uint32) {
	volatile.StoreUint32(&o.DMARINTWDTIMER.Reg, volatile.LoadUint32(&o.DMARINTWDTIMER.Reg)&^(0xff)|value)
}
func (o *EMAC_DMA_Type) GetDMARINTWDTIMER_RIWTC() uint32 {
	return volatile.LoadUint32(&o.DMARINTWDTIMER.Reg) & 0xff
}

// Ethernet Clock, PHY type, and SRAM configuration registers
type EMAC_EXT_Type struct {
	EX_CLKOUT_CONF volatile.Register32 // 0x0
	EX_OSCCLK_CONF volatile.Register32 // 0x4
	EX_CLK_CTRL    volatile.Register32 // 0x8
	EX_PHYINF_CONF volatile.Register32 // 0xC
	PD_SEL         volatile.Register32 // 0x10
	_              [232]byte
	EX_DATE        volatile.Register32 // 0xFC
}

// EMAC_EXT.EX_CLKOUT_CONF: RMII clock divider setting
func (o *EMAC_EXT_Type) SetEX_CLKOUT_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.EX_CLKOUT_CONF.Reg, volatile.LoadUint32(&o.EX_CLKOUT_CONF.Reg)&^(0xf)|value)
}
func (o *EMAC_EXT_Type) GetEX_CLKOUT_CONF_DIV_NUM() uint32 {
	return volatile.LoadUint32(&o.EX_CLKOUT_CONF.Reg) & 0xf
}
func (o *EMAC_EXT_Type) SetEX_CLKOUT_CONF_H_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.EX_CLKOUT_CONF.Reg, volatile.LoadUint32(&o.EX_CLKOUT_CONF.Reg)&^(0xf0)|value<<4)
}
func (o *EMAC_EXT_Type) GetEX_CLKOUT_CONF_H_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.EX_CLKOUT_CONF.Reg) & 0xf0) >> 4
}
func (o *EMAC_EXT_Type) SetEX_CLKOUT_CONF_DLY_NUM(value uint32) {
	volatile.StoreUint32(&o.EX_CLKOUT_CONF.Reg, volatile.LoadUint32(&o.EX_CLKOUT_CONF.Reg)&^(0x300)|value<<8)
}
func (o *EMAC_EXT_Type) GetEX_CLKOUT_CONF_DLY_NUM() uint32 {
	return (volatile.LoadUint32(&o.EX_CLKOUT_CONF.Reg) & 0x300) >> 8
}

// EMAC_EXT.EX_OSCCLK_CONF: RMII clock half and whole divider settings
func (o *EMAC_EXT_Type) SetEX_OSCCLK_CONF_DIV_NUM_10M(value uint32) {
	volatile.StoreUint32(&o.EX_OSCCLK_CONF.Reg, volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg)&^(0x3f)|value)
}
func (o *EMAC_EXT_Type) GetEX_OSCCLK_CONF_DIV_NUM_10M() uint32 {
	return volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg) & 0x3f
}
func (o *EMAC_EXT_Type) SetEX_OSCCLK_CONF_H_DIV_NUM_10M(value uint32) {
	volatile.StoreUint32(&o.EX_OSCCLK_CONF.Reg, volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg)&^(0xfc0)|value<<6)
}
func (o *EMAC_EXT_Type) GetEX_OSCCLK_CONF_H_DIV_NUM_10M() uint32 {
	return (volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg) & 0xfc0) >> 6
}
func (o *EMAC_EXT_Type) SetEX_OSCCLK_CONF_DIV_NUM_100M(value uint32) {
	volatile.StoreUint32(&o.EX_OSCCLK_CONF.Reg, volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg)&^(0x3f000)|value<<12)
}
func (o *EMAC_EXT_Type) GetEX_OSCCLK_CONF_DIV_NUM_100M() uint32 {
	return (volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg) & 0x3f000) >> 12
}
func (o *EMAC_EXT_Type) SetEX_OSCCLK_CONF_H_DIV_NUM_100M(value uint32) {
	volatile.StoreUint32(&o.EX_OSCCLK_CONF.Reg, volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg)&^(0xfc0000)|value<<18)
}
func (o *EMAC_EXT_Type) GetEX_OSCCLK_CONF_H_DIV_NUM_100M() uint32 {
	return (volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg) & 0xfc0000) >> 18
}
func (o *EMAC_EXT_Type) SetEX_OSCCLK_CONF_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.EX_OSCCLK_CONF.Reg, volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *EMAC_EXT_Type) GetEX_OSCCLK_CONF_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.EX_OSCCLK_CONF.Reg) & 0x1000000) >> 24
}

// EMAC_EXT.EX_CLK_CTRL: Clock enable and external/internal clock selection
func (o *EMAC_EXT_Type) SetEX_CLK_CTRL_EXT_EN(value uint32) {
	volatile.StoreUint32(&o.EX_CLK_CTRL.Reg, volatile.LoadUint32(&o.EX_CLK_CTRL.Reg)&^(0x1)|value)
}
func (o *EMAC_EXT_Type) GetEX_CLK_CTRL_EXT_EN() uint32 {
	return volatile.LoadUint32(&o.EX_CLK_CTRL.Reg) & 0x1
}
func (o *EMAC_EXT_Type) SetEX_CLK_CTRL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.EX_CLK_CTRL.Reg, volatile.LoadUint32(&o.EX_CLK_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_EXT_Type) GetEX_CLK_CTRL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_CLK_CTRL.Reg) & 0x2) >> 1
}
func (o *EMAC_EXT_Type) SetEX_CLK_CTRL_RX_125_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.EX_CLK_CTRL.Reg, volatile.LoadUint32(&o.EX_CLK_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_EXT_Type) GetEX_CLK_CTRL_RX_125_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_CLK_CTRL.Reg) & 0x4) >> 2
}
func (o *EMAC_EXT_Type) SetEX_CLK_CTRL_MII_CLK_TX_EN(value uint32) {
	volatile.StoreUint32(&o.EX_CLK_CTRL.Reg, volatile.LoadUint32(&o.EX_CLK_CTRL.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_EXT_Type) GetEX_CLK_CTRL_MII_CLK_TX_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_CLK_CTRL.Reg) & 0x8) >> 3
}
func (o *EMAC_EXT_Type) SetEX_CLK_CTRL_MII_CLK_RX_EN(value uint32) {
	volatile.StoreUint32(&o.EX_CLK_CTRL.Reg, volatile.LoadUint32(&o.EX_CLK_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *EMAC_EXT_Type) GetEX_CLK_CTRL_MII_CLK_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_CLK_CTRL.Reg) & 0x10) >> 4
}
func (o *EMAC_EXT_Type) SetEX_CLK_CTRL_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.EX_CLK_CTRL.Reg, volatile.LoadUint32(&o.EX_CLK_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *EMAC_EXT_Type) GetEX_CLK_CTRL_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_CLK_CTRL.Reg) & 0x20) >> 5
}

// EMAC_EXT.EX_PHYINF_CONF: Selection of MII/RMII phy
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_INT_REVMII_RX_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x1)|value)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_INT_REVMII_RX_CLK_SEL() uint32 {
	return volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x1
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_EXT_REVMII_RX_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_EXT_REVMII_RX_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x2) >> 1
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_SBD_FLOWCTRL(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_SBD_FLOWCTRL() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x4) >> 2
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_CORE_PHY_ADDR(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0xf8)|value<<3)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_CORE_PHY_ADDR() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0xf8) >> 3
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_REVMII_PHY_ADDR(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x1f00)|value<<8)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_REVMII_PHY_ADDR() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x1f00) >> 8
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_PHY_INTF_SEL(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0xe000)|value<<13)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_PHY_INTF_SEL() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0xe000) >> 13
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_SS_MODE(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_SS_MODE() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x10000) >> 16
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_SBD_CLK_GATING_EN(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x20000)|value<<17)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_SBD_CLK_GATING_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x20000) >> 17
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_PMT_CTRL_EN(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x40000)|value<<18)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_PMT_CTRL_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x40000) >> 18
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_SCR_SMI_DLY_RX_SYNC(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x80000)|value<<19)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_SCR_SMI_DLY_RX_SYNC() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x80000) >> 19
}
func (o *EMAC_EXT_Type) SetEX_PHYINF_CONF_TX_ERR_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.EX_PHYINF_CONF.Reg, volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *EMAC_EXT_Type) GetEX_PHYINF_CONF_TX_ERR_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.EX_PHYINF_CONF.Reg) & 0x100000) >> 20
}

// EMAC_EXT.PD_SEL: Ethernet RAM power-down enable
func (o *EMAC_EXT_Type) SetPD_SEL_RAM_PD_EN(value uint32) {
	volatile.StoreUint32(&o.PD_SEL.Reg, volatile.LoadUint32(&o.PD_SEL.Reg)&^(0x3)|value)
}
func (o *EMAC_EXT_Type) GetPD_SEL_RAM_PD_EN() uint32 {
	return volatile.LoadUint32(&o.PD_SEL.Reg) & 0x3
}

// Ethernet MAC configuration and control registers
type EMAC_MAC_Type struct {
	EMACCONFIG           volatile.Register32 // 0x0
	EMACFF               volatile.Register32 // 0x4
	_                    [8]byte
	EMACGMIIADDR         volatile.Register32 // 0x10
	EMACMIIDATA          volatile.Register32 // 0x14
	EMACFC               volatile.Register32 // 0x18
	_                    [8]byte
	EMACDEBUG            volatile.Register32 // 0x24
	PMT_RWUFFR           volatile.Register32 // 0x28
	PMT_CSR              volatile.Register32 // 0x2C
	EMACLPI_CRS          volatile.Register32 // 0x30
	EMACLPITIMERSCONTROL volatile.Register32 // 0x34
	EMACINTS             volatile.Register32 // 0x38
	EMACINTMASK          volatile.Register32 // 0x3C
	EMACADDR0HIGH        volatile.Register32 // 0x40
	EMACADDR0LOW         volatile.Register32 // 0x44
	EMACADDR1HIGH        volatile.Register32 // 0x48
	EMACADDR1LOW         volatile.Register32 // 0x4C
	EMACADDR2HIGH        volatile.Register32 // 0x50
	EMACADDR2LOW         volatile.Register32 // 0x54
	EMACADDR3HIGH        volatile.Register32 // 0x58
	EMACADDR3LOW         volatile.Register32 // 0x5C
	EMACADDR4HIGH        volatile.Register32 // 0x60
	EMACADDR4LOW         volatile.Register32 // 0x64
	EMACADDR5HIGH        volatile.Register32 // 0x68
	EMACADDR5LOW         volatile.Register32 // 0x6C
	EMACADDR6HIGH        volatile.Register32 // 0x70
	EMACADDR6LOW         volatile.Register32 // 0x74
	EMACADDR7HIGH        volatile.Register32 // 0x78
	EMACADDR7LOW         volatile.Register32 // 0x7C
	_                    [88]byte
	EMACCSTATUS          volatile.Register32 // 0xD8
	EMACWDOGTO           volatile.Register32 // 0xDC
}

// EMAC_MAC.EMACCONFIG: MAC configuration
func (o *EMAC_MAC_Type) SetEMACCONFIG_PLTF(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x3)|value)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_PLTF() uint32 {
	return volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x3
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_RX(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_RX() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x4) >> 2
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_TX(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_TX() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x8) >> 3
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_DEFERRALCHECK(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x10)|value<<4)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_DEFERRALCHECK() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x10) >> 4
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_BACKOFFLIMIT(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x60)|value<<5)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_BACKOFFLIMIT() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x60) >> 5
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_PADCRCSTRIP(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x80)|value<<7)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_PADCRCSTRIP() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x80) >> 7
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_RETRY(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x200)|value<<9)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_RETRY() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x200) >> 9
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_RXIPCOFFLOAD(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x400)|value<<10)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_RXIPCOFFLOAD() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x400) >> 10
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_DUPLEX(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x800)|value<<11)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_DUPLEX() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x800) >> 11
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_LOOPBACK(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_LOOPBACK() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x1000) >> 12
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_RXOWN(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x2000)|value<<13)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_RXOWN() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x2000) >> 13
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_FESPEED(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x4000)|value<<14)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_FESPEED() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x4000) >> 14
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_MII(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x8000)|value<<15)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_MII() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x8000) >> 15
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_DISABLECRS(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_DISABLECRS() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x10000) >> 16
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_INTERFRAMEGAP(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0xe0000)|value<<17)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_INTERFRAMEGAP() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0xe0000) >> 17
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_JUMBOFRAME(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x100000)|value<<20)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_JUMBOFRAME() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x100000) >> 20
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_JABBER(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x400000)|value<<22)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_JABBER() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x400000) >> 22
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_WATCHDOG(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x800000)|value<<23)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_WATCHDOG() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x800000) >> 23
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_ASS2KP(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x8000000)|value<<27)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_ASS2KP() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x8000000) >> 27
}
func (o *EMAC_MAC_Type) SetEMACCONFIG_SAIRC(value uint32) {
	volatile.StoreUint32(&o.EMACCONFIG.Reg, volatile.LoadUint32(&o.EMACCONFIG.Reg)&^(0x70000000)|value<<28)
}
func (o *EMAC_MAC_Type) GetEMACCONFIG_SAIRC() uint32 {
	return (volatile.LoadUint32(&o.EMACCONFIG.Reg) & 0x70000000) >> 28
}

// EMAC_MAC.EMACFF: Frame filter settings
func (o *EMAC_MAC_Type) SetEMACFF_PMODE(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0x1)|value)
}
func (o *EMAC_MAC_Type) GetEMACFF_PMODE() uint32 {
	return volatile.LoadUint32(&o.EMACFF.Reg) & 0x1
}
func (o *EMAC_MAC_Type) SetEMACFF_DAIF(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_MAC_Type) GetEMACFF_DAIF() uint32 {
	return (volatile.LoadUint32(&o.EMACFF.Reg) & 0x8) >> 3
}
func (o *EMAC_MAC_Type) SetEMACFF_PAM(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0x10)|value<<4)
}
func (o *EMAC_MAC_Type) GetEMACFF_PAM() uint32 {
	return (volatile.LoadUint32(&o.EMACFF.Reg) & 0x10) >> 4
}
func (o *EMAC_MAC_Type) SetEMACFF_DBF(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0x20)|value<<5)
}
func (o *EMAC_MAC_Type) GetEMACFF_DBF() uint32 {
	return (volatile.LoadUint32(&o.EMACFF.Reg) & 0x20) >> 5
}
func (o *EMAC_MAC_Type) SetEMACFF_PCF(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0xc0)|value<<6)
}
func (o *EMAC_MAC_Type) GetEMACFF_PCF() uint32 {
	return (volatile.LoadUint32(&o.EMACFF.Reg) & 0xc0) >> 6
}
func (o *EMAC_MAC_Type) SetEMACFF_SAIF(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0x100)|value<<8)
}
func (o *EMAC_MAC_Type) GetEMACFF_SAIF() uint32 {
	return (volatile.LoadUint32(&o.EMACFF.Reg) & 0x100) >> 8
}
func (o *EMAC_MAC_Type) SetEMACFF_SAFE(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0x200)|value<<9)
}
func (o *EMAC_MAC_Type) GetEMACFF_SAFE() uint32 {
	return (volatile.LoadUint32(&o.EMACFF.Reg) & 0x200) >> 9
}
func (o *EMAC_MAC_Type) SetEMACFF_RECEIVE_ALL(value uint32) {
	volatile.StoreUint32(&o.EMACFF.Reg, volatile.LoadUint32(&o.EMACFF.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACFF_RECEIVE_ALL() uint32 {
	return (volatile.LoadUint32(&o.EMACFF.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACGMIIADDR: PHY configuration access
func (o *EMAC_MAC_Type) SetEMACGMIIADDR_MIIBUSY(value uint32) {
	volatile.StoreUint32(&o.EMACGMIIADDR.Reg, volatile.LoadUint32(&o.EMACGMIIADDR.Reg)&^(0x1)|value)
}
func (o *EMAC_MAC_Type) GetEMACGMIIADDR_MIIBUSY() uint32 {
	return volatile.LoadUint32(&o.EMACGMIIADDR.Reg) & 0x1
}
func (o *EMAC_MAC_Type) SetEMACGMIIADDR_MIIWRITE(value uint32) {
	volatile.StoreUint32(&o.EMACGMIIADDR.Reg, volatile.LoadUint32(&o.EMACGMIIADDR.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_MAC_Type) GetEMACGMIIADDR_MIIWRITE() uint32 {
	return (volatile.LoadUint32(&o.EMACGMIIADDR.Reg) & 0x2) >> 1
}
func (o *EMAC_MAC_Type) SetEMACGMIIADDR_MIICSRCLK(value uint32) {
	volatile.StoreUint32(&o.EMACGMIIADDR.Reg, volatile.LoadUint32(&o.EMACGMIIADDR.Reg)&^(0x3c)|value<<2)
}
func (o *EMAC_MAC_Type) GetEMACGMIIADDR_MIICSRCLK() uint32 {
	return (volatile.LoadUint32(&o.EMACGMIIADDR.Reg) & 0x3c) >> 2
}
func (o *EMAC_MAC_Type) SetEMACGMIIADDR_MIIREG(value uint32) {
	volatile.StoreUint32(&o.EMACGMIIADDR.Reg, volatile.LoadUint32(&o.EMACGMIIADDR.Reg)&^(0x7c0)|value<<6)
}
func (o *EMAC_MAC_Type) GetEMACGMIIADDR_MIIREG() uint32 {
	return (volatile.LoadUint32(&o.EMACGMIIADDR.Reg) & 0x7c0) >> 6
}
func (o *EMAC_MAC_Type) SetEMACGMIIADDR_MIIDEV(value uint32) {
	volatile.StoreUint32(&o.EMACGMIIADDR.Reg, volatile.LoadUint32(&o.EMACGMIIADDR.Reg)&^(0xf800)|value<<11)
}
func (o *EMAC_MAC_Type) GetEMACGMIIADDR_MIIDEV() uint32 {
	return (volatile.LoadUint32(&o.EMACGMIIADDR.Reg) & 0xf800) >> 11
}

// EMAC_MAC.EMACMIIDATA: PHY data read write
func (o *EMAC_MAC_Type) SetEMACMIIDATA_MII_DATA(value uint32) {
	volatile.StoreUint32(&o.EMACMIIDATA.Reg, volatile.LoadUint32(&o.EMACMIIDATA.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACMIIDATA_MII_DATA() uint32 {
	return volatile.LoadUint32(&o.EMACMIIDATA.Reg) & 0xffff
}

// EMAC_MAC.EMACFC: Frame flow control
func (o *EMAC_MAC_Type) SetEMACFC_FCBBA(value uint32) {
	volatile.StoreUint32(&o.EMACFC.Reg, volatile.LoadUint32(&o.EMACFC.Reg)&^(0x1)|value)
}
func (o *EMAC_MAC_Type) GetEMACFC_FCBBA() uint32 {
	return volatile.LoadUint32(&o.EMACFC.Reg) & 0x1
}
func (o *EMAC_MAC_Type) SetEMACFC_TFCE(value uint32) {
	volatile.StoreUint32(&o.EMACFC.Reg, volatile.LoadUint32(&o.EMACFC.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_MAC_Type) GetEMACFC_TFCE() uint32 {
	return (volatile.LoadUint32(&o.EMACFC.Reg) & 0x2) >> 1
}
func (o *EMAC_MAC_Type) SetEMACFC_RFCE(value uint32) {
	volatile.StoreUint32(&o.EMACFC.Reg, volatile.LoadUint32(&o.EMACFC.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_MAC_Type) GetEMACFC_RFCE() uint32 {
	return (volatile.LoadUint32(&o.EMACFC.Reg) & 0x4) >> 2
}
func (o *EMAC_MAC_Type) SetEMACFC_UPFD(value uint32) {
	volatile.StoreUint32(&o.EMACFC.Reg, volatile.LoadUint32(&o.EMACFC.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_MAC_Type) GetEMACFC_UPFD() uint32 {
	return (volatile.LoadUint32(&o.EMACFC.Reg) & 0x8) >> 3
}
func (o *EMAC_MAC_Type) SetEMACFC_PLT(value uint32) {
	volatile.StoreUint32(&o.EMACFC.Reg, volatile.LoadUint32(&o.EMACFC.Reg)&^(0x30)|value<<4)
}
func (o *EMAC_MAC_Type) GetEMACFC_PLT() uint32 {
	return (volatile.LoadUint32(&o.EMACFC.Reg) & 0x30) >> 4
}
func (o *EMAC_MAC_Type) SetEMACFC_DZPQ(value uint32) {
	volatile.StoreUint32(&o.EMACFC.Reg, volatile.LoadUint32(&o.EMACFC.Reg)&^(0x80)|value<<7)
}
func (o *EMAC_MAC_Type) GetEMACFC_DZPQ() uint32 {
	return (volatile.LoadUint32(&o.EMACFC.Reg) & 0x80) >> 7
}
func (o *EMAC_MAC_Type) SetEMACFC_PAUSE_TIME(value uint32) {
	volatile.StoreUint32(&o.EMACFC.Reg, volatile.LoadUint32(&o.EMACFC.Reg)&^(0xffff0000)|value<<16)
}
func (o *EMAC_MAC_Type) GetEMACFC_PAUSE_TIME() uint32 {
	return (volatile.LoadUint32(&o.EMACFC.Reg) & 0xffff0000) >> 16
}

// EMAC_MAC.EMACDEBUG: Status debugging bits
func (o *EMAC_MAC_Type) SetEMACDEBUG_MACRPES(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x1)|value)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MACRPES() uint32 {
	return volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x1
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MACRFFCS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x6)|value<<1)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MACRFFCS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x6) >> 1
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MTLRFWCAS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x10)|value<<4)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MTLRFWCAS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x10) >> 4
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MTLRFRCS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x60)|value<<5)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MTLRFRCS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x60) >> 5
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MTLRFFLS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x300)|value<<8)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MTLRFFLS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x300) >> 8
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MACTPES(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MACTPES() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x10000) >> 16
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MACTFCS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x60000)|value<<17)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MACTFCS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x60000) >> 17
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MACTP(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x80000)|value<<19)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MACTP() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x80000) >> 19
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MTLTFRCS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x300000)|value<<20)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MTLTFRCS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x300000) >> 20
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MTLTFWCS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x400000)|value<<22)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MTLTFWCS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x400000) >> 22
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MTLTFNES(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x1000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MTLTFNES() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x1000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACDEBUG_MTLTSFFS(value uint32) {
	volatile.StoreUint32(&o.EMACDEBUG.Reg, volatile.LoadUint32(&o.EMACDEBUG.Reg)&^(0x2000000)|value<<25)
}
func (o *EMAC_MAC_Type) GetEMACDEBUG_MTLTSFFS() uint32 {
	return (volatile.LoadUint32(&o.EMACDEBUG.Reg) & 0x2000000) >> 25
}

// EMAC_MAC.PMT_CSR: PMT Control and Status
func (o *EMAC_MAC_Type) SetPMT_CSR_PWRDWN(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x1)|value)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_PWRDWN() uint32 {
	return volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x1
}
func (o *EMAC_MAC_Type) SetPMT_CSR_MGKPKTEN(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_MGKPKTEN() uint32 {
	return (volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x2) >> 1
}
func (o *EMAC_MAC_Type) SetPMT_CSR_RWKPKTEN(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_RWKPKTEN() uint32 {
	return (volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x4) >> 2
}
func (o *EMAC_MAC_Type) SetPMT_CSR_MGKPRCVD(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x20)|value<<5)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_MGKPRCVD() uint32 {
	return (volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x20) >> 5
}
func (o *EMAC_MAC_Type) SetPMT_CSR_RWKPRCVD(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x40)|value<<6)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_RWKPRCVD() uint32 {
	return (volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x40) >> 6
}
func (o *EMAC_MAC_Type) SetPMT_CSR_GLBLUCAST(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x200)|value<<9)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_GLBLUCAST() uint32 {
	return (volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x200) >> 9
}
func (o *EMAC_MAC_Type) SetPMT_CSR_RWKPTR(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x1f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_RWKPTR() uint32 {
	return (volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x1f000000) >> 24
}
func (o *EMAC_MAC_Type) SetPMT_CSR_RWKFILTRST(value uint32) {
	volatile.StoreUint32(&o.PMT_CSR.Reg, volatile.LoadUint32(&o.PMT_CSR.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetPMT_CSR_RWKFILTRST() uint32 {
	return (volatile.LoadUint32(&o.PMT_CSR.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACLPI_CRS: LPI Control and Status
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_TLPIEN(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x1)|value)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_TLPIEN() uint32 {
	return volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x1
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_TLPIEX(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x2)|value<<1)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_TLPIEX() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x2) >> 1
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_RLPIEN(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x4)|value<<2)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_RLPIEN() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x4) >> 2
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_RLPIEX(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_RLPIEX() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x8) >> 3
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_TLPIST(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x100)|value<<8)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_TLPIST() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x100) >> 8
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_RLPIST(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x200)|value<<9)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_RLPIST() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x200) >> 9
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_LPIEN(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_LPIEN() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x10000) >> 16
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_PLS(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x20000)|value<<17)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_PLS() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x20000) >> 17
}
func (o *EMAC_MAC_Type) SetEMACLPI_CRS_LPITXA(value uint32) {
	volatile.StoreUint32(&o.EMACLPI_CRS.Reg, volatile.LoadUint32(&o.EMACLPI_CRS.Reg)&^(0x80000)|value<<19)
}
func (o *EMAC_MAC_Type) GetEMACLPI_CRS_LPITXA() uint32 {
	return (volatile.LoadUint32(&o.EMACLPI_CRS.Reg) & 0x80000) >> 19
}

// EMAC_MAC.EMACLPITIMERSCONTROL: LPI Timers Control
func (o *EMAC_MAC_Type) SetEMACLPITIMERSCONTROL_LPI_TW_TIMER(value uint32) {
	volatile.StoreUint32(&o.EMACLPITIMERSCONTROL.Reg, volatile.LoadUint32(&o.EMACLPITIMERSCONTROL.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACLPITIMERSCONTROL_LPI_TW_TIMER() uint32 {
	return volatile.LoadUint32(&o.EMACLPITIMERSCONTROL.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACLPITIMERSCONTROL_LPI_LS_TIMER(value uint32) {
	volatile.StoreUint32(&o.EMACLPITIMERSCONTROL.Reg, volatile.LoadUint32(&o.EMACLPITIMERSCONTROL.Reg)&^(0x3ff0000)|value<<16)
}
func (o *EMAC_MAC_Type) GetEMACLPITIMERSCONTROL_LPI_LS_TIMER() uint32 {
	return (volatile.LoadUint32(&o.EMACLPITIMERSCONTROL.Reg) & 0x3ff0000) >> 16
}

// EMAC_MAC.EMACINTS: Interrupt status
func (o *EMAC_MAC_Type) SetEMACINTS_PMTINTS(value uint32) {
	volatile.StoreUint32(&o.EMACINTS.Reg, volatile.LoadUint32(&o.EMACINTS.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_MAC_Type) GetEMACINTS_PMTINTS() uint32 {
	return (volatile.LoadUint32(&o.EMACINTS.Reg) & 0x8) >> 3
}
func (o *EMAC_MAC_Type) SetEMACINTS_LPIIS(value uint32) {
	volatile.StoreUint32(&o.EMACINTS.Reg, volatile.LoadUint32(&o.EMACINTS.Reg)&^(0x400)|value<<10)
}
func (o *EMAC_MAC_Type) GetEMACINTS_LPIIS() uint32 {
	return (volatile.LoadUint32(&o.EMACINTS.Reg) & 0x400) >> 10
}

// EMAC_MAC.EMACINTMASK: Interrupt mask
func (o *EMAC_MAC_Type) SetEMACINTMASK_PMTINTMASK(value uint32) {
	volatile.StoreUint32(&o.EMACINTMASK.Reg, volatile.LoadUint32(&o.EMACINTMASK.Reg)&^(0x8)|value<<3)
}
func (o *EMAC_MAC_Type) GetEMACINTMASK_PMTINTMASK() uint32 {
	return (volatile.LoadUint32(&o.EMACINTMASK.Reg) & 0x8) >> 3
}
func (o *EMAC_MAC_Type) SetEMACINTMASK_LPIINTMASK(value uint32) {
	volatile.StoreUint32(&o.EMACINTMASK.Reg, volatile.LoadUint32(&o.EMACINTMASK.Reg)&^(0x400)|value<<10)
}
func (o *EMAC_MAC_Type) GetEMACINTMASK_LPIINTMASK() uint32 {
	return (volatile.LoadUint32(&o.EMACINTMASK.Reg) & 0x400) >> 10
}

// EMAC_MAC.EMACADDR0HIGH: Upper 16 bits of the first 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR0HIGH_ADDRESS0_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR0HIGH.Reg, volatile.LoadUint32(&o.EMACADDR0HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR0HIGH_ADDRESS0_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR0HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR0HIGH_ADDRESS_ENABLE0(value uint32) {
	volatile.StoreUint32(&o.EMACADDR0HIGH.Reg, volatile.LoadUint32(&o.EMACADDR0HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR0HIGH_ADDRESS_ENABLE0() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR0HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACADDR1HIGH: Upper 16 bits of the second 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR1HIGH_MAC_ADDRESS1_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR1HIGH.Reg, volatile.LoadUint32(&o.EMACADDR1HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR1HIGH_MAC_ADDRESS1_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR1HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR1HIGH_MASK_BYTE_CONTROL(value uint32) {
	volatile.StoreUint32(&o.EMACADDR1HIGH.Reg, volatile.LoadUint32(&o.EMACADDR1HIGH.Reg)&^(0x3f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACADDR1HIGH_MASK_BYTE_CONTROL() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR1HIGH.Reg) & 0x3f000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACADDR1HIGH_SOURCE_ADDRESS(value uint32) {
	volatile.StoreUint32(&o.EMACADDR1HIGH.Reg, volatile.LoadUint32(&o.EMACADDR1HIGH.Reg)&^(0x40000000)|value<<30)
}
func (o *EMAC_MAC_Type) GetEMACADDR1HIGH_SOURCE_ADDRESS() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR1HIGH.Reg) & 0x40000000) >> 30
}
func (o *EMAC_MAC_Type) SetEMACADDR1HIGH_ADDRESS_ENABLE1(value uint32) {
	volatile.StoreUint32(&o.EMACADDR1HIGH.Reg, volatile.LoadUint32(&o.EMACADDR1HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR1HIGH_ADDRESS_ENABLE1() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR1HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACADDR2HIGH: Upper 16 bits of the third 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR2HIGH_MAC_ADDRESS2_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR2HIGH.Reg, volatile.LoadUint32(&o.EMACADDR2HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR2HIGH_MAC_ADDRESS2_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR2HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR2HIGH_MASK_BYTE_CONTROL2(value uint32) {
	volatile.StoreUint32(&o.EMACADDR2HIGH.Reg, volatile.LoadUint32(&o.EMACADDR2HIGH.Reg)&^(0x3f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACADDR2HIGH_MASK_BYTE_CONTROL2() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR2HIGH.Reg) & 0x3f000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACADDR2HIGH_SOURCE_ADDRESS2(value uint32) {
	volatile.StoreUint32(&o.EMACADDR2HIGH.Reg, volatile.LoadUint32(&o.EMACADDR2HIGH.Reg)&^(0x40000000)|value<<30)
}
func (o *EMAC_MAC_Type) GetEMACADDR2HIGH_SOURCE_ADDRESS2() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR2HIGH.Reg) & 0x40000000) >> 30
}
func (o *EMAC_MAC_Type) SetEMACADDR2HIGH_ADDRESS_ENABLE2(value uint32) {
	volatile.StoreUint32(&o.EMACADDR2HIGH.Reg, volatile.LoadUint32(&o.EMACADDR2HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR2HIGH_ADDRESS_ENABLE2() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR2HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACADDR3HIGH: Upper 16 bits of the fourth 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR3HIGH_MAC_ADDRESS3_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR3HIGH.Reg, volatile.LoadUint32(&o.EMACADDR3HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR3HIGH_MAC_ADDRESS3_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR3HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR3HIGH_MASK_BYTE_CONTROL3(value uint32) {
	volatile.StoreUint32(&o.EMACADDR3HIGH.Reg, volatile.LoadUint32(&o.EMACADDR3HIGH.Reg)&^(0x3f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACADDR3HIGH_MASK_BYTE_CONTROL3() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR3HIGH.Reg) & 0x3f000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACADDR3HIGH_SOURCE_ADDRESS3(value uint32) {
	volatile.StoreUint32(&o.EMACADDR3HIGH.Reg, volatile.LoadUint32(&o.EMACADDR3HIGH.Reg)&^(0x40000000)|value<<30)
}
func (o *EMAC_MAC_Type) GetEMACADDR3HIGH_SOURCE_ADDRESS3() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR3HIGH.Reg) & 0x40000000) >> 30
}
func (o *EMAC_MAC_Type) SetEMACADDR3HIGH_ADDRESS_ENABLE3(value uint32) {
	volatile.StoreUint32(&o.EMACADDR3HIGH.Reg, volatile.LoadUint32(&o.EMACADDR3HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR3HIGH_ADDRESS_ENABLE3() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR3HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACADDR4HIGH: Upper 16 bits of the fifth 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR4HIGH_MAC_ADDRESS4_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR4HIGH.Reg, volatile.LoadUint32(&o.EMACADDR4HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR4HIGH_MAC_ADDRESS4_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR4HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR4HIGH_MASK_BYTE_CONTROL4(value uint32) {
	volatile.StoreUint32(&o.EMACADDR4HIGH.Reg, volatile.LoadUint32(&o.EMACADDR4HIGH.Reg)&^(0x3f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACADDR4HIGH_MASK_BYTE_CONTROL4() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR4HIGH.Reg) & 0x3f000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACADDR4HIGH_SOURCE_ADDRESS4(value uint32) {
	volatile.StoreUint32(&o.EMACADDR4HIGH.Reg, volatile.LoadUint32(&o.EMACADDR4HIGH.Reg)&^(0x40000000)|value<<30)
}
func (o *EMAC_MAC_Type) GetEMACADDR4HIGH_SOURCE_ADDRESS4() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR4HIGH.Reg) & 0x40000000) >> 30
}
func (o *EMAC_MAC_Type) SetEMACADDR4HIGH_ADDRESS_ENABLE4(value uint32) {
	volatile.StoreUint32(&o.EMACADDR4HIGH.Reg, volatile.LoadUint32(&o.EMACADDR4HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR4HIGH_ADDRESS_ENABLE4() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR4HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACADDR5HIGH: Upper 16 bits of the sixth 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR5HIGH_MAC_ADDRESS5_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR5HIGH.Reg, volatile.LoadUint32(&o.EMACADDR5HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR5HIGH_MAC_ADDRESS5_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR5HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR5HIGH_MASK_BYTE_CONTROL5(value uint32) {
	volatile.StoreUint32(&o.EMACADDR5HIGH.Reg, volatile.LoadUint32(&o.EMACADDR5HIGH.Reg)&^(0x3f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACADDR5HIGH_MASK_BYTE_CONTROL5() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR5HIGH.Reg) & 0x3f000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACADDR5HIGH_SOURCE_ADDRESS5(value uint32) {
	volatile.StoreUint32(&o.EMACADDR5HIGH.Reg, volatile.LoadUint32(&o.EMACADDR5HIGH.Reg)&^(0x40000000)|value<<30)
}
func (o *EMAC_MAC_Type) GetEMACADDR5HIGH_SOURCE_ADDRESS5() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR5HIGH.Reg) & 0x40000000) >> 30
}
func (o *EMAC_MAC_Type) SetEMACADDR5HIGH_ADDRESS_ENABLE5(value uint32) {
	volatile.StoreUint32(&o.EMACADDR5HIGH.Reg, volatile.LoadUint32(&o.EMACADDR5HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR5HIGH_ADDRESS_ENABLE5() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR5HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACADDR6HIGH: Upper 16 bits of the seventh 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR6HIGH_MAC_ADDRESS6_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR6HIGH.Reg, volatile.LoadUint32(&o.EMACADDR6HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR6HIGH_MAC_ADDRESS6_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR6HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR6HIGH_MASK_BYTE_CONTROL6(value uint32) {
	volatile.StoreUint32(&o.EMACADDR6HIGH.Reg, volatile.LoadUint32(&o.EMACADDR6HIGH.Reg)&^(0x3f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACADDR6HIGH_MASK_BYTE_CONTROL6() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR6HIGH.Reg) & 0x3f000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACADDR6HIGH_SOURCE_ADDRESS6(value uint32) {
	volatile.StoreUint32(&o.EMACADDR6HIGH.Reg, volatile.LoadUint32(&o.EMACADDR6HIGH.Reg)&^(0x40000000)|value<<30)
}
func (o *EMAC_MAC_Type) GetEMACADDR6HIGH_SOURCE_ADDRESS6() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR6HIGH.Reg) & 0x40000000) >> 30
}
func (o *EMAC_MAC_Type) SetEMACADDR6HIGH_ADDRESS_ENABLE6(value uint32) {
	volatile.StoreUint32(&o.EMACADDR6HIGH.Reg, volatile.LoadUint32(&o.EMACADDR6HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR6HIGH_ADDRESS_ENABLE6() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR6HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACADDR7HIGH: Upper 16 bits of the eighth 6-byte MAC address
func (o *EMAC_MAC_Type) SetEMACADDR7HIGH_MAC_ADDRESS7_HI(value uint32) {
	volatile.StoreUint32(&o.EMACADDR7HIGH.Reg, volatile.LoadUint32(&o.EMACADDR7HIGH.Reg)&^(0xffff)|value)
}
func (o *EMAC_MAC_Type) GetEMACADDR7HIGH_MAC_ADDRESS7_HI() uint32 {
	return volatile.LoadUint32(&o.EMACADDR7HIGH.Reg) & 0xffff
}
func (o *EMAC_MAC_Type) SetEMACADDR7HIGH_MASK_BYTE_CONTROL7(value uint32) {
	volatile.StoreUint32(&o.EMACADDR7HIGH.Reg, volatile.LoadUint32(&o.EMACADDR7HIGH.Reg)&^(0x3f000000)|value<<24)
}
func (o *EMAC_MAC_Type) GetEMACADDR7HIGH_MASK_BYTE_CONTROL7() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR7HIGH.Reg) & 0x3f000000) >> 24
}
func (o *EMAC_MAC_Type) SetEMACADDR7HIGH_SOURCE_ADDRESS7(value uint32) {
	volatile.StoreUint32(&o.EMACADDR7HIGH.Reg, volatile.LoadUint32(&o.EMACADDR7HIGH.Reg)&^(0x40000000)|value<<30)
}
func (o *EMAC_MAC_Type) GetEMACADDR7HIGH_SOURCE_ADDRESS7() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR7HIGH.Reg) & 0x40000000) >> 30
}
func (o *EMAC_MAC_Type) SetEMACADDR7HIGH_ADDRESS_ENABLE7(value uint32) {
	volatile.StoreUint32(&o.EMACADDR7HIGH.Reg, volatile.LoadUint32(&o.EMACADDR7HIGH.Reg)&^(0x80000000)|value<<31)
}
func (o *EMAC_MAC_Type) GetEMACADDR7HIGH_ADDRESS_ENABLE7() uint32 {
	return (volatile.LoadUint32(&o.EMACADDR7HIGH.Reg) & 0x80000000) >> 31
}

// EMAC_MAC.EMACCSTATUS: Link communication status
func (o *EMAC_MAC_Type) SetEMACCSTATUS_LINK_MODE(value uint32) {
	volatile.StoreUint32(&o.EMACCSTATUS.Reg, volatile.LoadUint32(&o.EMACCSTATUS.Reg)&^(0x1)|value)
}
func (o *EMAC_MAC_Type) GetEMACCSTATUS_LINK_MODE() uint32 {
	return volatile.LoadUint32(&o.EMACCSTATUS.Reg) & 0x1
}
func (o *EMAC_MAC_Type) SetEMACCSTATUS_LINK_SPEED(value uint32) {
	volatile.StoreUint32(&o.EMACCSTATUS.Reg, volatile.LoadUint32(&o.EMACCSTATUS.Reg)&^(0x6)|value<<1)
}
func (o *EMAC_MAC_Type) GetEMACCSTATUS_LINK_SPEED() uint32 {
	return (volatile.LoadUint32(&o.EMACCSTATUS.Reg) & 0x6) >> 1
}
func (o *EMAC_MAC_Type) SetEMACCSTATUS_JABBER_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.EMACCSTATUS.Reg, volatile.LoadUint32(&o.EMACCSTATUS.Reg)&^(0x10)|value<<4)
}
func (o *EMAC_MAC_Type) GetEMACCSTATUS_JABBER_TIMEOUT() uint32 {
	return (volatile.LoadUint32(&o.EMACCSTATUS.Reg) & 0x10) >> 4
}

// EMAC_MAC.EMACWDOGTO: Watchdog timeout control
func (o *EMAC_MAC_Type) SetEMACWDOGTO_WDOGTO(value uint32) {
	volatile.StoreUint32(&o.EMACWDOGTO.Reg, volatile.LoadUint32(&o.EMACWDOGTO.Reg)&^(0x3fff)|value)
}
func (o *EMAC_MAC_Type) GetEMACWDOGTO_WDOGTO() uint32 {
	return volatile.LoadUint32(&o.EMACWDOGTO.Reg) & 0x3fff
}
func (o *EMAC_MAC_Type) SetEMACWDOGTO_PWDOGEN(value uint32) {
	volatile.StoreUint32(&o.EMACWDOGTO.Reg, volatile.LoadUint32(&o.EMACWDOGTO.Reg)&^(0x10000)|value<<16)
}
func (o *EMAC_MAC_Type) GetEMACWDOGTO_PWDOGEN() uint32 {
	return (volatile.LoadUint32(&o.EMACWDOGTO.Reg) & 0x10000) >> 16
}

// FLASH_ENCRYPTION Peripheral
type FLASH_ENCRYPTION_Type struct {
	BUFFER_0 volatile.Register32 // 0x0
	BUFFER_1 volatile.Register32 // 0x4
	BUFFER_2 volatile.Register32 // 0x8
	BUFFER_3 volatile.Register32 // 0xC
	BUFFER_4 volatile.Register32 // 0x10
	BUFFER_5 volatile.Register32 // 0x14
	BUFFER_6 volatile.Register32 // 0x18
	BUFFER_7 volatile.Register32 // 0x1C
	START    volatile.Register32 // 0x20
	ADDRESS  volatile.Register32 // 0x24
	DONE     volatile.Register32 // 0x28
}

// FLASH_ENCRYPTION.BUFFER_0
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_0_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_0.Reg, volatile.LoadUint32(&o.BUFFER_0.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_0_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_0.Reg) & 0xff
}

// FLASH_ENCRYPTION.BUFFER_1
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_1_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_1.Reg, volatile.LoadUint32(&o.BUFFER_1.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_1_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_1.Reg) & 0xff
}

// FLASH_ENCRYPTION.BUFFER_2
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_2_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_2.Reg, volatile.LoadUint32(&o.BUFFER_2.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_2_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_2.Reg) & 0xff
}

// FLASH_ENCRYPTION.BUFFER_3
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_3_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_3.Reg, volatile.LoadUint32(&o.BUFFER_3.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_3_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_3.Reg) & 0xff
}

// FLASH_ENCRYPTION.BUFFER_4
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_4_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_4.Reg, volatile.LoadUint32(&o.BUFFER_4.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_4_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_4.Reg) & 0xff
}

// FLASH_ENCRYPTION.BUFFER_5
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_5_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_5.Reg, volatile.LoadUint32(&o.BUFFER_5.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_5_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_5.Reg) & 0xff
}

// FLASH_ENCRYPTION.BUFFER_6
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_6_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_6.Reg, volatile.LoadUint32(&o.BUFFER_6.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_6_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_6.Reg) & 0xff
}

// FLASH_ENCRYPTION.BUFFER_7
func (o *FLASH_ENCRYPTION_Type) SetBUFFER_7_BUFFER(value uint32) {
	volatile.StoreUint32(&o.BUFFER_7.Reg, volatile.LoadUint32(&o.BUFFER_7.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetBUFFER_7_BUFFER() uint32 {
	return volatile.LoadUint32(&o.BUFFER_7.Reg) & 0xff
}

// FLASH_ENCRYPTION.START
func (o *FLASH_ENCRYPTION_Type) SetSTART_FLASH_START(value uint32) {
	volatile.StoreUint32(&o.START.Reg, volatile.LoadUint32(&o.START.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetSTART_FLASH_START() uint32 {
	return volatile.LoadUint32(&o.START.Reg) & 0xff
}

// FLASH_ENCRYPTION.ADDRESS
func (o *FLASH_ENCRYPTION_Type) SetADDRESS(value uint32) {
	volatile.StoreUint32(&o.ADDRESS.Reg, volatile.LoadUint32(&o.ADDRESS.Reg)&^(0xff)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetADDRESS() uint32 {
	return volatile.LoadUint32(&o.ADDRESS.Reg) & 0xff
}

// FLASH_ENCRYPTION.DONE
func (o *FLASH_ENCRYPTION_Type) SetDONE_FLASH_DONE(value uint32) {
	volatile.StoreUint32(&o.DONE.Reg, volatile.LoadUint32(&o.DONE.Reg)&^(0x1)|value)
}
func (o *FLASH_ENCRYPTION_Type) GetDONE_FLASH_DONE() uint32 {
	return volatile.LoadUint32(&o.DONE.Reg) & 0x1
}

// FRC_TIMER Peripheral
type FRC_Type struct {
	TIMER_LOAD  volatile.Register32 // 0x0
	TIMER_COUNT volatile.Register32 // 0x4
	TIMER_CTRL  volatile.Register32 // 0x8
	TIMER_INT   volatile.Register32 // 0xC
	TIMER_ALARM volatile.Register32 // 0x10
}

// FRC.TIMER_LOAD
func (o *FRC_Type) SetTIMER_LOAD_VALUE(value uint32) {
	volatile.StoreUint32(&o.TIMER_LOAD.Reg, volatile.LoadUint32(&o.TIMER_LOAD.Reg)&^(0xff)|value)
}
func (o *FRC_Type) GetTIMER_LOAD_VALUE() uint32 {
	return volatile.LoadUint32(&o.TIMER_LOAD.Reg) & 0xff
}

// FRC.TIMER_COUNT
func (o *FRC_Type) SetTIMER_COUNT(value uint32) {
	volatile.StoreUint32(&o.TIMER_COUNT.Reg, volatile.LoadUint32(&o.TIMER_COUNT.Reg)&^(0xff)|value)
}
func (o *FRC_Type) GetTIMER_COUNT() uint32 {
	return volatile.LoadUint32(&o.TIMER_COUNT.Reg) & 0xff
}

// FRC.TIMER_CTRL
func (o *FRC_Type) SetTIMER_CTRL_TIMER_PRESCALER(value uint32) {
	volatile.StoreUint32(&o.TIMER_CTRL.Reg, volatile.LoadUint32(&o.TIMER_CTRL.Reg)&^(0x1fe)|value<<1)
}
func (o *FRC_Type) GetTIMER_CTRL_TIMER_PRESCALER() uint32 {
	return (volatile.LoadUint32(&o.TIMER_CTRL.Reg) & 0x1fe) >> 1
}

// FRC.TIMER_INT
func (o *FRC_Type) SetTIMER_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.TIMER_INT.Reg, volatile.LoadUint32(&o.TIMER_INT.Reg)&^(0x1)|value)
}
func (o *FRC_Type) GetTIMER_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.TIMER_INT.Reg) & 0x1
}

// FRC.TIMER_ALARM
func (o *FRC_Type) SetTIMER_ALARM(value uint32) {
	volatile.StoreUint32(&o.TIMER_ALARM.Reg, volatile.LoadUint32(&o.TIMER_ALARM.Reg)&^(0xff)|value)
}
func (o *FRC_Type) GetTIMER_ALARM() uint32 {
	return volatile.LoadUint32(&o.TIMER_ALARM.Reg) & 0xff
}

// General Purpose Input/Output
type GPIO_Type struct {
	BT_SELECT          volatile.Register32 // 0x0
	OUT                volatile.Register32 // 0x4
	OUT_W1TS           volatile.Register32 // 0x8
	OUT_W1TC           volatile.Register32 // 0xC
	OUT1               volatile.Register32 // 0x10
	OUT1_W1TS          volatile.Register32 // 0x14
	OUT1_W1TC          volatile.Register32 // 0x18
	SDIO_SELECT        volatile.Register32 // 0x1C
	ENABLE             volatile.Register32 // 0x20
	ENABLE_W1TS        volatile.Register32 // 0x24
	ENABLE_W1TC        volatile.Register32 // 0x28
	ENABLE1            volatile.Register32 // 0x2C
	ENABLE1_W1TS       volatile.Register32 // 0x30
	ENABLE1_W1TC       volatile.Register32 // 0x34
	STRAP              volatile.Register32 // 0x38
	IN                 volatile.Register32 // 0x3C
	IN1                volatile.Register32 // 0x40
	STATUS             volatile.Register32 // 0x44
	STATUS_W1TS        volatile.Register32 // 0x48
	STATUS_W1TC        volatile.Register32 // 0x4C
	STATUS1            volatile.Register32 // 0x50
	STATUS1_W1TS       volatile.Register32 // 0x54
	STATUS1_W1TC       volatile.Register32 // 0x58
	_                  [4]byte
	ACPU_INT           volatile.Register32 // 0x60
	ACPU_NMI_INT       volatile.Register32 // 0x64
	PCPU_INT           volatile.Register32 // 0x68
	PCPU_NMI_INT       volatile.Register32 // 0x6C
	CPUSDIO_INT        volatile.Register32 // 0x70
	ACPU_INT1          volatile.Register32 // 0x74
	ACPU_NMI_INT1      volatile.Register32 // 0x78
	PCPU_INT1          volatile.Register32 // 0x7C
	PCPU_NMI_INT1      volatile.Register32 // 0x80
	CPUSDIO_INT1       volatile.Register32 // 0x84
	PIN0               volatile.Register32 // 0x88
	PIN1               volatile.Register32 // 0x8C
	PIN2               volatile.Register32 // 0x90
	PIN3               volatile.Register32 // 0x94
	PIN4               volatile.Register32 // 0x98
	PIN5               volatile.Register32 // 0x9C
	PIN6               volatile.Register32 // 0xA0
	PIN7               volatile.Register32 // 0xA4
	PIN8               volatile.Register32 // 0xA8
	PIN9               volatile.Register32 // 0xAC
	PIN10              volatile.Register32 // 0xB0
	PIN11              volatile.Register32 // 0xB4
	PIN12              volatile.Register32 // 0xB8
	PIN13              volatile.Register32 // 0xBC
	PIN14              volatile.Register32 // 0xC0
	PIN15              volatile.Register32 // 0xC4
	PIN16              volatile.Register32 // 0xC8
	PIN17              volatile.Register32 // 0xCC
	PIN18              volatile.Register32 // 0xD0
	PIN19              volatile.Register32 // 0xD4
	PIN20              volatile.Register32 // 0xD8
	PIN21              volatile.Register32 // 0xDC
	PIN22              volatile.Register32 // 0xE0
	PIN23              volatile.Register32 // 0xE4
	PIN24              volatile.Register32 // 0xE8
	PIN25              volatile.Register32 // 0xEC
	PIN26              volatile.Register32 // 0xF0
	PIN27              volatile.Register32 // 0xF4
	PIN28              volatile.Register32 // 0xF8
	PIN29              volatile.Register32 // 0xFC
	PIN30              volatile.Register32 // 0x100
	PIN31              volatile.Register32 // 0x104
	PIN32              volatile.Register32 // 0x108
	PIN33              volatile.Register32 // 0x10C
	PIN34              volatile.Register32 // 0x110
	PIN35              volatile.Register32 // 0x114
	PIN36              volatile.Register32 // 0x118
	PIN37              volatile.Register32 // 0x11C
	PIN38              volatile.Register32 // 0x120
	PIN39              volatile.Register32 // 0x124
	CALI_CONF          volatile.Register32 // 0x128
	CALI_DATA          volatile.Register32 // 0x12C
	FUNC0_IN_SEL_CFG   volatile.Register32 // 0x130
	FUNC1_IN_SEL_CFG   volatile.Register32 // 0x134
	FUNC2_IN_SEL_CFG   volatile.Register32 // 0x138
	FUNC3_IN_SEL_CFG   volatile.Register32 // 0x13C
	FUNC4_IN_SEL_CFG   volatile.Register32 // 0x140
	FUNC5_IN_SEL_CFG   volatile.Register32 // 0x144
	FUNC6_IN_SEL_CFG   volatile.Register32 // 0x148
	FUNC7_IN_SEL_CFG   volatile.Register32 // 0x14C
	FUNC8_IN_SEL_CFG   volatile.Register32 // 0x150
	FUNC9_IN_SEL_CFG   volatile.Register32 // 0x154
	FUNC10_IN_SEL_CFG  volatile.Register32 // 0x158
	FUNC11_IN_SEL_CFG  volatile.Register32 // 0x15C
	FUNC12_IN_SEL_CFG  volatile.Register32 // 0x160
	FUNC13_IN_SEL_CFG  volatile.Register32 // 0x164
	FUNC14_IN_SEL_CFG  volatile.Register32 // 0x168
	FUNC15_IN_SEL_CFG  volatile.Register32 // 0x16C
	FUNC16_IN_SEL_CFG  volatile.Register32 // 0x170
	FUNC17_IN_SEL_CFG  volatile.Register32 // 0x174
	FUNC18_IN_SEL_CFG  volatile.Register32 // 0x178
	FUNC19_IN_SEL_CFG  volatile.Register32 // 0x17C
	FUNC20_IN_SEL_CFG  volatile.Register32 // 0x180
	FUNC21_IN_SEL_CFG  volatile.Register32 // 0x184
	FUNC22_IN_SEL_CFG  volatile.Register32 // 0x188
	FUNC23_IN_SEL_CFG  volatile.Register32 // 0x18C
	FUNC24_IN_SEL_CFG  volatile.Register32 // 0x190
	FUNC25_IN_SEL_CFG  volatile.Register32 // 0x194
	FUNC26_IN_SEL_CFG  volatile.Register32 // 0x198
	FUNC27_IN_SEL_CFG  volatile.Register32 // 0x19C
	FUNC28_IN_SEL_CFG  volatile.Register32 // 0x1A0
	FUNC29_IN_SEL_CFG  volatile.Register32 // 0x1A4
	FUNC30_IN_SEL_CFG  volatile.Register32 // 0x1A8
	FUNC31_IN_SEL_CFG  volatile.Register32 // 0x1AC
	FUNC32_IN_SEL_CFG  volatile.Register32 // 0x1B0
	FUNC33_IN_SEL_CFG  volatile.Register32 // 0x1B4
	FUNC34_IN_SEL_CFG  volatile.Register32 // 0x1B8
	FUNC35_IN_SEL_CFG  volatile.Register32 // 0x1BC
	FUNC36_IN_SEL_CFG  volatile.Register32 // 0x1C0
	FUNC37_IN_SEL_CFG  volatile.Register32 // 0x1C4
	FUNC38_IN_SEL_CFG  volatile.Register32 // 0x1C8
	FUNC39_IN_SEL_CFG  volatile.Register32 // 0x1CC
	FUNC40_IN_SEL_CFG  volatile.Register32 // 0x1D0
	FUNC41_IN_SEL_CFG  volatile.Register32 // 0x1D4
	FUNC42_IN_SEL_CFG  volatile.Register32 // 0x1D8
	FUNC43_IN_SEL_CFG  volatile.Register32 // 0x1DC
	FUNC44_IN_SEL_CFG  volatile.Register32 // 0x1E0
	FUNC45_IN_SEL_CFG  volatile.Register32 // 0x1E4
	FUNC46_IN_SEL_CFG  volatile.Register32 // 0x1E8
	FUNC47_IN_SEL_CFG  volatile.Register32 // 0x1EC
	FUNC48_IN_SEL_CFG  volatile.Register32 // 0x1F0
	FUNC49_IN_SEL_CFG  volatile.Register32 // 0x1F4
	FUNC50_IN_SEL_CFG  volatile.Register32 // 0x1F8
	FUNC51_IN_SEL_CFG  volatile.Register32 // 0x1FC
	FUNC52_IN_SEL_CFG  volatile.Register32 // 0x200
	FUNC53_IN_SEL_CFG  volatile.Register32 // 0x204
	FUNC54_IN_SEL_CFG  volatile.Register32 // 0x208
	FUNC55_IN_SEL_CFG  volatile.Register32 // 0x20C
	FUNC56_IN_SEL_CFG  volatile.Register32 // 0x210
	FUNC57_IN_SEL_CFG  volatile.Register32 // 0x214
	FUNC58_IN_SEL_CFG  volatile.Register32 // 0x218
	FUNC59_IN_SEL_CFG  volatile.Register32 // 0x21C
	FUNC60_IN_SEL_CFG  volatile.Register32 // 0x220
	FUNC61_IN_SEL_CFG  volatile.Register32 // 0x224
	FUNC62_IN_SEL_CFG  volatile.Register32 // 0x228
	FUNC63_IN_SEL_CFG  volatile.Register32 // 0x22C
	FUNC64_IN_SEL_CFG  volatile.Register32 // 0x230
	FUNC65_IN_SEL_CFG  volatile.Register32 // 0x234
	FUNC66_IN_SEL_CFG  volatile.Register32 // 0x238
	FUNC67_IN_SEL_CFG  volatile.Register32 // 0x23C
	FUNC68_IN_SEL_CFG  volatile.Register32 // 0x240
	FUNC69_IN_SEL_CFG  volatile.Register32 // 0x244
	FUNC70_IN_SEL_CFG  volatile.Register32 // 0x248
	FUNC71_IN_SEL_CFG  volatile.Register32 // 0x24C
	FUNC72_IN_SEL_CFG  volatile.Register32 // 0x250
	FUNC73_IN_SEL_CFG  volatile.Register32 // 0x254
	FUNC74_IN_SEL_CFG  volatile.Register32 // 0x258
	FUNC75_IN_SEL_CFG  volatile.Register32 // 0x25C
	FUNC76_IN_SEL_CFG  volatile.Register32 // 0x260
	FUNC77_IN_SEL_CFG  volatile.Register32 // 0x264
	FUNC78_IN_SEL_CFG  volatile.Register32 // 0x268
	FUNC79_IN_SEL_CFG  volatile.Register32 // 0x26C
	FUNC80_IN_SEL_CFG  volatile.Register32 // 0x270
	FUNC81_IN_SEL_CFG  volatile.Register32 // 0x274
	FUNC82_IN_SEL_CFG  volatile.Register32 // 0x278
	FUNC83_IN_SEL_CFG  volatile.Register32 // 0x27C
	FUNC84_IN_SEL_CFG  volatile.Register32 // 0x280
	FUNC85_IN_SEL_CFG  volatile.Register32 // 0x284
	FUNC86_IN_SEL_CFG  volatile.Register32 // 0x288
	FUNC87_IN_SEL_CFG  volatile.Register32 // 0x28C
	FUNC88_IN_SEL_CFG  volatile.Register32 // 0x290
	FUNC89_IN_SEL_CFG  volatile.Register32 // 0x294
	FUNC90_IN_SEL_CFG  volatile.Register32 // 0x298
	FUNC91_IN_SEL_CFG  volatile.Register32 // 0x29C
	FUNC92_IN_SEL_CFG  volatile.Register32 // 0x2A0
	FUNC93_IN_SEL_CFG  volatile.Register32 // 0x2A4
	FUNC94_IN_SEL_CFG  volatile.Register32 // 0x2A8
	FUNC95_IN_SEL_CFG  volatile.Register32 // 0x2AC
	FUNC96_IN_SEL_CFG  volatile.Register32 // 0x2B0
	FUNC97_IN_SEL_CFG  volatile.Register32 // 0x2B4
	FUNC98_IN_SEL_CFG  volatile.Register32 // 0x2B8
	FUNC99_IN_SEL_CFG  volatile.Register32 // 0x2BC
	FUNC100_IN_SEL_CFG volatile.Register32 // 0x2C0
	FUNC101_IN_SEL_CFG volatile.Register32 // 0x2C4
	FUNC102_IN_SEL_CFG volatile.Register32 // 0x2C8
	FUNC103_IN_SEL_CFG volatile.Register32 // 0x2CC
	FUNC104_IN_SEL_CFG volatile.Register32 // 0x2D0
	FUNC105_IN_SEL_CFG volatile.Register32 // 0x2D4
	FUNC106_IN_SEL_CFG volatile.Register32 // 0x2D8
	FUNC107_IN_SEL_CFG volatile.Register32 // 0x2DC
	FUNC108_IN_SEL_CFG volatile.Register32 // 0x2E0
	FUNC109_IN_SEL_CFG volatile.Register32 // 0x2E4
	FUNC110_IN_SEL_CFG volatile.Register32 // 0x2E8
	FUNC111_IN_SEL_CFG volatile.Register32 // 0x2EC
	FUNC112_IN_SEL_CFG volatile.Register32 // 0x2F0
	FUNC113_IN_SEL_CFG volatile.Register32 // 0x2F4
	FUNC114_IN_SEL_CFG volatile.Register32 // 0x2F8
	FUNC115_IN_SEL_CFG volatile.Register32 // 0x2FC
	FUNC116_IN_SEL_CFG volatile.Register32 // 0x300
	FUNC117_IN_SEL_CFG volatile.Register32 // 0x304
	FUNC118_IN_SEL_CFG volatile.Register32 // 0x308
	FUNC119_IN_SEL_CFG volatile.Register32 // 0x30C
	FUNC120_IN_SEL_CFG volatile.Register32 // 0x310
	FUNC121_IN_SEL_CFG volatile.Register32 // 0x314
	FUNC122_IN_SEL_CFG volatile.Register32 // 0x318
	FUNC123_IN_SEL_CFG volatile.Register32 // 0x31C
	FUNC124_IN_SEL_CFG volatile.Register32 // 0x320
	FUNC125_IN_SEL_CFG volatile.Register32 // 0x324
	FUNC126_IN_SEL_CFG volatile.Register32 // 0x328
	FUNC127_IN_SEL_CFG volatile.Register32 // 0x32C
	FUNC128_IN_SEL_CFG volatile.Register32 // 0x330
	FUNC129_IN_SEL_CFG volatile.Register32 // 0x334
	FUNC130_IN_SEL_CFG volatile.Register32 // 0x338
	FUNC131_IN_SEL_CFG volatile.Register32 // 0x33C
	FUNC132_IN_SEL_CFG volatile.Register32 // 0x340
	FUNC133_IN_SEL_CFG volatile.Register32 // 0x344
	FUNC134_IN_SEL_CFG volatile.Register32 // 0x348
	FUNC135_IN_SEL_CFG volatile.Register32 // 0x34C
	FUNC136_IN_SEL_CFG volatile.Register32 // 0x350
	FUNC137_IN_SEL_CFG volatile.Register32 // 0x354
	FUNC138_IN_SEL_CFG volatile.Register32 // 0x358
	FUNC139_IN_SEL_CFG volatile.Register32 // 0x35C
	FUNC140_IN_SEL_CFG volatile.Register32 // 0x360
	FUNC141_IN_SEL_CFG volatile.Register32 // 0x364
	FUNC142_IN_SEL_CFG volatile.Register32 // 0x368
	FUNC143_IN_SEL_CFG volatile.Register32 // 0x36C
	FUNC144_IN_SEL_CFG volatile.Register32 // 0x370
	FUNC145_IN_SEL_CFG volatile.Register32 // 0x374
	FUNC146_IN_SEL_CFG volatile.Register32 // 0x378
	FUNC147_IN_SEL_CFG volatile.Register32 // 0x37C
	FUNC148_IN_SEL_CFG volatile.Register32 // 0x380
	FUNC149_IN_SEL_CFG volatile.Register32 // 0x384
	FUNC150_IN_SEL_CFG volatile.Register32 // 0x388
	FUNC151_IN_SEL_CFG volatile.Register32 // 0x38C
	FUNC152_IN_SEL_CFG volatile.Register32 // 0x390
	FUNC153_IN_SEL_CFG volatile.Register32 // 0x394
	FUNC154_IN_SEL_CFG volatile.Register32 // 0x398
	FUNC155_IN_SEL_CFG volatile.Register32 // 0x39C
	FUNC156_IN_SEL_CFG volatile.Register32 // 0x3A0
	FUNC157_IN_SEL_CFG volatile.Register32 // 0x3A4
	FUNC158_IN_SEL_CFG volatile.Register32 // 0x3A8
	FUNC159_IN_SEL_CFG volatile.Register32 // 0x3AC
	FUNC160_IN_SEL_CFG volatile.Register32 // 0x3B0
	FUNC161_IN_SEL_CFG volatile.Register32 // 0x3B4
	FUNC162_IN_SEL_CFG volatile.Register32 // 0x3B8
	FUNC163_IN_SEL_CFG volatile.Register32 // 0x3BC
	FUNC164_IN_SEL_CFG volatile.Register32 // 0x3C0
	FUNC165_IN_SEL_CFG volatile.Register32 // 0x3C4
	FUNC166_IN_SEL_CFG volatile.Register32 // 0x3C8
	FUNC167_IN_SEL_CFG volatile.Register32 // 0x3CC
	FUNC168_IN_SEL_CFG volatile.Register32 // 0x3D0
	FUNC169_IN_SEL_CFG volatile.Register32 // 0x3D4
	FUNC170_IN_SEL_CFG volatile.Register32 // 0x3D8
	FUNC171_IN_SEL_CFG volatile.Register32 // 0x3DC
	FUNC172_IN_SEL_CFG volatile.Register32 // 0x3E0
	FUNC173_IN_SEL_CFG volatile.Register32 // 0x3E4
	FUNC174_IN_SEL_CFG volatile.Register32 // 0x3E8
	FUNC175_IN_SEL_CFG volatile.Register32 // 0x3EC
	FUNC176_IN_SEL_CFG volatile.Register32 // 0x3F0
	FUNC177_IN_SEL_CFG volatile.Register32 // 0x3F4
	FUNC178_IN_SEL_CFG volatile.Register32 // 0x3F8
	FUNC179_IN_SEL_CFG volatile.Register32 // 0x3FC
	FUNC180_IN_SEL_CFG volatile.Register32 // 0x400
	FUNC181_IN_SEL_CFG volatile.Register32 // 0x404
	FUNC182_IN_SEL_CFG volatile.Register32 // 0x408
	FUNC183_IN_SEL_CFG volatile.Register32 // 0x40C
	FUNC184_IN_SEL_CFG volatile.Register32 // 0x410
	FUNC185_IN_SEL_CFG volatile.Register32 // 0x414
	FUNC186_IN_SEL_CFG volatile.Register32 // 0x418
	FUNC187_IN_SEL_CFG volatile.Register32 // 0x41C
	FUNC188_IN_SEL_CFG volatile.Register32 // 0x420
	FUNC189_IN_SEL_CFG volatile.Register32 // 0x424
	FUNC190_IN_SEL_CFG volatile.Register32 // 0x428
	FUNC191_IN_SEL_CFG volatile.Register32 // 0x42C
	FUNC192_IN_SEL_CFG volatile.Register32 // 0x430
	FUNC193_IN_SEL_CFG volatile.Register32 // 0x434
	FUNC194_IN_SEL_CFG volatile.Register32 // 0x438
	FUNC195_IN_SEL_CFG volatile.Register32 // 0x43C
	FUNC196_IN_SEL_CFG volatile.Register32 // 0x440
	FUNC197_IN_SEL_CFG volatile.Register32 // 0x444
	FUNC198_IN_SEL_CFG volatile.Register32 // 0x448
	FUNC199_IN_SEL_CFG volatile.Register32 // 0x44C
	FUNC200_IN_SEL_CFG volatile.Register32 // 0x450
	FUNC201_IN_SEL_CFG volatile.Register32 // 0x454
	FUNC202_IN_SEL_CFG volatile.Register32 // 0x458
	FUNC203_IN_SEL_CFG volatile.Register32 // 0x45C
	FUNC204_IN_SEL_CFG volatile.Register32 // 0x460
	FUNC205_IN_SEL_CFG volatile.Register32 // 0x464
	FUNC206_IN_SEL_CFG volatile.Register32 // 0x468
	FUNC207_IN_SEL_CFG volatile.Register32 // 0x46C
	FUNC208_IN_SEL_CFG volatile.Register32 // 0x470
	FUNC209_IN_SEL_CFG volatile.Register32 // 0x474
	FUNC210_IN_SEL_CFG volatile.Register32 // 0x478
	FUNC211_IN_SEL_CFG volatile.Register32 // 0x47C
	FUNC212_IN_SEL_CFG volatile.Register32 // 0x480
	FUNC213_IN_SEL_CFG volatile.Register32 // 0x484
	FUNC214_IN_SEL_CFG volatile.Register32 // 0x488
	FUNC215_IN_SEL_CFG volatile.Register32 // 0x48C
	FUNC216_IN_SEL_CFG volatile.Register32 // 0x490
	FUNC217_IN_SEL_CFG volatile.Register32 // 0x494
	FUNC218_IN_SEL_CFG volatile.Register32 // 0x498
	FUNC219_IN_SEL_CFG volatile.Register32 // 0x49C
	FUNC220_IN_SEL_CFG volatile.Register32 // 0x4A0
	FUNC221_IN_SEL_CFG volatile.Register32 // 0x4A4
	FUNC222_IN_SEL_CFG volatile.Register32 // 0x4A8
	FUNC223_IN_SEL_CFG volatile.Register32 // 0x4AC
	FUNC224_IN_SEL_CFG volatile.Register32 // 0x4B0
	FUNC225_IN_SEL_CFG volatile.Register32 // 0x4B4
	FUNC226_IN_SEL_CFG volatile.Register32 // 0x4B8
	FUNC227_IN_SEL_CFG volatile.Register32 // 0x4BC
	FUNC228_IN_SEL_CFG volatile.Register32 // 0x4C0
	FUNC229_IN_SEL_CFG volatile.Register32 // 0x4C4
	FUNC230_IN_SEL_CFG volatile.Register32 // 0x4C8
	FUNC231_IN_SEL_CFG volatile.Register32 // 0x4CC
	FUNC232_IN_SEL_CFG volatile.Register32 // 0x4D0
	FUNC233_IN_SEL_CFG volatile.Register32 // 0x4D4
	FUNC234_IN_SEL_CFG volatile.Register32 // 0x4D8
	FUNC235_IN_SEL_CFG volatile.Register32 // 0x4DC
	FUNC236_IN_SEL_CFG volatile.Register32 // 0x4E0
	FUNC237_IN_SEL_CFG volatile.Register32 // 0x4E4
	FUNC238_IN_SEL_CFG volatile.Register32 // 0x4E8
	FUNC239_IN_SEL_CFG volatile.Register32 // 0x4EC
	FUNC240_IN_SEL_CFG volatile.Register32 // 0x4F0
	FUNC241_IN_SEL_CFG volatile.Register32 // 0x4F4
	FUNC242_IN_SEL_CFG volatile.Register32 // 0x4F8
	FUNC243_IN_SEL_CFG volatile.Register32 // 0x4FC
	FUNC244_IN_SEL_CFG volatile.Register32 // 0x500
	FUNC245_IN_SEL_CFG volatile.Register32 // 0x504
	FUNC246_IN_SEL_CFG volatile.Register32 // 0x508
	FUNC247_IN_SEL_CFG volatile.Register32 // 0x50C
	FUNC248_IN_SEL_CFG volatile.Register32 // 0x510
	FUNC249_IN_SEL_CFG volatile.Register32 // 0x514
	FUNC250_IN_SEL_CFG volatile.Register32 // 0x518
	FUNC251_IN_SEL_CFG volatile.Register32 // 0x51C
	FUNC252_IN_SEL_CFG volatile.Register32 // 0x520
	FUNC253_IN_SEL_CFG volatile.Register32 // 0x524
	FUNC254_IN_SEL_CFG volatile.Register32 // 0x528
	FUNC255_IN_SEL_CFG volatile.Register32 // 0x52C
	FUNC0_OUT_SEL_CFG  volatile.Register32 // 0x530
	FUNC1_OUT_SEL_CFG  volatile.Register32 // 0x534
	FUNC2_OUT_SEL_CFG  volatile.Register32 // 0x538
	FUNC3_OUT_SEL_CFG  volatile.Register32 // 0x53C
	FUNC4_OUT_SEL_CFG  volatile.Register32 // 0x540
	FUNC5_OUT_SEL_CFG  volatile.Register32 // 0x544
	FUNC6_OUT_SEL_CFG  volatile.Register32 // 0x548
	FUNC7_OUT_SEL_CFG  volatile.Register32 // 0x54C
	FUNC8_OUT_SEL_CFG  volatile.Register32 // 0x550
	FUNC9_OUT_SEL_CFG  volatile.Register32 // 0x554
	FUNC10_OUT_SEL_CFG volatile.Register32 // 0x558
	FUNC11_OUT_SEL_CFG volatile.Register32 // 0x55C
	FUNC12_OUT_SEL_CFG volatile.Register32 // 0x560
	FUNC13_OUT_SEL_CFG volatile.Register32 // 0x564
	FUNC14_OUT_SEL_CFG volatile.Register32 // 0x568
	FUNC15_OUT_SEL_CFG volatile.Register32 // 0x56C
	FUNC16_OUT_SEL_CFG volatile.Register32 // 0x570
	FUNC17_OUT_SEL_CFG volatile.Register32 // 0x574
	FUNC18_OUT_SEL_CFG volatile.Register32 // 0x578
	FUNC19_OUT_SEL_CFG volatile.Register32 // 0x57C
	FUNC20_OUT_SEL_CFG volatile.Register32 // 0x580
	FUNC21_OUT_SEL_CFG volatile.Register32 // 0x584
	FUNC22_OUT_SEL_CFG volatile.Register32 // 0x588
	FUNC23_OUT_SEL_CFG volatile.Register32 // 0x58C
	FUNC24_OUT_SEL_CFG volatile.Register32 // 0x590
	FUNC25_OUT_SEL_CFG volatile.Register32 // 0x594
	FUNC26_OUT_SEL_CFG volatile.Register32 // 0x598
	FUNC27_OUT_SEL_CFG volatile.Register32 // 0x59C
	FUNC28_OUT_SEL_CFG volatile.Register32 // 0x5A0
	FUNC29_OUT_SEL_CFG volatile.Register32 // 0x5A4
	FUNC30_OUT_SEL_CFG volatile.Register32 // 0x5A8
	FUNC31_OUT_SEL_CFG volatile.Register32 // 0x5AC
	FUNC32_OUT_SEL_CFG volatile.Register32 // 0x5B0
	FUNC33_OUT_SEL_CFG volatile.Register32 // 0x5B4
	FUNC34_OUT_SEL_CFG volatile.Register32 // 0x5B8
	FUNC35_OUT_SEL_CFG volatile.Register32 // 0x5BC
	FUNC36_OUT_SEL_CFG volatile.Register32 // 0x5C0
	FUNC37_OUT_SEL_CFG volatile.Register32 // 0x5C4
	FUNC38_OUT_SEL_CFG volatile.Register32 // 0x5C8
	FUNC39_OUT_SEL_CFG volatile.Register32 // 0x5CC
}

// GPIO.BT_SELECT
func (o *GPIO_Type) SetBT_SELECT(value uint32) {
	volatile.StoreUint32(&o.BT_SELECT.Reg, value)
}
func (o *GPIO_Type) GetBT_SELECT() uint32 {
	return volatile.LoadUint32(&o.BT_SELECT.Reg)
}

// GPIO.OUT
func (o *GPIO_Type) SetOUT(value uint32) {
	volatile.StoreUint32(&o.OUT.Reg, value)
}
func (o *GPIO_Type) GetOUT() uint32 {
	return volatile.LoadUint32(&o.OUT.Reg)
}

// GPIO.OUT_W1TS
func (o *GPIO_Type) SetOUT_W1TS(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TS.Reg, value)
}
func (o *GPIO_Type) GetOUT_W1TS() uint32 {
	return volatile.LoadUint32(&o.OUT_W1TS.Reg)
}

// GPIO.OUT_W1TC
func (o *GPIO_Type) SetOUT_W1TC(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TC.Reg, value)
}
func (o *GPIO_Type) GetOUT_W1TC() uint32 {
	return volatile.LoadUint32(&o.OUT_W1TC.Reg)
}

// GPIO.OUT1
func (o *GPIO_Type) SetOUT1_DATA(value uint32) {
	volatile.StoreUint32(&o.OUT1.Reg, volatile.LoadUint32(&o.OUT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetOUT1_DATA() uint32 {
	return volatile.LoadUint32(&o.OUT1.Reg) & 0xff
}

// GPIO.OUT1_W1TS
func (o *GPIO_Type) SetOUT1_W1TS_OUT1_DATA_W1TS(value uint32) {
	volatile.StoreUint32(&o.OUT1_W1TS.Reg, volatile.LoadUint32(&o.OUT1_W1TS.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetOUT1_W1TS_OUT1_DATA_W1TS() uint32 {
	return volatile.LoadUint32(&o.OUT1_W1TS.Reg) & 0xff
}

// GPIO.OUT1_W1TC
func (o *GPIO_Type) SetOUT1_W1TC_OUT1_DATA_W1TC(value uint32) {
	volatile.StoreUint32(&o.OUT1_W1TC.Reg, volatile.LoadUint32(&o.OUT1_W1TC.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetOUT1_W1TC_OUT1_DATA_W1TC() uint32 {
	return volatile.LoadUint32(&o.OUT1_W1TC.Reg) & 0xff
}

// GPIO.SDIO_SELECT
func (o *GPIO_Type) SetSDIO_SELECT_SDIO_SEL(value uint32) {
	volatile.StoreUint32(&o.SDIO_SELECT.Reg, volatile.LoadUint32(&o.SDIO_SELECT.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSDIO_SELECT_SDIO_SEL() uint32 {
	return volatile.LoadUint32(&o.SDIO_SELECT.Reg) & 0xff
}

// GPIO.ENABLE
func (o *GPIO_Type) SetENABLE(value uint32) {
	volatile.StoreUint32(&o.ENABLE.Reg, value)
}
func (o *GPIO_Type) GetENABLE() uint32 {
	return volatile.LoadUint32(&o.ENABLE.Reg)
}

// GPIO.ENABLE_W1TS
func (o *GPIO_Type) SetENABLE_W1TS(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TS.Reg, value)
}
func (o *GPIO_Type) GetENABLE_W1TS() uint32 {
	return volatile.LoadUint32(&o.ENABLE_W1TS.Reg)
}

// GPIO.ENABLE_W1TC
func (o *GPIO_Type) SetENABLE_W1TC(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TC.Reg, value)
}
func (o *GPIO_Type) GetENABLE_W1TC() uint32 {
	return volatile.LoadUint32(&o.ENABLE_W1TC.Reg)
}

// GPIO.ENABLE1
func (o *GPIO_Type) SetENABLE1_DATA(value uint32) {
	volatile.StoreUint32(&o.ENABLE1.Reg, volatile.LoadUint32(&o.ENABLE1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetENABLE1_DATA() uint32 {
	return volatile.LoadUint32(&o.ENABLE1.Reg) & 0xff
}

// GPIO.ENABLE1_W1TS
func (o *GPIO_Type) SetENABLE1_W1TS_ENABLE1_DATA_W1TS(value uint32) {
	volatile.StoreUint32(&o.ENABLE1_W1TS.Reg, volatile.LoadUint32(&o.ENABLE1_W1TS.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetENABLE1_W1TS_ENABLE1_DATA_W1TS() uint32 {
	return volatile.LoadUint32(&o.ENABLE1_W1TS.Reg) & 0xff
}

// GPIO.ENABLE1_W1TC
func (o *GPIO_Type) SetENABLE1_W1TC_ENABLE1_DATA_W1TC(value uint32) {
	volatile.StoreUint32(&o.ENABLE1_W1TC.Reg, volatile.LoadUint32(&o.ENABLE1_W1TC.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetENABLE1_W1TC_ENABLE1_DATA_W1TC() uint32 {
	return volatile.LoadUint32(&o.ENABLE1_W1TC.Reg) & 0xff
}

// GPIO.STRAP
func (o *GPIO_Type) SetSTRAP_STRAPPING(value uint32) {
	volatile.StoreUint32(&o.STRAP.Reg, volatile.LoadUint32(&o.STRAP.Reg)&^(0xffff)|value)
}
func (o *GPIO_Type) GetSTRAP_STRAPPING() uint32 {
	return volatile.LoadUint32(&o.STRAP.Reg) & 0xffff
}

// GPIO.IN
func (o *GPIO_Type) SetIN(value uint32) {
	volatile.StoreUint32(&o.IN.Reg, value)
}
func (o *GPIO_Type) GetIN() uint32 {
	return volatile.LoadUint32(&o.IN.Reg)
}

// GPIO.IN1
func (o *GPIO_Type) SetIN1_DATA_NEXT(value uint32) {
	volatile.StoreUint32(&o.IN1.Reg, volatile.LoadUint32(&o.IN1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetIN1_DATA_NEXT() uint32 {
	return volatile.LoadUint32(&o.IN1.Reg) & 0xff
}

// GPIO.STATUS
func (o *GPIO_Type) SetSTATUS(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, value)
}
func (o *GPIO_Type) GetSTATUS() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg)
}

// GPIO.STATUS_W1TS
func (o *GPIO_Type) SetSTATUS_W1TS(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TS.Reg, value)
}
func (o *GPIO_Type) GetSTATUS_W1TS() uint32 {
	return volatile.LoadUint32(&o.STATUS_W1TS.Reg)
}

// GPIO.STATUS_W1TC
func (o *GPIO_Type) SetSTATUS_W1TC(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TC.Reg, value)
}
func (o *GPIO_Type) GetSTATUS_W1TC() uint32 {
	return volatile.LoadUint32(&o.STATUS_W1TC.Reg)
}

// GPIO.STATUS1
func (o *GPIO_Type) SetSTATUS1_INT(value uint32) {
	volatile.StoreUint32(&o.STATUS1.Reg, volatile.LoadUint32(&o.STATUS1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSTATUS1_INT() uint32 {
	return volatile.LoadUint32(&o.STATUS1.Reg) & 0xff
}

// GPIO.STATUS1_W1TS
func (o *GPIO_Type) SetSTATUS1_W1TS_STATUS1_INT_W1TS(value uint32) {
	volatile.StoreUint32(&o.STATUS1_W1TS.Reg, volatile.LoadUint32(&o.STATUS1_W1TS.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSTATUS1_W1TS_STATUS1_INT_W1TS() uint32 {
	return volatile.LoadUint32(&o.STATUS1_W1TS.Reg) & 0xff
}

// GPIO.STATUS1_W1TC
func (o *GPIO_Type) SetSTATUS1_W1TC_STATUS1_INT_W1TC(value uint32) {
	volatile.StoreUint32(&o.STATUS1_W1TC.Reg, volatile.LoadUint32(&o.STATUS1_W1TC.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSTATUS1_W1TC_STATUS1_INT_W1TC() uint32 {
	return volatile.LoadUint32(&o.STATUS1_W1TC.Reg) & 0xff
}

// GPIO.ACPU_INT
func (o *GPIO_Type) SetACPU_INT(value uint32) {
	volatile.StoreUint32(&o.ACPU_INT.Reg, value)
}
func (o *GPIO_Type) GetACPU_INT() uint32 {
	return volatile.LoadUint32(&o.ACPU_INT.Reg)
}

// GPIO.ACPU_NMI_INT
func (o *GPIO_Type) SetACPU_NMI_INT(value uint32) {
	volatile.StoreUint32(&o.ACPU_NMI_INT.Reg, value)
}
func (o *GPIO_Type) GetACPU_NMI_INT() uint32 {
	return volatile.LoadUint32(&o.ACPU_NMI_INT.Reg)
}

// GPIO.PCPU_INT
func (o *GPIO_Type) SetPCPU_INT(value uint32) {
	volatile.StoreUint32(&o.PCPU_INT.Reg, value)
}
func (o *GPIO_Type) GetPCPU_INT() uint32 {
	return volatile.LoadUint32(&o.PCPU_INT.Reg)
}

// GPIO.PCPU_NMI_INT
func (o *GPIO_Type) SetPCPU_NMI_INT(value uint32) {
	volatile.StoreUint32(&o.PCPU_NMI_INT.Reg, value)
}
func (o *GPIO_Type) GetPCPU_NMI_INT() uint32 {
	return volatile.LoadUint32(&o.PCPU_NMI_INT.Reg)
}

// GPIO.CPUSDIO_INT
func (o *GPIO_Type) SetCPUSDIO_INT(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT.Reg, value)
}
func (o *GPIO_Type) GetCPUSDIO_INT() uint32 {
	return volatile.LoadUint32(&o.CPUSDIO_INT.Reg)
}

// GPIO.ACPU_INT1
func (o *GPIO_Type) SetACPU_INT1_APPCPU_INT_H(value uint32) {
	volatile.StoreUint32(&o.ACPU_INT1.Reg, volatile.LoadUint32(&o.ACPU_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetACPU_INT1_APPCPU_INT_H() uint32 {
	return volatile.LoadUint32(&o.ACPU_INT1.Reg) & 0xff
}

// GPIO.ACPU_NMI_INT1
func (o *GPIO_Type) SetACPU_NMI_INT1_APPCPU_NMI_INT_H(value uint32) {
	volatile.StoreUint32(&o.ACPU_NMI_INT1.Reg, volatile.LoadUint32(&o.ACPU_NMI_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetACPU_NMI_INT1_APPCPU_NMI_INT_H() uint32 {
	return volatile.LoadUint32(&o.ACPU_NMI_INT1.Reg) & 0xff
}

// GPIO.PCPU_INT1
func (o *GPIO_Type) SetPCPU_INT1_PROCPU_INT_H(value uint32) {
	volatile.StoreUint32(&o.PCPU_INT1.Reg, volatile.LoadUint32(&o.PCPU_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetPCPU_INT1_PROCPU_INT_H() uint32 {
	return volatile.LoadUint32(&o.PCPU_INT1.Reg) & 0xff
}

// GPIO.PCPU_NMI_INT1
func (o *GPIO_Type) SetPCPU_NMI_INT1_PROCPU_NMI_INT_H(value uint32) {
	volatile.StoreUint32(&o.PCPU_NMI_INT1.Reg, volatile.LoadUint32(&o.PCPU_NMI_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetPCPU_NMI_INT1_PROCPU_NMI_INT_H() uint32 {
	return volatile.LoadUint32(&o.PCPU_NMI_INT1.Reg) & 0xff
}

// GPIO.CPUSDIO_INT1
func (o *GPIO_Type) SetCPUSDIO_INT1_SDIO_INT_H(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT1.Reg, volatile.LoadUint32(&o.CPUSDIO_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetCPUSDIO_INT1_SDIO_INT_H() uint32 {
	return volatile.LoadUint32(&o.CPUSDIO_INT1.Reg) & 0xff
}
func (o *GPIO_Type) SetCPUSDIO_INT1_PIN_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT1.Reg, volatile.LoadUint32(&o.CPUSDIO_INT1.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetCPUSDIO_INT1_PIN_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.CPUSDIO_INT1.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetCPUSDIO_INT1_PIN_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT1.Reg, volatile.LoadUint32(&o.CPUSDIO_INT1.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetCPUSDIO_INT1_PIN_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.CPUSDIO_INT1.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetCPUSDIO_INT1_PIN_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT1.Reg, volatile.LoadUint32(&o.CPUSDIO_INT1.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetCPUSDIO_INT1_PIN_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CPUSDIO_INT1.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetCPUSDIO_INT1_PIN_CONFIG(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT1.Reg, volatile.LoadUint32(&o.CPUSDIO_INT1.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetCPUSDIO_INT1_PIN_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.CPUSDIO_INT1.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetCPUSDIO_INT1_PIN_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT1.Reg, volatile.LoadUint32(&o.CPUSDIO_INT1.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetCPUSDIO_INT1_PIN_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.CPUSDIO_INT1.Reg) & 0x3e000) >> 13
}

// GPIO.PIN0
func (o *GPIO_Type) SetPIN0_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN0_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN0_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN0_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN0_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN0_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN0_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN0_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x3e000) >> 13
}

// GPIO.PIN1
func (o *GPIO_Type) SetPIN1_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN1_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN1_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN1_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN1_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN1_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN1_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN1_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x3e000) >> 13
}

// GPIO.PIN2
func (o *GPIO_Type) SetPIN2_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN2_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN2_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN2_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN2_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN2_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN2_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN2_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x3e000) >> 13
}

// GPIO.PIN3
func (o *GPIO_Type) SetPIN3_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN3_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN3_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN3_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN3_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN3_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN3_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN3_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x3e000) >> 13
}

// GPIO.PIN4
func (o *GPIO_Type) SetPIN4_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN4_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN4_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN4_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN4_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN4_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN4_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN4_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x3e000) >> 13
}

// GPIO.PIN5
func (o *GPIO_Type) SetPIN5_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN5_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN5_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN5_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN5_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN5_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN5_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN5_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x3e000) >> 13
}

// GPIO.PIN6
func (o *GPIO_Type) SetPIN6_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN6_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN6_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN6_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN6_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN6_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN6_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN6_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x3e000) >> 13
}

// GPIO.PIN7
func (o *GPIO_Type) SetPIN7_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN7_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN7_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN7_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN7_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN7_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN7_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN7_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x3e000) >> 13
}

// GPIO.PIN8
func (o *GPIO_Type) SetPIN8_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN8_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN8_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN8_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN8_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN8_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN8_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN8_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN8_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN8_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x3e000) >> 13
}

// GPIO.PIN9
func (o *GPIO_Type) SetPIN9_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN9_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN9_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN9_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN9_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN9_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN9_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN9_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN9_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN9_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x3e000) >> 13
}

// GPIO.PIN10
func (o *GPIO_Type) SetPIN10_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN10_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN10_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN10_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN10_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN10_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN10_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN10_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN10_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN10_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x3e000) >> 13
}

// GPIO.PIN11
func (o *GPIO_Type) SetPIN11_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN11_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN11_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN11_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN11_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN11_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN11_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN11_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN11_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN11_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x3e000) >> 13
}

// GPIO.PIN12
func (o *GPIO_Type) SetPIN12_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN12_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN12_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN12_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN12_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN12_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN12_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN12_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN12_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN12_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x3e000) >> 13
}

// GPIO.PIN13
func (o *GPIO_Type) SetPIN13_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN13_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN13_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN13_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN13_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN13_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN13_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN13_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN13_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN13_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x3e000) >> 13
}

// GPIO.PIN14
func (o *GPIO_Type) SetPIN14_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN14_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN14_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN14_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN14_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN14_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN14_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN14_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN14_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN14_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x3e000) >> 13
}

// GPIO.PIN15
func (o *GPIO_Type) SetPIN15_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN15_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN15_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN15_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN15_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN15_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN15_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN15_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN15_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN15_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x3e000) >> 13
}

// GPIO.PIN16
func (o *GPIO_Type) SetPIN16_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN16_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN16_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN16_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN16_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN16_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN16_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN16_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN16_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN16_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x3e000) >> 13
}

// GPIO.PIN17
func (o *GPIO_Type) SetPIN17_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN17_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN17_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN17_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN17_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN17_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN17_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN17_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN17_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN17_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x3e000) >> 13
}

// GPIO.PIN18
func (o *GPIO_Type) SetPIN18_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN18_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN18_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN18_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN18_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN18_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN18_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN18_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN18_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN18_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x3e000) >> 13
}

// GPIO.PIN19
func (o *GPIO_Type) SetPIN19_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN19_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN19_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN19_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN19_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN19_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN19_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN19_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN19_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN19_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x3e000) >> 13
}

// GPIO.PIN20
func (o *GPIO_Type) SetPIN20_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN20_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN20_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN20_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN20_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN20_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN20_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN20_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN20_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN20_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x3e000) >> 13
}

// GPIO.PIN21
func (o *GPIO_Type) SetPIN21_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN21_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN21_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN21_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN21_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN21_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN21_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN21_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN21_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN21_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x3e000) >> 13
}

// GPIO.PIN22
func (o *GPIO_Type) SetPIN22_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN22_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN22_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN22_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN22_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN22_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN22_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN22_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN22_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN22_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x3e000) >> 13
}

// GPIO.PIN23
func (o *GPIO_Type) SetPIN23_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN23_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN23_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN23_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN23_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN23_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN23_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN23_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN23_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN23_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x3e000) >> 13
}

// GPIO.PIN24
func (o *GPIO_Type) SetPIN24_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN24_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN24_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN24_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN24_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN24_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN24_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN24_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN24_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN24_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x3e000) >> 13
}

// GPIO.PIN25
func (o *GPIO_Type) SetPIN25_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN25_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN25_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN25_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN25_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN25_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN25_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN25_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN25_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN25_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x3e000) >> 13
}

// GPIO.PIN26
func (o *GPIO_Type) SetPIN26_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN26_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN26_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN26_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN26_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN26_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN26_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN26_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN26_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN26_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x3e000) >> 13
}

// GPIO.PIN27
func (o *GPIO_Type) SetPIN27_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN27_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN27_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN27_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN27_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN27_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN27_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN27_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN27_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN27_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x3e000) >> 13
}

// GPIO.PIN28
func (o *GPIO_Type) SetPIN28_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN28_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN28_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN28_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN28_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN28_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN28_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN28_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN28_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN28_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x3e000) >> 13
}

// GPIO.PIN29
func (o *GPIO_Type) SetPIN29_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN29_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN29_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN29_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN29_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN29_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN29_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN29_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN29_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN29_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x3e000) >> 13
}

// GPIO.PIN30
func (o *GPIO_Type) SetPIN30_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN30_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN30_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN30_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN30_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN30_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN30_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN30_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN30_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN30_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x3e000) >> 13
}

// GPIO.PIN31
func (o *GPIO_Type) SetPIN31_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN31_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN31_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN31_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN31_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN31_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN31_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN31_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN31_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN31_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x3e000) >> 13
}

// GPIO.PIN32
func (o *GPIO_Type) SetPIN32_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN32_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN32_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN32_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN32_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN32_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN32_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN32_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN32_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN32_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x3e000) >> 13
}

// GPIO.PIN33
func (o *GPIO_Type) SetPIN33_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN33_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN33_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN33_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN33_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN33_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN33_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN33_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN33_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN33_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x3e000) >> 13
}

// GPIO.PIN34
func (o *GPIO_Type) SetPIN34_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN34_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN34_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN34_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN34_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN34_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN34_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN34_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN34_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN34_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x3e000) >> 13
}

// GPIO.PIN35
func (o *GPIO_Type) SetPIN35_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN35_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN35_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN35_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN35_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN35_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN35_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN35_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN35_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN35_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x3e000) >> 13
}

// GPIO.PIN36
func (o *GPIO_Type) SetPIN36_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN36_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN36_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN36_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN36_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN36_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN36_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN36_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN36_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN36_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x3e000) >> 13
}

// GPIO.PIN37
func (o *GPIO_Type) SetPIN37_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN37_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN37_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN37_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN37_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN37_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN37_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN37_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN37_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN37_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x3e000) >> 13
}

// GPIO.PIN38
func (o *GPIO_Type) SetPIN38_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN38_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN38_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN38_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN38_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN38_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN38_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN38_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN38_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN38_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x3e000) >> 13
}

// GPIO.PIN39
func (o *GPIO_Type) SetPIN39_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN39_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x4) >> 2
}
func (o *GPIO_Type) SetPIN39_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN39_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN39_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN39_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN39_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN39_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN39_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN39_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x3e000) >> 13
}

// GPIO.CALI_CONF
func (o *GPIO_Type) SetCALI_CONF_CALI_RTC_MAX(value uint32) {
	volatile.StoreUint32(&o.CALI_CONF.Reg, volatile.LoadUint32(&o.CALI_CONF.Reg)&^(0x3ff)|value)
}
func (o *GPIO_Type) GetCALI_CONF_CALI_RTC_MAX() uint32 {
	return volatile.LoadUint32(&o.CALI_CONF.Reg) & 0x3ff
}
func (o *GPIO_Type) SetCALI_CONF_CALI_START(value uint32) {
	volatile.StoreUint32(&o.CALI_CONF.Reg, volatile.LoadUint32(&o.CALI_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_Type) GetCALI_CONF_CALI_START() uint32 {
	return (volatile.LoadUint32(&o.CALI_CONF.Reg) & 0x80000000) >> 31
}

// GPIO.CALI_DATA
func (o *GPIO_Type) SetCALI_DATA_CALI_VALUE_SYNC2(value uint32) {
	volatile.StoreUint32(&o.CALI_DATA.Reg, volatile.LoadUint32(&o.CALI_DATA.Reg)&^(0xfffff)|value)
}
func (o *GPIO_Type) GetCALI_DATA_CALI_VALUE_SYNC2() uint32 {
	return volatile.LoadUint32(&o.CALI_DATA.Reg) & 0xfffff
}
func (o *GPIO_Type) SetCALI_DATA_CALI_RDY_REAL(value uint32) {
	volatile.StoreUint32(&o.CALI_DATA.Reg, volatile.LoadUint32(&o.CALI_DATA.Reg)&^(0x40000000)|value<<30)
}
func (o *GPIO_Type) GetCALI_DATA_CALI_RDY_REAL() uint32 {
	return (volatile.LoadUint32(&o.CALI_DATA.Reg) & 0x40000000) >> 30
}
func (o *GPIO_Type) SetCALI_DATA_CALI_RDY_SYNC2(value uint32) {
	volatile.StoreUint32(&o.CALI_DATA.Reg, volatile.LoadUint32(&o.CALI_DATA.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_Type) GetCALI_DATA_CALI_RDY_SYNC2() uint32 {
	return (volatile.LoadUint32(&o.CALI_DATA.Reg) & 0x80000000) >> 31
}

// GPIO.FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC0_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC0_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC0_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC0_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC0_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC0_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC1_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC1_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC1_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC1_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC1_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC1_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC1_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC2_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC2_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC2_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC2_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC2_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC2_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC2_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC3_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC3_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC3_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC3_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC3_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC3_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC3_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC4_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC4_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC4_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC4_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC4_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC4_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC4_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC5_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC5_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC5_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC5_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC5_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC5_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC5_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC6_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC6_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC6_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC6_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC6_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC6_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC6_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC7_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC7_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC7_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC7_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC7_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC7_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC7_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC8_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC8_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC8_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC8_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC8_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC8_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC8_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC9_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC9_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC9_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC9_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC9_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC9_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC9_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC10_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC10_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC10_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC10_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC10_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC10_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC10_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC11_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC11_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC11_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC11_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC11_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC11_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC11_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC12_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC12_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC12_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC12_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC12_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC12_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC12_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC13_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC13_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC13_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC13_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC13_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC13_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC13_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC14_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC14_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC14_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC14_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC14_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC14_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC14_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC15_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC15_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC15_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC15_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC15_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC15_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC15_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC16_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC16_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC16_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC16_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC16_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC16_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC16_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC17_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC17_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC17_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC17_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC17_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC17_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC17_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC18_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC18_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC18_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC18_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC18_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC18_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC18_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC19_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC19_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC19_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC19_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC19_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC19_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC19_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC20_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC20_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC20_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC20_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC20_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC20_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC20_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC21_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC21_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC21_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC21_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC21_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC21_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC21_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC22_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC22_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC22_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC22_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC22_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC22_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC22_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC23_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC23_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC23_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC23_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC23_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC23_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC23_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC24_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC24_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC24_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC24_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC24_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC24_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC24_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC25_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC25_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC25_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC25_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC25_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC25_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC25_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC26_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC26_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC26_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC26_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC26_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC26_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC26_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC27_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC27_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC27_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC27_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC27_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC27_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC27_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC28_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC28_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC28_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC28_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC28_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC28_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC28_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC29_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC29_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC29_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC29_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC29_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC29_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC29_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC30_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC30_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC30_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC30_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC30_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC30_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC30_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC31_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC31_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC31_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC31_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC31_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC31_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC31_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC32_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC32_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC32_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC32_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC32_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC32_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC32_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC33_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC33_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC33_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC33_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC33_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC33_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC33_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC34_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC34_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC34_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC34_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC34_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC34_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC34_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC35_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC35_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC35_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC35_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC35_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC35_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC35_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC36_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC36_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC36_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC36_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC36_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC36_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC36_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC37_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC37_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC37_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC37_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC37_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC37_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC37_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC38_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC38_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC38_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC38_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC38_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC38_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC38_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC39_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC39_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC39_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC39_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC39_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC39_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC39_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC40_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC40_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC40_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC40_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC40_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC40_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC40_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC40_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC40_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC40_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC41_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC41_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC41_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC41_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC41_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC41_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC41_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC41_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC41_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC41_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC42_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC42_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC42_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC42_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC42_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC42_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC42_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC42_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC42_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC42_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC43_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC43_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC43_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC43_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC43_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC43_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC43_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC43_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC43_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC43_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC44_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC44_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC44_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC44_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC44_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC44_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC44_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC44_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC44_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC44_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC45_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC45_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC45_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC45_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC45_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC45_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC45_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC45_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC45_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC45_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC46_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC46_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC46_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC46_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC46_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC46_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC46_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC46_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC46_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC46_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC47_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC47_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC47_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC47_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC47_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC47_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC47_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC47_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC47_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC47_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC48_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC48_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC48_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC48_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC48_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC48_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC48_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC48_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC48_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC48_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC49_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC49_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC49_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC49_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC49_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC49_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC49_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC49_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC49_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC49_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC50_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC50_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC50_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC50_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC50_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC50_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC50_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC50_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC50_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC50_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC51_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC51_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC51_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC51_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC51_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC51_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC51_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC51_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC51_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC51_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC52_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC52_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC52_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC52_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC52_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC52_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC52_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC52_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC52_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC52_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC53_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC53_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC53_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC53_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC53_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC53_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC53_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC53_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC53_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC53_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC54_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC54_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC54_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC54_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC54_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC54_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC54_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC54_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC54_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC54_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC55_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC55_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC55_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC55_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC55_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC55_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC55_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC55_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC55_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC55_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC56_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC56_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC56_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC56_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC56_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC56_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC56_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC56_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC56_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC56_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC57_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC57_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC57_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC57_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC57_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC57_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC57_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC57_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC57_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC57_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC58_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC58_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC58_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC58_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC58_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC58_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC58_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC58_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC58_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC58_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC59_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC59_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC59_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC59_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC59_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC59_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC59_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC59_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC59_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC59_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC60_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC60_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC60_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC60_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC60_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC60_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC60_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC60_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC60_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC60_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC61_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC61_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC61_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC61_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC61_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC61_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC61_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC61_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC61_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC61_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC62_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC62_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC62_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC62_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC62_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC62_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC62_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC62_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC62_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC62_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC63_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC63_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC63_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC63_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC63_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC63_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC63_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC63_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC63_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC63_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC64_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC64_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC64_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC64_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC64_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC64_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC64_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC64_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC64_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC64_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC65_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC65_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC65_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC65_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC65_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC65_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC65_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC65_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC65_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC65_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC66_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC66_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC66_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC66_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC66_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC66_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC66_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC66_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC66_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC66_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC67_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC67_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC67_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC67_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC67_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC67_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC67_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC67_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC67_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC67_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC68_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC68_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC68_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC68_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC68_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC68_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC68_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC68_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC68_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC68_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC69_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC69_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC69_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC69_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC69_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC69_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC69_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC69_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC69_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC69_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC70_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC70_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC70_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC70_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC70_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC70_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC70_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC70_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC70_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC70_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC71_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC71_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC71_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC71_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC71_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC71_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC71_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC71_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC71_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC71_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC72_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC72_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC72_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC72_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC72_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC72_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC72_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC72_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC72_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC72_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC73_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC73_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC73_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC73_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC73_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC73_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC73_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC73_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC73_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC73_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC74_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC74_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC74_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC74_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC74_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC74_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC74_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC74_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC74_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC74_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC75_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC75_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC75_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC75_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC75_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC75_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC75_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC75_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC75_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC75_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC76_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC76_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC76_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC76_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC76_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC76_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC76_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC76_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC76_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC76_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC77_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC77_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC77_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC77_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC77_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC77_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC77_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC77_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC77_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC77_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC78_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC78_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC78_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC78_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC78_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC78_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC78_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC78_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC78_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC78_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC79_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC79_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC79_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC79_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC79_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC79_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC79_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC79_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC79_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC79_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC80_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC80_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC80_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC80_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC80_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC80_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC80_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC80_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC80_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC80_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC81_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC81_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC81_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC81_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC81_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC81_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC81_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC81_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC81_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC81_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC82_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC82_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC82_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC82_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC82_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC82_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC82_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC82_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC82_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC82_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC83_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC83_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC83_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC83_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC83_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC83_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC83_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC83_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC83_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC83_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC84_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC84_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC84_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC84_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC84_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC84_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC84_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC84_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC84_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC84_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC85_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC85_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC85_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC85_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC85_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC85_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC85_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC85_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC85_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC85_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC86_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC86_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC86_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC86_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC86_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC86_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC86_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC86_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC86_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC86_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC87_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC87_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC87_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC87_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC87_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC87_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC87_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC87_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC87_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC87_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC88_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC88_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC88_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC88_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC88_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC88_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC88_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC88_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC88_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC88_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC89_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC89_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC89_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC89_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC89_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC89_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC89_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC89_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC89_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC89_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC90_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC90_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC90_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC90_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC90_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC90_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC90_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC90_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC90_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC90_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC91_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC91_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC91_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC91_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC91_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC91_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC91_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC91_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC91_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC91_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC92_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC92_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC92_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC92_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC92_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC92_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC92_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC92_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC92_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC92_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC93_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC93_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC93_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC93_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC93_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC93_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC93_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC93_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC93_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC93_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC94_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC94_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC94_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC94_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC94_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC94_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC94_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC94_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC94_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC94_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC95_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC95_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC95_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC95_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC95_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC95_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC95_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC95_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC95_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC95_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC96_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC96_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC96_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC96_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC96_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC96_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC96_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC96_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC96_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC96_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC97_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC97_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC97_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC97_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC97_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC97_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC97_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC97_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC97_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC97_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC98_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC98_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC98_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC98_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC98_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC98_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC98_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC98_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC98_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC98_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC99_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC99_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC99_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC99_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC99_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC99_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC99_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC99_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC99_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC99_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC100_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC100_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC100_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC100_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC100_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC100_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC100_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC100_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC100_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC100_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC101_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC101_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC101_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC101_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC101_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC101_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC101_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC101_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC101_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC101_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC102_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC102_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC102_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC102_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC102_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC102_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC102_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC102_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC102_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC102_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC103_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC103_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC103_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC103_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC103_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC103_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC103_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC103_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC103_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC103_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC104_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC104_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC104_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC104_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC104_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC104_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC104_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC104_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC104_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC104_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC105_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC105_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC105_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC105_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC105_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC105_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC105_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC105_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC105_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC105_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC106_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC106_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC106_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC106_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC106_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC106_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC106_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC106_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC106_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC106_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC107_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC107_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC107_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC107_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC107_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC107_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC107_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC107_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC107_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC107_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC108_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC108_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC108_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC108_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC108_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC108_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC108_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC108_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC108_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC108_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC109_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC109_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC109_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC109_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC109_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC109_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC109_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC109_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC109_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC109_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC110_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC110_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC110_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC110_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC110_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC110_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC110_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC110_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC110_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC110_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC111_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC111_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC111_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC111_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC111_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC111_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC111_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC111_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC111_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC111_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC112_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC112_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC112_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC112_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC112_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC112_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC112_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC112_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC112_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC112_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC113_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC113_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC113_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC113_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC113_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC113_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC113_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC113_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC113_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC113_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC114_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC114_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC114_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC114_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC114_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC114_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC114_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC114_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC114_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC114_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC115_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC115_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC115_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC115_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC115_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC115_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC115_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC115_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC115_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC115_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC116_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC116_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC116_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC116_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC116_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC116_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC116_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC116_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC116_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC116_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC117_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC117_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC117_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC117_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC117_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC117_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC117_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC117_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC117_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC117_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC118_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC118_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC118_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC118_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC118_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC118_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC118_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC118_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC118_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC118_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC119_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC119_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC119_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC119_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC119_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC119_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC119_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC119_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC119_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC119_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC120_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC120_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC120_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC120_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC120_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC120_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC120_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC120_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC120_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC120_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC121_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC121_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC121_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC121_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC121_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC121_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC121_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC121_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC121_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC121_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC122_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC122_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC122_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC122_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC122_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC122_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC122_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC122_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC122_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC122_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC123_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC123_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC123_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC123_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC123_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC123_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC123_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC123_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC123_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC123_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC124_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC124_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC124_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC124_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC124_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC124_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC124_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC124_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC124_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC124_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC125_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC125_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC125_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC125_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC125_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC125_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC125_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC125_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC125_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC125_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC126_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC126_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC126_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC126_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC126_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC126_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC126_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC126_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC126_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC126_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC127_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC127_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC127_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC127_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC127_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC127_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC127_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC127_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC127_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC127_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC128_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC128_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC128_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC128_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC128_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC128_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC128_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC128_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC128_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC128_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC129_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC129_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC129_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC129_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC129_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC129_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC129_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC129_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC129_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC129_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC130_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC130_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC130_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC130_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC130_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC130_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC130_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC130_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC130_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC130_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC131_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC131_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC131_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC131_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC131_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC131_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC131_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC131_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC131_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC131_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC132_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC132_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC132_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC132_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC132_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC132_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC132_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC132_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC132_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC132_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC133_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC133_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC133_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC133_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC133_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC133_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC133_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC133_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC133_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC133_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC134_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC134_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC134_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC134_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC134_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC134_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC134_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC134_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC134_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC134_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC135_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC135_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC135_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC135_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC135_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC135_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC135_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC135_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC135_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC135_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC136_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC136_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC136_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC136_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC136_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC136_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC136_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC136_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC136_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC136_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC137_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC137_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC137_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC137_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC137_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC137_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC137_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC137_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC137_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC137_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC138_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC138_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC138_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC138_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC138_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC138_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC138_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC138_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC138_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC138_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC139_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC139_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC139_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC139_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC139_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC139_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC139_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC139_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC139_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC139_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC140_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC140_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC140_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC140_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC140_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC140_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC140_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC140_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC140_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC140_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC141_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC141_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC141_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC141_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC141_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC141_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC141_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC141_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC141_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC141_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC142_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC142_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC142_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC142_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC142_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC142_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC142_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC142_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC142_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC142_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC143_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC143_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC143_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC143_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC143_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC143_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC143_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC143_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC143_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC143_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC144_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC144_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC144_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC144_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC144_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC144_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC144_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC144_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC144_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC144_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC145_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC145_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC145_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC145_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC145_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC145_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC145_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC145_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC145_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC145_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC146_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC146_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC146_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC146_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC146_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC146_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC146_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC146_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC146_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC146_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC147_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC147_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC147_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC147_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC147_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC147_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC147_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC147_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC147_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC147_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC148_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC148_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC148_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC148_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC148_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC148_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC148_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC148_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC148_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC148_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC149_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC149_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC149_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC149_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC149_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC149_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC149_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC149_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC149_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC149_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC150_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC150_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC150_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC150_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC150_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC150_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC150_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC150_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC150_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC150_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC151_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC151_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC151_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC151_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC151_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC151_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC151_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC151_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC151_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC151_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC152_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC152_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC152_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC152_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC152_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC152_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC152_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC152_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC152_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC152_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC153_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC153_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC153_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC153_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC153_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC153_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC153_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC153_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC153_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC153_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC154_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC154_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC154_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC154_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC154_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC154_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC154_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC154_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC154_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC154_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC155_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC155_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC155_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC155_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC155_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC155_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC155_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC155_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC155_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC155_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC156_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC156_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC156_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC156_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC156_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC156_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC156_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC156_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC156_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC156_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC157_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC157_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC157_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC157_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC157_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC157_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC157_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC157_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC157_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC157_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC158_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC158_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC158_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC158_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC158_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC158_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC158_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC158_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC158_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC158_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC159_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC159_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC159_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC159_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC159_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC159_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC159_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC159_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC159_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC159_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC160_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC160_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC160_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC160_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC160_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC160_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC160_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC160_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC160_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC160_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC161_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC161_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC161_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC161_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC161_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC161_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC161_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC161_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC161_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC161_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC162_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC162_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC162_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC162_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC162_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC162_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC162_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC162_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC162_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC162_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC163_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC163_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC163_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC163_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC163_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC163_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC163_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC163_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC163_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC163_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC164_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC164_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC164_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC164_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC164_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC164_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC164_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC164_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC164_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC164_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC165_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC165_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC165_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC165_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC165_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC165_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC165_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC165_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC165_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC165_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC166_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC166_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC166_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC166_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC166_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC166_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC166_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC166_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC166_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC166_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC167_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC167_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC167_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC167_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC167_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC167_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC167_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC167_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC167_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC167_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC168_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC168_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC168_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC168_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC168_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC168_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC168_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC168_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC168_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC168_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC169_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC169_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC169_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC169_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC169_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC169_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC169_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC169_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC169_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC169_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC170_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC170_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC170_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC170_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC170_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC170_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC170_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC170_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC170_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC170_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC171_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC171_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC171_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC171_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC171_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC171_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC171_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC171_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC171_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC171_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC172_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC172_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC172_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC172_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC172_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC172_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC172_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC172_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC172_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC172_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC173_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC173_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC173_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC173_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC173_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC173_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC173_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC173_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC173_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC173_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC174_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC174_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC174_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC174_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC174_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC174_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC174_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC174_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC174_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC174_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC175_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC175_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC175_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC175_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC175_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC175_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC175_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC175_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC175_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC175_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC176_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC176_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC176_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC176_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC176_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC176_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC176_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC176_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC176_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC176_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC177_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC177_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC177_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC177_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC177_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC177_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC177_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC177_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC177_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC177_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC178_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC178_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC178_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC178_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC178_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC178_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC178_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC178_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC178_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC178_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC179_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC179_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC179_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC179_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC179_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC179_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC179_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC179_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC179_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC179_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC180_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC180_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC180_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC180_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC180_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC180_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC180_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC180_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC180_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC180_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC181_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC181_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC181_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC181_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC181_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC181_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC181_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC181_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC181_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC181_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC182_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC182_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC182_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC182_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC182_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC182_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC182_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC182_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC182_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC182_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC183_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC183_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC183_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC183_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC183_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC183_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC183_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC183_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC183_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC183_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC184_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC184_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC184_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC184_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC184_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC184_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC184_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC184_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC184_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC184_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC185_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC185_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC185_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC185_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC185_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC185_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC185_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC185_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC185_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC185_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC186_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC186_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC186_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC186_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC186_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC186_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC186_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC186_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC186_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC186_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC187_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC187_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC187_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC187_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC187_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC187_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC187_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC187_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC187_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC187_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC188_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC188_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC188_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC188_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC188_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC188_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC188_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC188_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC188_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC188_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC189_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC189_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC189_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC189_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC189_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC189_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC189_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC189_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC189_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC189_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC190_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC190_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC190_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC190_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC190_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC190_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC190_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC190_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC190_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC190_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC191_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC191_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC191_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC191_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC191_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC191_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC191_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC191_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC191_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC191_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC192_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC192_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC192_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC192_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC192_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC192_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC192_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC192_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC192_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC192_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC193_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC193_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC193_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC193_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC193_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC193_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC193_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC193_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC193_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC193_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC194_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC194_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC194_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC194_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC194_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC194_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC194_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC194_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC194_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC194_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC195_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC195_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC195_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC195_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC195_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC195_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC195_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC195_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC195_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC195_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC196_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC196_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC196_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC196_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC196_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC196_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC196_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC196_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC196_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC196_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC197_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC197_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC197_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC197_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC197_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC197_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC197_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC197_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC197_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC197_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC198_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC198_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC198_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC198_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC198_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC198_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC198_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC198_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC198_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC198_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC199_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC199_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC199_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC199_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC199_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC199_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC199_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC199_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC199_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC199_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC200_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC200_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC200_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC200_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC200_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC200_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC200_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC200_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC200_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC200_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC201_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC201_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC201_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC201_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC201_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC201_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC201_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC201_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC201_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC201_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC202_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC202_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC202_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC202_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC202_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC202_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC202_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC202_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC202_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC202_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC203_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC203_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC203_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC203_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC203_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC203_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC203_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC203_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC203_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC203_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC204_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC204_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC204_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC204_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC204_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC204_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC204_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC204_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC204_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC204_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC205_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC205_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC205_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC205_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC205_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC205_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC205_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC205_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC205_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC205_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC206_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC206_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC206_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC206_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC206_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC206_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC206_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC206_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC206_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC206_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC207_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC207_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC207_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC207_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC207_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC207_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC207_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC207_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC207_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC207_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC208_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC208_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC208_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC208_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC208_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC208_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC208_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC208_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC208_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC208_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC209_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC209_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC209_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC209_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC209_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC209_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC209_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC209_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC209_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC209_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC210_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC210_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC210_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC210_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC210_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC210_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC210_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC210_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC210_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC210_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC211_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC211_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC211_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC211_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC211_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC211_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC211_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC211_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC211_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC211_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC212_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC212_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC212_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC212_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC212_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC212_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC212_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC212_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC212_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC212_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC213_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC213_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC213_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC213_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC213_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC213_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC213_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC213_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC213_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC213_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC214_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC214_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC214_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC214_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC214_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC214_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC214_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC214_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC214_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC214_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC215_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC215_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC215_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC215_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC215_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC215_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC215_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC215_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC215_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC215_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC216_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC216_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC216_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC216_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC216_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC216_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC216_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC216_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC216_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC216_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC217_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC217_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC217_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC217_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC217_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC217_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC217_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC217_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC217_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC217_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC218_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC218_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC218_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC218_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC218_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC218_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC218_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC218_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC218_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC218_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC219_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC219_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC219_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC219_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC219_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC219_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC219_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC219_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC219_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC219_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC220_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC220_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC220_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC220_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC220_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC220_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC220_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC220_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC220_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC220_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC221_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC221_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC221_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC221_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC221_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC221_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC221_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC221_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC221_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC221_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC222_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC222_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC222_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC222_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC222_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC222_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC222_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC222_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC222_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC222_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC223_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC223_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC223_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC223_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC223_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC223_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC223_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC223_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC223_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC223_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC224_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC224_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC224_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC224_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC224_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC224_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC224_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC224_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC224_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC224_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC225_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC225_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC225_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC225_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC225_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC225_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC225_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC225_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC225_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC225_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC226_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC226_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC226_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC226_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC226_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC226_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC226_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC226_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC226_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC226_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC227_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC227_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC227_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC227_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC227_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC227_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC227_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC227_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC227_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC227_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC228_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC228_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC228_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC228_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC228_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC228_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC228_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC228_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC228_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC228_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC229_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC229_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC229_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC229_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC229_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC229_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC229_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC229_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC229_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC229_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC230_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC230_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC230_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC230_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC230_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC230_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC230_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC230_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC230_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC230_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC231_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC231_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC231_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC231_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC231_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC231_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC231_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC231_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC231_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC231_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC232_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC232_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC232_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC232_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC232_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC232_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC232_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC232_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC232_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC232_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC233_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC233_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC233_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC233_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC233_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC233_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC233_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC233_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC233_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC233_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC234_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC234_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC234_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC234_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC234_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC234_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC234_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC234_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC234_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC234_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC235_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC235_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC235_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC235_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC235_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC235_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC235_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC235_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC235_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC235_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC236_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC236_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC236_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC236_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC236_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC236_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC236_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC236_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC236_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC236_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC237_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC237_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC237_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC237_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC237_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC237_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC237_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC237_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC237_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC237_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC238_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC238_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC238_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC238_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC238_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC238_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC238_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC238_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC238_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC238_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC239_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC239_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC239_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC239_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC239_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC239_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC239_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC239_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC239_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC239_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC240_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC240_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC240_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC240_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC240_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC240_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC240_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC240_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC240_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC240_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC241_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC241_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC241_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC241_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC241_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC241_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC241_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC241_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC241_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC241_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC242_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC242_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC242_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC242_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC242_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC242_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC242_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC242_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC242_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC242_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC243_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC243_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC243_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC243_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC243_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC243_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC243_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC243_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC243_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC243_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC244_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC244_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC244_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC244_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC244_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC244_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC244_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC244_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC244_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC244_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC245_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC245_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC245_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC245_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC245_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC245_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC245_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC245_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC245_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC245_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC246_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC246_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC246_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC246_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC246_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC246_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC246_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC246_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC246_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC246_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC247_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC247_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC247_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC247_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC247_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC247_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC247_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC247_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC247_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC247_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC248_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC248_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC248_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC248_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC248_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC248_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC248_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC248_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC248_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC248_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC249_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC249_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC249_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC249_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC249_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC249_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC249_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC249_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC249_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC249_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC250_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC250_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC250_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC250_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC250_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC250_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC250_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC250_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC250_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC250_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC251_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC251_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC251_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC251_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC251_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC251_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC251_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC251_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC251_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC251_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC252_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC252_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC252_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC252_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC252_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC252_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC252_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC252_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC252_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC252_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC253_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC253_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC253_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC253_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC253_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC253_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC253_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC253_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC253_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC253_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC254_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC254_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC254_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC254_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC254_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC254_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC254_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC254_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC254_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC254_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC255_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC255_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC255_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC255_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg) & 0x3f
}
func (o *GPIO_Type) SetFUNC255_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC255_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC255_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC255_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC255_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC255_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg) & 0x80) >> 7
}

// GPIO.FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC1_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC2_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC3_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC4_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC5_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC6_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC7_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC8_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC9_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC10_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC11_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC12_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC13_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC14_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC15_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC16_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC17_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC18_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC19_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC20_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC21_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC22_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC23_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC24_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC25_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC26_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC27_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC28_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC29_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC30_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC31_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC32_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC33_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC34_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC35_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC36_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC37_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC38_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// GPIO.FUNC39_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x1ff
}
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x800) >> 11
}

// Sigma-Delta Modulation
type GPIO_SIGMADELTA_Type struct {
	SIGMADELTA0 volatile.Register32 // 0x0
	SIGMADELTA1 volatile.Register32 // 0x4
	SIGMADELTA2 volatile.Register32 // 0x8
	SIGMADELTA3 volatile.Register32 // 0xC
	SIGMADELTA4 volatile.Register32 // 0x10
	SIGMADELTA5 volatile.Register32 // 0x14
	SIGMADELTA6 volatile.Register32 // 0x18
	SIGMADELTA7 volatile.Register32 // 0x1C
	CG          volatile.Register32 // 0x20
	MISC        volatile.Register32 // 0x24
	VERSION     volatile.Register32 // 0x28
}

// GPIO_SIGMADELTA.SIGMADELTA0
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA0_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA0.Reg, volatile.LoadUint32(&o.SIGMADELTA0.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA0_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA0.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA0_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA0.Reg, volatile.LoadUint32(&o.SIGMADELTA0.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA0_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA0.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.SIGMADELTA1
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA1_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA1.Reg, volatile.LoadUint32(&o.SIGMADELTA1.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA1_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA1.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA1_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA1.Reg, volatile.LoadUint32(&o.SIGMADELTA1.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA1_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA1.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.SIGMADELTA2
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA2_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA2.Reg, volatile.LoadUint32(&o.SIGMADELTA2.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA2_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA2.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA2_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA2.Reg, volatile.LoadUint32(&o.SIGMADELTA2.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA2_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA2.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.SIGMADELTA3
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA3_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA3.Reg, volatile.LoadUint32(&o.SIGMADELTA3.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA3_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA3.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA3_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA3.Reg, volatile.LoadUint32(&o.SIGMADELTA3.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA3_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA3.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.SIGMADELTA4
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA4_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA4.Reg, volatile.LoadUint32(&o.SIGMADELTA4.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA4_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA4.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA4_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA4.Reg, volatile.LoadUint32(&o.SIGMADELTA4.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA4_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA4.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.SIGMADELTA5
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA5_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA5.Reg, volatile.LoadUint32(&o.SIGMADELTA5.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA5_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA5.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA5_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA5.Reg, volatile.LoadUint32(&o.SIGMADELTA5.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA5_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA5.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.SIGMADELTA6
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA6_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA6.Reg, volatile.LoadUint32(&o.SIGMADELTA6.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA6_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA6.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA6_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA6.Reg, volatile.LoadUint32(&o.SIGMADELTA6.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA6_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA6.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.SIGMADELTA7
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA7_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA7.Reg, volatile.LoadUint32(&o.SIGMADELTA7.Reg)&^(0xff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA7_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA7.Reg) & 0xff
}
func (o *GPIO_SIGMADELTA_Type) SetSIGMADELTA7_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA7.Reg, volatile.LoadUint32(&o.SIGMADELTA7.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SIGMADELTA_Type) GetSIGMADELTA7_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA7.Reg) & 0xff00) >> 8
}

// GPIO_SIGMADELTA.CG
func (o *GPIO_SIGMADELTA_Type) SetCG_SD_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CG.Reg, volatile.LoadUint32(&o.CG.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_SIGMADELTA_Type) GetCG_SD_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CG.Reg) & 0x80000000) >> 31
}

// GPIO_SIGMADELTA.MISC
func (o *GPIO_SIGMADELTA_Type) SetMISC_SPI_SWAP(value uint32) {
	volatile.StoreUint32(&o.MISC.Reg, volatile.LoadUint32(&o.MISC.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_SIGMADELTA_Type) GetMISC_SPI_SWAP() uint32 {
	return (volatile.LoadUint32(&o.MISC.Reg) & 0x80000000) >> 31
}

// GPIO_SIGMADELTA.VERSION
func (o *GPIO_SIGMADELTA_Type) SetVERSION_SD_DATE(value uint32) {
	volatile.StoreUint32(&o.VERSION.Reg, volatile.LoadUint32(&o.VERSION.Reg)&^(0xfffffff)|value)
}
func (o *GPIO_SIGMADELTA_Type) GetVERSION_SD_DATE() uint32 {
	return volatile.LoadUint32(&o.VERSION.Reg) & 0xfffffff
}

// HINF Peripheral
type HINF_Type struct {
	CFG_DATA0  volatile.Register32 // 0x0
	CFG_DATA1  volatile.Register32 // 0x4
	_          [20]byte
	CFG_DATA7  volatile.Register32 // 0x1C
	CIS_CONF0  volatile.Register32 // 0x20
	CIS_CONF1  volatile.Register32 // 0x24
	CIS_CONF2  volatile.Register32 // 0x28
	CIS_CONF3  volatile.Register32 // 0x2C
	CIS_CONF4  volatile.Register32 // 0x30
	CIS_CONF5  volatile.Register32 // 0x34
	CIS_CONF6  volatile.Register32 // 0x38
	CIS_CONF7  volatile.Register32 // 0x3C
	CFG_DATA16 volatile.Register32 // 0x40
	_          [184]byte
	DATE       volatile.Register32 // 0xFC
}

// HINF.CFG_DATA0
func (o *HINF_Type) SetCFG_DATA0_USER_ID_FN1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA0.Reg, volatile.LoadUint32(&o.CFG_DATA0.Reg)&^(0xffff)|value)
}
func (o *HINF_Type) GetCFG_DATA0_USER_ID_FN1() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA0.Reg) & 0xffff
}
func (o *HINF_Type) SetCFG_DATA0_DEVICE_ID_FN1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA0.Reg, volatile.LoadUint32(&o.CFG_DATA0.Reg)&^(0xffff0000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA0_DEVICE_ID_FN1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA0.Reg) & 0xffff0000) >> 16
}

// HINF.CFG_DATA1
func (o *HINF_Type) SetCFG_DATA1_SDIO_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x1)|value)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_ENABLE() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x1
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_IOREADY1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x2)|value<<1)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_IOREADY1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x2) >> 1
}
func (o *HINF_Type) SetCFG_DATA1_HIGHSPEED_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x4)|value<<2)
}
func (o *HINF_Type) GetCFG_DATA1_HIGHSPEED_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x4) >> 2
}
func (o *HINF_Type) SetCFG_DATA1_HIGHSPEED_MODE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x8)|value<<3)
}
func (o *HINF_Type) GetCFG_DATA1_HIGHSPEED_MODE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x8) >> 3
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_CD_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x10)|value<<4)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_CD_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x10) >> 4
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_IOREADY2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x20)|value<<5)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_IOREADY2() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x20) >> 5
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_INT_MASK(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x40)|value<<6)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_INT_MASK() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x40) >> 6
}
func (o *HINF_Type) SetCFG_DATA1_IOENABLE2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x80)|value<<7)
}
func (o *HINF_Type) GetCFG_DATA1_IOENABLE2() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x80) >> 7
}
func (o *HINF_Type) SetCFG_DATA1_CD_DISABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x100)|value<<8)
}
func (o *HINF_Type) GetCFG_DATA1_CD_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x100) >> 8
}
func (o *HINF_Type) SetCFG_DATA1_FUNC1_EPS(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x200)|value<<9)
}
func (o *HINF_Type) GetCFG_DATA1_FUNC1_EPS() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x200) >> 9
}
func (o *HINF_Type) SetCFG_DATA1_EMP(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x400)|value<<10)
}
func (o *HINF_Type) GetCFG_DATA1_EMP() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x400) >> 10
}
func (o *HINF_Type) SetCFG_DATA1_IOENABLE1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x800)|value<<11)
}
func (o *HINF_Type) GetCFG_DATA1_IOENABLE1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x800) >> 11
}
func (o *HINF_Type) SetCFG_DATA1_SDIO20_CONF0(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0xf000)|value<<12)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO20_CONF0() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0xf000) >> 12
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_VER(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0xfff0000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_VER() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0xfff0000) >> 16
}
func (o *HINF_Type) SetCFG_DATA1_FUNC2_EPS(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x10000000)|value<<28)
}
func (o *HINF_Type) GetCFG_DATA1_FUNC2_EPS() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x10000000) >> 28
}
func (o *HINF_Type) SetCFG_DATA1_SDIO20_CONF1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0xe0000000)|value<<29)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO20_CONF1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0xe0000000) >> 29
}

// HINF.CFG_DATA7
func (o *HINF_Type) SetCFG_DATA7_PIN_STATE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0xff)|value)
}
func (o *HINF_Type) GetCFG_DATA7_PIN_STATE() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0xff
}
func (o *HINF_Type) SetCFG_DATA7_CHIP_STATE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0xff00)|value<<8)
}
func (o *HINF_Type) GetCFG_DATA7_CHIP_STATE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0xff00) >> 8
}
func (o *HINF_Type) SetCFG_DATA7_SDIO_RST(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0x10000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA7_SDIO_RST() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0x10000) >> 16
}
func (o *HINF_Type) SetCFG_DATA7_SDIO_IOREADY0(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0x20000)|value<<17)
}
func (o *HINF_Type) GetCFG_DATA7_SDIO_IOREADY0() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0x20000) >> 17
}

// HINF.CIS_CONF0
func (o *HINF_Type) SetCIS_CONF0(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF0.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF0() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF0.Reg)
}

// HINF.CIS_CONF1
func (o *HINF_Type) SetCIS_CONF1(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF1.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF1() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF1.Reg)
}

// HINF.CIS_CONF2
func (o *HINF_Type) SetCIS_CONF2(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF2.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF2() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF2.Reg)
}

// HINF.CIS_CONF3
func (o *HINF_Type) SetCIS_CONF3(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF3.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF3() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF3.Reg)
}

// HINF.CIS_CONF4
func (o *HINF_Type) SetCIS_CONF4(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF4.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF4() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF4.Reg)
}

// HINF.CIS_CONF5
func (o *HINF_Type) SetCIS_CONF5(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF5.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF5() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF5.Reg)
}

// HINF.CIS_CONF6
func (o *HINF_Type) SetCIS_CONF6(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF6.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF6() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF6.Reg)
}

// HINF.CIS_CONF7
func (o *HINF_Type) SetCIS_CONF7(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF7.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF7() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF7.Reg)
}

// HINF.CFG_DATA16
func (o *HINF_Type) SetCFG_DATA16_USER_ID_FN2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA16.Reg, volatile.LoadUint32(&o.CFG_DATA16.Reg)&^(0xffff)|value)
}
func (o *HINF_Type) GetCFG_DATA16_USER_ID_FN2() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA16.Reg) & 0xffff
}
func (o *HINF_Type) SetCFG_DATA16_DEVICE_ID_FN2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA16.Reg, volatile.LoadUint32(&o.CFG_DATA16.Reg)&^(0xffff0000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA16_DEVICE_ID_FN2() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA16.Reg) & 0xffff0000) >> 16
}

// HINF.DATE
func (o *HINF_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *HINF_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// I2C (Inter-Integrated Circuit) Controller 0
type I2C_Type struct {
	SCL_LOW_PERIOD   volatile.Register32 // 0x0
	CTR              volatile.Register32 // 0x4
	SR               volatile.Register32 // 0x8
	TO               volatile.Register32 // 0xC
	SLAVE_ADDR       volatile.Register32 // 0x10
	RXFIFO_ST        volatile.Register32 // 0x14
	FIFO_CONF        volatile.Register32 // 0x18
	DATA             volatile.Register32 // 0x1C
	INT_RAW          volatile.Register32 // 0x20
	INT_CLR          volatile.Register32 // 0x24
	INT_ENA          volatile.Register32 // 0x28
	INT_STATUS       volatile.Register32 // 0x2C
	SDA_HOLD         volatile.Register32 // 0x30
	SDA_SAMPLE       volatile.Register32 // 0x34
	SCL_HIGH_PERIOD  volatile.Register32 // 0x38
	_                [4]byte
	SCL_START_HOLD   volatile.Register32 // 0x40
	SCL_RSTART_SETUP volatile.Register32 // 0x44
	SCL_STOP_HOLD    volatile.Register32 // 0x48
	SCL_STOP_SETUP   volatile.Register32 // 0x4C
	SCL_FILTER_CFG   volatile.Register32 // 0x50
	SDA_FILTER_CFG   volatile.Register32 // 0x54
	COMD0            volatile.Register32 // 0x58
	COMD1            volatile.Register32 // 0x5C
	COMD2            volatile.Register32 // 0x60
	COMD3            volatile.Register32 // 0x64
	COMD4            volatile.Register32 // 0x68
	COMD5            volatile.Register32 // 0x6C
	COMD6            volatile.Register32 // 0x70
	COMD7            volatile.Register32 // 0x74
	COMD8            volatile.Register32 // 0x78
	COMD9            volatile.Register32 // 0x7C
	COMD10           volatile.Register32 // 0x80
	COMD11           volatile.Register32 // 0x84
	COMD12           volatile.Register32 // 0x88
	COMD13           volatile.Register32 // 0x8C
	COMD14           volatile.Register32 // 0x90
	COMD15           volatile.Register32 // 0x94
	_                [96]byte
	DATE             volatile.Register32 // 0xF8
	_                [4]byte
	FIFO_START_ADDR  volatile.Register32 // 0x100
}

// I2C.SCL_LOW_PERIOD
func (o *I2C_Type) SetSCL_LOW_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_LOW_PERIOD.Reg, volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetSCL_LOW_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg) & 0x3fff
}

// I2C.CTR
func (o *I2C_Type) SetCTR_SDA_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetCTR_SDA_FORCE_OUT() uint32 {
	return volatile.LoadUint32(&o.CTR.Reg) & 0x1
}
func (o *I2C_Type) SetCTR_SCL_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetCTR_SCL_FORCE_OUT() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetCTR_SAMPLE_SCL_LEVEL(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetCTR_SAMPLE_SCL_LEVEL() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetCTR_MS_MODE(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetCTR_MS_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetCTR_TRANS_START(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetCTR_TRANS_START() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetCTR_TX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetCTR_TX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetCTR_RX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetCTR_RX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetCTR_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetCTR_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x100) >> 8
}

// I2C.SR
func (o *I2C_Type) SetSR_ACK_REC(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetSR_ACK_REC() uint32 {
	return volatile.LoadUint32(&o.SR.Reg) & 0x1
}
func (o *I2C_Type) SetSR_SLAVE_RW(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetSR_SLAVE_RW() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetSR_TIME_OUT(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetSR_TIME_OUT() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetSR_ARB_LOST(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetSR_ARB_LOST() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetSR_BUS_BUSY(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetSR_BUS_BUSY() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetSR_SLAVE_ADDRESSED(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetSR_SLAVE_ADDRESSED() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetSR_BYTE_TRANS(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetSR_BYTE_TRANS() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetSR_RXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x3f00)|value<<8)
}
func (o *I2C_Type) GetSR_RXFIFO_CNT() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x3f00) >> 8
}
func (o *I2C_Type) SetSR_TXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0xfc0000)|value<<18)
}
func (o *I2C_Type) GetSR_TXFIFO_CNT() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0xfc0000) >> 18
}
func (o *I2C_Type) SetSR_SCL_MAIN_STATE_LAST(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x7000000)|value<<24)
}
func (o *I2C_Type) GetSR_SCL_MAIN_STATE_LAST() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x7000000) >> 24
}
func (o *I2C_Type) SetSR_SCL_STATE_LAST(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x70000000)|value<<28)
}
func (o *I2C_Type) GetSR_SCL_STATE_LAST() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x70000000) >> 28
}

// I2C.TO
func (o *I2C_Type) SetTO_TIME_OUT(value uint32) {
	volatile.StoreUint32(&o.TO.Reg, volatile.LoadUint32(&o.TO.Reg)&^(0xfffff)|value)
}
func (o *I2C_Type) GetTO_TIME_OUT() uint32 {
	return volatile.LoadUint32(&o.TO.Reg) & 0xfffff
}

// I2C.SLAVE_ADDR
func (o *I2C_Type) SetSLAVE_ADDR(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x7fff)|value)
}
func (o *I2C_Type) GetSLAVE_ADDR() uint32 {
	return volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x7fff
}
func (o *I2C_Type) SetSLAVE_ADDR_ADDR_10BIT_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetSLAVE_ADDR_ADDR_10BIT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x80000000) >> 31
}

// I2C.RXFIFO_ST
func (o *I2C_Type) SetRXFIFO_ST_RXFIFO_START_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0x1f)|value)
}
func (o *I2C_Type) GetRXFIFO_ST_RXFIFO_START_ADDR() uint32 {
	return volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0x1f
}
func (o *I2C_Type) SetRXFIFO_ST_RXFIFO_END_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0x3e0)|value<<5)
}
func (o *I2C_Type) GetRXFIFO_ST_RXFIFO_END_ADDR() uint32 {
	return (volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0x3e0) >> 5
}
func (o *I2C_Type) SetRXFIFO_ST_TXFIFO_START_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0x7c00)|value<<10)
}
func (o *I2C_Type) GetRXFIFO_ST_TXFIFO_START_ADDR() uint32 {
	return (volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0x7c00) >> 10
}
func (o *I2C_Type) SetRXFIFO_ST_TXFIFO_END_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0xf8000)|value<<15)
}
func (o *I2C_Type) GetRXFIFO_ST_TXFIFO_END_ADDR() uint32 {
	return (volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0xf8000) >> 15
}

// I2C.FIFO_CONF
func (o *I2C_Type) SetFIFO_CONF_RXFIFO_FULL_THRHD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x1f)|value)
}
func (o *I2C_Type) GetFIFO_CONF_RXFIFO_FULL_THRHD() uint32 {
	return volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x1f
}
func (o *I2C_Type) SetFIFO_CONF_TXFIFO_EMPTY_THRHD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x3e0)|value<<5)
}
func (o *I2C_Type) GetFIFO_CONF_TXFIFO_EMPTY_THRHD() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x3e0) >> 5
}
func (o *I2C_Type) SetFIFO_CONF_NONFIFO_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetFIFO_CONF_NONFIFO_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetFIFO_CONF_FIFO_ADDR_CFG_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetFIFO_CONF_FIFO_ADDR_CFG_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetFIFO_CONF_RX_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetFIFO_CONF_RX_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x1000) >> 12
}
func (o *I2C_Type) SetFIFO_CONF_TX_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *I2C_Type) GetFIFO_CONF_TX_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x2000) >> 13
}
func (o *I2C_Type) SetFIFO_CONF_NONFIFO_RX_THRES(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0xfc000)|value<<14)
}
func (o *I2C_Type) GetFIFO_CONF_NONFIFO_RX_THRES() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0xfc000) >> 14
}
func (o *I2C_Type) SetFIFO_CONF_NONFIFO_TX_THRES(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x3f00000)|value<<20)
}
func (o *I2C_Type) GetFIFO_CONF_NONFIFO_TX_THRES() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x3f00000) >> 20
}

// I2C.DATA
func (o *I2C_Type) SetDATA_FIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o.DATA.Reg, volatile.LoadUint32(&o.DATA.Reg)&^(0xff)|value)
}
func (o *I2C_Type) GetDATA_FIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o.DATA.Reg) & 0xff
}

// I2C.INT_RAW
func (o *I2C_Type) SetINT_RAW_RXFIFO_FULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_RAW_RXFIFO_FULL_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *I2C_Type) SetINT_RAW_TXFIFO_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_RAW_TXFIFO_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_RAW_RXFIFO_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_RAW_RXFIFO_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_RAW_END_DETECT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_RAW_END_DETECT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_RAW_SLAVE_TRAN_COMP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_RAW_SLAVE_TRAN_COMP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_RAW_ARBITRATION_LOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_RAW_ARBITRATION_LOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_RAW_MASTER_TRAN_COMP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_RAW_MASTER_TRAN_COMP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_RAW_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_RAW_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_RAW_TIME_OUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_RAW_TIME_OUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_RAW_TRANS_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_RAW_TRANS_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_RAW_ACK_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_RAW_ACK_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_RAW_RX_REC_FULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_RAW_RX_REC_FULL_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_RAW_TX_SEND_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_RAW_TX_SEND_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}

// I2C.INT_CLR
func (o *I2C_Type) SetINT_CLR_RXFIFO_FULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_CLR_RXFIFO_FULL_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *I2C_Type) SetINT_CLR_TXFIFO_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_CLR_TXFIFO_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_CLR_RXFIFO_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_CLR_RXFIFO_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_CLR_END_DETECT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_CLR_END_DETECT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_CLR_SLAVE_TRAN_COMP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_CLR_SLAVE_TRAN_COMP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_CLR_ARBITRATION_LOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_CLR_ARBITRATION_LOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_CLR_MASTER_TRAN_COMP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_CLR_MASTER_TRAN_COMP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_CLR_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_CLR_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_CLR_TIME_OUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_CLR_TIME_OUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_CLR_TRANS_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_CLR_TRANS_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_CLR_ACK_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_CLR_ACK_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_CLR_RX_REC_FULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_CLR_RX_REC_FULL_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_CLR_TX_SEND_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_CLR_TX_SEND_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}

// I2C.INT_ENA
func (o *I2C_Type) SetINT_ENA_RXFIFO_FULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_ENA_RXFIFO_FULL_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *I2C_Type) SetINT_ENA_TXFIFO_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_ENA_TXFIFO_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_ENA_RXFIFO_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_ENA_RXFIFO_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_ENA_END_DETECT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_ENA_END_DETECT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_ENA_SLAVE_TRAN_COMP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_ENA_SLAVE_TRAN_COMP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_ENA_ARBITRATION_LOST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_ENA_ARBITRATION_LOST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_ENA_MASTER_TRAN_COMP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_ENA_MASTER_TRAN_COMP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_ENA_TRANS_COMPLETE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_ENA_TRANS_COMPLETE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_ENA_TIME_OUT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_ENA_TIME_OUT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_ENA_TRANS_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_ENA_TRANS_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_ENA_ACK_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_ENA_ACK_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_ENA_RX_REC_FULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_ENA_RX_REC_FULL_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_ENA_TX_SEND_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_ENA_TX_SEND_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}

// I2C.INT_STATUS
func (o *I2C_Type) SetINT_STATUS_RXFIFO_FULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_STATUS_RXFIFO_FULL_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x1
}
func (o *I2C_Type) SetINT_STATUS_TXFIFO_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_STATUS_TXFIFO_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_STATUS_RXFIFO_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_STATUS_RXFIFO_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_STATUS_END_DETECT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_STATUS_END_DETECT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_STATUS_SLAVE_TRAN_COMP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_STATUS_SLAVE_TRAN_COMP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_STATUS_ARBITRATION_LOST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_STATUS_ARBITRATION_LOST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_STATUS_MASTER_TRAN_COMP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_STATUS_MASTER_TRAN_COMP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_STATUS_TRANS_COMPLETE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_STATUS_TRANS_COMPLETE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_STATUS_TIME_OUT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_STATUS_TIME_OUT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_STATUS_TRANS_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_STATUS_TRANS_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_STATUS_ACK_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_STATUS_ACK_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_STATUS_RX_REC_FULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_STATUS_RX_REC_FULL_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_STATUS_TX_SEND_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_STATUS_TX_SEND_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x1000) >> 12
}

// I2C.SDA_HOLD
func (o *I2C_Type) SetSDA_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.SDA_HOLD.Reg, volatile.LoadUint32(&o.SDA_HOLD.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSDA_HOLD_TIME() uint32 {
	return volatile.LoadUint32(&o.SDA_HOLD.Reg) & 0x3ff
}

// I2C.SDA_SAMPLE
func (o *I2C_Type) SetSDA_SAMPLE_TIME(value uint32) {
	volatile.StoreUint32(&o.SDA_SAMPLE.Reg, volatile.LoadUint32(&o.SDA_SAMPLE.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSDA_SAMPLE_TIME() uint32 {
	return volatile.LoadUint32(&o.SDA_SAMPLE.Reg) & 0x3ff
}

// I2C.SCL_HIGH_PERIOD
func (o *I2C_Type) SetSCL_HIGH_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_HIGH_PERIOD.Reg, volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetSCL_HIGH_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg) & 0x3fff
}

// I2C.SCL_START_HOLD
func (o *I2C_Type) SetSCL_START_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_START_HOLD.Reg, volatile.LoadUint32(&o.SCL_START_HOLD.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSCL_START_HOLD_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_START_HOLD.Reg) & 0x3ff
}

// I2C.SCL_RSTART_SETUP
func (o *I2C_Type) SetSCL_RSTART_SETUP_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_RSTART_SETUP.Reg, volatile.LoadUint32(&o.SCL_RSTART_SETUP.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSCL_RSTART_SETUP_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_RSTART_SETUP.Reg) & 0x3ff
}

// I2C.SCL_STOP_HOLD
func (o *I2C_Type) SetSCL_STOP_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_STOP_HOLD.Reg, volatile.LoadUint32(&o.SCL_STOP_HOLD.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetSCL_STOP_HOLD_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_STOP_HOLD.Reg) & 0x3fff
}

// I2C.SCL_STOP_SETUP
func (o *I2C_Type) SetSCL_STOP_SETUP_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_STOP_SETUP.Reg, volatile.LoadUint32(&o.SCL_STOP_SETUP.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSCL_STOP_SETUP_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_STOP_SETUP.Reg) & 0x3ff
}

// I2C.SCL_FILTER_CFG
func (o *I2C_Type) SetSCL_FILTER_CFG_SCL_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.SCL_FILTER_CFG.Reg, volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg)&^(0x7)|value)
}
func (o *I2C_Type) GetSCL_FILTER_CFG_SCL_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg) & 0x7
}
func (o *I2C_Type) SetSCL_FILTER_CFG_SCL_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.SCL_FILTER_CFG.Reg, volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetSCL_FILTER_CFG_SCL_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg) & 0x8) >> 3
}

// I2C.SDA_FILTER_CFG
func (o *I2C_Type) SetSDA_FILTER_CFG_SDA_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.SDA_FILTER_CFG.Reg, volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg)&^(0x7)|value)
}
func (o *I2C_Type) GetSDA_FILTER_CFG_SDA_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg) & 0x7
}
func (o *I2C_Type) SetSDA_FILTER_CFG_SDA_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.SDA_FILTER_CFG.Reg, volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetSDA_FILTER_CFG_SDA_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg) & 0x8) >> 3
}

// I2C.COMD0
func (o *I2C_Type) SetCOMD0_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD0.Reg, volatile.LoadUint32(&o.COMD0.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD0_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD0.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD0_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD0.Reg, volatile.LoadUint32(&o.COMD0.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD0_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD0.Reg) & 0x80000000) >> 31
}

// I2C.COMD1
func (o *I2C_Type) SetCOMD1_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD1.Reg, volatile.LoadUint32(&o.COMD1.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD1_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD1.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD1_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD1.Reg, volatile.LoadUint32(&o.COMD1.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD1_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD1.Reg) & 0x80000000) >> 31
}

// I2C.COMD2
func (o *I2C_Type) SetCOMD2_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD2.Reg, volatile.LoadUint32(&o.COMD2.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD2_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD2.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD2_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD2.Reg, volatile.LoadUint32(&o.COMD2.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD2_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD2.Reg) & 0x80000000) >> 31
}

// I2C.COMD3
func (o *I2C_Type) SetCOMD3_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD3.Reg, volatile.LoadUint32(&o.COMD3.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD3_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD3.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD3_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD3.Reg, volatile.LoadUint32(&o.COMD3.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD3_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD3.Reg) & 0x80000000) >> 31
}

// I2C.COMD4
func (o *I2C_Type) SetCOMD4_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD4.Reg, volatile.LoadUint32(&o.COMD4.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD4_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD4.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD4_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD4.Reg, volatile.LoadUint32(&o.COMD4.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD4_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD4.Reg) & 0x80000000) >> 31
}

// I2C.COMD5
func (o *I2C_Type) SetCOMD5_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD5.Reg, volatile.LoadUint32(&o.COMD5.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD5_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD5.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD5_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD5.Reg, volatile.LoadUint32(&o.COMD5.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD5_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD5.Reg) & 0x80000000) >> 31
}

// I2C.COMD6
func (o *I2C_Type) SetCOMD6_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD6.Reg, volatile.LoadUint32(&o.COMD6.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD6_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD6.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD6_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD6.Reg, volatile.LoadUint32(&o.COMD6.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD6_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD6.Reg) & 0x80000000) >> 31
}

// I2C.COMD7
func (o *I2C_Type) SetCOMD7_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD7.Reg, volatile.LoadUint32(&o.COMD7.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD7_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD7.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD7_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD7.Reg, volatile.LoadUint32(&o.COMD7.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD7_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD7.Reg) & 0x80000000) >> 31
}

// I2C.COMD8
func (o *I2C_Type) SetCOMD8_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD8.Reg, volatile.LoadUint32(&o.COMD8.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD8_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD8.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD8_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD8.Reg, volatile.LoadUint32(&o.COMD8.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD8_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD8.Reg) & 0x80000000) >> 31
}

// I2C.COMD9
func (o *I2C_Type) SetCOMD9_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD9.Reg, volatile.LoadUint32(&o.COMD9.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD9_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD9.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD9_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD9.Reg, volatile.LoadUint32(&o.COMD9.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD9_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD9.Reg) & 0x80000000) >> 31
}

// I2C.COMD10
func (o *I2C_Type) SetCOMD10_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD10.Reg, volatile.LoadUint32(&o.COMD10.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD10_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD10.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD10_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD10.Reg, volatile.LoadUint32(&o.COMD10.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD10_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD10.Reg) & 0x80000000) >> 31
}

// I2C.COMD11
func (o *I2C_Type) SetCOMD11_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD11.Reg, volatile.LoadUint32(&o.COMD11.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD11_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD11.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD11_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD11.Reg, volatile.LoadUint32(&o.COMD11.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD11_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD11.Reg) & 0x80000000) >> 31
}

// I2C.COMD12
func (o *I2C_Type) SetCOMD12_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD12.Reg, volatile.LoadUint32(&o.COMD12.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD12_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD12.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD12_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD12.Reg, volatile.LoadUint32(&o.COMD12.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD12_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD12.Reg) & 0x80000000) >> 31
}

// I2C.COMD13
func (o *I2C_Type) SetCOMD13_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD13.Reg, volatile.LoadUint32(&o.COMD13.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD13_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD13.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD13_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD13.Reg, volatile.LoadUint32(&o.COMD13.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD13_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD13.Reg) & 0x80000000) >> 31
}

// I2C.COMD14
func (o *I2C_Type) SetCOMD14_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD14.Reg, volatile.LoadUint32(&o.COMD14.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD14_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD14.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD14_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD14.Reg, volatile.LoadUint32(&o.COMD14.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD14_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD14.Reg) & 0x80000000) >> 31
}

// I2C.COMD15
func (o *I2C_Type) SetCOMD15_COMMAND(value uint32) {
	volatile.StoreUint32(&o.COMD15.Reg, volatile.LoadUint32(&o.COMD15.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD15_COMMAND() uint32 {
	return volatile.LoadUint32(&o.COMD15.Reg) & 0x3fff
}
func (o *I2C_Type) SetCOMD15_COMMAND_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD15.Reg, volatile.LoadUint32(&o.COMD15.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD15_COMMAND_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD15.Reg) & 0x80000000) >> 31
}

// I2C.DATE
func (o *I2C_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *I2C_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// I2S (Inter-IC Sound) Controller 0
type I2S_Type struct {
	_                    [8]byte
	CONF                 volatile.Register32 // 0x8
	INT_RAW              volatile.Register32 // 0xC
	INT_ST               volatile.Register32 // 0x10
	INT_ENA              volatile.Register32 // 0x14
	INT_CLR              volatile.Register32 // 0x18
	TIMING               volatile.Register32 // 0x1C
	FIFO_CONF            volatile.Register32 // 0x20
	RXEOF_NUM            volatile.Register32 // 0x24
	CONF_SIGLE_DATA      volatile.Register32 // 0x28
	CONF_CHAN            volatile.Register32 // 0x2C
	OUT_LINK             volatile.Register32 // 0x30
	IN_LINK              volatile.Register32 // 0x34
	OUT_EOF_DES_ADDR     volatile.Register32 // 0x38
	IN_EOF_DES_ADDR      volatile.Register32 // 0x3C
	OUT_EOF_BFR_DES_ADDR volatile.Register32 // 0x40
	AHB_TEST             volatile.Register32 // 0x44
	INLINK_DSCR          volatile.Register32 // 0x48
	INLINK_DSCR_BF0      volatile.Register32 // 0x4C
	INLINK_DSCR_BF1      volatile.Register32 // 0x50
	OUTLINK_DSCR         volatile.Register32 // 0x54
	OUTLINK_DSCR_BF0     volatile.Register32 // 0x58
	OUTLINK_DSCR_BF1     volatile.Register32 // 0x5C
	LC_CONF              volatile.Register32 // 0x60
	OUTFIFO_PUSH         volatile.Register32 // 0x64
	INFIFO_POP           volatile.Register32 // 0x68
	LC_STATE0            volatile.Register32 // 0x6C
	LC_STATE1            volatile.Register32 // 0x70
	LC_HUNG_CONF         volatile.Register32 // 0x74
	_                    [8]byte
	CVSD_CONF0           volatile.Register32 // 0x80
	CVSD_CONF1           volatile.Register32 // 0x84
	CVSD_CONF2           volatile.Register32 // 0x88
	PLC_CONF0            volatile.Register32 // 0x8C
	PLC_CONF1            volatile.Register32 // 0x90
	PLC_CONF2            volatile.Register32 // 0x94
	ESCO_CONF0           volatile.Register32 // 0x98
	SCO_CONF0            volatile.Register32 // 0x9C
	CONF1                volatile.Register32 // 0xA0
	PD_CONF              volatile.Register32 // 0xA4
	CONF2                volatile.Register32 // 0xA8
	CLKM_CONF            volatile.Register32 // 0xAC
	SAMPLE_RATE_CONF     volatile.Register32 // 0xB0
	PDM_CONF             volatile.Register32 // 0xB4
	PDM_FREQ_CONF        volatile.Register32 // 0xB8
	STATE                volatile.Register32 // 0xBC
	_                    [60]byte
	DATE                 volatile.Register32 // 0xFC
}

// I2S.CONF
func (o *I2S_Type) SetCONF_TX_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetCONF_TX_RESET() uint32 {
	return volatile.LoadUint32(&o.CONF.Reg) & 0x1
}
func (o *I2S_Type) SetCONF_RX_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetCONF_RX_RESET() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetCONF_TX_FIFO_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetCONF_TX_FIFO_RESET() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetCONF_RX_FIFO_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetCONF_RX_FIFO_RESET() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetCONF_TX_START(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetCONF_TX_START() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetCONF_RX_START(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetCONF_RX_START() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetCONF_TX_SLAVE_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetCONF_TX_SLAVE_MOD() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetCONF_RX_SLAVE_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetCONF_RX_SLAVE_MOD() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetCONF_TX_RIGHT_FIRST(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetCONF_TX_RIGHT_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetCONF_RX_RIGHT_FIRST(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetCONF_RX_RIGHT_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetCONF_TX_MSB_SHIFT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetCONF_TX_MSB_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetCONF_RX_MSB_SHIFT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetCONF_RX_MSB_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetCONF_TX_SHORT_SYNC(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetCONF_TX_SHORT_SYNC() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetCONF_RX_SHORT_SYNC(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetCONF_RX_SHORT_SYNC() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetCONF_TX_MONO(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetCONF_TX_MONO() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetCONF_RX_MONO(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetCONF_RX_MONO() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetCONF_TX_MSB_RIGHT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetCONF_TX_MSB_RIGHT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetCONF_RX_MSB_RIGHT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x20000)|value<<17)
}
func (o *I2S_Type) GetCONF_RX_MSB_RIGHT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x20000) >> 17
}
func (o *I2S_Type) SetCONF_SIG_LOOPBACK(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x40000)|value<<18)
}
func (o *I2S_Type) GetCONF_SIG_LOOPBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x40000) >> 18
}

// I2S.INT_RAW
func (o *I2S_Type) SetINT_RAW_RX_TAKE_DATA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_RAW_RX_TAKE_DATA_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *I2S_Type) SetINT_RAW_TX_PUT_DATA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_RAW_TX_PUT_DATA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_RAW_RX_WFULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_RAW_RX_WFULL_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_RAW_RX_REMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_RAW_RX_REMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_RAW_TX_WFULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_RAW_TX_WFULL_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_RAW_TX_REMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_RAW_TX_REMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_RAW_RX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_RAW_RX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_RAW_TX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_RAW_TX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_RAW_IN_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_RAW_IN_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_RAW_IN_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_RAW_IN_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_RAW_IN_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_RAW_IN_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_RAW_OUT_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_RAW_OUT_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_RAW_OUT_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_RAW_OUT_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_RAW_IN_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_RAW_IN_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_RAW_OUT_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_RAW_OUT_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_RAW_IN_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_RAW_IN_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_RAW_OUT_TOTAL_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_RAW_OUT_TOTAL_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}

// I2S.INT_ST
func (o *I2S_Type) SetINT_ST_RX_TAKE_DATA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_ST_RX_TAKE_DATA_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *I2S_Type) SetINT_ST_TX_PUT_DATA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_ST_TX_PUT_DATA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_ST_RX_WFULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_ST_RX_WFULL_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_ST_RX_REMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_ST_RX_REMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_ST_TX_WFULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_ST_TX_WFULL_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_ST_TX_REMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_ST_TX_REMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_ST_RX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_ST_RX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_ST_TX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_ST_TX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_ST_IN_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_ST_IN_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_ST_IN_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_ST_IN_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_ST_IN_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_ST_IN_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_ST_OUT_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_ST_OUT_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_ST_OUT_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_ST_OUT_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_ST_IN_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_ST_IN_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_ST_OUT_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_ST_OUT_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_ST_IN_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_ST_IN_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_ST_OUT_TOTAL_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_ST_OUT_TOTAL_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}

// I2S.INT_ENA
func (o *I2S_Type) SetINT_ENA_RX_TAKE_DATA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_ENA_RX_TAKE_DATA_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *I2S_Type) SetINT_ENA_TX_PUT_DATA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_ENA_TX_PUT_DATA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_ENA_RX_WFULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_ENA_RX_WFULL_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_ENA_RX_REMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_ENA_RX_REMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_ENA_TX_WFULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_ENA_TX_WFULL_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_ENA_TX_REMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_ENA_TX_REMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_ENA_RX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_ENA_RX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_ENA_TX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_ENA_TX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_ENA_IN_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_ENA_IN_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_ENA_IN_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_ENA_IN_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_ENA_IN_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_ENA_IN_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_ENA_OUT_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_ENA_OUT_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_ENA_OUT_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_ENA_OUT_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_ENA_IN_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_ENA_IN_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_ENA_OUT_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_ENA_OUT_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_ENA_IN_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_ENA_IN_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_ENA_OUT_TOTAL_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_ENA_OUT_TOTAL_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}

// I2S.INT_CLR
func (o *I2S_Type) SetINT_CLR_TAKE_DATA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_CLR_TAKE_DATA_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *I2S_Type) SetINT_CLR_PUT_DATA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_CLR_PUT_DATA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_CLR_RX_WFULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_CLR_RX_WFULL_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_CLR_RX_REMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_CLR_RX_REMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_CLR_TX_WFULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_CLR_TX_WFULL_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_CLR_TX_REMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_CLR_TX_REMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_CLR_RX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_CLR_RX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_CLR_TX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_CLR_TX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_CLR_IN_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_CLR_IN_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_CLR_IN_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_CLR_IN_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_CLR_IN_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_CLR_IN_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_CLR_OUT_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_CLR_OUT_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_CLR_OUT_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_CLR_OUT_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_CLR_IN_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_CLR_IN_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_CLR_OUT_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_CLR_OUT_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_CLR_IN_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_CLR_IN_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_CLR_OUT_TOTAL_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_CLR_OUT_TOTAL_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}

// I2S.TIMING
func (o *I2S_Type) SetTIMING_TX_BCK_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x3)|value)
}
func (o *I2S_Type) GetTIMING_TX_BCK_IN_DELAY() uint32 {
	return volatile.LoadUint32(&o.TIMING.Reg) & 0x3
}
func (o *I2S_Type) SetTIMING_TX_WS_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc)|value<<2)
}
func (o *I2S_Type) GetTIMING_TX_WS_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc) >> 2
}
func (o *I2S_Type) SetTIMING_RX_BCK_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x30)|value<<4)
}
func (o *I2S_Type) GetTIMING_RX_BCK_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x30) >> 4
}
func (o *I2S_Type) SetTIMING_RX_WS_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc0)|value<<6)
}
func (o *I2S_Type) GetTIMING_RX_WS_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc0) >> 6
}
func (o *I2S_Type) SetTIMING_RX_SD_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x300)|value<<8)
}
func (o *I2S_Type) GetTIMING_RX_SD_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x300) >> 8
}
func (o *I2S_Type) SetTIMING_TX_BCK_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc00)|value<<10)
}
func (o *I2S_Type) GetTIMING_TX_BCK_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc00) >> 10
}
func (o *I2S_Type) SetTIMING_TX_WS_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x3000)|value<<12)
}
func (o *I2S_Type) GetTIMING_TX_WS_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x3000) >> 12
}
func (o *I2S_Type) SetTIMING_TX_SD_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc000)|value<<14)
}
func (o *I2S_Type) GetTIMING_TX_SD_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc000) >> 14
}
func (o *I2S_Type) SetTIMING_RX_WS_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x30000)|value<<16)
}
func (o *I2S_Type) GetTIMING_RX_WS_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x30000) >> 16
}
func (o *I2S_Type) SetTIMING_RX_BCK_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc0000)|value<<18)
}
func (o *I2S_Type) GetTIMING_RX_BCK_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc0000) >> 18
}
func (o *I2S_Type) SetTIMING_TX_DSYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x100000)|value<<20)
}
func (o *I2S_Type) GetTIMING_TX_DSYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x100000) >> 20
}
func (o *I2S_Type) SetTIMING_RX_DSYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x200000)|value<<21)
}
func (o *I2S_Type) GetTIMING_RX_DSYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x200000) >> 21
}
func (o *I2S_Type) SetTIMING_DATA_ENABLE_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc00000)|value<<22)
}
func (o *I2S_Type) GetTIMING_DATA_ENABLE_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc00000) >> 22
}
func (o *I2S_Type) SetTIMING_TX_BCK_IN_INV(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x1000000)|value<<24)
}
func (o *I2S_Type) GetTIMING_TX_BCK_IN_INV() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x1000000) >> 24
}

// I2S.FIFO_CONF
func (o *I2S_Type) SetFIFO_CONF_RX_DATA_NUM(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x3f)|value)
}
func (o *I2S_Type) GetFIFO_CONF_RX_DATA_NUM() uint32 {
	return volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x3f
}
func (o *I2S_Type) SetFIFO_CONF_TX_DATA_NUM(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0xfc0)|value<<6)
}
func (o *I2S_Type) GetFIFO_CONF_TX_DATA_NUM() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0xfc0) >> 6
}
func (o *I2S_Type) SetFIFO_CONF_DSCR_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetFIFO_CONF_DSCR_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetFIFO_CONF_TX_FIFO_MOD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0xe000)|value<<13)
}
func (o *I2S_Type) GetFIFO_CONF_TX_FIFO_MOD() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0xe000) >> 13
}
func (o *I2S_Type) SetFIFO_CONF_RX_FIFO_MOD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x70000)|value<<16)
}
func (o *I2S_Type) GetFIFO_CONF_RX_FIFO_MOD() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x70000) >> 16
}
func (o *I2S_Type) SetFIFO_CONF_TX_FIFO_MOD_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x80000)|value<<19)
}
func (o *I2S_Type) GetFIFO_CONF_TX_FIFO_MOD_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x80000) >> 19
}
func (o *I2S_Type) SetFIFO_CONF_RX_FIFO_MOD_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *I2S_Type) GetFIFO_CONF_RX_FIFO_MOD_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x100000) >> 20
}

// I2S.RXEOF_NUM
func (o *I2S_Type) SetRXEOF_NUM(value uint32) {
	volatile.StoreUint32(&o.RXEOF_NUM.Reg, value)
}
func (o *I2S_Type) GetRXEOF_NUM() uint32 {
	return volatile.LoadUint32(&o.RXEOF_NUM.Reg)
}

// I2S.CONF_SIGLE_DATA
func (o *I2S_Type) SetCONF_SIGLE_DATA(value uint32) {
	volatile.StoreUint32(&o.CONF_SIGLE_DATA.Reg, value)
}
func (o *I2S_Type) GetCONF_SIGLE_DATA() uint32 {
	return volatile.LoadUint32(&o.CONF_SIGLE_DATA.Reg)
}

// I2S.CONF_CHAN
func (o *I2S_Type) SetCONF_CHAN_TX_CHAN_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF_CHAN.Reg, volatile.LoadUint32(&o.CONF_CHAN.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetCONF_CHAN_TX_CHAN_MOD() uint32 {
	return volatile.LoadUint32(&o.CONF_CHAN.Reg) & 0x7
}
func (o *I2S_Type) SetCONF_CHAN_RX_CHAN_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF_CHAN.Reg, volatile.LoadUint32(&o.CONF_CHAN.Reg)&^(0x18)|value<<3)
}
func (o *I2S_Type) GetCONF_CHAN_RX_CHAN_MOD() uint32 {
	return (volatile.LoadUint32(&o.CONF_CHAN.Reg) & 0x18) >> 3
}

// I2S.OUT_LINK
func (o *I2S_Type) SetOUT_LINK_OUTLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0xfffff)|value)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_LINK.Reg) & 0xfffff
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x10000000) >> 28
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_START(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_START() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x20000000) >> 29
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x40000000) >> 30
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x80000000) >> 31
}

// I2S.IN_LINK
func (o *I2S_Type) SetIN_LINK_INLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0xfffff)|value)
}
func (o *I2S_Type) GetIN_LINK_INLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_LINK.Reg) & 0xfffff
}
func (o *I2S_Type) SetIN_LINK_INLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *I2S_Type) GetIN_LINK_INLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x10000000) >> 28
}
func (o *I2S_Type) SetIN_LINK_INLINK_START(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *I2S_Type) GetIN_LINK_INLINK_START() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x20000000) >> 29
}
func (o *I2S_Type) SetIN_LINK_INLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *I2S_Type) GetIN_LINK_INLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x40000000) >> 30
}
func (o *I2S_Type) SetIN_LINK_INLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *I2S_Type) GetIN_LINK_INLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x80000000) >> 31
}

// I2S.OUT_EOF_DES_ADDR
func (o *I2S_Type) SetOUT_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_DES_ADDR.Reg, value)
}
func (o *I2S_Type) GetOUT_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_DES_ADDR.Reg)
}

// I2S.IN_EOF_DES_ADDR
func (o *I2S_Type) SetIN_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_EOF_DES_ADDR.Reg, value)
}
func (o *I2S_Type) GetIN_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_EOF_DES_ADDR.Reg)
}

// I2S.OUT_EOF_BFR_DES_ADDR
func (o *I2S_Type) SetOUT_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *I2S_Type) GetOUT_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg)
}

// I2S.AHB_TEST
func (o *I2S_Type) SetAHB_TEST_AHB_TESTMODE(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetAHB_TEST_AHB_TESTMODE() uint32 {
	return volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x7
}
func (o *I2S_Type) SetAHB_TEST_AHB_TESTADDR(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x30)|value<<4)
}
func (o *I2S_Type) GetAHB_TEST_AHB_TESTADDR() uint32 {
	return (volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x30) >> 4
}

// I2S.INLINK_DSCR
func (o *I2S_Type) SetINLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR.Reg, value)
}
func (o *I2S_Type) GetINLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR.Reg)
}

// I2S.INLINK_DSCR_BF0
func (o *I2S_Type) SetINLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF0.Reg, value)
}
func (o *I2S_Type) GetINLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF0.Reg)
}

// I2S.INLINK_DSCR_BF1
func (o *I2S_Type) SetINLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF1.Reg, value)
}
func (o *I2S_Type) GetINLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF1.Reg)
}

// I2S.OUTLINK_DSCR
func (o *I2S_Type) SetOUTLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR.Reg, value)
}
func (o *I2S_Type) GetOUTLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR.Reg)
}

// I2S.OUTLINK_DSCR_BF0
func (o *I2S_Type) SetOUTLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF0.Reg, value)
}
func (o *I2S_Type) GetOUTLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF0.Reg)
}

// I2S.OUTLINK_DSCR_BF1
func (o *I2S_Type) SetOUTLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF1.Reg, value)
}
func (o *I2S_Type) GetOUTLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF1.Reg)
}

// I2S.LC_CONF
func (o *I2S_Type) SetLC_CONF_IN_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetLC_CONF_IN_RST() uint32 {
	return volatile.LoadUint32(&o.LC_CONF.Reg) & 0x1
}
func (o *I2S_Type) SetLC_CONF_OUT_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetLC_CONF_OUT_RST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetLC_CONF_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetLC_CONF_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetLC_CONF_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetLC_CONF_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetLC_CONF_OUT_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetLC_CONF_OUT_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetLC_CONF_IN_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetLC_CONF_IN_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetLC_CONF_OUT_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetLC_CONF_OUT_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetLC_CONF_OUT_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetLC_CONF_OUT_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetLC_CONF_OUT_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetLC_CONF_OUT_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetLC_CONF_OUTDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetLC_CONF_OUTDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetLC_CONF_INDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetLC_CONF_INDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetLC_CONF_OUT_DATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetLC_CONF_OUT_DATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetLC_CONF_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetLC_CONF_CHECK_OWNER() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetLC_CONF_MEM_TRANS_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetLC_CONF_MEM_TRANS_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x2000) >> 13
}

// I2S.OUTFIFO_PUSH
func (o *I2S_Type) SetOUTFIFO_PUSH_OUTFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o.OUTFIFO_PUSH.Reg, volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg)&^(0x1ff)|value)
}
func (o *I2S_Type) GetOUTFIFO_PUSH_OUTFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg) & 0x1ff
}
func (o *I2S_Type) SetOUTFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o.OUTFIFO_PUSH.Reg, volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetOUTFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg) & 0x10000) >> 16
}

// I2S.INFIFO_POP
func (o *I2S_Type) SetINFIFO_POP_INFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o.INFIFO_POP.Reg, volatile.LoadUint32(&o.INFIFO_POP.Reg)&^(0xfff)|value)
}
func (o *I2S_Type) GetINFIFO_POP_INFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o.INFIFO_POP.Reg) & 0xfff
}
func (o *I2S_Type) SetINFIFO_POP(value uint32) {
	volatile.StoreUint32(&o.INFIFO_POP.Reg, volatile.LoadUint32(&o.INFIFO_POP.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o.INFIFO_POP.Reg) & 0x10000) >> 16
}

// I2S.LC_STATE0
func (o *I2S_Type) SetLC_STATE0(value uint32) {
	volatile.StoreUint32(&o.LC_STATE0.Reg, value)
}
func (o *I2S_Type) GetLC_STATE0() uint32 {
	return volatile.LoadUint32(&o.LC_STATE0.Reg)
}

// I2S.LC_STATE1
func (o *I2S_Type) SetLC_STATE1(value uint32) {
	volatile.StoreUint32(&o.LC_STATE1.Reg, value)
}
func (o *I2S_Type) GetLC_STATE1() uint32 {
	return volatile.LoadUint32(&o.LC_STATE1.Reg)
}

// I2S.LC_HUNG_CONF
func (o *I2S_Type) SetLC_HUNG_CONF_LC_FIFO_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.LC_HUNG_CONF.Reg, volatile.LoadUint32(&o.LC_HUNG_CONF.Reg)&^(0xff)|value)
}
func (o *I2S_Type) GetLC_HUNG_CONF_LC_FIFO_TIMEOUT() uint32 {
	return volatile.LoadUint32(&o.LC_HUNG_CONF.Reg) & 0xff
}
func (o *I2S_Type) SetLC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT(value uint32) {
	volatile.StoreUint32(&o.LC_HUNG_CONF.Reg, volatile.LoadUint32(&o.LC_HUNG_CONF.Reg)&^(0x700)|value<<8)
}
func (o *I2S_Type) GetLC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.LC_HUNG_CONF.Reg) & 0x700) >> 8
}
func (o *I2S_Type) SetLC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA(value uint32) {
	volatile.StoreUint32(&o.LC_HUNG_CONF.Reg, volatile.LoadUint32(&o.LC_HUNG_CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetLC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.LC_HUNG_CONF.Reg) & 0x800) >> 11
}

// I2S.CVSD_CONF0
func (o *I2S_Type) SetCVSD_CONF0_CVSD_Y_MAX(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF0.Reg, volatile.LoadUint32(&o.CVSD_CONF0.Reg)&^(0xffff)|value)
}
func (o *I2S_Type) GetCVSD_CONF0_CVSD_Y_MAX() uint32 {
	return volatile.LoadUint32(&o.CVSD_CONF0.Reg) & 0xffff
}
func (o *I2S_Type) SetCVSD_CONF0_CVSD_Y_MIN(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF0.Reg, volatile.LoadUint32(&o.CVSD_CONF0.Reg)&^(0xffff0000)|value<<16)
}
func (o *I2S_Type) GetCVSD_CONF0_CVSD_Y_MIN() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF0.Reg) & 0xffff0000) >> 16
}

// I2S.CVSD_CONF1
func (o *I2S_Type) SetCVSD_CONF1_CVSD_SIGMA_MAX(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF1.Reg, volatile.LoadUint32(&o.CVSD_CONF1.Reg)&^(0xffff)|value)
}
func (o *I2S_Type) GetCVSD_CONF1_CVSD_SIGMA_MAX() uint32 {
	return volatile.LoadUint32(&o.CVSD_CONF1.Reg) & 0xffff
}
func (o *I2S_Type) SetCVSD_CONF1_CVSD_SIGMA_MIN(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF1.Reg, volatile.LoadUint32(&o.CVSD_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *I2S_Type) GetCVSD_CONF1_CVSD_SIGMA_MIN() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF1.Reg) & 0xffff0000) >> 16
}

// I2S.CVSD_CONF2
func (o *I2S_Type) SetCVSD_CONF2_CVSD_K(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_K() uint32 {
	return volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0x7
}
func (o *I2S_Type) SetCVSD_CONF2_CVSD_J(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0x38)|value<<3)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_J() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0x38) >> 3
}
func (o *I2S_Type) SetCVSD_CONF2_CVSD_BETA(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0xffc0)|value<<6)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_BETA() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0xffc0) >> 6
}
func (o *I2S_Type) SetCVSD_CONF2_CVSD_H(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0x70000)|value<<16)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_H() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0x70000) >> 16
}

// I2S.PLC_CONF0
func (o *I2S_Type) SetPLC_CONF0_GOOD_PACK_MAX(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0x3f)|value)
}
func (o *I2S_Type) GetPLC_CONF0_GOOD_PACK_MAX() uint32 {
	return volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0x3f
}
func (o *I2S_Type) SetPLC_CONF0_N_ERR_SEG(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0x1c0)|value<<6)
}
func (o *I2S_Type) GetPLC_CONF0_N_ERR_SEG() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0x1c0) >> 6
}
func (o *I2S_Type) SetPLC_CONF0_SHIFT_RATE(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0xe00)|value<<9)
}
func (o *I2S_Type) GetPLC_CONF0_SHIFT_RATE() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0xe00) >> 9
}
func (o *I2S_Type) SetPLC_CONF0_MAX_SLIDE_SAMPLE(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0xff000)|value<<12)
}
func (o *I2S_Type) GetPLC_CONF0_MAX_SLIDE_SAMPLE() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0xff000) >> 12
}
func (o *I2S_Type) SetPLC_CONF0_PACK_LEN_8K(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0x1f00000)|value<<20)
}
func (o *I2S_Type) GetPLC_CONF0_PACK_LEN_8K() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0x1f00000) >> 20
}
func (o *I2S_Type) SetPLC_CONF0_N_MIN_ERR(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0xe000000)|value<<25)
}
func (o *I2S_Type) GetPLC_CONF0_N_MIN_ERR() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0xe000000) >> 25
}

// I2S.PLC_CONF1
func (o *I2S_Type) SetPLC_CONF1_BAD_CEF_ATTEN_PARA(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xff)|value)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_CEF_ATTEN_PARA() uint32 {
	return volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xff
}
func (o *I2S_Type) SetPLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xf00)|value<<8)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xf00) >> 8
}
func (o *I2S_Type) SetPLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xf000)|value<<12)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xf000) >> 12
}
func (o *I2S_Type) SetPLC_CONF1_BAD_OLA_WIN2_PARA(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xff0000)|value<<16)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_OLA_WIN2_PARA() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xff0000) >> 16
}
func (o *I2S_Type) SetPLC_CONF1_SLIDE_WIN_LEN(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xff000000)|value<<24)
}
func (o *I2S_Type) GetPLC_CONF1_SLIDE_WIN_LEN() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xff000000) >> 24
}

// I2S.PLC_CONF2
func (o *I2S_Type) SetPLC_CONF2_CVSD_SEG_MOD(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF2.Reg, volatile.LoadUint32(&o.PLC_CONF2.Reg)&^(0x3)|value)
}
func (o *I2S_Type) GetPLC_CONF2_CVSD_SEG_MOD() uint32 {
	return volatile.LoadUint32(&o.PLC_CONF2.Reg) & 0x3
}
func (o *I2S_Type) SetPLC_CONF2_MIN_PERIOD(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF2.Reg, volatile.LoadUint32(&o.PLC_CONF2.Reg)&^(0x7c)|value<<2)
}
func (o *I2S_Type) GetPLC_CONF2_MIN_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF2.Reg) & 0x7c) >> 2
}

// I2S.ESCO_CONF0
func (o *I2S_Type) SetESCO_CONF0_ESCO_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_EN() uint32 {
	return volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x1
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CHAN_MOD(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CHAN_MOD() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CVSD_PACK_LEN_8K(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0xf8)|value<<3)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CVSD_PACK_LEN_8K() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0xf8) >> 3
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CVSD_INF_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CVSD_INF_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetESCO_CONF0_CVSD_DEC_START(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetESCO_CONF0_CVSD_DEC_START() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetESCO_CONF0_CVSD_DEC_RESET(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetESCO_CONF0_CVSD_DEC_RESET() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetESCO_CONF0_PLC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetESCO_CONF0_PLC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetESCO_CONF0_PLC2DMA_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetESCO_CONF0_PLC2DMA_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x1000) >> 12
}

// I2S.SCO_CONF0
func (o *I2S_Type) SetSCO_CONF0_SCO_WITH_I2S_EN(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetSCO_CONF0_SCO_WITH_I2S_EN() uint32 {
	return volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x1
}
func (o *I2S_Type) SetSCO_CONF0_SCO_NO_I2S_EN(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetSCO_CONF0_SCO_NO_I2S_EN() uint32 {
	return (volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetSCO_CONF0_CVSD_ENC_START(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetSCO_CONF0_CVSD_ENC_START() uint32 {
	return (volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetSCO_CONF0_CVSD_ENC_RESET(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetSCO_CONF0_CVSD_ENC_RESET() uint32 {
	return (volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x8) >> 3
}

// I2S.CONF1
func (o *I2S_Type) SetCONF1_TX_PCM_CONF(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetCONF1_TX_PCM_CONF() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x7
}
func (o *I2S_Type) SetCONF1_TX_PCM_BYPASS(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetCONF1_TX_PCM_BYPASS() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetCONF1_RX_PCM_CONF(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x70)|value<<4)
}
func (o *I2S_Type) GetCONF1_RX_PCM_CONF() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x70) >> 4
}
func (o *I2S_Type) SetCONF1_RX_PCM_BYPASS(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetCONF1_RX_PCM_BYPASS() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetCONF1_TX_STOP_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetCONF1_TX_STOP_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetCONF1_TX_ZEROS_RM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetCONF1_TX_ZEROS_RM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x200) >> 9
}

// I2S.PD_CONF
func (o *I2S_Type) SetPD_CONF_FIFO_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetPD_CONF_FIFO_FORCE_PD() uint32 {
	return volatile.LoadUint32(&o.PD_CONF.Reg) & 0x1
}
func (o *I2S_Type) SetPD_CONF_FIFO_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetPD_CONF_FIFO_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PD_CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetPD_CONF_PLC_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetPD_CONF_PLC_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PD_CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetPD_CONF_PLC_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetPD_CONF_PLC_MEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PD_CONF.Reg) & 0x8) >> 3
}

// I2S.CONF2
func (o *I2S_Type) SetCONF2_CAMERA_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetCONF2_CAMERA_EN() uint32 {
	return volatile.LoadUint32(&o.CONF2.Reg) & 0x1
}
func (o *I2S_Type) SetCONF2_LCD_TX_WRX2_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetCONF2_LCD_TX_WRX2_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetCONF2_LCD_TX_SDX2_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetCONF2_LCD_TX_SDX2_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetCONF2_DATA_ENABLE_TEST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetCONF2_DATA_ENABLE_TEST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetCONF2_DATA_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetCONF2_DATA_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetCONF2_LCD_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetCONF2_LCD_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetCONF2_EXT_ADC_START_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetCONF2_EXT_ADC_START_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetCONF2_INTER_VALID_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetCONF2_INTER_VALID_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x80) >> 7
}

// I2S.CLKM_CONF
func (o *I2S_Type) SetCLKM_CONF_CLKM_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0xff)|value)
}
func (o *I2S_Type) GetCLKM_CONF_CLKM_DIV_NUM() uint32 {
	return volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0xff
}
func (o *I2S_Type) SetCLKM_CONF_CLKM_DIV_B(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0x3f00)|value<<8)
}
func (o *I2S_Type) GetCLKM_CONF_CLKM_DIV_B() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0x3f00) >> 8
}
func (o *I2S_Type) SetCLKM_CONF_CLKM_DIV_A(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0xfc000)|value<<14)
}
func (o *I2S_Type) GetCLKM_CONF_CLKM_DIV_A() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0xfc000) >> 14
}
func (o *I2S_Type) SetCLKM_CONF_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *I2S_Type) GetCLKM_CONF_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0x100000) >> 20
}
func (o *I2S_Type) SetCLKM_CONF_CLKA_ENA(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0x200000)|value<<21)
}
func (o *I2S_Type) GetCLKM_CONF_CLKA_ENA() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0x200000) >> 21
}

// I2S.SAMPLE_RATE_CONF
func (o *I2S_Type) SetSAMPLE_RATE_CONF_TX_BCK_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0x3f)|value)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_TX_BCK_DIV_NUM() uint32 {
	return volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0x3f
}
func (o *I2S_Type) SetSAMPLE_RATE_CONF_RX_BCK_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0xfc0)|value<<6)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_RX_BCK_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0xfc0) >> 6
}
func (o *I2S_Type) SetSAMPLE_RATE_CONF_TX_BITS_MOD(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0x3f000)|value<<12)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_TX_BITS_MOD() uint32 {
	return (volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0x3f000) >> 12
}
func (o *I2S_Type) SetSAMPLE_RATE_CONF_RX_BITS_MOD(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0xfc0000)|value<<18)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_RX_BITS_MOD() uint32 {
	return (volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0xfc0000) >> 18
}

// I2S.PDM_CONF
func (o *I2S_Type) SetPDM_CONF_TX_PDM_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_EN() uint32 {
	return volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x1
}
func (o *I2S_Type) SetPDM_CONF_RX_PDM_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetPDM_CONF_RX_PDM_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetPDM_CONF_PCM2PDM_CONV_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetPDM_CONF_PCM2PDM_CONV_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetPDM_CONF_PDM2PCM_CONV_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetPDM_CONF_PDM2PCM_CONV_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_SINC_OSR2(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xf0)|value<<4)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_SINC_OSR2() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xf0) >> 4
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xff00)|value<<8)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xff00) >> 8
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_HP_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x30000)|value<<16)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_HP_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x30000) >> 16
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_LP_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xc0000)|value<<18)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_LP_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xc0000) >> 18
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_SINC_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x300000)|value<<20)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_SINC_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x300000) >> 20
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xc00000)|value<<22)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xc00000) >> 22
}
func (o *I2S_Type) SetPDM_CONF_RX_PDM_SINC_DSR_16_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *I2S_Type) GetPDM_CONF_RX_PDM_SINC_DSR_16_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x1000000) >> 24
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_HP_BYPASS(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_HP_BYPASS() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x2000000) >> 25
}

// I2S.PDM_FREQ_CONF
func (o *I2S_Type) SetPDM_FREQ_CONF_TX_PDM_FS(value uint32) {
	volatile.StoreUint32(&o.PDM_FREQ_CONF.Reg, volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg)&^(0x3ff)|value)
}
func (o *I2S_Type) GetPDM_FREQ_CONF_TX_PDM_FS() uint32 {
	return volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg) & 0x3ff
}
func (o *I2S_Type) SetPDM_FREQ_CONF_TX_PDM_FP(value uint32) {
	volatile.StoreUint32(&o.PDM_FREQ_CONF.Reg, volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg)&^(0xffc00)|value<<10)
}
func (o *I2S_Type) GetPDM_FREQ_CONF_TX_PDM_FP() uint32 {
	return (volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg) & 0xffc00) >> 10
}

// I2S.STATE
func (o *I2S_Type) SetSTATE_TX_IDLE(value uint32) {
	volatile.StoreUint32(&o.STATE.Reg, volatile.LoadUint32(&o.STATE.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetSTATE_TX_IDLE() uint32 {
	return volatile.LoadUint32(&o.STATE.Reg) & 0x1
}
func (o *I2S_Type) SetSTATE_TX_FIFO_RESET_BACK(value uint32) {
	volatile.StoreUint32(&o.STATE.Reg, volatile.LoadUint32(&o.STATE.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetSTATE_TX_FIFO_RESET_BACK() uint32 {
	return (volatile.LoadUint32(&o.STATE.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetSTATE_RX_FIFO_RESET_BACK(value uint32) {
	volatile.StoreUint32(&o.STATE.Reg, volatile.LoadUint32(&o.STATE.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetSTATE_RX_FIFO_RESET_BACK() uint32 {
	return (volatile.LoadUint32(&o.STATE.Reg) & 0x4) >> 2
}

// I2S.DATE
func (o *I2S_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *I2S_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// Input/Output Multiplexer
type IO_MUX_Type struct {
	PIN_CTRL volatile.Register32 // 0x0
	GPIO36   volatile.Register32 // 0x4
	GPIO37   volatile.Register32 // 0x8
	GPIO38   volatile.Register32 // 0xC
	GPIO39   volatile.Register32 // 0x10
	GPIO34   volatile.Register32 // 0x14
	GPIO35   volatile.Register32 // 0x18
	GPIO32   volatile.Register32 // 0x1C
	GPIO33   volatile.Register32 // 0x20
	GPIO25   volatile.Register32 // 0x24
	GPIO26   volatile.Register32 // 0x28
	GPIO27   volatile.Register32 // 0x2C
	GPIO14   volatile.Register32 // 0x30
	GPIO12   volatile.Register32 // 0x34
	GPIO13   volatile.Register32 // 0x38
	GPIO15   volatile.Register32 // 0x3C
	GPIO2    volatile.Register32 // 0x40
	GPIO0    volatile.Register32 // 0x44
	GPIO4    volatile.Register32 // 0x48
	GPIO16   volatile.Register32 // 0x4C
	GPIO17   volatile.Register32 // 0x50
	GPIO9    volatile.Register32 // 0x54
	GPIO10   volatile.Register32 // 0x58
	GPIO11   volatile.Register32 // 0x5C
	GPIO6    volatile.Register32 // 0x60
	GPIO7    volatile.Register32 // 0x64
	GPIO8    volatile.Register32 // 0x68
	GPIO5    volatile.Register32 // 0x6C
	GPIO18   volatile.Register32 // 0x70
	GPIO19   volatile.Register32 // 0x74
	GPIO20   volatile.Register32 // 0x78
	GPIO21   volatile.Register32 // 0x7C
	GPIO22   volatile.Register32 // 0x80
	GPIO3    volatile.Register32 // 0x84
	GPIO1    volatile.Register32 // 0x88
	GPIO23   volatile.Register32 // 0x8C
	GPIO24   volatile.Register32 // 0x90
}

// IO_MUX.PIN_CTRL
func (o *IO_MUX_Type) SetPIN_CTRL_CLK1(value uint32) {
	volatile.StoreUint32(&o.PIN_CTRL.Reg, volatile.LoadUint32(&o.PIN_CTRL.Reg)&^(0xf)|value)
}
func (o *IO_MUX_Type) GetPIN_CTRL_CLK1() uint32 {
	return volatile.LoadUint32(&o.PIN_CTRL.Reg) & 0xf
}
func (o *IO_MUX_Type) SetPIN_CTRL_CLK2(value uint32) {
	volatile.StoreUint32(&o.PIN_CTRL.Reg, volatile.LoadUint32(&o.PIN_CTRL.Reg)&^(0xf0)|value<<4)
}
func (o *IO_MUX_Type) GetPIN_CTRL_CLK2() uint32 {
	return (volatile.LoadUint32(&o.PIN_CTRL.Reg) & 0xf0) >> 4
}
func (o *IO_MUX_Type) SetPIN_CTRL_CLK3(value uint32) {
	volatile.StoreUint32(&o.PIN_CTRL.Reg, volatile.LoadUint32(&o.PIN_CTRL.Reg)&^(0xf00)|value<<8)
}
func (o *IO_MUX_Type) GetPIN_CTRL_CLK3() uint32 {
	return (volatile.LoadUint32(&o.PIN_CTRL.Reg) & 0xf00) >> 8
}

// IO_MUX.GPIO36
func (o *IO_MUX_Type) SetGPIO36_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO36.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO36_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO36_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO36_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO36_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO36_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO36_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO36_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO36_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO36_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO36_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO36_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO37
func (o *IO_MUX_Type) SetGPIO37_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO37.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO37_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO37_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO37_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO37_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO37_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO37_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO37_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO37_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO37_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO37_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO37_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO38
func (o *IO_MUX_Type) SetGPIO38_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO38.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO38_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO38_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO38_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO38_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO38_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO38_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO38_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO38_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO38_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO38_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO38_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO39
func (o *IO_MUX_Type) SetGPIO39_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO39.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO39_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO39_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO39_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO39_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO39_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO39_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO39_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO39_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO39_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO39_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO39_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO34
func (o *IO_MUX_Type) SetGPIO34_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO34.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO34_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO34_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO34_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO34_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO34_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO34_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO34_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO34_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO34_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO34_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO34_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO35
func (o *IO_MUX_Type) SetGPIO35_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO35.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO35_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO35_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO35_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO35_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO35_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO35_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO35_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO35_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO35_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO35_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO35_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO32
func (o *IO_MUX_Type) SetGPIO32_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO32.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO32_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO32_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO32_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO32_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO32_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO32_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO32_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO32_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO32_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO32_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO32_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO33
func (o *IO_MUX_Type) SetGPIO33_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO33.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO33_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO33_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO33_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO33_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO33_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO33_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO33_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO33_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO33_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO33_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO33_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO25
func (o *IO_MUX_Type) SetGPIO25_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO25.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO25_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO25_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO25_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO25_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO25_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO25_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO25_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO25_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO25_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO25_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO25_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO26
func (o *IO_MUX_Type) SetGPIO26_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO26.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO26_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO26_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO26_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO26_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO26_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO26_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO26_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO26_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO26_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO26_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO26_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO27
func (o *IO_MUX_Type) SetGPIO27_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO27.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO27_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO27_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO27_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO27_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO27_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO27_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO27_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO27_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO27_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO27_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO27_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO14
func (o *IO_MUX_Type) SetGPIO14_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO14_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO14.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO14_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO14_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO14_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO14_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO14_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO14_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO14_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO14_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO14_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO14_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO14_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO14_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO14_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO14_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO14_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO14_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO14_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO14_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO14_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO14.Reg, volatile.LoadUint32(&o.GPIO14.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO14_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO14.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO12
func (o *IO_MUX_Type) SetGPIO12_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO12_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO12.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO12_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO12_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO12_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO12_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO12_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO12_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO12_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO12_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO12_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO12_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO12_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO12_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO12_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO12_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO12_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO12_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO12_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO12_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO12_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO12.Reg, volatile.LoadUint32(&o.GPIO12.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO12_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO12.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO13
func (o *IO_MUX_Type) SetGPIO13_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO13_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO13.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO13_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO13_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO13_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO13_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO13_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO13_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO13_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO13_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO13_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO13_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO13_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO13_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO13_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO13_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO13_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO13_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO13_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO13_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO13_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO13.Reg, volatile.LoadUint32(&o.GPIO13.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO13_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO13.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO15
func (o *IO_MUX_Type) SetGPIO15_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO15_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO15.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO15_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO15_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO15_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO15_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO15_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO15_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO15_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO15_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO15_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO15_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO15_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO15_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO15_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO15_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO15_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO15_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO15_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO15_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO15_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO15.Reg, volatile.LoadUint32(&o.GPIO15.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO15_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO15.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO2
func (o *IO_MUX_Type) SetGPIO2_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO2.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO2_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO2_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO2_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO2_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO2_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO2_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO2_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO2_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO0
func (o *IO_MUX_Type) SetGPIO0_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO0.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO0_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO0_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO0_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO0_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO0_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO0_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO0_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO0_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO0_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO0_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO0_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO4
func (o *IO_MUX_Type) SetGPIO4_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO4.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO4_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO4_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO4_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO4_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO4_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO4_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO4_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO4_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO4_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO4_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO4_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO16
func (o *IO_MUX_Type) SetGPIO16_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO16.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO16_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO16_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO16_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO16_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO16_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO16_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO16_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO16_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO16_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO16_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO16_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO17
func (o *IO_MUX_Type) SetGPIO17_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO17.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO17_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO17_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO17_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO17_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO17_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO17_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO17_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO17_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO17_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO17_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO17_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO9
func (o *IO_MUX_Type) SetGPIO9_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO9_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO9.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO9_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO9_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO9_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO9_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO9_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO9_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO9_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO9_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO9_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO9_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO9_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO9_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO9_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO9_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO9_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO9_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO9_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO9_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO9_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO9.Reg, volatile.LoadUint32(&o.GPIO9.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO9_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO9.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO10
func (o *IO_MUX_Type) SetGPIO10_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO10_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO10.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO10_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO10_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO10_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO10_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO10_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO10_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO10_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO10_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO10_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO10_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO10_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO10_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO10_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO10_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO10_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO10_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO10_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO10_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO10_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO10.Reg, volatile.LoadUint32(&o.GPIO10.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO10_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO10.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO11
func (o *IO_MUX_Type) SetGPIO11_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO11_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO11.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO11_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO11_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO11_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO11_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO11_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO11_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO11_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO11_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO11_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO11_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO11_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO11_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO11_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO11_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO11_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO11_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO11_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO11_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO11_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO11.Reg, volatile.LoadUint32(&o.GPIO11.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO11_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO11.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO6
func (o *IO_MUX_Type) SetGPIO6_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO6_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO6.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO6_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO6_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO6_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO6_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO6_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO6_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO6_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO6_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO6_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO6_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO6_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO6_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO6_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO6_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO6_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO6_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO6_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO6_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO6_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO6.Reg, volatile.LoadUint32(&o.GPIO6.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO6_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO6.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO7
func (o *IO_MUX_Type) SetGPIO7_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO7_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO7.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO7_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO7_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO7_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO7_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO7_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO7_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO7_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO7_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO7_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO7_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO7_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO7_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO7_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO7_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO7_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO7_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO7_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO7_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO7_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO7.Reg, volatile.LoadUint32(&o.GPIO7.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO7_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO7.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO8
func (o *IO_MUX_Type) SetGPIO8_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO8_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO8.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO8_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO8_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO8_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO8_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO8_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO8_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO8_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO8_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO8_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO8_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO8_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO8_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO8_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO8_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO8_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO8_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO8_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO8_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO8_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO8.Reg, volatile.LoadUint32(&o.GPIO8.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO8_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO8.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO5
func (o *IO_MUX_Type) SetGPIO5_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO5.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO5_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO5_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO5_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO5_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO5_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO5_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO5_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO5_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO5_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO5_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO5_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO18
func (o *IO_MUX_Type) SetGPIO18_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO18.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO18_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO18_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO18_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO18_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO18_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO18_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO18_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO18_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO18_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO18_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO18_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO19
func (o *IO_MUX_Type) SetGPIO19_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO19.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO19_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO19_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO19_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO19_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO19_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO19_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO19_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO19_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO19_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO19_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO19_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO20
func (o *IO_MUX_Type) SetGPIO20_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO20.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO20_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO20_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO20_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO20_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO20_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO20_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO20_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO20_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO20_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO20_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO20_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO21
func (o *IO_MUX_Type) SetGPIO21_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO21.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO21_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO21_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO21_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO21_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO21_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO21_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO21_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO21_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO21_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO21_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO21_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO22
func (o *IO_MUX_Type) SetGPIO22_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO22.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO22_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO22_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO22_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO22_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO22_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO22_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO22_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO22_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO22_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO22_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO22_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO3
func (o *IO_MUX_Type) SetGPIO3_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO3_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO3.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO3_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO3_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO3_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO3_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO3_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO3_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO3_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO3_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO3_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO3_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO3_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO3_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO3_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO3_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO3_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO3_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO3_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO3_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO3_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO3.Reg, volatile.LoadUint32(&o.GPIO3.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO3_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO3.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO1
func (o *IO_MUX_Type) SetGPIO1_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO1_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO1.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO1_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO1_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO1_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO1_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO1_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO1_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO1_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO1_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO1_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO1_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO1_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO1_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO1_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO1_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO1_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO1.Reg, volatile.LoadUint32(&o.GPIO1.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO1_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO1.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO23
func (o *IO_MUX_Type) SetGPIO23_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO23.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO23_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO23_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO23_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO23_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO23_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO23_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO23_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO23_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO23_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO23_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO23_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x7000) >> 12
}

// IO_MUX.GPIO24
func (o *IO_MUX_Type) SetGPIO24_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO24.Reg) & 0x1
}
func (o *IO_MUX_Type) SetGPIO24_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO24_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO24_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO24_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO24_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO24_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO24_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO24_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO24_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO24_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO24_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x7000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x7000) >> 12
}

// LED Control PWM (Pulse Width Modulation)
type LEDC_Type struct {
	HSCH0_CONF0    volatile.Register32 // 0x0
	HSCH0_HPOINT   volatile.Register32 // 0x4
	HSCH0_DUTY     volatile.Register32 // 0x8
	HSCH0_CONF1    volatile.Register32 // 0xC
	HSCH0_DUTY_R   volatile.Register32 // 0x10
	HSCH1_CONF0    volatile.Register32 // 0x14
	HSCH1_HPOINT   volatile.Register32 // 0x18
	HSCH1_DUTY     volatile.Register32 // 0x1C
	HSCH1_CONF1    volatile.Register32 // 0x20
	HSCH1_DUTY_R   volatile.Register32 // 0x24
	HSCH2_CONF0    volatile.Register32 // 0x28
	HSCH2_HPOINT   volatile.Register32 // 0x2C
	HSCH2_DUTY     volatile.Register32 // 0x30
	HSCH2_CONF1    volatile.Register32 // 0x34
	HSCH2_DUTY_R   volatile.Register32 // 0x38
	HSCH3_CONF0    volatile.Register32 // 0x3C
	HSCH3_HPOINT   volatile.Register32 // 0x40
	HSCH3_DUTY     volatile.Register32 // 0x44
	HSCH3_CONF1    volatile.Register32 // 0x48
	HSCH3_DUTY_R   volatile.Register32 // 0x4C
	HSCH4_CONF0    volatile.Register32 // 0x50
	HSCH4_HPOINT   volatile.Register32 // 0x54
	HSCH4_DUTY     volatile.Register32 // 0x58
	HSCH4_CONF1    volatile.Register32 // 0x5C
	HSCH4_DUTY_R   volatile.Register32 // 0x60
	HSCH5_CONF0    volatile.Register32 // 0x64
	HSCH5_HPOINT   volatile.Register32 // 0x68
	HSCH5_DUTY     volatile.Register32 // 0x6C
	HSCH5_CONF1    volatile.Register32 // 0x70
	HSCH5_DUTY_R   volatile.Register32 // 0x74
	HSCH6_CONF0    volatile.Register32 // 0x78
	HSCH6_HPOINT   volatile.Register32 // 0x7C
	HSCH6_DUTY     volatile.Register32 // 0x80
	HSCH6_CONF1    volatile.Register32 // 0x84
	HSCH6_DUTY_R   volatile.Register32 // 0x88
	HSCH7_CONF0    volatile.Register32 // 0x8C
	HSCH7_HPOINT   volatile.Register32 // 0x90
	HSCH7_DUTY     volatile.Register32 // 0x94
	HSCH7_CONF1    volatile.Register32 // 0x98
	HSCH7_DUTY_R   volatile.Register32 // 0x9C
	LSCH0_CONF0    volatile.Register32 // 0xA0
	LSCH0_HPOINT   volatile.Register32 // 0xA4
	LSCH0_DUTY     volatile.Register32 // 0xA8
	LSCH0_CONF1    volatile.Register32 // 0xAC
	LSCH0_DUTY_R   volatile.Register32 // 0xB0
	LSCH1_CONF0    volatile.Register32 // 0xB4
	LSCH1_HPOINT   volatile.Register32 // 0xB8
	LSCH1_DUTY     volatile.Register32 // 0xBC
	LSCH1_CONF1    volatile.Register32 // 0xC0
	LSCH1_DUTY_R   volatile.Register32 // 0xC4
	LSCH2_CONF0    volatile.Register32 // 0xC8
	LSCH2_HPOINT   volatile.Register32 // 0xCC
	LSCH2_DUTY     volatile.Register32 // 0xD0
	LSCH2_CONF1    volatile.Register32 // 0xD4
	LSCH2_DUTY_R   volatile.Register32 // 0xD8
	LSCH3_CONF0    volatile.Register32 // 0xDC
	LSCH3_HPOINT   volatile.Register32 // 0xE0
	LSCH3_DUTY     volatile.Register32 // 0xE4
	LSCH3_CONF1    volatile.Register32 // 0xE8
	LSCH3_DUTY_R   volatile.Register32 // 0xEC
	LSCH4_CONF0    volatile.Register32 // 0xF0
	LSCH4_HPOINT   volatile.Register32 // 0xF4
	LSCH4_DUTY     volatile.Register32 // 0xF8
	LSCH4_CONF1    volatile.Register32 // 0xFC
	LSCH4_DUTY_R   volatile.Register32 // 0x100
	LSCH5_CONF0    volatile.Register32 // 0x104
	LSCH5_HPOINT   volatile.Register32 // 0x108
	LSCH5_DUTY     volatile.Register32 // 0x10C
	LSCH5_CONF1    volatile.Register32 // 0x110
	LSCH5_DUTY_R   volatile.Register32 // 0x114
	LSCH6_CONF0    volatile.Register32 // 0x118
	LSCH6_HPOINT   volatile.Register32 // 0x11C
	LSCH6_DUTY     volatile.Register32 // 0x120
	LSCH6_CONF1    volatile.Register32 // 0x124
	LSCH6_DUTY_R   volatile.Register32 // 0x128
	LSCH7_CONF0    volatile.Register32 // 0x12C
	LSCH7_HPOINT   volatile.Register32 // 0x130
	LSCH7_DUTY     volatile.Register32 // 0x134
	LSCH7_CONF1    volatile.Register32 // 0x138
	LSCH7_DUTY_R   volatile.Register32 // 0x13C
	HSTIMER0_CONF  volatile.Register32 // 0x140
	HSTIMER0_VALUE volatile.Register32 // 0x144
	HSTIMER1_CONF  volatile.Register32 // 0x148
	HSTIMER1_VALUE volatile.Register32 // 0x14C
	HSTIMER2_CONF  volatile.Register32 // 0x150
	HSTIMER2_VALUE volatile.Register32 // 0x154
	HSTIMER3_CONF  volatile.Register32 // 0x158
	HSTIMER3_VALUE volatile.Register32 // 0x15C
	LSTIMER0_CONF  volatile.Register32 // 0x160
	LSTIMER0_VALUE volatile.Register32 // 0x164
	LSTIMER1_CONF  volatile.Register32 // 0x168
	LSTIMER1_VALUE volatile.Register32 // 0x16C
	LSTIMER2_CONF  volatile.Register32 // 0x170
	LSTIMER2_VALUE volatile.Register32 // 0x174
	LSTIMER3_CONF  volatile.Register32 // 0x178
	LSTIMER3_VALUE volatile.Register32 // 0x17C
	INT_RAW        volatile.Register32 // 0x180
	INT_ST         volatile.Register32 // 0x184
	INT_ENA        volatile.Register32 // 0x188
	INT_CLR        volatile.Register32 // 0x18C
	CONF           volatile.Register32 // 0x190
	_              [104]byte
	DATE           volatile.Register32 // 0x1FC
}

// LEDC.HSCH0_CONF0
func (o *LEDC_Type) SetHSCH0_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF0.Reg, volatile.LoadUint32(&o.HSCH0_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH0_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH0_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH0_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF0.Reg, volatile.LoadUint32(&o.HSCH0_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH0_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH0_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF0.Reg, volatile.LoadUint32(&o.HSCH0_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH0_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH0_HPOINT
func (o *LEDC_Type) SetHSCH0_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH0_HPOINT.Reg, volatile.LoadUint32(&o.HSCH0_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH0_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH0_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH0_DUTY
func (o *LEDC_Type) SetHSCH0_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH0_DUTY.Reg, volatile.LoadUint32(&o.HSCH0_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH0_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH0_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH0_CONF1
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH0_DUTY_R
func (o *LEDC_Type) SetHSCH0_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH0_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH0_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH0_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH0_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH1_CONF0
func (o *LEDC_Type) SetHSCH1_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF0.Reg, volatile.LoadUint32(&o.HSCH1_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH1_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH1_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH1_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF0.Reg, volatile.LoadUint32(&o.HSCH1_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH1_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH1_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF0.Reg, volatile.LoadUint32(&o.HSCH1_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH1_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH1_HPOINT
func (o *LEDC_Type) SetHSCH1_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH1_HPOINT.Reg, volatile.LoadUint32(&o.HSCH1_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH1_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH1_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH1_DUTY
func (o *LEDC_Type) SetHSCH1_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH1_DUTY.Reg, volatile.LoadUint32(&o.HSCH1_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH1_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH1_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH1_CONF1
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH1_DUTY_R
func (o *LEDC_Type) SetHSCH1_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH1_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH1_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH1_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH1_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH2_CONF0
func (o *LEDC_Type) SetHSCH2_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF0.Reg, volatile.LoadUint32(&o.HSCH2_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH2_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH2_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH2_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF0.Reg, volatile.LoadUint32(&o.HSCH2_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH2_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH2_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF0.Reg, volatile.LoadUint32(&o.HSCH2_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH2_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH2_HPOINT
func (o *LEDC_Type) SetHSCH2_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH2_HPOINT.Reg, volatile.LoadUint32(&o.HSCH2_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH2_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH2_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH2_DUTY
func (o *LEDC_Type) SetHSCH2_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH2_DUTY.Reg, volatile.LoadUint32(&o.HSCH2_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH2_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH2_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH2_CONF1
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH2_DUTY_R
func (o *LEDC_Type) SetHSCH2_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH2_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH2_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH2_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH2_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH3_CONF0
func (o *LEDC_Type) SetHSCH3_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF0.Reg, volatile.LoadUint32(&o.HSCH3_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH3_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH3_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH3_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF0.Reg, volatile.LoadUint32(&o.HSCH3_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH3_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH3_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF0.Reg, volatile.LoadUint32(&o.HSCH3_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH3_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH3_HPOINT
func (o *LEDC_Type) SetHSCH3_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH3_HPOINT.Reg, volatile.LoadUint32(&o.HSCH3_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH3_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH3_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH3_DUTY
func (o *LEDC_Type) SetHSCH3_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH3_DUTY.Reg, volatile.LoadUint32(&o.HSCH3_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH3_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH3_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH3_CONF1
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH3_DUTY_R
func (o *LEDC_Type) SetHSCH3_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH3_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH3_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH3_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH3_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH4_CONF0
func (o *LEDC_Type) SetHSCH4_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF0.Reg, volatile.LoadUint32(&o.HSCH4_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH4_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH4_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH4_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF0.Reg, volatile.LoadUint32(&o.HSCH4_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH4_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH4_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF0.Reg, volatile.LoadUint32(&o.HSCH4_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH4_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH4_HPOINT
func (o *LEDC_Type) SetHSCH4_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH4_HPOINT.Reg, volatile.LoadUint32(&o.HSCH4_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH4_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH4_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH4_DUTY
func (o *LEDC_Type) SetHSCH4_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH4_DUTY.Reg, volatile.LoadUint32(&o.HSCH4_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH4_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH4_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH4_CONF1
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH4_DUTY_R
func (o *LEDC_Type) SetHSCH4_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH4_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH4_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH4_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH4_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH5_CONF0
func (o *LEDC_Type) SetHSCH5_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF0.Reg, volatile.LoadUint32(&o.HSCH5_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH5_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH5_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH5_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF0.Reg, volatile.LoadUint32(&o.HSCH5_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH5_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH5_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF0.Reg, volatile.LoadUint32(&o.HSCH5_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH5_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH5_HPOINT
func (o *LEDC_Type) SetHSCH5_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH5_HPOINT.Reg, volatile.LoadUint32(&o.HSCH5_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH5_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH5_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH5_DUTY
func (o *LEDC_Type) SetHSCH5_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH5_DUTY.Reg, volatile.LoadUint32(&o.HSCH5_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH5_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH5_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH5_CONF1
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH5_DUTY_R
func (o *LEDC_Type) SetHSCH5_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH5_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH5_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH5_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH5_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH6_CONF0
func (o *LEDC_Type) SetHSCH6_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF0.Reg, volatile.LoadUint32(&o.HSCH6_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH6_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH6_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH6_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF0.Reg, volatile.LoadUint32(&o.HSCH6_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH6_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH6_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF0.Reg, volatile.LoadUint32(&o.HSCH6_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH6_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH6_HPOINT
func (o *LEDC_Type) SetHSCH6_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH6_HPOINT.Reg, volatile.LoadUint32(&o.HSCH6_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH6_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH6_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH6_DUTY
func (o *LEDC_Type) SetHSCH6_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH6_DUTY.Reg, volatile.LoadUint32(&o.HSCH6_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH6_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH6_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH6_CONF1
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH6_DUTY_R
func (o *LEDC_Type) SetHSCH6_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH6_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH6_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH6_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH6_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH7_CONF0
func (o *LEDC_Type) SetHSCH7_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF0.Reg, volatile.LoadUint32(&o.HSCH7_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH7_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.HSCH7_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetHSCH7_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF0.Reg, volatile.LoadUint32(&o.HSCH7_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH7_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH7_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF0.Reg, volatile.LoadUint32(&o.HSCH7_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH7_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF0.Reg) & 0x8) >> 3
}

// LEDC.HSCH7_HPOINT
func (o *LEDC_Type) SetHSCH7_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.HSCH7_HPOINT.Reg, volatile.LoadUint32(&o.HSCH7_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH7_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.HSCH7_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH7_DUTY
func (o *LEDC_Type) SetHSCH7_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.HSCH7_DUTY.Reg, volatile.LoadUint32(&o.HSCH7_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH7_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.HSCH7_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH7_CONF1
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.HSCH7_DUTY_R
func (o *LEDC_Type) SetHSCH7_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.HSCH7_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH7_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH7_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.HSCH7_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH0_CONF0
func (o *LEDC_Type) SetLSCH0_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH0_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH0_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH0_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH0_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH0_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH0_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH0_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH0_HPOINT
func (o *LEDC_Type) SetLSCH0_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH0_HPOINT.Reg, volatile.LoadUint32(&o.LSCH0_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH0_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH0_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH0_DUTY
func (o *LEDC_Type) SetLSCH0_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH0_DUTY.Reg, volatile.LoadUint32(&o.LSCH0_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH0_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH0_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH0_CONF1
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH0_DUTY_R
func (o *LEDC_Type) SetLSCH0_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH0_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH0_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH0_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH0_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH1_CONF0
func (o *LEDC_Type) SetLSCH1_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH1_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH1_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH1_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH1_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH1_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH1_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH1_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH1_HPOINT
func (o *LEDC_Type) SetLSCH1_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH1_HPOINT.Reg, volatile.LoadUint32(&o.LSCH1_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH1_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH1_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH1_DUTY
func (o *LEDC_Type) SetLSCH1_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH1_DUTY.Reg, volatile.LoadUint32(&o.LSCH1_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH1_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH1_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH1_CONF1
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH1_DUTY_R
func (o *LEDC_Type) SetLSCH1_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH1_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH1_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH1_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH1_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH2_CONF0
func (o *LEDC_Type) SetLSCH2_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH2_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH2_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH2_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH2_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH2_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH2_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH2_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH2_HPOINT
func (o *LEDC_Type) SetLSCH2_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH2_HPOINT.Reg, volatile.LoadUint32(&o.LSCH2_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH2_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH2_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH2_DUTY
func (o *LEDC_Type) SetLSCH2_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH2_DUTY.Reg, volatile.LoadUint32(&o.LSCH2_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH2_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH2_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH2_CONF1
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH2_DUTY_R
func (o *LEDC_Type) SetLSCH2_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH2_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH2_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH2_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH2_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH3_CONF0
func (o *LEDC_Type) SetLSCH3_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH3_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH3_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH3_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH3_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH3_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH3_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH3_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH3_HPOINT
func (o *LEDC_Type) SetLSCH3_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH3_HPOINT.Reg, volatile.LoadUint32(&o.LSCH3_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH3_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH3_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH3_DUTY
func (o *LEDC_Type) SetLSCH3_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH3_DUTY.Reg, volatile.LoadUint32(&o.LSCH3_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH3_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH3_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH3_CONF1
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH3_DUTY_R
func (o *LEDC_Type) SetLSCH3_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH3_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH3_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH3_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH3_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH4_CONF0
func (o *LEDC_Type) SetLSCH4_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH4_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH4_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH4_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH4_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH4_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH4_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH4_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH4_HPOINT
func (o *LEDC_Type) SetLSCH4_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH4_HPOINT.Reg, volatile.LoadUint32(&o.LSCH4_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH4_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH4_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH4_DUTY
func (o *LEDC_Type) SetLSCH4_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH4_DUTY.Reg, volatile.LoadUint32(&o.LSCH4_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH4_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH4_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH4_CONF1
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH4_DUTY_R
func (o *LEDC_Type) SetLSCH4_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH4_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH4_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH4_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH4_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH5_CONF0
func (o *LEDC_Type) SetLSCH5_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH5_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH5_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH5_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH5_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH5_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH5_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH5_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH5_HPOINT
func (o *LEDC_Type) SetLSCH5_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH5_HPOINT.Reg, volatile.LoadUint32(&o.LSCH5_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH5_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH5_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH5_DUTY
func (o *LEDC_Type) SetLSCH5_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH5_DUTY.Reg, volatile.LoadUint32(&o.LSCH5_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH5_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH5_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH5_CONF1
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH5_DUTY_R
func (o *LEDC_Type) SetLSCH5_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH5_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH5_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH5_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH5_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH6_CONF0
func (o *LEDC_Type) SetLSCH6_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH6_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH6_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH6_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH6_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH6_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH6_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH6_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH6_HPOINT
func (o *LEDC_Type) SetLSCH6_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH6_HPOINT.Reg, volatile.LoadUint32(&o.LSCH6_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH6_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH6_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH6_DUTY
func (o *LEDC_Type) SetLSCH6_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH6_DUTY.Reg, volatile.LoadUint32(&o.LSCH6_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH6_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH6_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH6_CONF1
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH6_DUTY_R
func (o *LEDC_Type) SetLSCH6_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH6_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH6_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH6_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH6_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH7_CONF0
func (o *LEDC_Type) SetLSCH7_CONF0_TIMER_SEL(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH7_CONF0_TIMER_SEL() uint32 {
	return volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x3
}
func (o *LEDC_Type) SetLSCH7_CONF0_SIG_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH7_CONF0_SIG_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH7_CONF0_IDLE_LV(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH7_CONF0_IDLE_LV() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH7_CONF0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH7_CONF0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x10) >> 4
}

// LEDC.LSCH7_HPOINT
func (o *LEDC_Type) SetLSCH7_HPOINT_HPOINT(value uint32) {
	volatile.StoreUint32(&o.LSCH7_HPOINT.Reg, volatile.LoadUint32(&o.LSCH7_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH7_HPOINT_HPOINT() uint32 {
	return volatile.LoadUint32(&o.LSCH7_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH7_DUTY
func (o *LEDC_Type) SetLSCH7_DUTY_DUTY(value uint32) {
	volatile.StoreUint32(&o.LSCH7_DUTY.Reg, volatile.LoadUint32(&o.LSCH7_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH7_DUTY_DUTY() uint32 {
	return volatile.LoadUint32(&o.LSCH7_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH7_CONF1
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_SCALE(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_SCALE() uint32 {
	return volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x3ff
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_CYCLE(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_NUM(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_INC(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_INC() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_START(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_START() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x80000000) >> 31
}

// LEDC.LSCH7_DUTY_R
func (o *LEDC_Type) SetLSCH7_DUTY_R_DUTY_R(value uint32) {
	volatile.StoreUint32(&o.LSCH7_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH7_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH7_DUTY_R_DUTY_R() uint32 {
	return volatile.LoadUint32(&o.LSCH7_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSTIMER0_CONF
func (o *LEDC_Type) SetHSTIMER0_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetHSTIMER0_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER0_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER0_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER0_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x2000000) >> 25
}

// LEDC.HSTIMER0_VALUE
func (o *LEDC_Type) SetHSTIMER0_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER0_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER0_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER0_VALUE.Reg) & 0xfffff
}

// LEDC.HSTIMER1_CONF
func (o *LEDC_Type) SetHSTIMER1_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetHSTIMER1_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER1_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER1_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER1_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x2000000) >> 25
}

// LEDC.HSTIMER1_VALUE
func (o *LEDC_Type) SetHSTIMER1_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER1_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER1_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER1_VALUE.Reg) & 0xfffff
}

// LEDC.HSTIMER2_CONF
func (o *LEDC_Type) SetHSTIMER2_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetHSTIMER2_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER2_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER2_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER2_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x2000000) >> 25
}

// LEDC.HSTIMER2_VALUE
func (o *LEDC_Type) SetHSTIMER2_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER2_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER2_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER2_VALUE.Reg) & 0xfffff
}

// LEDC.HSTIMER3_CONF
func (o *LEDC_Type) SetHSTIMER3_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetHSTIMER3_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER3_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER3_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER3_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x2000000) >> 25
}

// LEDC.HSTIMER3_VALUE
func (o *LEDC_Type) SetHSTIMER3_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER3_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER3_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER3_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER0_CONF
func (o *LEDC_Type) SetLSTIMER0_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetLSTIMER0_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER0_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER0_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER0_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER0_CONF_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x4000000) >> 26
}

// LEDC.LSTIMER0_VALUE
func (o *LEDC_Type) SetLSTIMER0_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER0_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER0_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER0_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER1_CONF
func (o *LEDC_Type) SetLSTIMER1_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetLSTIMER1_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER1_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER1_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER1_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER1_CONF_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x4000000) >> 26
}

// LEDC.LSTIMER1_VALUE
func (o *LEDC_Type) SetLSTIMER1_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER1_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER1_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER1_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER2_CONF
func (o *LEDC_Type) SetLSTIMER2_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetLSTIMER2_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER2_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER2_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER2_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER2_CONF_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x4000000) >> 26
}

// LEDC.LSTIMER2_VALUE
func (o *LEDC_Type) SetLSTIMER2_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER2_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER2_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER2_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER3_CONF
func (o *LEDC_Type) SetLSTIMER3_CONF_DUTY_RES(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_DUTY_RES() uint32 {
	return volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x1f
}
func (o *LEDC_Type) SetLSTIMER3_CONF_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER3_CONF_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER3_CONF_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER3_CONF_TICK_SEL(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_TICK_SEL() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER3_CONF_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x4000000) >> 26
}

// LEDC.LSTIMER3_VALUE
func (o *LEDC_Type) SetLSTIMER3_VALUE_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER3_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER3_VALUE_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER3_VALUE.Reg) & 0xfffff
}

// LEDC.INT_RAW
func (o *LEDC_Type) SetINT_RAW_HSTIMER0_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER0_OVF_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *LEDC_Type) SetINT_RAW_HSTIMER1_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER1_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_RAW_HSTIMER2_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER2_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_RAW_HSTIMER3_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER3_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER0_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER0_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER1_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER1_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER2_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER2_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER3_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER3_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800000) >> 23
}

// LEDC.INT_ST
func (o *LEDC_Type) SetINT_ST_HSTIMER0_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER0_OVF_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *LEDC_Type) SetINT_ST_HSTIMER1_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER1_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_ST_HSTIMER2_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER2_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_ST_HSTIMER3_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER3_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_ST_LSTIMER0_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER0_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_ST_LSTIMER1_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER1_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_ST_LSTIMER2_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER2_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_ST_LSTIMER3_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER3_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800000) >> 23
}

// LEDC.INT_ENA
func (o *LEDC_Type) SetINT_ENA_HSTIMER0_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER0_OVF_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *LEDC_Type) SetINT_ENA_HSTIMER1_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER1_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_ENA_HSTIMER2_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER2_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_ENA_HSTIMER3_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER3_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER0_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER0_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER1_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER1_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER2_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER2_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER3_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER3_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800000) >> 23
}

// LEDC.INT_CLR
func (o *LEDC_Type) SetINT_CLR_HSTIMER0_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER0_OVF_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *LEDC_Type) SetINT_CLR_HSTIMER1_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER1_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_CLR_HSTIMER2_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER2_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_CLR_HSTIMER3_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER3_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER0_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER0_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER1_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER1_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER2_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER2_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER3_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER3_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800000) >> 23
}

// LEDC.CONF
func (o *LEDC_Type) SetCONF_APB_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetCONF_APB_CLK_SEL() uint32 {
	return volatile.LoadUint32(&o.CONF.Reg) & 0x1
}

// LEDC.DATE
func (o *LEDC_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *LEDC_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// Motor Control Pulse-Width Modulation 0
type MCPWM_Type struct {
	CLK_CFG           volatile.Register32 // 0x0
	TIMER0_CFG0       volatile.Register32 // 0x4
	TIMER0_CFG1       volatile.Register32 // 0x8
	TIMER0_SYNC       volatile.Register32 // 0xC
	TIMER0_STATUS     volatile.Register32 // 0x10
	TIMER1_CFG0       volatile.Register32 // 0x14
	TIMER1_CFG1       volatile.Register32 // 0x18
	TIMER1_SYNC       volatile.Register32 // 0x1C
	TIMER1_STATUS     volatile.Register32 // 0x20
	TIMER2_CFG0       volatile.Register32 // 0x24
	TIMER2_CFG1       volatile.Register32 // 0x28
	TIMER2_SYNC       volatile.Register32 // 0x2C
	TIMER2_STATUS     volatile.Register32 // 0x30
	TIMER_SYNCI_CFG   volatile.Register32 // 0x34
	OPERATOR_TIMERSEL volatile.Register32 // 0x38
	GEN0_STMP_CFG     volatile.Register32 // 0x3C
	GEN0_TSTMP_A      volatile.Register32 // 0x40
	GEN0_TSTMP_B      volatile.Register32 // 0x44
	GEN0_CFG0         volatile.Register32 // 0x48
	GEN0_FORCE        volatile.Register32 // 0x4C
	GEN0_A            volatile.Register32 // 0x50
	GEN0_B            volatile.Register32 // 0x54
	DT0_CFG           volatile.Register32 // 0x58
	DT0_FED_CFG       volatile.Register32 // 0x5C
	DT0_RED_CFG       volatile.Register32 // 0x60
	CARRIER0_CFG      volatile.Register32 // 0x64
	FH0_CFG0          volatile.Register32 // 0x68
	FH0_CFG1          volatile.Register32 // 0x6C
	FH0_STATUS        volatile.Register32 // 0x70
	GEN1_STMP_CFG     volatile.Register32 // 0x74
	GEN1_TSTMP_A      volatile.Register32 // 0x78
	GEN1_TSTMP_B      volatile.Register32 // 0x7C
	GEN1_CFG0         volatile.Register32 // 0x80
	GEN1_FORCE        volatile.Register32 // 0x84
	GEN1_A            volatile.Register32 // 0x88
	GEN1_B            volatile.Register32 // 0x8C
	DT1_CFG           volatile.Register32 // 0x90
	DT1_FED_CFG       volatile.Register32 // 0x94
	DT1_RED_CFG       volatile.Register32 // 0x98
	CARRIER1_CFG      volatile.Register32 // 0x9C
	FH1_CFG0          volatile.Register32 // 0xA0
	FH1_CFG1          volatile.Register32 // 0xA4
	FH1_STATUS        volatile.Register32 // 0xA8
	GEN2_STMP_CFG     volatile.Register32 // 0xAC
	GEN2_TSTMP_A      volatile.Register32 // 0xB0
	GEN2_TSTMP_B      volatile.Register32 // 0xB4
	GEN2_CFG0         volatile.Register32 // 0xB8
	GEN2_FORCE        volatile.Register32 // 0xBC
	GEN2_A            volatile.Register32 // 0xC0
	GEN2_B            volatile.Register32 // 0xC4
	DT2_CFG           volatile.Register32 // 0xC8
	DT2_FED_CFG       volatile.Register32 // 0xCC
	DT2_RED_CFG       volatile.Register32 // 0xD0
	CARRIER2_CFG      volatile.Register32 // 0xD4
	FH2_CFG0          volatile.Register32 // 0xD8
	FH2_CFG1          volatile.Register32 // 0xDC
	FH2_STATUS        volatile.Register32 // 0xE0
	FAULT_DETECT      volatile.Register32 // 0xE4
	CAP_TIMER_CFG     volatile.Register32 // 0xE8
	CAP_TIMER_PHASE   volatile.Register32 // 0xEC
	CAP_CH0_CFG       volatile.Register32 // 0xF0
	CAP_CH1_CFG       volatile.Register32 // 0xF4
	CAP_CH2_CFG       volatile.Register32 // 0xF8
	CAP_CH0           volatile.Register32 // 0xFC
	CAP_CH1           volatile.Register32 // 0x100
	CAP_CH2           volatile.Register32 // 0x104
	CAP_STATUS        volatile.Register32 // 0x108
	UPDATE_CFG        volatile.Register32 // 0x10C
	INT_ENA           volatile.Register32 // 0x110
	INT_RAW           volatile.Register32 // 0x114
	INT_ST            volatile.Register32 // 0x118
	INT_CLR           volatile.Register32 // 0x11C
	CLK               volatile.Register32 // 0x120
	VERSION           volatile.Register32 // 0x124
}

// MCPWM.CLK_CFG
func (o *MCPWM_Type) SetCLK_CFG_CLK_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CLK_CFG.Reg, volatile.LoadUint32(&o.CLK_CFG.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetCLK_CFG_CLK_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.CLK_CFG.Reg) & 0xff
}

// MCPWM.TIMER0_CFG0
func (o *MCPWM_Type) SetTIMER0_CFG0_TIMER0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG0.Reg, volatile.LoadUint32(&o.TIMER0_CFG0.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetTIMER0_CFG0_TIMER0_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.TIMER0_CFG0.Reg) & 0xff
}
func (o *MCPWM_Type) SetTIMER0_CFG0_TIMER0_PERIOD(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG0.Reg, volatile.LoadUint32(&o.TIMER0_CFG0.Reg)&^(0xffff00)|value<<8)
}
func (o *MCPWM_Type) GetTIMER0_CFG0_TIMER0_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_CFG0.Reg) & 0xffff00) >> 8
}
func (o *MCPWM_Type) SetTIMER0_CFG0_TIMER0_PERIOD_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG0.Reg, volatile.LoadUint32(&o.TIMER0_CFG0.Reg)&^(0x3000000)|value<<24)
}
func (o *MCPWM_Type) GetTIMER0_CFG0_TIMER0_PERIOD_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_CFG0.Reg) & 0x3000000) >> 24
}

// MCPWM.TIMER0_CFG1
func (o *MCPWM_Type) SetTIMER0_CFG1_TIMER0_START(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG1.Reg, volatile.LoadUint32(&o.TIMER0_CFG1.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER0_CFG1_TIMER0_START() uint32 {
	return volatile.LoadUint32(&o.TIMER0_CFG1.Reg) & 0x7
}
func (o *MCPWM_Type) SetTIMER0_CFG1_TIMER0_MOD(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG1.Reg, volatile.LoadUint32(&o.TIMER0_CFG1.Reg)&^(0x18)|value<<3)
}
func (o *MCPWM_Type) GetTIMER0_CFG1_TIMER0_MOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_CFG1.Reg) & 0x18) >> 3
}

// MCPWM.TIMER0_SYNC
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_SYNCI_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0x1
}
func (o *MCPWM_Type) SetTIMER0_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_SYNCO_SEL(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_SYNCO_SEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_PHASE(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0xffff0)|value<<4)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_PHASE() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0xffff0) >> 4
}
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_PHASE_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_PHASE_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0x100000) >> 20
}

// MCPWM.TIMER0_STATUS
func (o *MCPWM_Type) SetTIMER0_STATUS_TIMER0_VALUE(value uint32) {
	volatile.StoreUint32(&o.TIMER0_STATUS.Reg, volatile.LoadUint32(&o.TIMER0_STATUS.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetTIMER0_STATUS_TIMER0_VALUE() uint32 {
	return volatile.LoadUint32(&o.TIMER0_STATUS.Reg) & 0xffff
}
func (o *MCPWM_Type) SetTIMER0_STATUS_TIMER0_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER0_STATUS.Reg, volatile.LoadUint32(&o.TIMER0_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetTIMER0_STATUS_TIMER0_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_STATUS.Reg) & 0x10000) >> 16
}

// MCPWM.TIMER1_CFG0
func (o *MCPWM_Type) SetTIMER1_CFG0_TIMER1_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG0.Reg, volatile.LoadUint32(&o.TIMER1_CFG0.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetTIMER1_CFG0_TIMER1_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.TIMER1_CFG0.Reg) & 0xff
}
func (o *MCPWM_Type) SetTIMER1_CFG0_TIMER1_PERIOD(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG0.Reg, volatile.LoadUint32(&o.TIMER1_CFG0.Reg)&^(0xffff00)|value<<8)
}
func (o *MCPWM_Type) GetTIMER1_CFG0_TIMER1_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_CFG0.Reg) & 0xffff00) >> 8
}
func (o *MCPWM_Type) SetTIMER1_CFG0_TIMER1_PERIOD_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG0.Reg, volatile.LoadUint32(&o.TIMER1_CFG0.Reg)&^(0x3000000)|value<<24)
}
func (o *MCPWM_Type) GetTIMER1_CFG0_TIMER1_PERIOD_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_CFG0.Reg) & 0x3000000) >> 24
}

// MCPWM.TIMER1_CFG1
func (o *MCPWM_Type) SetTIMER1_CFG1_TIMER1_START(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG1.Reg, volatile.LoadUint32(&o.TIMER1_CFG1.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER1_CFG1_TIMER1_START() uint32 {
	return volatile.LoadUint32(&o.TIMER1_CFG1.Reg) & 0x7
}
func (o *MCPWM_Type) SetTIMER1_CFG1_TIMER1_MOD(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG1.Reg, volatile.LoadUint32(&o.TIMER1_CFG1.Reg)&^(0x18)|value<<3)
}
func (o *MCPWM_Type) GetTIMER1_CFG1_TIMER1_MOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_CFG1.Reg) & 0x18) >> 3
}

// MCPWM.TIMER1_SYNC
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_SYNCI_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0x1
}
func (o *MCPWM_Type) SetTIMER1_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_SYNCO_SEL(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_SYNCO_SEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_PHASE(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0xffff0)|value<<4)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_PHASE() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0xffff0) >> 4
}
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_PHASE_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_PHASE_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0x100000) >> 20
}

// MCPWM.TIMER1_STATUS
func (o *MCPWM_Type) SetTIMER1_STATUS_TIMER1_VALUE(value uint32) {
	volatile.StoreUint32(&o.TIMER1_STATUS.Reg, volatile.LoadUint32(&o.TIMER1_STATUS.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetTIMER1_STATUS_TIMER1_VALUE() uint32 {
	return volatile.LoadUint32(&o.TIMER1_STATUS.Reg) & 0xffff
}
func (o *MCPWM_Type) SetTIMER1_STATUS_TIMER1_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER1_STATUS.Reg, volatile.LoadUint32(&o.TIMER1_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetTIMER1_STATUS_TIMER1_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_STATUS.Reg) & 0x10000) >> 16
}

// MCPWM.TIMER2_CFG0
func (o *MCPWM_Type) SetTIMER2_CFG0_TIMER2_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG0.Reg, volatile.LoadUint32(&o.TIMER2_CFG0.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetTIMER2_CFG0_TIMER2_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.TIMER2_CFG0.Reg) & 0xff
}
func (o *MCPWM_Type) SetTIMER2_CFG0_TIMER2_PERIOD(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG0.Reg, volatile.LoadUint32(&o.TIMER2_CFG0.Reg)&^(0xffff00)|value<<8)
}
func (o *MCPWM_Type) GetTIMER2_CFG0_TIMER2_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_CFG0.Reg) & 0xffff00) >> 8
}
func (o *MCPWM_Type) SetTIMER2_CFG0_TIMER2_PERIOD_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG0.Reg, volatile.LoadUint32(&o.TIMER2_CFG0.Reg)&^(0x3000000)|value<<24)
}
func (o *MCPWM_Type) GetTIMER2_CFG0_TIMER2_PERIOD_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_CFG0.Reg) & 0x3000000) >> 24
}

// MCPWM.TIMER2_CFG1
func (o *MCPWM_Type) SetTIMER2_CFG1_TIMER2_START(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG1.Reg, volatile.LoadUint32(&o.TIMER2_CFG1.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER2_CFG1_TIMER2_START() uint32 {
	return volatile.LoadUint32(&o.TIMER2_CFG1.Reg) & 0x7
}
func (o *MCPWM_Type) SetTIMER2_CFG1_TIMER2_MOD(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG1.Reg, volatile.LoadUint32(&o.TIMER2_CFG1.Reg)&^(0x18)|value<<3)
}
func (o *MCPWM_Type) GetTIMER2_CFG1_TIMER2_MOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_CFG1.Reg) & 0x18) >> 3
}

// MCPWM.TIMER2_SYNC
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_SYNCI_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0x1
}
func (o *MCPWM_Type) SetTIMER2_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_SYNCO_SEL(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_SYNCO_SEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_PHASE(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0xffff0)|value<<4)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_PHASE() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0xffff0) >> 4
}
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_PHASE_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_PHASE_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0x100000) >> 20
}

// MCPWM.TIMER2_STATUS
func (o *MCPWM_Type) SetTIMER2_STATUS_TIMER2_VALUE(value uint32) {
	volatile.StoreUint32(&o.TIMER2_STATUS.Reg, volatile.LoadUint32(&o.TIMER2_STATUS.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetTIMER2_STATUS_TIMER2_VALUE() uint32 {
	return volatile.LoadUint32(&o.TIMER2_STATUS.Reg) & 0xffff
}
func (o *MCPWM_Type) SetTIMER2_STATUS_TIMER2_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER2_STATUS.Reg, volatile.LoadUint32(&o.TIMER2_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetTIMER2_STATUS_TIMER2_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_STATUS.Reg) & 0x10000) >> 16
}

// MCPWM.TIMER_SYNCI_CFG
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_TIMER0_SYNCISEL(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_TIMER0_SYNCISEL() uint32 {
	return volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x7
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_TIMER1_SYNCISEL(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x38)|value<<3)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_TIMER1_SYNCISEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x38) >> 3
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_TIMER2_SYNCISEL(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x1c0)|value<<6)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_TIMER2_SYNCISEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x1c0) >> 6
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x800) >> 11
}

// MCPWM.OPERATOR_TIMERSEL
func (o *MCPWM_Type) SetOPERATOR_TIMERSEL_OPERATOR0_TIMERSEL(value uint32) {
	volatile.StoreUint32(&o.OPERATOR_TIMERSEL.Reg, volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetOPERATOR_TIMERSEL_OPERATOR0_TIMERSEL() uint32 {
	return volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg) & 0x3
}
func (o *MCPWM_Type) SetOPERATOR_TIMERSEL_OPERATOR1_TIMERSEL(value uint32) {
	volatile.StoreUint32(&o.OPERATOR_TIMERSEL.Reg, volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetOPERATOR_TIMERSEL_OPERATOR1_TIMERSEL() uint32 {
	return (volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetOPERATOR_TIMERSEL_OPERATOR2_TIMERSEL(value uint32) {
	volatile.StoreUint32(&o.OPERATOR_TIMERSEL.Reg, volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetOPERATOR_TIMERSEL_OPERATOR2_TIMERSEL() uint32 {
	return (volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg) & 0x30) >> 4
}

// MCPWM.GEN0_STMP_CFG
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_A_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_A_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0xf
}
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_B_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_B_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_A_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_A_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_B_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_B_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0x200) >> 9
}

// MCPWM.GEN0_TSTMP_A
func (o *MCPWM_Type) SetGEN0_TSTMP_A_GEN0_A(value uint32) {
	volatile.StoreUint32(&o.GEN0_TSTMP_A.Reg, volatile.LoadUint32(&o.GEN0_TSTMP_A.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN0_TSTMP_A_GEN0_A() uint32 {
	return volatile.LoadUint32(&o.GEN0_TSTMP_A.Reg) & 0xffff
}

// MCPWM.GEN0_TSTMP_B
func (o *MCPWM_Type) SetGEN0_TSTMP_B_GEN0_B(value uint32) {
	volatile.StoreUint32(&o.GEN0_TSTMP_B.Reg, volatile.LoadUint32(&o.GEN0_TSTMP_B.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN0_TSTMP_B_GEN0_B() uint32 {
	return volatile.LoadUint32(&o.GEN0_TSTMP_B.Reg) & 0xffff
}

// MCPWM.GEN0_CFG0
func (o *MCPWM_Type) SetGEN0_CFG0_GEN0_CFG_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_CFG0.Reg, volatile.LoadUint32(&o.GEN0_CFG0.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN0_CFG0_GEN0_CFG_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN0_CFG0.Reg) & 0xf
}
func (o *MCPWM_Type) SetGEN0_CFG0_GEN0_T0_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN0_CFG0.Reg, volatile.LoadUint32(&o.GEN0_CFG0.Reg)&^(0x70)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_CFG0_GEN0_T0_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_CFG0.Reg) & 0x70) >> 4
}
func (o *MCPWM_Type) SetGEN0_CFG0_GEN0_T1_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN0_CFG0.Reg, volatile.LoadUint32(&o.GEN0_CFG0.Reg)&^(0x380)|value<<7)
}
func (o *MCPWM_Type) GetGEN0_CFG0_GEN0_T1_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_CFG0.Reg) & 0x380) >> 7
}

// MCPWM.GEN0_FORCE
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x3f)|value)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x3f
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_A_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_A_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_B_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_B_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_A_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_A_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_A_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x1800)|value<<11)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_A_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x1800) >> 11
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_B_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_B_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_B_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_B_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0xc000) >> 14
}

// MCPWM.GEN0_A
func (o *MCPWM_Type) SetGEN0_A_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN0_A_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN0_A.Reg) & 0x3
}
func (o *MCPWM_Type) SetGEN0_A_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN0_A_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN0_A_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_A_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN0_A_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN0_A_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN0_A_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_A_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN0_A_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN0_A_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN0_A_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN0_A_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN0_A_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN0_A_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN0_A_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN0_A_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN0_A_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN0_A_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN0_A_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN0_A_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN0_A_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN0_A_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc00000) >> 22
}

// MCPWM.GEN0_B
func (o *MCPWM_Type) SetGEN0_B_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN0_B_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN0_B.Reg) & 0x3
}
func (o *MCPWM_Type) SetGEN0_B_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN0_B_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN0_B_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_B_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN0_B_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN0_B_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN0_B_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_B_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN0_B_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN0_B_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN0_B_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN0_B_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN0_B_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN0_B_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN0_B_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN0_B_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN0_B_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN0_B_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN0_B_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN0_B_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN0_B_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN0_B_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc00000) >> 22
}

// MCPWM.DT0_CFG
func (o *MCPWM_Type) SetDT0_CFG_DT0_FED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_FED_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.DT0_CFG.Reg) & 0xf
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_RED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_RED_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_DEB_MODE(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_DEB_MODE() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_A_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_A_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_B_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_B_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_RED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_RED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_FED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_FED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_RED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_RED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_FED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_FED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_A_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_A_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_B_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_B_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x20000) >> 17
}

// MCPWM.DT0_FED_CFG
func (o *MCPWM_Type) SetDT0_FED_CFG_DT0_FED(value uint32) {
	volatile.StoreUint32(&o.DT0_FED_CFG.Reg, volatile.LoadUint32(&o.DT0_FED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT0_FED_CFG_DT0_FED() uint32 {
	return volatile.LoadUint32(&o.DT0_FED_CFG.Reg) & 0xffff
}

// MCPWM.DT0_RED_CFG
func (o *MCPWM_Type) SetDT0_RED_CFG_DT0_RED(value uint32) {
	volatile.StoreUint32(&o.DT0_RED_CFG.Reg, volatile.LoadUint32(&o.DT0_RED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT0_RED_CFG_DT0_RED() uint32 {
	return volatile.LoadUint32(&o.DT0_RED_CFG.Reg) & 0xffff
}

// MCPWM.CARRIER0_CFG
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_EN(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_EN() uint32 {
	return volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x1e)|value<<1)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x1e) >> 1
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_DUTY(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0xe0)|value<<5)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_DUTY() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0xe0) >> 5
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_OSHTWTH(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0xf00)|value<<8)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_OSHTWTH() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0xf00) >> 8
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_OUT_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_OUT_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x2000) >> 13
}

// MCPWM.FH0_CFG0
func (o *MCPWM_Type) SetFH0_CFG0_FH0_SW_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_SW_CBC() uint32 {
	return volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F2_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F2_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F1_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F1_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F0_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F0_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_SW_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_SW_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F2_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F2_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F1_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F1_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F0_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F0_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc00000) >> 22
}

// MCPWM.FH0_CFG1
func (o *MCPWM_Type) SetFH0_CFG1_FH0_CLR_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_CLR_OST() uint32 {
	return volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH0_CFG1_FH0_CBCPULSE(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_CBCPULSE() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetFH0_CFG1_FH0_FORCE_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_FORCE_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH0_CFG1_FH0_FORCE_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_FORCE_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x10) >> 4
}

// MCPWM.FH0_STATUS
func (o *MCPWM_Type) SetFH0_STATUS_FH0_CBC_ON(value uint32) {
	volatile.StoreUint32(&o.FH0_STATUS.Reg, volatile.LoadUint32(&o.FH0_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH0_STATUS_FH0_CBC_ON() uint32 {
	return volatile.LoadUint32(&o.FH0_STATUS.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH0_STATUS_FH0_OST_ON(value uint32) {
	volatile.StoreUint32(&o.FH0_STATUS.Reg, volatile.LoadUint32(&o.FH0_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH0_STATUS_FH0_OST_ON() uint32 {
	return (volatile.LoadUint32(&o.FH0_STATUS.Reg) & 0x2) >> 1
}

// MCPWM.GEN1_STMP_CFG
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_A_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_A_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0xf
}
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_B_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_B_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_A_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_A_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_B_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_B_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0x200) >> 9
}

// MCPWM.GEN1_TSTMP_A
func (o *MCPWM_Type) SetGEN1_TSTMP_A_GEN1_A(value uint32) {
	volatile.StoreUint32(&o.GEN1_TSTMP_A.Reg, volatile.LoadUint32(&o.GEN1_TSTMP_A.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN1_TSTMP_A_GEN1_A() uint32 {
	return volatile.LoadUint32(&o.GEN1_TSTMP_A.Reg) & 0xffff
}

// MCPWM.GEN1_TSTMP_B
func (o *MCPWM_Type) SetGEN1_TSTMP_B_GEN1_B(value uint32) {
	volatile.StoreUint32(&o.GEN1_TSTMP_B.Reg, volatile.LoadUint32(&o.GEN1_TSTMP_B.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN1_TSTMP_B_GEN1_B() uint32 {
	return volatile.LoadUint32(&o.GEN1_TSTMP_B.Reg) & 0xffff
}

// MCPWM.GEN1_CFG0
func (o *MCPWM_Type) SetGEN1_CFG0_GEN1_CFG_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_CFG0.Reg, volatile.LoadUint32(&o.GEN1_CFG0.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN1_CFG0_GEN1_CFG_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN1_CFG0.Reg) & 0xf
}
func (o *MCPWM_Type) SetGEN1_CFG0_GEN1_T0_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN1_CFG0.Reg, volatile.LoadUint32(&o.GEN1_CFG0.Reg)&^(0x70)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_CFG0_GEN1_T0_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_CFG0.Reg) & 0x70) >> 4
}
func (o *MCPWM_Type) SetGEN1_CFG0_GEN1_T1_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN1_CFG0.Reg, volatile.LoadUint32(&o.GEN1_CFG0.Reg)&^(0x380)|value<<7)
}
func (o *MCPWM_Type) GetGEN1_CFG0_GEN1_T1_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_CFG0.Reg) & 0x380) >> 7
}

// MCPWM.GEN1_FORCE
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x3f)|value)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x3f
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_A_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_A_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_B_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_B_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_A_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_A_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_A_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x1800)|value<<11)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_A_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x1800) >> 11
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_B_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_B_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_B_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_B_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0xc000) >> 14
}

// MCPWM.GEN1_A
func (o *MCPWM_Type) SetGEN1_A_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN1_A_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN1_A.Reg) & 0x3
}
func (o *MCPWM_Type) SetGEN1_A_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN1_A_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN1_A_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_A_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN1_A_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN1_A_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN1_A_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_A_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN1_A_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN1_A_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN1_A_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN1_A_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN1_A_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN1_A_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN1_A_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN1_A_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN1_A_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN1_A_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN1_A_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN1_A_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN1_A_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN1_A_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc00000) >> 22
}

// MCPWM.GEN1_B
func (o *MCPWM_Type) SetGEN1_B_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN1_B_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN1_B.Reg) & 0x3
}
func (o *MCPWM_Type) SetGEN1_B_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN1_B_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN1_B_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_B_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN1_B_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN1_B_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN1_B_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_B_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN1_B_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN1_B_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN1_B_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN1_B_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN1_B_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN1_B_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN1_B_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN1_B_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN1_B_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN1_B_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN1_B_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN1_B_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN1_B_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN1_B_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc00000) >> 22
}

// MCPWM.DT1_CFG
func (o *MCPWM_Type) SetDT1_CFG_DT1_FED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_FED_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.DT1_CFG.Reg) & 0xf
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_RED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_RED_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_DEB_MODE(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_DEB_MODE() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_A_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_A_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_B_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_B_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_RED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_RED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_FED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_FED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_RED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_RED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_FED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_FED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_A_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_A_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_B_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_B_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x20000) >> 17
}

// MCPWM.DT1_FED_CFG
func (o *MCPWM_Type) SetDT1_FED_CFG_DT1_FED(value uint32) {
	volatile.StoreUint32(&o.DT1_FED_CFG.Reg, volatile.LoadUint32(&o.DT1_FED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT1_FED_CFG_DT1_FED() uint32 {
	return volatile.LoadUint32(&o.DT1_FED_CFG.Reg) & 0xffff
}

// MCPWM.DT1_RED_CFG
func (o *MCPWM_Type) SetDT1_RED_CFG_DT1_RED(value uint32) {
	volatile.StoreUint32(&o.DT1_RED_CFG.Reg, volatile.LoadUint32(&o.DT1_RED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT1_RED_CFG_DT1_RED() uint32 {
	return volatile.LoadUint32(&o.DT1_RED_CFG.Reg) & 0xffff
}

// MCPWM.CARRIER1_CFG
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_EN(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_EN() uint32 {
	return volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x1e)|value<<1)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x1e) >> 1
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_DUTY(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0xe0)|value<<5)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_DUTY() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0xe0) >> 5
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_OSHTWTH(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0xf00)|value<<8)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_OSHTWTH() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0xf00) >> 8
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_OUT_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_OUT_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x2000) >> 13
}

// MCPWM.FH1_CFG0
func (o *MCPWM_Type) SetFH1_CFG0_FH1_SW_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_SW_CBC() uint32 {
	return volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F2_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F2_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F1_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F1_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F0_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F0_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_SW_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_SW_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F2_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F2_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F1_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F1_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F0_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F0_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc00000) >> 22
}

// MCPWM.FH1_CFG1
func (o *MCPWM_Type) SetFH1_CFG1_FH1_CLR_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_CLR_OST() uint32 {
	return volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH1_CFG1_FH1_CBCPULSE(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_CBCPULSE() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetFH1_CFG1_FH1_FORCE_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_FORCE_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH1_CFG1_FH1_FORCE_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_FORCE_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x10) >> 4
}

// MCPWM.FH1_STATUS
func (o *MCPWM_Type) SetFH1_STATUS_FH1_CBC_ON(value uint32) {
	volatile.StoreUint32(&o.FH1_STATUS.Reg, volatile.LoadUint32(&o.FH1_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH1_STATUS_FH1_CBC_ON() uint32 {
	return volatile.LoadUint32(&o.FH1_STATUS.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH1_STATUS_FH1_OST_ON(value uint32) {
	volatile.StoreUint32(&o.FH1_STATUS.Reg, volatile.LoadUint32(&o.FH1_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH1_STATUS_FH1_OST_ON() uint32 {
	return (volatile.LoadUint32(&o.FH1_STATUS.Reg) & 0x2) >> 1
}

// MCPWM.GEN2_STMP_CFG
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_A_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_A_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0xf
}
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_B_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_B_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_A_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_A_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_B_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_B_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0x200) >> 9
}

// MCPWM.GEN2_TSTMP_A
func (o *MCPWM_Type) SetGEN2_TSTMP_A_GEN2_A(value uint32) {
	volatile.StoreUint32(&o.GEN2_TSTMP_A.Reg, volatile.LoadUint32(&o.GEN2_TSTMP_A.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN2_TSTMP_A_GEN2_A() uint32 {
	return volatile.LoadUint32(&o.GEN2_TSTMP_A.Reg) & 0xffff
}

// MCPWM.GEN2_TSTMP_B
func (o *MCPWM_Type) SetGEN2_TSTMP_B_GEN2_B(value uint32) {
	volatile.StoreUint32(&o.GEN2_TSTMP_B.Reg, volatile.LoadUint32(&o.GEN2_TSTMP_B.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN2_TSTMP_B_GEN2_B() uint32 {
	return volatile.LoadUint32(&o.GEN2_TSTMP_B.Reg) & 0xffff
}

// MCPWM.GEN2_CFG0
func (o *MCPWM_Type) SetGEN2_CFG0_GEN2_CFG_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_CFG0.Reg, volatile.LoadUint32(&o.GEN2_CFG0.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN2_CFG0_GEN2_CFG_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN2_CFG0.Reg) & 0xf
}
func (o *MCPWM_Type) SetGEN2_CFG0_GEN2_T0_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN2_CFG0.Reg, volatile.LoadUint32(&o.GEN2_CFG0.Reg)&^(0x70)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_CFG0_GEN2_T0_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_CFG0.Reg) & 0x70) >> 4
}
func (o *MCPWM_Type) SetGEN2_CFG0_GEN2_T1_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN2_CFG0.Reg, volatile.LoadUint32(&o.GEN2_CFG0.Reg)&^(0x380)|value<<7)
}
func (o *MCPWM_Type) GetGEN2_CFG0_GEN2_T1_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_CFG0.Reg) & 0x380) >> 7
}

// MCPWM.GEN2_FORCE
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x3f)|value)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x3f
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_A_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_A_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_B_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_B_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_A_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_A_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_A_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x1800)|value<<11)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_A_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x1800) >> 11
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_B_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_B_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_B_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_B_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0xc000) >> 14
}

// MCPWM.GEN2_A
func (o *MCPWM_Type) SetGEN2_A_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN2_A_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN2_A.Reg) & 0x3
}
func (o *MCPWM_Type) SetGEN2_A_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN2_A_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN2_A_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_A_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN2_A_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN2_A_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN2_A_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_A_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN2_A_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN2_A_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN2_A_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN2_A_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN2_A_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN2_A_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN2_A_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN2_A_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN2_A_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN2_A_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN2_A_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN2_A_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN2_A_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN2_A_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc00000) >> 22
}

// MCPWM.GEN2_B
func (o *MCPWM_Type) SetGEN2_B_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN2_B_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN2_B.Reg) & 0x3
}
func (o *MCPWM_Type) SetGEN2_B_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN2_B_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN2_B_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_B_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN2_B_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN2_B_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN2_B_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_B_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN2_B_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN2_B_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN2_B_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN2_B_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN2_B_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN2_B_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN2_B_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN2_B_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN2_B_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN2_B_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN2_B_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN2_B_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN2_B_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN2_B_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc00000) >> 22
}

// MCPWM.DT2_CFG
func (o *MCPWM_Type) SetDT2_CFG_DT2_FED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_FED_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.DT2_CFG.Reg) & 0xf
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_RED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_RED_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_DEB_MODE(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_DEB_MODE() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_A_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_A_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_B_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_B_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_RED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_RED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_FED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_FED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_RED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_RED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_FED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_FED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_A_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_A_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_B_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_B_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x20000) >> 17
}

// MCPWM.DT2_FED_CFG
func (o *MCPWM_Type) SetDT2_FED_CFG_DT2_FED(value uint32) {
	volatile.StoreUint32(&o.DT2_FED_CFG.Reg, volatile.LoadUint32(&o.DT2_FED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT2_FED_CFG_DT2_FED() uint32 {
	return volatile.LoadUint32(&o.DT2_FED_CFG.Reg) & 0xffff
}

// MCPWM.DT2_RED_CFG
func (o *MCPWM_Type) SetDT2_RED_CFG_DT2_RED(value uint32) {
	volatile.StoreUint32(&o.DT2_RED_CFG.Reg, volatile.LoadUint32(&o.DT2_RED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT2_RED_CFG_DT2_RED() uint32 {
	return volatile.LoadUint32(&o.DT2_RED_CFG.Reg) & 0xffff
}

// MCPWM.CARRIER2_CFG
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_EN(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_EN() uint32 {
	return volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x1e)|value<<1)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x1e) >> 1
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_DUTY(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0xe0)|value<<5)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_DUTY() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0xe0) >> 5
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_OSHTWTH(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0xf00)|value<<8)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_OSHTWTH() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0xf00) >> 8
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_OUT_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_OUT_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x2000) >> 13
}

// MCPWM.FH2_CFG0
func (o *MCPWM_Type) SetFH2_CFG0_FH2_SW_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_SW_CBC() uint32 {
	return volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F2_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F2_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F1_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F1_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F0_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F0_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_SW_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_SW_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F2_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F2_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F1_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F1_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F0_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F0_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc00000) >> 22
}

// MCPWM.FH2_CFG1
func (o *MCPWM_Type) SetFH2_CFG1_FH2_CLR_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_CLR_OST() uint32 {
	return volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH2_CFG1_FH2_CBCPULSE(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_CBCPULSE() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetFH2_CFG1_FH2_FORCE_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_FORCE_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH2_CFG1_FH2_FORCE_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_FORCE_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x10) >> 4
}

// MCPWM.FH2_STATUS
func (o *MCPWM_Type) SetFH2_STATUS_FH2_CBC_ON(value uint32) {
	volatile.StoreUint32(&o.FH2_STATUS.Reg, volatile.LoadUint32(&o.FH2_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH2_STATUS_FH2_CBC_ON() uint32 {
	return volatile.LoadUint32(&o.FH2_STATUS.Reg) & 0x1
}
func (o *MCPWM_Type) SetFH2_STATUS_FH2_OST_ON(value uint32) {
	volatile.StoreUint32(&o.FH2_STATUS.Reg, volatile.LoadUint32(&o.FH2_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH2_STATUS_FH2_OST_ON() uint32 {
	return (volatile.LoadUint32(&o.FH2_STATUS.Reg) & 0x2) >> 1
}

// MCPWM.FAULT_DETECT
func (o *MCPWM_Type) SetFAULT_DETECT_F0_EN(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F0_EN() uint32 {
	return volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x1
}
func (o *MCPWM_Type) SetFAULT_DETECT_F1_EN(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F1_EN() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFAULT_DETECT_F2_EN(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F2_EN() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFAULT_DETECT_F0_POLE(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F0_POLE() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFAULT_DETECT_F1_POLE(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F1_POLE() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFAULT_DETECT_F2_POLE(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F2_POLE() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFAULT_DETECT_EVENT_F0(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFAULT_DETECT_EVENT_F0() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFAULT_DETECT_EVENT_F1(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFAULT_DETECT_EVENT_F1() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFAULT_DETECT_EVENT_F2(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetFAULT_DETECT_EVENT_F2() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x100) >> 8
}

// MCPWM.CAP_TIMER_CFG
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_TIMER_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_TIMER_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_SYNCI_EN() uint32 {
	return (volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_SYNCI_SEL(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x1c)|value<<2)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_SYNCI_SEL() uint32 {
	return (volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x1c) >> 2
}
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x20) >> 5
}

// MCPWM.CAP_TIMER_PHASE
func (o *MCPWM_Type) SetCAP_TIMER_PHASE(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_PHASE.Reg, value)
}
func (o *MCPWM_Type) GetCAP_TIMER_PHASE() uint32 {
	return volatile.LoadUint32(&o.CAP_TIMER_PHASE.Reg)
}

// MCPWM.CAP_CH0_CFG
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_MODE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_MODE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x7f8)|value<<3)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x7f8) >> 3
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x1000) >> 12
}

// MCPWM.CAP_CH1_CFG
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_MODE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_MODE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x7f8)|value<<3)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x7f8) >> 3
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x1000) >> 12
}

// MCPWM.CAP_CH2_CFG
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_MODE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_MODE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x7f8)|value<<3)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x7f8) >> 3
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x1000) >> 12
}

// MCPWM.CAP_CH0
func (o *MCPWM_Type) SetCAP_CH0(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0.Reg, value)
}
func (o *MCPWM_Type) GetCAP_CH0() uint32 {
	return volatile.LoadUint32(&o.CAP_CH0.Reg)
}

// MCPWM.CAP_CH1
func (o *MCPWM_Type) SetCAP_CH1(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1.Reg, value)
}
func (o *MCPWM_Type) GetCAP_CH1() uint32 {
	return volatile.LoadUint32(&o.CAP_CH1.Reg)
}

// MCPWM.CAP_CH2
func (o *MCPWM_Type) SetCAP_CH2(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2.Reg, value)
}
func (o *MCPWM_Type) GetCAP_CH2() uint32 {
	return volatile.LoadUint32(&o.CAP_CH2.Reg)
}

// MCPWM.CAP_STATUS
func (o *MCPWM_Type) SetCAP_STATUS_CAP0_EDGE(value uint32) {
	volatile.StoreUint32(&o.CAP_STATUS.Reg, volatile.LoadUint32(&o.CAP_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_STATUS_CAP0_EDGE() uint32 {
	return volatile.LoadUint32(&o.CAP_STATUS.Reg) & 0x1
}
func (o *MCPWM_Type) SetCAP_STATUS_CAP1_EDGE(value uint32) {
	volatile.StoreUint32(&o.CAP_STATUS.Reg, volatile.LoadUint32(&o.CAP_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetCAP_STATUS_CAP1_EDGE() uint32 {
	return (volatile.LoadUint32(&o.CAP_STATUS.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetCAP_STATUS_CAP2_EDGE(value uint32) {
	volatile.StoreUint32(&o.CAP_STATUS.Reg, volatile.LoadUint32(&o.CAP_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetCAP_STATUS_CAP2_EDGE() uint32 {
	return (volatile.LoadUint32(&o.CAP_STATUS.Reg) & 0x4) >> 2
}

// MCPWM.UPDATE_CFG
func (o *MCPWM_Type) SetUPDATE_CFG_GLOBAL_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetUPDATE_CFG_GLOBAL_UP_EN() uint32 {
	return volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x1
}
func (o *MCPWM_Type) SetUPDATE_CFG_GLOBAL_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetUPDATE_CFG_GLOBAL_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP0_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP0_UP_EN() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP0_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP0_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP1_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP1_UP_EN() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP1_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP1_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP2_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP2_UP_EN() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP2_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP2_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x80) >> 7
}

// MCPWM.INT_ENA
func (o *MCPWM_Type) SetINT_ENA_TIMER0_STOP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER0_STOP_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *MCPWM_Type) SetINT_ENA_TIMER1_STOP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER1_STOP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetINT_ENA_TIMER2_STOP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER2_STOP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetINT_ENA_TIMER0_TEZ_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER0_TEZ_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetINT_ENA_TIMER1_TEZ_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER1_TEZ_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetINT_ENA_TIMER2_TEZ_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER2_TEZ_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetINT_ENA_TIMER0_TEP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER0_TEP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetINT_ENA_TIMER1_TEP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER1_TEP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetINT_ENA_TIMER2_TEP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetINT_ENA_TIMER2_TEP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetINT_ENA_FAULT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetINT_ENA_FAULT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetINT_ENA_FAULT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetINT_ENA_FAULT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetINT_ENA_FAULT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetINT_ENA_FAULT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetINT_ENA_FAULT0_CLR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetINT_ENA_FAULT0_CLR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetINT_ENA_FAULT1_CLR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetINT_ENA_FAULT1_CLR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetINT_ENA_FAULT2_CLR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetINT_ENA_FAULT2_CLR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetINT_ENA_OP0_TEA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetINT_ENA_OP0_TEA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetINT_ENA_OP1_TEA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetINT_ENA_OP1_TEA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetINT_ENA_OP2_TEA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetINT_ENA_OP2_TEA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetINT_ENA_OP0_TEB_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetINT_ENA_OP0_TEB_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetINT_ENA_OP1_TEB_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetINT_ENA_OP1_TEB_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetINT_ENA_OP2_TEB_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetINT_ENA_OP2_TEB_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetINT_ENA_FH0_CBC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetINT_ENA_FH0_CBC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetINT_ENA_FH1_CBC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetINT_ENA_FH1_CBC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetINT_ENA_FH2_CBC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetINT_ENA_FH2_CBC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetINT_ENA_FH0_OST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetINT_ENA_FH0_OST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetINT_ENA_FH1_OST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetINT_ENA_FH1_OST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetINT_ENA_FH2_OST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetINT_ENA_FH2_OST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetINT_ENA_CAP0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetINT_ENA_CAP0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetINT_ENA_CAP1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetINT_ENA_CAP1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetINT_ENA_CAP2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetINT_ENA_CAP2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000000) >> 29
}

// MCPWM.INT_RAW
func (o *MCPWM_Type) SetINT_RAW_TIMER0_STOP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER0_STOP_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *MCPWM_Type) SetINT_RAW_TIMER1_STOP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER1_STOP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetINT_RAW_TIMER2_STOP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER2_STOP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetINT_RAW_TIMER0_TEZ_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER0_TEZ_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetINT_RAW_TIMER1_TEZ_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER1_TEZ_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetINT_RAW_TIMER2_TEZ_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER2_TEZ_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetINT_RAW_TIMER0_TEP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER0_TEP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetINT_RAW_TIMER1_TEP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER1_TEP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetINT_RAW_TIMER2_TEP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetINT_RAW_TIMER2_TEP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetINT_RAW_FAULT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetINT_RAW_FAULT0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetINT_RAW_FAULT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetINT_RAW_FAULT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetINT_RAW_FAULT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetINT_RAW_FAULT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetINT_RAW_FAULT0_CLR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetINT_RAW_FAULT0_CLR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetINT_RAW_FAULT1_CLR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetINT_RAW_FAULT1_CLR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetINT_RAW_FAULT2_CLR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetINT_RAW_FAULT2_CLR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetINT_RAW_OP0_TEA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetINT_RAW_OP0_TEA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetINT_RAW_OP1_TEA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetINT_RAW_OP1_TEA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetINT_RAW_OP2_TEA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetINT_RAW_OP2_TEA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetINT_RAW_OP0_TEB_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetINT_RAW_OP0_TEB_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetINT_RAW_OP1_TEB_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetINT_RAW_OP1_TEB_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetINT_RAW_OP2_TEB_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetINT_RAW_OP2_TEB_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetINT_RAW_FH0_CBC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetINT_RAW_FH0_CBC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetINT_RAW_FH1_CBC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetINT_RAW_FH1_CBC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetINT_RAW_FH2_CBC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetINT_RAW_FH2_CBC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetINT_RAW_FH0_OST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetINT_RAW_FH0_OST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetINT_RAW_FH1_OST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetINT_RAW_FH1_OST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetINT_RAW_FH2_OST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetINT_RAW_FH2_OST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetINT_RAW_CAP0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetINT_RAW_CAP0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetINT_RAW_CAP1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetINT_RAW_CAP1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetINT_RAW_CAP2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetINT_RAW_CAP2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000000) >> 29
}

// MCPWM.INT_ST
func (o *MCPWM_Type) SetINT_ST_TIMER0_STOP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetINT_ST_TIMER0_STOP_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *MCPWM_Type) SetINT_ST_TIMER1_STOP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetINT_ST_TIMER1_STOP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetINT_ST_TIMER2_STOP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetINT_ST_TIMER2_STOP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetINT_ST_TIMER0_TEZ_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetINT_ST_TIMER0_TEZ_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetINT_ST_TIMER1_TEZ_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetINT_ST_TIMER1_TEZ_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetINT_ST_TIMER2_TEZ_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetINT_ST_TIMER2_TEZ_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetINT_ST_TIMER0_TEP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetINT_ST_TIMER0_TEP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetINT_ST_TIMER1_TEP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetINT_ST_TIMER1_TEP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetINT_ST_TIMER2_TEP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetINT_ST_TIMER2_TEP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetINT_ST_FAULT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetINT_ST_FAULT0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetINT_ST_FAULT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetINT_ST_FAULT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetINT_ST_FAULT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetINT_ST_FAULT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetINT_ST_FAULT0_CLR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetINT_ST_FAULT0_CLR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetINT_ST_FAULT1_CLR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetINT_ST_FAULT1_CLR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetINT_ST_FAULT2_CLR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetINT_ST_FAULT2_CLR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetINT_ST_OP0_TEA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetINT_ST_OP0_TEA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetINT_ST_OP1_TEA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetINT_ST_OP1_TEA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetINT_ST_OP2_TEA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetINT_ST_OP2_TEA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetINT_ST_OP0_TEB_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetINT_ST_OP0_TEB_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetINT_ST_OP1_TEB_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetINT_ST_OP1_TEB_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetINT_ST_OP2_TEB_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetINT_ST_OP2_TEB_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetINT_ST_FH0_CBC_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetINT_ST_FH0_CBC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetINT_ST_FH1_CBC_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetINT_ST_FH1_CBC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetINT_ST_FH2_CBC_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetINT_ST_FH2_CBC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetINT_ST_FH0_OST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetINT_ST_FH0_OST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetINT_ST_FH1_OST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetINT_ST_FH1_OST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetINT_ST_FH2_OST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetINT_ST_FH2_OST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetINT_ST_CAP0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetINT_ST_CAP0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetINT_ST_CAP1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetINT_ST_CAP1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetINT_ST_CAP2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetINT_ST_CAP2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000000) >> 29
}

// MCPWM.INT_CLR
func (o *MCPWM_Type) SetINT_CLR_TIMER0_STOP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER0_STOP_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *MCPWM_Type) SetINT_CLR_TIMER1_STOP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER1_STOP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetINT_CLR_TIMER2_STOP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER2_STOP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetINT_CLR_TIMER0_TEZ_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER0_TEZ_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetINT_CLR_TIMER1_TEZ_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER1_TEZ_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetINT_CLR_TIMER2_TEZ_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER2_TEZ_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetINT_CLR_TIMER0_TEP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER0_TEP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetINT_CLR_TIMER1_TEP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER1_TEP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetINT_CLR_TIMER2_TEP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetINT_CLR_TIMER2_TEP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetINT_CLR_FAULT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetINT_CLR_FAULT0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetINT_CLR_FAULT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetINT_CLR_FAULT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetINT_CLR_FAULT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetINT_CLR_FAULT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetINT_CLR_FAULT0_CLR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetINT_CLR_FAULT0_CLR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetINT_CLR_FAULT1_CLR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetINT_CLR_FAULT1_CLR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetINT_CLR_FAULT2_CLR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetINT_CLR_FAULT2_CLR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetINT_CLR_OP0_TEA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetINT_CLR_OP0_TEA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetINT_CLR_OP1_TEA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetINT_CLR_OP1_TEA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetINT_CLR_OP2_TEA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetINT_CLR_OP2_TEA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetINT_CLR_OP0_TEB_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetINT_CLR_OP0_TEB_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetINT_CLR_OP1_TEB_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetINT_CLR_OP1_TEB_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetINT_CLR_OP2_TEB_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetINT_CLR_OP2_TEB_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetINT_CLR_FH0_CBC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetINT_CLR_FH0_CBC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetINT_CLR_FH1_CBC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetINT_CLR_FH1_CBC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetINT_CLR_FH2_CBC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetINT_CLR_FH2_CBC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetINT_CLR_FH0_OST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetINT_CLR_FH0_OST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetINT_CLR_FH1_OST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetINT_CLR_FH1_OST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetINT_CLR_FH2_OST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetINT_CLR_FH2_OST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetINT_CLR_CAP0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetINT_CLR_CAP0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetINT_CLR_CAP1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetINT_CLR_CAP1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetINT_CLR_CAP2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetINT_CLR_CAP2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000000) >> 29
}

// MCPWM.CLK
func (o *MCPWM_Type) SetCLK_EN(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCLK_EN() uint32 {
	return volatile.LoadUint32(&o.CLK.Reg) & 0x1
}

// MCPWM.VERSION
func (o *MCPWM_Type) SetVERSION_DATE(value uint32) {
	volatile.StoreUint32(&o.VERSION.Reg, volatile.LoadUint32(&o.VERSION.Reg)&^(0xfffffff)|value)
}
func (o *MCPWM_Type) GetVERSION_DATE() uint32 {
	return volatile.LoadUint32(&o.VERSION.Reg) & 0xfffffff
}

// NRX Peripheral
type NRX_Type struct {
	_          [212]byte
	NRXPD_CTRL volatile.Register32 // 0xD4
}

// NRX.NRXPD_CTRL: WiFi RX control register
func (o *NRX_Type) SetNRXPD_CTRL_DEMAP_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x1)|value)
}
func (o *NRX_Type) GetNRXPD_CTRL_DEMAP_FORCE_PD() uint32 {
	return volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x1
}
func (o *NRX_Type) SetNRXPD_CTRL_DEMAP_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *NRX_Type) GetNRXPD_CTRL_DEMAP_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x2) >> 1
}
func (o *NRX_Type) SetNRXPD_CTRL_VIT_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *NRX_Type) GetNRXPD_CTRL_VIT_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x4) >> 2
}
func (o *NRX_Type) SetNRXPD_CTRL_VIT_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x8)|value<<3)
}
func (o *NRX_Type) GetNRXPD_CTRL_VIT_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x8) >> 3
}
func (o *NRX_Type) SetNRXPD_CTRL_RX_ROT_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *NRX_Type) GetNRXPD_CTRL_RX_ROT_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x10) >> 4
}
func (o *NRX_Type) SetNRXPD_CTRL_RX_ROT_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *NRX_Type) GetNRXPD_CTRL_RX_ROT_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x20) >> 5
}
func (o *NRX_Type) SetNRXPD_CTRL_CHAN_EST_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *NRX_Type) GetNRXPD_CTRL_CHAN_EST_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x40) >> 6
}
func (o *NRX_Type) SetNRXPD_CTRL_CHAN_EST_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.NRXPD_CTRL.Reg, volatile.LoadUint32(&o.NRXPD_CTRL.Reg)&^(0x80)|value<<7)
}
func (o *NRX_Type) GetNRXPD_CTRL_CHAN_EST_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.NRXPD_CTRL.Reg) & 0x80) >> 7
}

// Pulse Count Controller
type PCNT_Type struct {
	U0_CONF0  volatile.Register32 // 0x0
	U0_CONF1  volatile.Register32 // 0x4
	U0_CONF2  volatile.Register32 // 0x8
	U1_CONF0  volatile.Register32 // 0xC
	U1_CONF1  volatile.Register32 // 0x10
	U1_CONF2  volatile.Register32 // 0x14
	U2_CONF0  volatile.Register32 // 0x18
	U2_CONF1  volatile.Register32 // 0x1C
	U2_CONF2  volatile.Register32 // 0x20
	U3_CONF0  volatile.Register32 // 0x24
	U3_CONF1  volatile.Register32 // 0x28
	U3_CONF2  volatile.Register32 // 0x2C
	U4_CONF0  volatile.Register32 // 0x30
	U4_CONF1  volatile.Register32 // 0x34
	U4_CONF2  volatile.Register32 // 0x38
	U5_CONF0  volatile.Register32 // 0x3C
	U5_CONF1  volatile.Register32 // 0x40
	U5_CONF2  volatile.Register32 // 0x44
	U6_CONF0  volatile.Register32 // 0x48
	U6_CONF1  volatile.Register32 // 0x4C
	U6_CONF2  volatile.Register32 // 0x50
	U7_CONF0  volatile.Register32 // 0x54
	U7_CONF1  volatile.Register32 // 0x58
	U7_CONF2  volatile.Register32 // 0x5C
	U0_CNT    volatile.Register32 // 0x60
	U1_CNT    volatile.Register32 // 0x64
	U2_CNT    volatile.Register32 // 0x68
	U3_CNT    volatile.Register32 // 0x6C
	U4_CNT    volatile.Register32 // 0x70
	U5_CNT    volatile.Register32 // 0x74
	U6_CNT    volatile.Register32 // 0x78
	U7_CNT    volatile.Register32 // 0x7C
	INT_RAW   volatile.Register32 // 0x80
	INT_ST    volatile.Register32 // 0x84
	INT_ENA   volatile.Register32 // 0x88
	INT_CLR   volatile.Register32 // 0x8C
	U0_STATUS volatile.Register32 // 0x90
	U1_STATUS volatile.Register32 // 0x94
	U2_STATUS volatile.Register32 // 0x98
	U3_STATUS volatile.Register32 // 0x9C
	U4_STATUS volatile.Register32 // 0xA0
	U5_STATUS volatile.Register32 // 0xA4
	U6_STATUS volatile.Register32 // 0xA8
	U7_STATUS volatile.Register32 // 0xAC
	CTRL      volatile.Register32 // 0xB0
	_         [72]byte
	DATE      volatile.Register32 // 0xFC
}

// PCNT.U0_CONF0
func (o *PCNT_Type) SetU0_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU0_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU0_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU0_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU0_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU0_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU0_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU0_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU0_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU0_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU0_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU0_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU0_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU0_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU0_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU0_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU0_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU0_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU0_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU0_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU0_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU0_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U0_CONF1
func (o *PCNT_Type) SetU0_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF1.Reg, volatile.LoadUint32(&o.U0_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU0_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U0_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU0_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U0_CONF1.Reg, volatile.LoadUint32(&o.U0_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU0_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U0_CONF2
func (o *PCNT_Type) SetU0_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U0_CONF2.Reg, volatile.LoadUint32(&o.U0_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU0_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U0_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU0_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U0_CONF2.Reg, volatile.LoadUint32(&o.U0_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU0_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U1_CONF0
func (o *PCNT_Type) SetU1_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU1_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU1_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU1_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU1_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU1_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU1_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU1_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU1_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU1_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU1_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU1_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU1_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU1_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU1_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU1_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU1_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU1_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU1_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU1_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU1_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU1_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U1_CONF1
func (o *PCNT_Type) SetU1_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U1_CONF1.Reg, volatile.LoadUint32(&o.U1_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU1_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U1_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU1_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF1.Reg, volatile.LoadUint32(&o.U1_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU1_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U1_CONF2
func (o *PCNT_Type) SetU1_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U1_CONF2.Reg, volatile.LoadUint32(&o.U1_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU1_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U1_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU1_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U1_CONF2.Reg, volatile.LoadUint32(&o.U1_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU1_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U2_CONF0
func (o *PCNT_Type) SetU2_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU2_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU2_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU2_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU2_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU2_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU2_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU2_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU2_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU2_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU2_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU2_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU2_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU2_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU2_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU2_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU2_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU2_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU2_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU2_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU2_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU2_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U2_CONF1
func (o *PCNT_Type) SetU2_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U2_CONF1.Reg, volatile.LoadUint32(&o.U2_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU2_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U2_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU2_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U2_CONF1.Reg, volatile.LoadUint32(&o.U2_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU2_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U2_CONF2
func (o *PCNT_Type) SetU2_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U2_CONF2.Reg, volatile.LoadUint32(&o.U2_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU2_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U2_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU2_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U2_CONF2.Reg, volatile.LoadUint32(&o.U2_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU2_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U3_CONF0
func (o *PCNT_Type) SetU3_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU3_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU3_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU3_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU3_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU3_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU3_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU3_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU3_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU3_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU3_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU3_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU3_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU3_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU3_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU3_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU3_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU3_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU3_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU3_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU3_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU3_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U3_CONF1
func (o *PCNT_Type) SetU3_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U3_CONF1.Reg, volatile.LoadUint32(&o.U3_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU3_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U3_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU3_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U3_CONF1.Reg, volatile.LoadUint32(&o.U3_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU3_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U3_CONF2
func (o *PCNT_Type) SetU3_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U3_CONF2.Reg, volatile.LoadUint32(&o.U3_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU3_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U3_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU3_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U3_CONF2.Reg, volatile.LoadUint32(&o.U3_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU3_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U4_CONF0
func (o *PCNT_Type) SetU4_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU4_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU4_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU4_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU4_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU4_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU4_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU4_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU4_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU4_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU4_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU4_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU4_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU4_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU4_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU4_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU4_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU4_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU4_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU4_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU4_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU4_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U4_CONF1
func (o *PCNT_Type) SetU4_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U4_CONF1.Reg, volatile.LoadUint32(&o.U4_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU4_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U4_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU4_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U4_CONF1.Reg, volatile.LoadUint32(&o.U4_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU4_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U4_CONF2
func (o *PCNT_Type) SetU4_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U4_CONF2.Reg, volatile.LoadUint32(&o.U4_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU4_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U4_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU4_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U4_CONF2.Reg, volatile.LoadUint32(&o.U4_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU4_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U5_CONF0
func (o *PCNT_Type) SetU5_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU5_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU5_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU5_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU5_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU5_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU5_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU5_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU5_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU5_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU5_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU5_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU5_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU5_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU5_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU5_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU5_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU5_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU5_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU5_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU5_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU5_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U5_CONF1
func (o *PCNT_Type) SetU5_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U5_CONF1.Reg, volatile.LoadUint32(&o.U5_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU5_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U5_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU5_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U5_CONF1.Reg, volatile.LoadUint32(&o.U5_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU5_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U5_CONF2
func (o *PCNT_Type) SetU5_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U5_CONF2.Reg, volatile.LoadUint32(&o.U5_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU5_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U5_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU5_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U5_CONF2.Reg, volatile.LoadUint32(&o.U5_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU5_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U6_CONF0
func (o *PCNT_Type) SetU6_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU6_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU6_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU6_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU6_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU6_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU6_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU6_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU6_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU6_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU6_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU6_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU6_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU6_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU6_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU6_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU6_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU6_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU6_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU6_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU6_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU6_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U6_CONF1
func (o *PCNT_Type) SetU6_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U6_CONF1.Reg, volatile.LoadUint32(&o.U6_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU6_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U6_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU6_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U6_CONF1.Reg, volatile.LoadUint32(&o.U6_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU6_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U6_CONF2
func (o *PCNT_Type) SetU6_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U6_CONF2.Reg, volatile.LoadUint32(&o.U6_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU6_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U6_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU6_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U6_CONF2.Reg, volatile.LoadUint32(&o.U6_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU6_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U7_CONF0
func (o *PCNT_Type) SetU7_CONF0_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU7_CONF0_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x3ff
}
func (o *PCNT_Type) SetU7_CONF0_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU7_CONF0_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU7_CONF0_THR_ZERO_EN(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU7_CONF0_THR_ZERO_EN() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU7_CONF0_THR_H_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU7_CONF0_THR_H_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU7_CONF0_THR_L_LIM_EN(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU7_CONF0_THR_L_LIM_EN() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU7_CONF0_THR_THRES0_EN(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU7_CONF0_THR_THRES0_EN() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU7_CONF0_THR_THRES1_EN(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU7_CONF0_THR_THRES1_EN() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU7_CONF0_CH0_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU7_CONF0_CH0_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU7_CONF0_CH0_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU7_CONF0_CH0_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU7_CONF0_CH1_NEG_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_NEG_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU7_CONF0_CH1_POS_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_POS_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU7_CONF0_CH1_HCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_HCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU7_CONF0_CH1_LCTRL_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_LCTRL_MODE() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc0000000) >> 30
}

// PCNT.U7_CONF1
func (o *PCNT_Type) SetU7_CONF1_CNT_THRES0(value uint32) {
	volatile.StoreUint32(&o.U7_CONF1.Reg, volatile.LoadUint32(&o.U7_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU7_CONF1_CNT_THRES0() uint32 {
	return volatile.LoadUint32(&o.U7_CONF1.Reg) & 0xffff
}
func (o *PCNT_Type) SetU7_CONF1_CNT_THRES1(value uint32) {
	volatile.StoreUint32(&o.U7_CONF1.Reg, volatile.LoadUint32(&o.U7_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU7_CONF1_CNT_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF1.Reg) & 0xffff0000) >> 16
}

// PCNT.U7_CONF2
func (o *PCNT_Type) SetU7_CONF2_CNT_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U7_CONF2.Reg, volatile.LoadUint32(&o.U7_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU7_CONF2_CNT_H_LIM() uint32 {
	return volatile.LoadUint32(&o.U7_CONF2.Reg) & 0xffff
}
func (o *PCNT_Type) SetU7_CONF2_CNT_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U7_CONF2.Reg, volatile.LoadUint32(&o.U7_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU7_CONF2_CNT_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF2.Reg) & 0xffff0000) >> 16
}

// PCNT.U0_CNT
func (o *PCNT_Type) SetU0_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U0_CNT.Reg, volatile.LoadUint32(&o.U0_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU0_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U0_CNT.Reg) & 0xffff
}

// PCNT.U1_CNT
func (o *PCNT_Type) SetU1_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U1_CNT.Reg, volatile.LoadUint32(&o.U1_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU1_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U1_CNT.Reg) & 0xffff
}

// PCNT.U2_CNT
func (o *PCNT_Type) SetU2_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U2_CNT.Reg, volatile.LoadUint32(&o.U2_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU2_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U2_CNT.Reg) & 0xffff
}

// PCNT.U3_CNT
func (o *PCNT_Type) SetU3_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U3_CNT.Reg, volatile.LoadUint32(&o.U3_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU3_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U3_CNT.Reg) & 0xffff
}

// PCNT.U4_CNT
func (o *PCNT_Type) SetU4_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U4_CNT.Reg, volatile.LoadUint32(&o.U4_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU4_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U4_CNT.Reg) & 0xffff
}

// PCNT.U5_CNT
func (o *PCNT_Type) SetU5_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U5_CNT.Reg, volatile.LoadUint32(&o.U5_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU5_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U5_CNT.Reg) & 0xffff
}

// PCNT.U6_CNT
func (o *PCNT_Type) SetU6_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U6_CNT.Reg, volatile.LoadUint32(&o.U6_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU6_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U6_CNT.Reg) & 0xffff
}

// PCNT.U7_CNT
func (o *PCNT_Type) SetU7_CNT_CNT(value uint32) {
	volatile.StoreUint32(&o.U7_CNT.Reg, volatile.LoadUint32(&o.U7_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU7_CNT_CNT() uint32 {
	return volatile.LoadUint32(&o.U7_CNT.Reg) & 0xffff
}

// PCNT.INT_RAW
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U0(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U0() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U1(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U1() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U2(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U2() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U3(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U3() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U4(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U4() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U5(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U5() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U6(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U6() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U7(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U7() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}

// PCNT.INT_ST
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U0(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U0() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U1(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U1() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U2(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U2() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U3(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U3() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U4(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U4() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U5(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U5() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U6(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U6() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U7(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U7() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}

// PCNT.INT_ENA
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U0(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U0() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U1(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U1() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U2(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U2() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U3(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U3() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U4(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U4() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U5(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U5() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U6(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U6() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U7(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U7() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}

// PCNT.INT_CLR
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U0(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U0() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U1(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U1() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U2(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U2() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U3(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U3() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U4(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U4() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U5(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U5() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U6(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U6() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U7(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U7() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}

// PCNT.U0_STATUS
func (o *PCNT_Type) SetU0_STATUS(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU0_STATUS() uint32 {
	return volatile.LoadUint32(&o.U0_STATUS.Reg)
}
func (o *PCNT_Type) SetU0_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, volatile.LoadUint32(&o.U0_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU0_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U0_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU0_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, volatile.LoadUint32(&o.U0_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU0_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U0_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU0_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, volatile.LoadUint32(&o.U0_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU0_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U0_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU0_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, volatile.LoadUint32(&o.U0_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU0_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U0_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU0_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, volatile.LoadUint32(&o.U0_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU0_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U0_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU0_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, volatile.LoadUint32(&o.U0_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU0_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U0_STATUS.Reg) & 0x40) >> 6
}

// PCNT.U1_STATUS
func (o *PCNT_Type) SetU1_STATUS(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU1_STATUS() uint32 {
	return volatile.LoadUint32(&o.U1_STATUS.Reg)
}
func (o *PCNT_Type) SetU1_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, volatile.LoadUint32(&o.U1_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU1_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U1_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU1_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, volatile.LoadUint32(&o.U1_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU1_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U1_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU1_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, volatile.LoadUint32(&o.U1_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU1_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U1_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU1_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, volatile.LoadUint32(&o.U1_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU1_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U1_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU1_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, volatile.LoadUint32(&o.U1_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU1_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U1_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU1_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, volatile.LoadUint32(&o.U1_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU1_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U1_STATUS.Reg) & 0x40) >> 6
}

// PCNT.U2_STATUS
func (o *PCNT_Type) SetU2_STATUS(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU2_STATUS() uint32 {
	return volatile.LoadUint32(&o.U2_STATUS.Reg)
}
func (o *PCNT_Type) SetU2_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, volatile.LoadUint32(&o.U2_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU2_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U2_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU2_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, volatile.LoadUint32(&o.U2_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU2_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U2_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU2_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, volatile.LoadUint32(&o.U2_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU2_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U2_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU2_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, volatile.LoadUint32(&o.U2_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU2_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U2_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU2_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, volatile.LoadUint32(&o.U2_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU2_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U2_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU2_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, volatile.LoadUint32(&o.U2_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU2_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U2_STATUS.Reg) & 0x40) >> 6
}

// PCNT.U3_STATUS
func (o *PCNT_Type) SetU3_STATUS(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU3_STATUS() uint32 {
	return volatile.LoadUint32(&o.U3_STATUS.Reg)
}
func (o *PCNT_Type) SetU3_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, volatile.LoadUint32(&o.U3_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU3_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U3_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU3_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, volatile.LoadUint32(&o.U3_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU3_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U3_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU3_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, volatile.LoadUint32(&o.U3_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU3_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U3_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU3_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, volatile.LoadUint32(&o.U3_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU3_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U3_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU3_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, volatile.LoadUint32(&o.U3_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU3_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U3_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU3_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, volatile.LoadUint32(&o.U3_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU3_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U3_STATUS.Reg) & 0x40) >> 6
}

// PCNT.U4_STATUS
func (o *PCNT_Type) SetU4_STATUS(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU4_STATUS() uint32 {
	return volatile.LoadUint32(&o.U4_STATUS.Reg)
}
func (o *PCNT_Type) SetU4_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, volatile.LoadUint32(&o.U4_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU4_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U4_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU4_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, volatile.LoadUint32(&o.U4_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU4_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U4_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU4_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, volatile.LoadUint32(&o.U4_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU4_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U4_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU4_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, volatile.LoadUint32(&o.U4_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU4_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U4_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU4_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, volatile.LoadUint32(&o.U4_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU4_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U4_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU4_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, volatile.LoadUint32(&o.U4_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU4_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U4_STATUS.Reg) & 0x40) >> 6
}

// PCNT.U5_STATUS
func (o *PCNT_Type) SetU5_STATUS(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU5_STATUS() uint32 {
	return volatile.LoadUint32(&o.U5_STATUS.Reg)
}
func (o *PCNT_Type) SetU5_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, volatile.LoadUint32(&o.U5_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU5_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U5_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU5_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, volatile.LoadUint32(&o.U5_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU5_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U5_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU5_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, volatile.LoadUint32(&o.U5_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU5_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U5_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU5_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, volatile.LoadUint32(&o.U5_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU5_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U5_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU5_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, volatile.LoadUint32(&o.U5_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU5_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U5_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU5_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, volatile.LoadUint32(&o.U5_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU5_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U5_STATUS.Reg) & 0x40) >> 6
}

// PCNT.U6_STATUS
func (o *PCNT_Type) SetU6_STATUS(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU6_STATUS() uint32 {
	return volatile.LoadUint32(&o.U6_STATUS.Reg)
}
func (o *PCNT_Type) SetU6_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, volatile.LoadUint32(&o.U6_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU6_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U6_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU6_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, volatile.LoadUint32(&o.U6_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU6_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U6_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU6_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, volatile.LoadUint32(&o.U6_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU6_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U6_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU6_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, volatile.LoadUint32(&o.U6_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU6_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U6_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU6_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, volatile.LoadUint32(&o.U6_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU6_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U6_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU6_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, volatile.LoadUint32(&o.U6_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU6_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U6_STATUS.Reg) & 0x40) >> 6
}

// PCNT.U7_STATUS
func (o *PCNT_Type) SetU7_STATUS(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU7_STATUS() uint32 {
	return volatile.LoadUint32(&o.U7_STATUS.Reg)
}
func (o *PCNT_Type) SetU7_STATUS_ZERO_MODE(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, volatile.LoadUint32(&o.U7_STATUS.Reg)&^(0x3)|value)
}
func (o *PCNT_Type) GetU7_STATUS_ZERO_MODE() uint32 {
	return volatile.LoadUint32(&o.U7_STATUS.Reg) & 0x3
}
func (o *PCNT_Type) SetU7_STATUS_THRES1(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, volatile.LoadUint32(&o.U7_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetU7_STATUS_THRES1() uint32 {
	return (volatile.LoadUint32(&o.U7_STATUS.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetU7_STATUS_THRES0(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, volatile.LoadUint32(&o.U7_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetU7_STATUS_THRES0() uint32 {
	return (volatile.LoadUint32(&o.U7_STATUS.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetU7_STATUS_L_LIM(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, volatile.LoadUint32(&o.U7_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetU7_STATUS_L_LIM() uint32 {
	return (volatile.LoadUint32(&o.U7_STATUS.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetU7_STATUS_H_LIM(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, volatile.LoadUint32(&o.U7_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetU7_STATUS_H_LIM() uint32 {
	return (volatile.LoadUint32(&o.U7_STATUS.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetU7_STATUS_ZERO(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, volatile.LoadUint32(&o.U7_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetU7_STATUS_ZERO() uint32 {
	return (volatile.LoadUint32(&o.U7_STATUS.Reg) & 0x40) >> 6
}

// PCNT.CTRL
func (o *PCNT_Type) SetCTRL_CNT_RST_U0(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U0() uint32 {
	return volatile.LoadUint32(&o.CTRL.Reg) & 0x1
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U0(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U0() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetCTRL_CNT_RST_U1(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U1() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U1(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U1() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetCTRL_CNT_RST_U2(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U2() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U2(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U2() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetCTRL_CNT_RST_U3(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U3() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U3(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U3() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x80) >> 7
}
func (o *PCNT_Type) SetCTRL_CNT_RST_U4(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x100)|value<<8)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U4() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x100) >> 8
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U4(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x200)|value<<9)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U4() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x200) >> 9
}
func (o *PCNT_Type) SetCTRL_CNT_RST_U5(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U5() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U5(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U5() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetCTRL_CNT_RST_U6(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U6() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U6(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U6() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetCTRL_CNT_RST_U7(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetCTRL_CNT_RST_U7() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U7(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U7() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetCTRL_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x10000)|value<<16)
}
func (o *PCNT_Type) GetCTRL_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x10000) >> 16
}

// PCNT.DATE
func (o *PCNT_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *PCNT_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// Remote Control
type RMT_Type struct {
	CH0DATA         volatile.Register32 // 0x0
	CH1DATA         volatile.Register32 // 0x4
	CH2DATA         volatile.Register32 // 0x8
	CH3DATA         volatile.Register32 // 0xC
	CH4DATA         volatile.Register32 // 0x10
	CH5DATA         volatile.Register32 // 0x14
	CH6DATA         volatile.Register32 // 0x18
	CH7DATA         volatile.Register32 // 0x1C
	CH0CONF0        volatile.Register32 // 0x20
	CH0CONF1        volatile.Register32 // 0x24
	CH1CONF0        volatile.Register32 // 0x28
	CH1CONF1        volatile.Register32 // 0x2C
	CH2CONF0        volatile.Register32 // 0x30
	CH2CONF1        volatile.Register32 // 0x34
	CH3CONF0        volatile.Register32 // 0x38
	CH3CONF1        volatile.Register32 // 0x3C
	CH4CONF0        volatile.Register32 // 0x40
	CH4CONF1        volatile.Register32 // 0x44
	CH5CONF0        volatile.Register32 // 0x48
	CH5CONF1        volatile.Register32 // 0x4C
	CH6CONF0        volatile.Register32 // 0x50
	CH6CONF1        volatile.Register32 // 0x54
	CH7CONF0        volatile.Register32 // 0x58
	CH7CONF1        volatile.Register32 // 0x5C
	CH0STATUS       volatile.Register32 // 0x60
	CH1STATUS       volatile.Register32 // 0x64
	CH2STATUS       volatile.Register32 // 0x68
	CH3STATUS       volatile.Register32 // 0x6C
	CH4STATUS       volatile.Register32 // 0x70
	CH5STATUS       volatile.Register32 // 0x74
	CH6STATUS       volatile.Register32 // 0x78
	CH7STATUS       volatile.Register32 // 0x7C
	CH0ADDR         volatile.Register32 // 0x80
	CH1ADDR         volatile.Register32 // 0x84
	CH2ADDR         volatile.Register32 // 0x88
	CH3ADDR         volatile.Register32 // 0x8C
	CH4ADDR         volatile.Register32 // 0x90
	CH5ADDR         volatile.Register32 // 0x94
	CH6ADDR         volatile.Register32 // 0x98
	CH7ADDR         volatile.Register32 // 0x9C
	INT_RAW         volatile.Register32 // 0xA0
	INT_ST          volatile.Register32 // 0xA4
	INT_ENA         volatile.Register32 // 0xA8
	INT_CLR         volatile.Register32 // 0xAC
	CH0CARRIER_DUTY volatile.Register32 // 0xB0
	CH1CARRIER_DUTY volatile.Register32 // 0xB4
	CH2CARRIER_DUTY volatile.Register32 // 0xB8
	CH3CARRIER_DUTY volatile.Register32 // 0xBC
	CH4CARRIER_DUTY volatile.Register32 // 0xC0
	CH5CARRIER_DUTY volatile.Register32 // 0xC4
	CH6CARRIER_DUTY volatile.Register32 // 0xC8
	CH7CARRIER_DUTY volatile.Register32 // 0xCC
	CH0_TX_LIM      volatile.Register32 // 0xD0
	CH1_TX_LIM      volatile.Register32 // 0xD4
	CH2_TX_LIM      volatile.Register32 // 0xD8
	CH3_TX_LIM      volatile.Register32 // 0xDC
	CH4_TX_LIM      volatile.Register32 // 0xE0
	CH5_TX_LIM      volatile.Register32 // 0xE4
	CH6_TX_LIM      volatile.Register32 // 0xE8
	CH7_TX_LIM      volatile.Register32 // 0xEC
	APB_CONF        volatile.Register32 // 0xF0
	_               [8]byte
	DATE            volatile.Register32 // 0xFC
}

// RMT.CH0CONF0
func (o *RMT_Type) SetCH0CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH0CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH0CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH0CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH0CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH0CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH0CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH0CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH0CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH0CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH0CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH0CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH0CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH0CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH0CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH0CONF1
func (o *RMT_Type) SetCH0CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH0CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH0CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH0CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH0CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH0CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH0CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH0CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH0CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH0CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH0CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH0CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH0CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH0CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH0CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH0CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH0CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH0CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH0CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH0CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH0CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH0CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH0CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH0CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH0CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH0CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH1CONF0
func (o *RMT_Type) SetCH1CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH1CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH1CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH1CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH1CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH1CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH1CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH1CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH1CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH1CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH1CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH1CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH1CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH1CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH1CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH1CONF1
func (o *RMT_Type) SetCH1CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH1CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH1CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH1CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH1CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH1CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH1CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH1CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH1CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH1CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH1CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH1CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH1CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH1CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH1CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH1CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH1CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH1CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH1CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH1CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH1CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH1CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH1CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH1CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH1CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH1CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH2CONF0
func (o *RMT_Type) SetCH2CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH2CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH2CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH2CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH2CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH2CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH2CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH2CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH2CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH2CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH2CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH2CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH2CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH2CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH2CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH2CONF1
func (o *RMT_Type) SetCH2CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH2CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH2CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH2CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH2CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH2CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH2CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH2CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH2CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH2CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH2CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH2CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH2CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH2CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH2CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH2CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH2CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH2CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH2CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH2CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH2CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH2CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH2CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH2CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH2CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH2CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH3CONF0
func (o *RMT_Type) SetCH3CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH3CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH3CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH3CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH3CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH3CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH3CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH3CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH3CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH3CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH3CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH3CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH3CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH3CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH3CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH3CONF1
func (o *RMT_Type) SetCH3CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH3CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH3CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH3CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH3CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH3CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH3CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH3CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH3CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH3CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH3CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH3CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH3CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH3CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH3CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH3CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH3CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH3CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH3CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH3CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH3CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH3CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH3CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH3CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH3CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH3CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH4CONF0
func (o *RMT_Type) SetCH4CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH4CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH4CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH4CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH4CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH4CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH4CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH4CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH4CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH4CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH4CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH4CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH4CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH4CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH4CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH4CONF1
func (o *RMT_Type) SetCH4CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH4CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH4CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH4CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH4CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH4CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH4CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH4CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH4CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH4CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH4CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH4CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH4CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH4CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH4CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH4CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH4CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH4CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH4CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH4CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH4CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH4CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH4CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH4CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH4CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH4CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH5CONF0
func (o *RMT_Type) SetCH5CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH5CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH5CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH5CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH5CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH5CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH5CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH5CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH5CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH5CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH5CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH5CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH5CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH5CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH5CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH5CONF1
func (o *RMT_Type) SetCH5CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH5CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH5CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH5CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH5CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH5CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH5CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH5CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH5CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH5CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH5CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH5CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH5CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH5CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH5CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH5CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH5CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH5CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH5CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH5CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH5CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH5CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH5CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH5CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH5CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH5CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH6CONF0
func (o *RMT_Type) SetCH6CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH6CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH6CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH6CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH6CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH6CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH6CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH6CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH6CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH6CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH6CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH6CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH6CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH6CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH6CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH6CONF1
func (o *RMT_Type) SetCH6CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH6CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH6CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH6CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH6CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH6CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH6CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH6CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH6CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH6CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH6CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH6CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH6CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH6CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH6CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH6CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH6CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH6CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH6CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH6CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH6CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH6CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH6CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH6CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH6CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH6CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH7CONF0
func (o *RMT_Type) SetCH7CONF0_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH7CONF0_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.CH7CONF0.Reg) & 0xff
}
func (o *RMT_Type) SetCH7CONF0_IDLE_THRES(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH7CONF0_IDLE_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH7CONF0_MEM_SIZE(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH7CONF0_MEM_SIZE() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH7CONF0_CARRIER_EN(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH7CONF0_CARRIER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH7CONF0_CARRIER_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH7CONF0_CARRIER_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH7CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH7CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH7CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH7CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0x80000000) >> 31
}

// RMT.CH7CONF1
func (o *RMT_Type) SetCH7CONF1_TX_START(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH7CONF1_TX_START() uint32 {
	return volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x1
}
func (o *RMT_Type) SetCH7CONF1_RX_EN(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH7CONF1_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH7CONF1_MEM_WR_RST(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH7CONF1_MEM_WR_RST() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH7CONF1_MEM_RD_RST(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH7CONF1_MEM_RD_RST() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH7CONF1_APB_MEM_RST(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH7CONF1_APB_MEM_RST() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH7CONF1_MEM_OWNER(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH7CONF1_MEM_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH7CONF1_TX_CONTI_MODE(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH7CONF1_TX_CONTI_MODE() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH7CONF1_RX_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH7CONF1_RX_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH7CONF1_RX_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH7CONF1_RX_FILTER_THRES() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH7CONF1_REF_CNT_RST(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH7CONF1_REF_CNT_RST() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH7CONF1_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH7CONF1_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH7CONF1_IDLE_OUT_LV(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH7CONF1_IDLE_OUT_LV() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH7CONF1_IDLE_OUT_EN(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH7CONF1_IDLE_OUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x80000) >> 19
}

// RMT.CH0STATUS
func (o *RMT_Type) SetCH0STATUS(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, value)
}
func (o *RMT_Type) GetCH0STATUS() uint32 {
	return volatile.LoadUint32(&o.CH0STATUS.Reg)
}
func (o *RMT_Type) SetCH0STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH0STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH0STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH0STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH0STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH0STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH0STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH0STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH0STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH0STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH0STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH0STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH0STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH0STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH0STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH0STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH1STATUS
func (o *RMT_Type) SetCH1STATUS(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, value)
}
func (o *RMT_Type) GetCH1STATUS() uint32 {
	return volatile.LoadUint32(&o.CH1STATUS.Reg)
}
func (o *RMT_Type) SetCH1STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH1STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH1STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH1STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH1STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH1STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH1STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH1STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH1STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH1STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH1STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH1STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH1STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH1STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH1STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH1STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH2STATUS
func (o *RMT_Type) SetCH2STATUS(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, value)
}
func (o *RMT_Type) GetCH2STATUS() uint32 {
	return volatile.LoadUint32(&o.CH2STATUS.Reg)
}
func (o *RMT_Type) SetCH2STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH2STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH2STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH2STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH2STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH2STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH2STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH2STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH2STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH2STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH2STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH2STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH2STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH2STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH2STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH2STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH3STATUS
func (o *RMT_Type) SetCH3STATUS(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, value)
}
func (o *RMT_Type) GetCH3STATUS() uint32 {
	return volatile.LoadUint32(&o.CH3STATUS.Reg)
}
func (o *RMT_Type) SetCH3STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH3STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH3STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH3STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH3STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH3STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH3STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH3STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH3STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH3STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH3STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH3STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH3STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH3STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH3STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH3STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH4STATUS
func (o *RMT_Type) SetCH4STATUS(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, value)
}
func (o *RMT_Type) GetCH4STATUS() uint32 {
	return volatile.LoadUint32(&o.CH4STATUS.Reg)
}
func (o *RMT_Type) SetCH4STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH4STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH4STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH4STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH4STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH4STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH4STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH4STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH4STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH4STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH4STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH4STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH4STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH4STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH4STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH4STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH5STATUS
func (o *RMT_Type) SetCH5STATUS(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, value)
}
func (o *RMT_Type) GetCH5STATUS() uint32 {
	return volatile.LoadUint32(&o.CH5STATUS.Reg)
}
func (o *RMT_Type) SetCH5STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH5STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH5STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH5STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH5STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH5STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH5STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH5STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH5STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH5STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH5STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH5STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH5STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH5STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH5STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH5STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH6STATUS
func (o *RMT_Type) SetCH6STATUS(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, value)
}
func (o *RMT_Type) GetCH6STATUS() uint32 {
	return volatile.LoadUint32(&o.CH6STATUS.Reg)
}
func (o *RMT_Type) SetCH6STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH6STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH6STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH6STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH6STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH6STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH6STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH6STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH6STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH6STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH6STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH6STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH6STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH6STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH6STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH6STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH7STATUS
func (o *RMT_Type) SetCH7STATUS(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, value)
}
func (o *RMT_Type) GetCH7STATUS() uint32 {
	return volatile.LoadUint32(&o.CH7STATUS.Reg)
}
func (o *RMT_Type) SetCH7STATUS_MEM_WADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH7STATUS_MEM_WADDR_EX() uint32 {
	return volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x3ff
}
func (o *RMT_Type) SetCH7STATUS_MEM_RADDR_EX(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH7STATUS_MEM_RADDR_EX() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH7STATUS_STATE(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH7STATUS_STATE() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH7STATUS_MEM_OWNER_ERR(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH7STATUS_MEM_OWNER_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH7STATUS_MEM_FULL(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH7STATUS_MEM_FULL() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH7STATUS_MEM_EMPTY(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH7STATUS_MEM_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH7STATUS_APB_MEM_WR_ERR(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH7STATUS_APB_MEM_WR_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH7STATUS_APB_MEM_RD_ERR(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH7STATUS_APB_MEM_RD_ERR() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x80000000) >> 31
}

// RMT.CH0ADDR
func (o *RMT_Type) SetCH0ADDR(value uint32) {
	volatile.StoreUint32(&o.CH0ADDR.Reg, value)
}
func (o *RMT_Type) GetCH0ADDR() uint32 {
	return volatile.LoadUint32(&o.CH0ADDR.Reg)
}

// RMT.CH1ADDR
func (o *RMT_Type) SetCH1ADDR(value uint32) {
	volatile.StoreUint32(&o.CH1ADDR.Reg, value)
}
func (o *RMT_Type) GetCH1ADDR() uint32 {
	return volatile.LoadUint32(&o.CH1ADDR.Reg)
}

// RMT.CH2ADDR
func (o *RMT_Type) SetCH2ADDR(value uint32) {
	volatile.StoreUint32(&o.CH2ADDR.Reg, value)
}
func (o *RMT_Type) GetCH2ADDR() uint32 {
	return volatile.LoadUint32(&o.CH2ADDR.Reg)
}

// RMT.CH3ADDR
func (o *RMT_Type) SetCH3ADDR(value uint32) {
	volatile.StoreUint32(&o.CH3ADDR.Reg, value)
}
func (o *RMT_Type) GetCH3ADDR() uint32 {
	return volatile.LoadUint32(&o.CH3ADDR.Reg)
}

// RMT.CH4ADDR
func (o *RMT_Type) SetCH4ADDR(value uint32) {
	volatile.StoreUint32(&o.CH4ADDR.Reg, value)
}
func (o *RMT_Type) GetCH4ADDR() uint32 {
	return volatile.LoadUint32(&o.CH4ADDR.Reg)
}

// RMT.CH5ADDR
func (o *RMT_Type) SetCH5ADDR(value uint32) {
	volatile.StoreUint32(&o.CH5ADDR.Reg, value)
}
func (o *RMT_Type) GetCH5ADDR() uint32 {
	return volatile.LoadUint32(&o.CH5ADDR.Reg)
}

// RMT.CH6ADDR
func (o *RMT_Type) SetCH6ADDR(value uint32) {
	volatile.StoreUint32(&o.CH6ADDR.Reg, value)
}
func (o *RMT_Type) GetCH6ADDR() uint32 {
	return volatile.LoadUint32(&o.CH6ADDR.Reg)
}

// RMT.CH7ADDR
func (o *RMT_Type) SetCH7ADDR(value uint32) {
	volatile.StoreUint32(&o.CH7ADDR.Reg, value)
}
func (o *RMT_Type) GetCH7ADDR() uint32 {
	return volatile.LoadUint32(&o.CH7ADDR.Reg)
}

// RMT.INT_RAW
func (o *RMT_Type) SetINT_RAW_CH_s_TX_END(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_RAW_CH_s_TX_END() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *RMT_Type) SetINT_RAW_CH_s_RX_END(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_RAW_CH_s_RX_END() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_RAW_CH_s_ERR(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_RAW_CH_s_ERR() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_RAW_CH_s_TX_THR_EVENT(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_RAW_CH_s_TX_THR_EVENT() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000000) >> 24
}

// RMT.INT_ST
func (o *RMT_Type) SetINT_ST_CH_s_TX_END(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_ST_CH_s_TX_END() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *RMT_Type) SetINT_ST_CH_s_RX_END(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_ST_CH_s_RX_END() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_ST_CH_s_ERR(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_ST_CH_s_ERR() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_ST_CH_s_TX_THR_EVENT(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_ST_CH_s_TX_THR_EVENT() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000000) >> 24
}

// RMT.INT_ENA
func (o *RMT_Type) SetINT_ENA_CH_s_TX_END(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_ENA_CH_s_TX_END() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *RMT_Type) SetINT_ENA_CH_s_RX_END(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_ENA_CH_s_RX_END() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_ENA_CH_s_ERR(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_ENA_CH_s_ERR() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_ENA_CH_s_TX_THR_EVENT(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_ENA_CH_s_TX_THR_EVENT() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000000) >> 24
}

// RMT.INT_CLR
func (o *RMT_Type) SetINT_CLR_CH_s_TX_END(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_CLR_CH_s_TX_END() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *RMT_Type) SetINT_CLR_CH_s_RX_END(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_CLR_CH_s_RX_END() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_CLR_CH_s_ERR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_CLR_CH_s_ERR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_CLR_CH_s_TX_THR_EVENT(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_CLR_CH_s_TX_THR_EVENT() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000000) >> 24
}

// RMT.CH0CARRIER_DUTY
func (o *RMT_Type) SetCH0CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH0CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH0CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH0CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH0CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH0CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH1CARRIER_DUTY
func (o *RMT_Type) SetCH1CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH1CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH1CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH1CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH1CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH1CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH2CARRIER_DUTY
func (o *RMT_Type) SetCH2CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH2CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH2CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH2CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH2CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH2CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH3CARRIER_DUTY
func (o *RMT_Type) SetCH3CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH3CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH3CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH3CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH3CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH3CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH4CARRIER_DUTY
func (o *RMT_Type) SetCH4CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH4CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH4CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH4CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH4CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH4CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH5CARRIER_DUTY
func (o *RMT_Type) SetCH5CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH5CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH5CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH5CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH5CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH5CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH6CARRIER_DUTY
func (o *RMT_Type) SetCH6CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH6CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH6CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH6CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH6CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH6CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH7CARRIER_DUTY
func (o *RMT_Type) SetCH7CARRIER_DUTY_CARRIER_LOW(value uint32) {
	volatile.StoreUint32(&o.CH7CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH7CARRIER_DUTY_CARRIER_LOW() uint32 {
	return volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg) & 0xffff
}
func (o *RMT_Type) SetCH7CARRIER_DUTY_CARRIER_HIGH(value uint32) {
	volatile.StoreUint32(&o.CH7CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH7CARRIER_DUTY_CARRIER_HIGH() uint32 {
	return (volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}

// RMT.CH0_TX_LIM
func (o *RMT_Type) SetCH0_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH0_TX_LIM.Reg, volatile.LoadUint32(&o.CH0_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH0_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH0_TX_LIM.Reg) & 0x1ff
}

// RMT.CH1_TX_LIM
func (o *RMT_Type) SetCH1_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH1_TX_LIM.Reg, volatile.LoadUint32(&o.CH1_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH1_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH1_TX_LIM.Reg) & 0x1ff
}

// RMT.CH2_TX_LIM
func (o *RMT_Type) SetCH2_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH2_TX_LIM.Reg, volatile.LoadUint32(&o.CH2_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH2_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH2_TX_LIM.Reg) & 0x1ff
}

// RMT.CH3_TX_LIM
func (o *RMT_Type) SetCH3_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH3_TX_LIM.Reg, volatile.LoadUint32(&o.CH3_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH3_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH3_TX_LIM.Reg) & 0x1ff
}

// RMT.CH4_TX_LIM
func (o *RMT_Type) SetCH4_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH4_TX_LIM.Reg, volatile.LoadUint32(&o.CH4_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH4_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH4_TX_LIM.Reg) & 0x1ff
}

// RMT.CH5_TX_LIM
func (o *RMT_Type) SetCH5_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH5_TX_LIM.Reg, volatile.LoadUint32(&o.CH5_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH5_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH5_TX_LIM.Reg) & 0x1ff
}

// RMT.CH6_TX_LIM
func (o *RMT_Type) SetCH6_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH6_TX_LIM.Reg, volatile.LoadUint32(&o.CH6_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH6_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH6_TX_LIM.Reg) & 0x1ff
}

// RMT.CH7_TX_LIM
func (o *RMT_Type) SetCH7_TX_LIM_TX_LIM(value uint32) {
	volatile.StoreUint32(&o.CH7_TX_LIM.Reg, volatile.LoadUint32(&o.CH7_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH7_TX_LIM_TX_LIM() uint32 {
	return volatile.LoadUint32(&o.CH7_TX_LIM.Reg) & 0x1ff
}

// RMT.APB_CONF
func (o *RMT_Type) SetAPB_CONF_APB_FIFO_MASK(value uint32) {
	volatile.StoreUint32(&o.APB_CONF.Reg, volatile.LoadUint32(&o.APB_CONF.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetAPB_CONF_APB_FIFO_MASK() uint32 {
	return volatile.LoadUint32(&o.APB_CONF.Reg) & 0x1
}
func (o *RMT_Type) SetAPB_CONF_MEM_TX_WRAP_EN(value uint32) {
	volatile.StoreUint32(&o.APB_CONF.Reg, volatile.LoadUint32(&o.APB_CONF.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetAPB_CONF_MEM_TX_WRAP_EN() uint32 {
	return (volatile.LoadUint32(&o.APB_CONF.Reg) & 0x2) >> 1
}

// RMT.DATE
func (o *RMT_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *RMT_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// Hardware Random Number Generator
type RNG_Type struct {
	_    [324]byte
	DATA volatile.Register32 // 0x144
}

// RSA (Rivest Shamir Adleman) Accelerator
type RSA_Type struct {
	M_MEM        [128]volatile.Register8 // 0x0
	_            [384]byte
	Z_MEM        [128]volatile.Register8 // 0x200
	_            [384]byte
	Y_MEM        [128]volatile.Register8 // 0x400
	_            [384]byte
	X_MEM        [128]volatile.Register8 // 0x600
	_            [384]byte
	M_PRIME      volatile.Register32 // 0x800
	MODEXP_MODE  volatile.Register32 // 0x804
	MODEXP_START volatile.Register32 // 0x808
	MULT_MODE    volatile.Register32 // 0x80C
	MULT_START   volatile.Register32 // 0x810
	INTERRUPT    volatile.Register32 // 0x814
	CLEAN        volatile.Register32 // 0x818
}

// RSA.M_PRIME
func (o *RSA_Type) SetM_PRIME(value uint32) {
	volatile.StoreUint32(&o.M_PRIME.Reg, volatile.LoadUint32(&o.M_PRIME.Reg)&^(0xff)|value)
}
func (o *RSA_Type) GetM_PRIME() uint32 {
	return volatile.LoadUint32(&o.M_PRIME.Reg) & 0xff
}

// RSA.MODEXP_MODE
func (o *RSA_Type) SetMODEXP_MODE(value uint32) {
	volatile.StoreUint32(&o.MODEXP_MODE.Reg, volatile.LoadUint32(&o.MODEXP_MODE.Reg)&^(0x7)|value)
}
func (o *RSA_Type) GetMODEXP_MODE() uint32 {
	return volatile.LoadUint32(&o.MODEXP_MODE.Reg) & 0x7
}

// RSA.MODEXP_START
func (o *RSA_Type) SetMODEXP_START(value uint32) {
	volatile.StoreUint32(&o.MODEXP_START.Reg, volatile.LoadUint32(&o.MODEXP_START.Reg)&^(0x1)|value)
}
func (o *RSA_Type) GetMODEXP_START() uint32 {
	return volatile.LoadUint32(&o.MODEXP_START.Reg) & 0x1
}

// RSA.MULT_MODE
func (o *RSA_Type) SetMULT_MODE(value uint32) {
	volatile.StoreUint32(&o.MULT_MODE.Reg, volatile.LoadUint32(&o.MULT_MODE.Reg)&^(0xf)|value)
}
func (o *RSA_Type) GetMULT_MODE() uint32 {
	return volatile.LoadUint32(&o.MULT_MODE.Reg) & 0xf
}

// RSA.MULT_START
func (o *RSA_Type) SetMULT_START(value uint32) {
	volatile.StoreUint32(&o.MULT_START.Reg, volatile.LoadUint32(&o.MULT_START.Reg)&^(0x1)|value)
}
func (o *RSA_Type) GetMULT_START() uint32 {
	return volatile.LoadUint32(&o.MULT_START.Reg) & 0x1
}

// RSA.INTERRUPT
func (o *RSA_Type) SetINTERRUPT(value uint32) {
	volatile.StoreUint32(&o.INTERRUPT.Reg, volatile.LoadUint32(&o.INTERRUPT.Reg)&^(0x1)|value)
}
func (o *RSA_Type) GetINTERRUPT() uint32 {
	return volatile.LoadUint32(&o.INTERRUPT.Reg) & 0x1
}

// RSA.CLEAN
func (o *RSA_Type) SetCLEAN(value uint32) {
	volatile.StoreUint32(&o.CLEAN.Reg, volatile.LoadUint32(&o.CLEAN.Reg)&^(0x1)|value)
}
func (o *RSA_Type) GetCLEAN() uint32 {
	return volatile.LoadUint32(&o.CLEAN.Reg) & 0x1
}

// Real-Time Clock Control
type RTC_CNTL_Type struct {
	OPTIONS0           volatile.Register32 // 0x0
	SLP_TIMER0         volatile.Register32 // 0x4
	SLP_TIMER1         volatile.Register32 // 0x8
	TIME_UPDATE        volatile.Register32 // 0xC
	TIME0              volatile.Register32 // 0x10
	TIME1              volatile.Register32 // 0x14
	STATE0             volatile.Register32 // 0x18
	TIMER1             volatile.Register32 // 0x1C
	TIMER2             volatile.Register32 // 0x20
	TIMER3             volatile.Register32 // 0x24
	TIMER4             volatile.Register32 // 0x28
	TIMER5             volatile.Register32 // 0x2C
	ANA_CONF           volatile.Register32 // 0x30
	RESET_STATE        volatile.Register32 // 0x34
	WAKEUP_STATE       volatile.Register32 // 0x38
	INT_ENA            volatile.Register32 // 0x3C
	INT_RAW            volatile.Register32 // 0x40
	INT_ST             volatile.Register32 // 0x44
	INT_CLR            volatile.Register32 // 0x48
	STORE0             volatile.Register32 // 0x4C
	STORE1             volatile.Register32 // 0x50
	STORE2             volatile.Register32 // 0x54
	STORE3             volatile.Register32 // 0x58
	EXT_XTL_CONF       volatile.Register32 // 0x5C
	EXT_WAKEUP_CONF    volatile.Register32 // 0x60
	SLP_REJECT_CONF    volatile.Register32 // 0x64
	CPU_PERIOD_CONF    volatile.Register32 // 0x68
	SDIO_ACT_CONF      volatile.Register32 // 0x6C
	CLK_CONF           volatile.Register32 // 0x70
	SDIO_CONF          volatile.Register32 // 0x74
	BIAS_CONF          volatile.Register32 // 0x78
	REG                volatile.Register32 // 0x7C
	PWC                volatile.Register32 // 0x80
	DIG_PWC            volatile.Register32 // 0x84
	DIG_ISO            volatile.Register32 // 0x88
	WDTCONFIG0         volatile.Register32 // 0x8C
	WDTCONFIG1         volatile.Register32 // 0x90
	WDTCONFIG2         volatile.Register32 // 0x94
	WDTCONFIG3         volatile.Register32 // 0x98
	WDTCONFIG4         volatile.Register32 // 0x9C
	WDTFEED            volatile.Register32 // 0xA0
	WDTWPROTECT        volatile.Register32 // 0xA4
	TEST_MUX           volatile.Register32 // 0xA8
	SW_CPU_STALL       volatile.Register32 // 0xAC
	STORE4             volatile.Register32 // 0xB0
	STORE5             volatile.Register32 // 0xB4
	STORE6             volatile.Register32 // 0xB8
	STORE7             volatile.Register32 // 0xBC
	LOW_POWER_ST       volatile.Register32 // 0xC0
	DIAG1              volatile.Register32 // 0xC4
	HOLD_FORCE         volatile.Register32 // 0xC8
	EXT_WAKEUP1        volatile.Register32 // 0xCC
	EXT_WAKEUP1_STATUS volatile.Register32 // 0xD0
	BROWN_OUT          volatile.Register32 // 0xD4
	_                  [100]byte
	DATE               volatile.Register32 // 0x13C
}

// RTC_CNTL.OPTIONS0
func (o *RTC_CNTL_Type) SetOPTIONS0_SW_STALL_APPCPU_C0(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x3)|value)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_SW_STALL_APPCPU_C0() uint32 {
	return volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x3
}
func (o *RTC_CNTL_Type) SetOPTIONS0_SW_STALL_PROCPU_C0(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0xc)|value<<2)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_SW_STALL_PROCPU_C0() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0xc) >> 2
}
func (o *RTC_CNTL_Type) SetOPTIONS0_SW_APPCPU_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_SW_APPCPU_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetOPTIONS0_SW_PROCPU_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_SW_PROCPU_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BB_I2C_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BB_I2C_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BB_I2C_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BB_I2C_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BBPLL_I2C_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BBPLL_I2C_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BBPLL_I2C_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x200)|value<<9)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BBPLL_I2C_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x200) >> 9
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BBPLL_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x400)|value<<10)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BBPLL_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x400) >> 10
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BBPLL_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x800)|value<<11)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BBPLL_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x800) >> 11
}
func (o *RTC_CNTL_Type) SetOPTIONS0_XTL_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_XTL_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x1000) >> 12
}
func (o *RTC_CNTL_Type) SetOPTIONS0_XTL_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_XTL_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x2000) >> 13
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_SLEEP_FOLW_8M(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_SLEEP_FOLW_8M() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x4000) >> 14
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_FORCE_SLEEP(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_FORCE_SLEEP() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x8000) >> 15
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_FORCE_NOSLEEP(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_FORCE_NOSLEEP() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x10000) >> 16
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_I2C_FOLW_8M(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_I2C_FOLW_8M() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x20000) >> 17
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_I2C_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_I2C_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x40000) >> 18
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_I2C_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_I2C_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x80000) >> 19
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_CORE_FOLW_8M(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_CORE_FOLW_8M() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x100000) >> 20
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_CORE_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_CORE_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x200000) >> 21
}
func (o *RTC_CNTL_Type) SetOPTIONS0_BIAS_CORE_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_BIAS_CORE_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x400000) >> 22
}
func (o *RTC_CNTL_Type) SetOPTIONS0_XTL_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x800000)|value<<23)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_XTL_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x800000) >> 23
}
func (o *RTC_CNTL_Type) SetOPTIONS0_PLL_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_PLL_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x1000000) >> 24
}
func (o *RTC_CNTL_Type) SetOPTIONS0_ANALOG_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_ANALOG_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x2000000) >> 25
}
func (o *RTC_CNTL_Type) SetOPTIONS0_XTL_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_XTL_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetOPTIONS0_PLL_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_PLL_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x8000000) >> 27
}
func (o *RTC_CNTL_Type) SetOPTIONS0_ANALOG_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_ANALOG_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x10000000) >> 28
}
func (o *RTC_CNTL_Type) SetOPTIONS0_DG_WRAP_FORCE_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_DG_WRAP_FORCE_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetOPTIONS0_DG_WRAP_FORCE_NORST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_DG_WRAP_FORCE_NORST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetOPTIONS0_SW_SYS_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetOPTIONS0_SW_SYS_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.SLP_TIMER0
func (o *RTC_CNTL_Type) SetSLP_TIMER0(value uint32) {
	volatile.StoreUint32(&o.SLP_TIMER0.Reg, value)
}
func (o *RTC_CNTL_Type) GetSLP_TIMER0() uint32 {
	return volatile.LoadUint32(&o.SLP_TIMER0.Reg)
}

// RTC_CNTL.SLP_TIMER1
func (o *RTC_CNTL_Type) SetSLP_TIMER1_SLP_VAL_HI(value uint32) {
	volatile.StoreUint32(&o.SLP_TIMER1.Reg, volatile.LoadUint32(&o.SLP_TIMER1.Reg)&^(0xffff)|value)
}
func (o *RTC_CNTL_Type) GetSLP_TIMER1_SLP_VAL_HI() uint32 {
	return volatile.LoadUint32(&o.SLP_TIMER1.Reg) & 0xffff
}
func (o *RTC_CNTL_Type) SetSLP_TIMER1_MAIN_TIMER_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_TIMER1.Reg, volatile.LoadUint32(&o.SLP_TIMER1.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_CNTL_Type) GetSLP_TIMER1_MAIN_TIMER_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_TIMER1.Reg) & 0x10000) >> 16
}

// RTC_CNTL.TIME_UPDATE
func (o *RTC_CNTL_Type) SetTIME_UPDATE_TIME_VALID(value uint32) {
	volatile.StoreUint32(&o.TIME_UPDATE.Reg, volatile.LoadUint32(&o.TIME_UPDATE.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetTIME_UPDATE_TIME_VALID() uint32 {
	return (volatile.LoadUint32(&o.TIME_UPDATE.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetTIME_UPDATE(value uint32) {
	volatile.StoreUint32(&o.TIME_UPDATE.Reg, volatile.LoadUint32(&o.TIME_UPDATE.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetTIME_UPDATE() uint32 {
	return (volatile.LoadUint32(&o.TIME_UPDATE.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.TIME0
func (o *RTC_CNTL_Type) SetTIME0(value uint32) {
	volatile.StoreUint32(&o.TIME0.Reg, value)
}
func (o *RTC_CNTL_Type) GetTIME0() uint32 {
	return volatile.LoadUint32(&o.TIME0.Reg)
}

// RTC_CNTL.TIME1
func (o *RTC_CNTL_Type) SetTIME1_TIME_HI(value uint32) {
	volatile.StoreUint32(&o.TIME1.Reg, volatile.LoadUint32(&o.TIME1.Reg)&^(0xffff)|value)
}
func (o *RTC_CNTL_Type) GetTIME1_TIME_HI() uint32 {
	return volatile.LoadUint32(&o.TIME1.Reg) & 0xffff
}

// RTC_CNTL.STATE0
func (o *RTC_CNTL_Type) SetSTATE0_TOUCH_WAKEUP_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_CNTL_Type) GetSTATE0_TOUCH_WAKEUP_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x100000) >> 20
}
func (o *RTC_CNTL_Type) SetSTATE0_ULP_CP_WAKEUP_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_CNTL_Type) GetSTATE0_ULP_CP_WAKEUP_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x200000) >> 21
}
func (o *RTC_CNTL_Type) SetSTATE0_APB2RTC_BRIDGE_SEL(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_CNTL_Type) GetSTATE0_APB2RTC_BRIDGE_SEL() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x400000) >> 22
}
func (o *RTC_CNTL_Type) SetSTATE0_TOUCH_SLP_TIMER_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x800000)|value<<23)
}
func (o *RTC_CNTL_Type) GetSTATE0_TOUCH_SLP_TIMER_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x800000) >> 23
}
func (o *RTC_CNTL_Type) SetSTATE0_ULP_CP_SLP_TIMER_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetSTATE0_ULP_CP_SLP_TIMER_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x1000000) >> 24
}
func (o *RTC_CNTL_Type) SetSTATE0_SDIO_ACTIVE_IND(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetSTATE0_SDIO_ACTIVE_IND() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x10000000) >> 28
}
func (o *RTC_CNTL_Type) SetSTATE0_SLP_WAKEUP(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetSTATE0_SLP_WAKEUP() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetSTATE0_SLP_REJECT(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetSTATE0_SLP_REJECT() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetSTATE0_SLEEP_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetSTATE0_SLEEP_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.TIMER1
func (o *RTC_CNTL_Type) SetTIMER1_CPU_STALL_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0x1)|value)
}
func (o *RTC_CNTL_Type) GetTIMER1_CPU_STALL_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER1.Reg) & 0x1
}
func (o *RTC_CNTL_Type) SetTIMER1_CPU_STALL_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0x3e)|value<<1)
}
func (o *RTC_CNTL_Type) GetTIMER1_CPU_STALL_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0x3e) >> 1
}
func (o *RTC_CNTL_Type) SetTIMER1_CK8M_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0x3fc0)|value<<6)
}
func (o *RTC_CNTL_Type) GetTIMER1_CK8M_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0x3fc0) >> 6
}
func (o *RTC_CNTL_Type) SetTIMER1_XTL_BUF_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0xffc000)|value<<14)
}
func (o *RTC_CNTL_Type) GetTIMER1_XTL_BUF_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0xffc000) >> 14
}
func (o *RTC_CNTL_Type) SetTIMER1_PLL_BUF_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0xff000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetTIMER1_PLL_BUF_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0xff000000) >> 24
}

// RTC_CNTL.TIMER2
func (o *RTC_CNTL_Type) SetTIMER2_ULPCP_TOUCH_START_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER2.Reg, volatile.LoadUint32(&o.TIMER2.Reg)&^(0xff8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetTIMER2_ULPCP_TOUCH_START_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER2.Reg) & 0xff8000) >> 15
}
func (o *RTC_CNTL_Type) SetTIMER2_MIN_TIME_CK8M_OFF(value uint32) {
	volatile.StoreUint32(&o.TIMER2.Reg, volatile.LoadUint32(&o.TIMER2.Reg)&^(0xff000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetTIMER2_MIN_TIME_CK8M_OFF() uint32 {
	return (volatile.LoadUint32(&o.TIMER2.Reg) & 0xff000000) >> 24
}

// RTC_CNTL.TIMER3
func (o *RTC_CNTL_Type) SetTIMER3_WIFI_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0x1ff)|value)
}
func (o *RTC_CNTL_Type) GetTIMER3_WIFI_WAIT_TIMER() uint32 {
	return volatile.LoadUint32(&o.TIMER3.Reg) & 0x1ff
}
func (o *RTC_CNTL_Type) SetTIMER3_WIFI_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0xfe00)|value<<9)
}
func (o *RTC_CNTL_Type) GetTIMER3_WIFI_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER3.Reg) & 0xfe00) >> 9
}
func (o *RTC_CNTL_Type) SetTIMER3_ROM_RAM_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0x1ff0000)|value<<16)
}
func (o *RTC_CNTL_Type) GetTIMER3_ROM_RAM_WAIT_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER3.Reg) & 0x1ff0000) >> 16
}
func (o *RTC_CNTL_Type) SetTIMER3_ROM_RAM_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0xfe000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetTIMER3_ROM_RAM_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER3.Reg) & 0xfe000000) >> 25
}

// RTC_CNTL.TIMER4
func (o *RTC_CNTL_Type) SetTIMER4_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0x1ff)|value)
}
func (o *RTC_CNTL_Type) GetTIMER4_WAIT_TIMER() uint32 {
	return volatile.LoadUint32(&o.TIMER4.Reg) & 0x1ff
}
func (o *RTC_CNTL_Type) SetTIMER4_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0xfe00)|value<<9)
}
func (o *RTC_CNTL_Type) GetTIMER4_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER4.Reg) & 0xfe00) >> 9
}
func (o *RTC_CNTL_Type) SetTIMER4_DG_WRAP_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0x1ff0000)|value<<16)
}
func (o *RTC_CNTL_Type) GetTIMER4_DG_WRAP_WAIT_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER4.Reg) & 0x1ff0000) >> 16
}
func (o *RTC_CNTL_Type) SetTIMER4_DG_WRAP_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0xfe000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetTIMER4_DG_WRAP_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER4.Reg) & 0xfe000000) >> 25
}

// RTC_CNTL.TIMER5
func (o *RTC_CNTL_Type) SetTIMER5_ULP_CP_SUBTIMER_PREDIV(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0xff)|value)
}
func (o *RTC_CNTL_Type) GetTIMER5_ULP_CP_SUBTIMER_PREDIV() uint32 {
	return volatile.LoadUint32(&o.TIMER5.Reg) & 0xff
}
func (o *RTC_CNTL_Type) SetTIMER5_MIN_SLP_VAL(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0xff00)|value<<8)
}
func (o *RTC_CNTL_Type) GetTIMER5_MIN_SLP_VAL() uint32 {
	return (volatile.LoadUint32(&o.TIMER5.Reg) & 0xff00) >> 8
}
func (o *RTC_CNTL_Type) SetTIMER5_RTCMEM_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0x1ff0000)|value<<16)
}
func (o *RTC_CNTL_Type) GetTIMER5_RTCMEM_WAIT_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER5.Reg) & 0x1ff0000) >> 16
}
func (o *RTC_CNTL_Type) SetTIMER5_RTCMEM_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0xfe000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetTIMER5_RTCMEM_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER5.Reg) & 0xfe000000) >> 25
}

// RTC_CNTL.ANA_CONF
func (o *RTC_CNTL_Type) SetANA_CONF_PLLA_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *RTC_CNTL_Type) GetANA_CONF_PLLA_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x800000) >> 23
}
func (o *RTC_CNTL_Type) SetANA_CONF_PLLA_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetANA_CONF_PLLA_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x1000000) >> 24
}
func (o *RTC_CNTL_Type) SetANA_CONF_BBPLL_CAL_SLP_START(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetANA_CONF_BBPLL_CAL_SLP_START() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x2000000) >> 25
}
func (o *RTC_CNTL_Type) SetANA_CONF_PVTMON_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetANA_CONF_PVTMON_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetANA_CONF_TXRF_I2C_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetANA_CONF_TXRF_I2C_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x8000000) >> 27
}
func (o *RTC_CNTL_Type) SetANA_CONF_RFRX_PBUS_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetANA_CONF_RFRX_PBUS_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x10000000) >> 28
}
func (o *RTC_CNTL_Type) SetANA_CONF_CKGEN_I2C_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetANA_CONF_CKGEN_I2C_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetANA_CONF_PLL_I2C_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetANA_CONF_PLL_I2C_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.RESET_STATE
func (o *RTC_CNTL_Type) SetRESET_STATE_RESET_CAUSE_PROCPU(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0x3f)|value)
}
func (o *RTC_CNTL_Type) GetRESET_STATE_RESET_CAUSE_PROCPU() uint32 {
	return volatile.LoadUint32(&o.RESET_STATE.Reg) & 0x3f
}
func (o *RTC_CNTL_Type) SetRESET_STATE_RESET_CAUSE_APPCPU(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0xfc0)|value<<6)
}
func (o *RTC_CNTL_Type) GetRESET_STATE_RESET_CAUSE_APPCPU() uint32 {
	return (volatile.LoadUint32(&o.RESET_STATE.Reg) & 0xfc0) >> 6
}
func (o *RTC_CNTL_Type) SetRESET_STATE_APPCPU_STAT_VECTOR_SEL(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_CNTL_Type) GetRESET_STATE_APPCPU_STAT_VECTOR_SEL() uint32 {
	return (volatile.LoadUint32(&o.RESET_STATE.Reg) & 0x1000) >> 12
}
func (o *RTC_CNTL_Type) SetRESET_STATE_PROCPU_STAT_VECTOR_SEL(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_CNTL_Type) GetRESET_STATE_PROCPU_STAT_VECTOR_SEL() uint32 {
	return (volatile.LoadUint32(&o.RESET_STATE.Reg) & 0x2000) >> 13
}

// RTC_CNTL.WAKEUP_STATE
func (o *RTC_CNTL_Type) SetWAKEUP_STATE_WAKEUP_CAUSE(value uint32) {
	volatile.StoreUint32(&o.WAKEUP_STATE.Reg, volatile.LoadUint32(&o.WAKEUP_STATE.Reg)&^(0x7ff)|value)
}
func (o *RTC_CNTL_Type) GetWAKEUP_STATE_WAKEUP_CAUSE() uint32 {
	return volatile.LoadUint32(&o.WAKEUP_STATE.Reg) & 0x7ff
}
func (o *RTC_CNTL_Type) SetWAKEUP_STATE_WAKEUP_ENA(value uint32) {
	volatile.StoreUint32(&o.WAKEUP_STATE.Reg, volatile.LoadUint32(&o.WAKEUP_STATE.Reg)&^(0x3ff800)|value<<11)
}
func (o *RTC_CNTL_Type) GetWAKEUP_STATE_WAKEUP_ENA() uint32 {
	return (volatile.LoadUint32(&o.WAKEUP_STATE.Reg) & 0x3ff800) >> 11
}
func (o *RTC_CNTL_Type) SetWAKEUP_STATE_GPIO_WAKEUP_FILTER(value uint32) {
	volatile.StoreUint32(&o.WAKEUP_STATE.Reg, volatile.LoadUint32(&o.WAKEUP_STATE.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_CNTL_Type) GetWAKEUP_STATE_GPIO_WAKEUP_FILTER() uint32 {
	return (volatile.LoadUint32(&o.WAKEUP_STATE.Reg) & 0x400000) >> 22
}

// RTC_CNTL.INT_ENA
func (o *RTC_CNTL_Type) SetINT_ENA_SLP_WAKEUP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *RTC_CNTL_Type) GetINT_ENA_SLP_WAKEUP_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *RTC_CNTL_Type) SetINT_ENA_SLP_REJECT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *RTC_CNTL_Type) GetINT_ENA_SLP_REJECT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *RTC_CNTL_Type) SetINT_ENA_SDIO_IDLE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *RTC_CNTL_Type) GetINT_ENA_SDIO_IDLE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *RTC_CNTL_Type) SetINT_ENA_WDT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *RTC_CNTL_Type) GetINT_ENA_WDT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *RTC_CNTL_Type) SetINT_ENA_TIME_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetINT_ENA_TIME_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetINT_ENA_ULP_CP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetINT_ENA_ULP_CP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetINT_ENA_TOUCH_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetINT_ENA_TOUCH_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetINT_ENA_BROWN_OUT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetINT_ENA_BROWN_OUT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetINT_ENA_MAIN_TIMER_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetINT_ENA_MAIN_TIMER_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}

// RTC_CNTL.INT_RAW
func (o *RTC_CNTL_Type) SetINT_RAW_SLP_WAKEUP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *RTC_CNTL_Type) GetINT_RAW_SLP_WAKEUP_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *RTC_CNTL_Type) SetINT_RAW_SLP_REJECT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *RTC_CNTL_Type) GetINT_RAW_SLP_REJECT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *RTC_CNTL_Type) SetINT_RAW_SDIO_IDLE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *RTC_CNTL_Type) GetINT_RAW_SDIO_IDLE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *RTC_CNTL_Type) SetINT_RAW_WDT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *RTC_CNTL_Type) GetINT_RAW_WDT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *RTC_CNTL_Type) SetINT_RAW_TIME_VALID_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetINT_RAW_TIME_VALID_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetINT_RAW_ULP_CP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetINT_RAW_ULP_CP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetINT_RAW_TOUCH_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetINT_RAW_TOUCH_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetINT_RAW_BROWN_OUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetINT_RAW_BROWN_OUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetINT_RAW_MAIN_TIMER_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetINT_RAW_MAIN_TIMER_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}

// RTC_CNTL.INT_ST
func (o *RTC_CNTL_Type) SetINT_ST_SLP_WAKEUP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *RTC_CNTL_Type) GetINT_ST_SLP_WAKEUP_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *RTC_CNTL_Type) SetINT_ST_SLP_REJECT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *RTC_CNTL_Type) GetINT_ST_SLP_REJECT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *RTC_CNTL_Type) SetINT_ST_SDIO_IDLE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *RTC_CNTL_Type) GetINT_ST_SDIO_IDLE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *RTC_CNTL_Type) SetINT_ST_WDT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *RTC_CNTL_Type) GetINT_ST_WDT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *RTC_CNTL_Type) SetINT_ST_TIME_VALID_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetINT_ST_TIME_VALID_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetINT_ST_SAR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetINT_ST_SAR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetINT_ST_TOUCH_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetINT_ST_TOUCH_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetINT_ST_BROWN_OUT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetINT_ST_BROWN_OUT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetINT_ST_MAIN_TIMER_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetINT_ST_MAIN_TIMER_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}

// RTC_CNTL.INT_CLR
func (o *RTC_CNTL_Type) SetINT_CLR_SLP_WAKEUP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *RTC_CNTL_Type) GetINT_CLR_SLP_WAKEUP_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *RTC_CNTL_Type) SetINT_CLR_SLP_REJECT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *RTC_CNTL_Type) GetINT_CLR_SLP_REJECT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *RTC_CNTL_Type) SetINT_CLR_SDIO_IDLE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *RTC_CNTL_Type) GetINT_CLR_SDIO_IDLE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *RTC_CNTL_Type) SetINT_CLR_WDT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *RTC_CNTL_Type) GetINT_CLR_WDT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *RTC_CNTL_Type) SetINT_CLR_TIME_VALID_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetINT_CLR_TIME_VALID_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetINT_CLR_SAR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetINT_CLR_SAR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetINT_CLR_TOUCH_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetINT_CLR_TOUCH_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetINT_CLR_BROWN_OUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetINT_CLR_BROWN_OUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetINT_CLR_MAIN_TIMER_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetINT_CLR_MAIN_TIMER_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}

// RTC_CNTL.STORE0
func (o *RTC_CNTL_Type) SetSTORE0(value uint32) {
	volatile.StoreUint32(&o.STORE0.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE0() uint32 {
	return volatile.LoadUint32(&o.STORE0.Reg)
}

// RTC_CNTL.STORE1
func (o *RTC_CNTL_Type) SetSTORE1(value uint32) {
	volatile.StoreUint32(&o.STORE1.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE1() uint32 {
	return volatile.LoadUint32(&o.STORE1.Reg)
}

// RTC_CNTL.STORE2
func (o *RTC_CNTL_Type) SetSTORE2(value uint32) {
	volatile.StoreUint32(&o.STORE2.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE2() uint32 {
	return volatile.LoadUint32(&o.STORE2.Reg)
}

// RTC_CNTL.STORE3
func (o *RTC_CNTL_Type) SetSTORE3(value uint32) {
	volatile.StoreUint32(&o.STORE3.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE3() uint32 {
	return volatile.LoadUint32(&o.STORE3.Reg)
}

// RTC_CNTL.EXT_XTL_CONF
func (o *RTC_CNTL_Type) SetEXT_XTL_CONF_XTL_EXT_CTR_LV(value uint32) {
	volatile.StoreUint32(&o.EXT_XTL_CONF.Reg, volatile.LoadUint32(&o.EXT_XTL_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetEXT_XTL_CONF_XTL_EXT_CTR_LV() uint32 {
	return (volatile.LoadUint32(&o.EXT_XTL_CONF.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetEXT_XTL_CONF_XTL_EXT_CTR_EN(value uint32) {
	volatile.StoreUint32(&o.EXT_XTL_CONF.Reg, volatile.LoadUint32(&o.EXT_XTL_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetEXT_XTL_CONF_XTL_EXT_CTR_EN() uint32 {
	return (volatile.LoadUint32(&o.EXT_XTL_CONF.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.EXT_WAKEUP_CONF
func (o *RTC_CNTL_Type) SetEXT_WAKEUP_CONF_EXT_WAKEUP0_LV(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP_CONF.Reg, volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetEXT_WAKEUP_CONF_EXT_WAKEUP0_LV() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetEXT_WAKEUP_CONF_EXT_WAKEUP1_LV(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP_CONF.Reg, volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetEXT_WAKEUP_CONF_EXT_WAKEUP1_LV() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.SLP_REJECT_CONF
func (o *RTC_CNTL_Type) SetSLP_REJECT_CONF_GPIO_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetSLP_REJECT_CONF_GPIO_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x1000000) >> 24
}
func (o *RTC_CNTL_Type) SetSLP_REJECT_CONF_SDIO_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetSLP_REJECT_CONF_SDIO_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x2000000) >> 25
}
func (o *RTC_CNTL_Type) SetSLP_REJECT_CONF_LIGHT_SLP_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetSLP_REJECT_CONF_LIGHT_SLP_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetSLP_REJECT_CONF_DEEP_SLP_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetSLP_REJECT_CONF_DEEP_SLP_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x8000000) >> 27
}
func (o *RTC_CNTL_Type) SetSLP_REJECT_CONF_REJECT_CAUSE(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0xf0000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetSLP_REJECT_CONF_REJECT_CAUSE() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0xf0000000) >> 28
}

// RTC_CNTL.CPU_PERIOD_CONF
func (o *RTC_CNTL_Type) SetCPU_PERIOD_CONF_CPUSEL_CONF(value uint32) {
	volatile.StoreUint32(&o.CPU_PERIOD_CONF.Reg, volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetCPU_PERIOD_CONF_CPUSEL_CONF() uint32 {
	return (volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetCPU_PERIOD_CONF_CPUPERIOD_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PERIOD_CONF.Reg, volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetCPU_PERIOD_CONF_CPUPERIOD_SEL() uint32 {
	return (volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg) & 0xc0000000) >> 30
}

// RTC_CNTL.SDIO_ACT_CONF
func (o *RTC_CNTL_Type) SetSDIO_ACT_CONF_SDIO_ACT_DNUM(value uint32) {
	volatile.StoreUint32(&o.SDIO_ACT_CONF.Reg, volatile.LoadUint32(&o.SDIO_ACT_CONF.Reg)&^(0xffc00000)|value<<22)
}
func (o *RTC_CNTL_Type) GetSDIO_ACT_CONF_SDIO_ACT_DNUM() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ACT_CONF.Reg) & 0xffc00000) >> 22
}

// RTC_CNTL.CLK_CONF
func (o *RTC_CNTL_Type) SetCLK_CONF_CK8M_DIV(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x30)|value<<4)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_CK8M_DIV() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x30) >> 4
}
func (o *RTC_CNTL_Type) SetCLK_CONF_ENB_CK8M(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_ENB_CK8M() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetCLK_CONF_ENB_CK8M_DIV(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_ENB_CK8M_DIV() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetCLK_CONF_DIG_XTAL32K_EN(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_DIG_XTAL32K_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetCLK_CONF_DIG_CLK8M_D256_EN(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x200)|value<<9)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_DIG_CLK8M_D256_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x200) >> 9
}
func (o *RTC_CNTL_Type) SetCLK_CONF_DIG_CLK8M_EN(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x400)|value<<10)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_DIG_CLK8M_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x400) >> 10
}
func (o *RTC_CNTL_Type) SetCLK_CONF_CK8M_DFREQ_FORCE(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x800)|value<<11)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_CK8M_DFREQ_FORCE() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x800) >> 11
}
func (o *RTC_CNTL_Type) SetCLK_CONF_CK8M_DIV_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x7000)|value<<12)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_CK8M_DIV_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x7000) >> 12
}
func (o *RTC_CNTL_Type) SetCLK_CONF_XTAL_FORCE_NOGATING(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_XTAL_FORCE_NOGATING() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x8000) >> 15
}
func (o *RTC_CNTL_Type) SetCLK_CONF_CK8M_FORCE_NOGATING(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_CK8M_FORCE_NOGATING() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x10000) >> 16
}
func (o *RTC_CNTL_Type) SetCLK_CONF_CK8M_DFREQ(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x1fe0000)|value<<17)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_CK8M_DFREQ() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x1fe0000) >> 17
}
func (o *RTC_CNTL_Type) SetCLK_CONF_CK8M_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_CK8M_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x2000000) >> 25
}
func (o *RTC_CNTL_Type) SetCLK_CONF_CK8M_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_CK8M_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetCLK_CONF_SOC_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x18000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_SOC_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x18000000) >> 27
}
func (o *RTC_CNTL_Type) SetCLK_CONF_FAST_CLK_RTC_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_FAST_CLK_RTC_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetCLK_CONF_ANA_CLK_RTC_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetCLK_CONF_ANA_CLK_RTC_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0xc0000000) >> 30
}

// RTC_CNTL.SDIO_CONF
func (o *RTC_CNTL_Type) SetSDIO_CONF_SDIO_PD_EN(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_SDIO_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x200000) >> 21
}
func (o *RTC_CNTL_Type) SetSDIO_CONF_SDIO_FORCE(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_SDIO_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x400000) >> 22
}
func (o *RTC_CNTL_Type) SetSDIO_CONF_SDIO_TIEH(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_SDIO_TIEH() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x800000) >> 23
}
func (o *RTC_CNTL_Type) SetSDIO_CONF_REG1P8_READY(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_REG1P8_READY() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x1000000) >> 24
}
func (o *RTC_CNTL_Type) SetSDIO_CONF_DREFL_SDIO(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x6000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_DREFL_SDIO() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x6000000) >> 25
}
func (o *RTC_CNTL_Type) SetSDIO_CONF_DREFM_SDIO(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x18000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_DREFM_SDIO() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x18000000) >> 27
}
func (o *RTC_CNTL_Type) SetSDIO_CONF_DREFH_SDIO(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_DREFH_SDIO() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x60000000) >> 29
}
func (o *RTC_CNTL_Type) SetSDIO_CONF_XPD_SDIO(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetSDIO_CONF_XPD_SDIO() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.BIAS_CONF
func (o *RTC_CNTL_Type) SetBIAS_CONF_DBG_ATTEN(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x3000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetBIAS_CONF_DBG_ATTEN() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x3000000) >> 24
}
func (o *RTC_CNTL_Type) SetBIAS_CONF_ENB_SCK_XTAL(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetBIAS_CONF_ENB_SCK_XTAL() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetBIAS_CONF_INC_HEARTBEAT_REFRESH(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetBIAS_CONF_INC_HEARTBEAT_REFRESH() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x8000000) >> 27
}
func (o *RTC_CNTL_Type) SetBIAS_CONF_DEC_HEARTBEAT_PERIOD(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetBIAS_CONF_DEC_HEARTBEAT_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x10000000) >> 28
}
func (o *RTC_CNTL_Type) SetBIAS_CONF_INC_HEARTBEAT_PERIOD(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetBIAS_CONF_INC_HEARTBEAT_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetBIAS_CONF_DEC_HEARTBEAT_WIDTH(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetBIAS_CONF_DEC_HEARTBEAT_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetBIAS_CONF_RST_BIAS_I2C(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetBIAS_CONF_RST_BIAS_I2C() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.REG
func (o *RTC_CNTL_Type) SetREG_SCK_DCAP_FORCE(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetREG_SCK_DCAP_FORCE() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetREG_DIG_DBIAS_SLP(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x700)|value<<8)
}
func (o *RTC_CNTL_Type) GetREG_DIG_DBIAS_SLP() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x700) >> 8
}
func (o *RTC_CNTL_Type) SetREG_DIG_DBIAS_WAK(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x3800)|value<<11)
}
func (o *RTC_CNTL_Type) GetREG_DIG_DBIAS_WAK() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x3800) >> 11
}
func (o *RTC_CNTL_Type) SetREG_SCK_DCAP(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x3fc000)|value<<14)
}
func (o *RTC_CNTL_Type) GetREG_SCK_DCAP() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x3fc000) >> 14
}
func (o *RTC_CNTL_Type) SetREG_DBIAS_SLP(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x1c00000)|value<<22)
}
func (o *RTC_CNTL_Type) GetREG_DBIAS_SLP() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x1c00000) >> 22
}
func (o *RTC_CNTL_Type) SetREG_DBIAS_WAK(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0xe000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetREG_DBIAS_WAK() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0xe000000) >> 25
}
func (o *RTC_CNTL_Type) SetREG_DBOOST_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetREG_DBOOST_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x10000000) >> 28
}
func (o *RTC_CNTL_Type) SetREG_DBOOST_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetREG_DBOOST_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetREG_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetREG_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetREG_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.REG.Reg, volatile.LoadUint32(&o.REG.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetREG_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.REG.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.PWC
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x1)|value)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_FORCE_NOISO() uint32 {
	return volatile.LoadUint32(&o.PWC.Reg) & 0x1
}
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x2)|value<<1)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x2) >> 1
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x4)|value<<2)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x4) >> 2
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x8)|value<<3)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x8) >> 3
}
func (o *RTC_CNTL_Type) SetPWC_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetPWC_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetPWC_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetPWC_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_FOLW_CPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_FOLW_CPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_FORCE_LPD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_FORCE_LPD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_FORCE_LPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_FORCE_LPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_FOLW_CPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x200)|value<<9)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_FOLW_CPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x200) >> 9
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_FORCE_LPD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x400)|value<<10)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_FORCE_LPD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x400) >> 10
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_FORCE_LPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x800)|value<<11)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_FORCE_LPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x800) >> 11
}
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x1000) >> 12
}
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x2000) >> 13
}
func (o *RTC_CNTL_Type) SetPWC_FASTMEM_PD_EN(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_CNTL_Type) GetPWC_FASTMEM_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x4000) >> 14
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x8000) >> 15
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x10000) >> 16
}
func (o *RTC_CNTL_Type) SetPWC_SLOWMEM_PD_EN(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_CNTL_Type) GetPWC_SLOWMEM_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x20000) >> 17
}
func (o *RTC_CNTL_Type) SetPWC_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_CNTL_Type) GetPWC_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x40000) >> 18
}
func (o *RTC_CNTL_Type) SetPWC_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_CNTL_Type) GetPWC_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x80000) >> 19
}
func (o *RTC_CNTL_Type) SetPWC_PD_EN(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_CNTL_Type) GetPWC_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x100000) >> 20
}

// RTC_CNTL.DIG_PWC
func (o *RTC_CNTL_Type) SetDIG_PWC_LSLP_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x8)|value<<3)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_LSLP_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x8) >> 3
}
func (o *RTC_CNTL_Type) SetDIG_PWC_LSLP_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_LSLP_MEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetDIG_PWC_ROM0_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_ROM0_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetDIG_PWC_ROM0_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_ROM0_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM0_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM0_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM0_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM0_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM1_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x200)|value<<9)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM1_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x200) >> 9
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM1_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x400)|value<<10)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM1_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x400) >> 10
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM2_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x800)|value<<11)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM2_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x800) >> 11
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM2_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM2_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x1000) >> 12
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM3_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM3_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x2000) >> 13
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM3_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM3_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x4000) >> 14
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM4_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM4_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x8000) >> 15
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM4_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM4_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x10000) >> 16
}
func (o *RTC_CNTL_Type) SetDIG_PWC_WIFI_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_WIFI_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x20000) >> 17
}
func (o *RTC_CNTL_Type) SetDIG_PWC_WIFI_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_WIFI_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x40000) >> 18
}
func (o *RTC_CNTL_Type) SetDIG_PWC_DG_WRAP_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_DG_WRAP_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x80000) >> 19
}
func (o *RTC_CNTL_Type) SetDIG_PWC_DG_WRAP_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_DG_WRAP_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x100000) >> 20
}
func (o *RTC_CNTL_Type) SetDIG_PWC_ROM0_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_ROM0_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x1000000) >> 24
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM0_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM0_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x2000000) >> 25
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM1_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM1_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM2_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM2_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x8000000) >> 27
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM3_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM3_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x10000000) >> 28
}
func (o *RTC_CNTL_Type) SetDIG_PWC_INTER_RAM4_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_INTER_RAM4_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetDIG_PWC_WIFI_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_WIFI_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetDIG_PWC_DG_WRAP_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetDIG_PWC_DG_WRAP_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.DIG_ISO
func (o *RTC_CNTL_Type) SetDIG_ISO_FORCE_OFF(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_FORCE_OFF() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetDIG_ISO_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_PAD_AUTOHOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x200)|value<<9)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_PAD_AUTOHOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x200) >> 9
}
func (o *RTC_CNTL_Type) SetDIG_ISO_CLR_DG_PAD_AUTOHOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x400)|value<<10)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_CLR_DG_PAD_AUTOHOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x400) >> 10
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_PAD_AUTOHOLD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x800)|value<<11)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_PAD_AUTOHOLD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x800) >> 11
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_PAD_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_PAD_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x1000) >> 12
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_PAD_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_PAD_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x2000) >> 13
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_PAD_FORCE_UNHOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_PAD_FORCE_UNHOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x4000) >> 14
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_PAD_FORCE_HOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_PAD_FORCE_HOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x8000) >> 15
}
func (o *RTC_CNTL_Type) SetDIG_ISO_ROM0_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_ROM0_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x10000) >> 16
}
func (o *RTC_CNTL_Type) SetDIG_ISO_ROM0_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_ROM0_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x20000) >> 17
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM0_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM0_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x40000) >> 18
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM0_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM0_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x80000) >> 19
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM1_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM1_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x100000) >> 20
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM1_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM1_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x200000) >> 21
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM2_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM2_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x400000) >> 22
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM2_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x800000)|value<<23)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM2_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x800000) >> 23
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM3_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM3_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x1000000) >> 24
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM3_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM3_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x2000000) >> 25
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM4_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM4_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetDIG_ISO_INTER_RAM4_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_INTER_RAM4_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x8000000) >> 27
}
func (o *RTC_CNTL_Type) SetDIG_ISO_WIFI_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_WIFI_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x10000000) >> 28
}
func (o *RTC_CNTL_Type) SetDIG_ISO_WIFI_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_WIFI_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_WRAP_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_WRAP_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetDIG_ISO_DG_WRAP_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetDIG_ISO_DG_WRAP_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.WDTCONFIG0
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_PAUSE_IN_SLP(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_PAUSE_IN_SLP() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_APPCPU_RESET_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_APPCPU_RESET_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_PROCPU_RESET_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x200)|value<<9)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_PROCPU_RESET_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x200) >> 9
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x400)|value<<10)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x400) >> 10
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_SYS_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x3800)|value<<11)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_SYS_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x3800) >> 11
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_CPU_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1c000)|value<<14)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_CPU_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1c000) >> 14
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x20000) >> 17
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x40000) >> 18
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_STG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x380000)|value<<19)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_STG3() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x380000) >> 19
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_STG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1c00000)|value<<22)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_STG2() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1c00000) >> 22
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_STG1(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0xe000000)|value<<25)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_STG1() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0xe000000) >> 25
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_STG0(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x70000000)|value<<28)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_STG0() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x70000000) >> 28
}
func (o *RTC_CNTL_Type) SetWDTCONFIG0_WDT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG0_WDT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.WDTCONFIG1
func (o *RTC_CNTL_Type) SetWDTCONFIG1(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG1.Reg, value)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG1() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG1.Reg)
}

// RTC_CNTL.WDTCONFIG2
func (o *RTC_CNTL_Type) SetWDTCONFIG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG2.Reg, value)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG2() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG2.Reg)
}

// RTC_CNTL.WDTCONFIG3
func (o *RTC_CNTL_Type) SetWDTCONFIG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG3.Reg, value)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG3() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG3.Reg)
}

// RTC_CNTL.WDTCONFIG4
func (o *RTC_CNTL_Type) SetWDTCONFIG4(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG4.Reg, value)
}
func (o *RTC_CNTL_Type) GetWDTCONFIG4() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG4.Reg)
}

// RTC_CNTL.WDTFEED
func (o *RTC_CNTL_Type) SetWDTFEED_WDT_FEED(value uint32) {
	volatile.StoreUint32(&o.WDTFEED.Reg, volatile.LoadUint32(&o.WDTFEED.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetWDTFEED_WDT_FEED() uint32 {
	return (volatile.LoadUint32(&o.WDTFEED.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.WDTWPROTECT
func (o *RTC_CNTL_Type) SetWDTWPROTECT(value uint32) {
	volatile.StoreUint32(&o.WDTWPROTECT.Reg, value)
}
func (o *RTC_CNTL_Type) GetWDTWPROTECT() uint32 {
	return volatile.LoadUint32(&o.WDTWPROTECT.Reg)
}

// RTC_CNTL.TEST_MUX
func (o *RTC_CNTL_Type) SetTEST_MUX_ENT_RTC(value uint32) {
	volatile.StoreUint32(&o.TEST_MUX.Reg, volatile.LoadUint32(&o.TEST_MUX.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_CNTL_Type) GetTEST_MUX_ENT_RTC() uint32 {
	return (volatile.LoadUint32(&o.TEST_MUX.Reg) & 0x20000000) >> 29
}
func (o *RTC_CNTL_Type) SetTEST_MUX_DTEST_RTC(value uint32) {
	volatile.StoreUint32(&o.TEST_MUX.Reg, volatile.LoadUint32(&o.TEST_MUX.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetTEST_MUX_DTEST_RTC() uint32 {
	return (volatile.LoadUint32(&o.TEST_MUX.Reg) & 0xc0000000) >> 30
}

// RTC_CNTL.SW_CPU_STALL
func (o *RTC_CNTL_Type) SetSW_CPU_STALL_SW_STALL_APPCPU_C1(value uint32) {
	volatile.StoreUint32(&o.SW_CPU_STALL.Reg, volatile.LoadUint32(&o.SW_CPU_STALL.Reg)&^(0x3f00000)|value<<20)
}
func (o *RTC_CNTL_Type) GetSW_CPU_STALL_SW_STALL_APPCPU_C1() uint32 {
	return (volatile.LoadUint32(&o.SW_CPU_STALL.Reg) & 0x3f00000) >> 20
}
func (o *RTC_CNTL_Type) SetSW_CPU_STALL_SW_STALL_PROCPU_C1(value uint32) {
	volatile.StoreUint32(&o.SW_CPU_STALL.Reg, volatile.LoadUint32(&o.SW_CPU_STALL.Reg)&^(0xfc000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetSW_CPU_STALL_SW_STALL_PROCPU_C1() uint32 {
	return (volatile.LoadUint32(&o.SW_CPU_STALL.Reg) & 0xfc000000) >> 26
}

// RTC_CNTL.STORE4
func (o *RTC_CNTL_Type) SetSTORE4(value uint32) {
	volatile.StoreUint32(&o.STORE4.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE4() uint32 {
	return volatile.LoadUint32(&o.STORE4.Reg)
}

// RTC_CNTL.STORE5
func (o *RTC_CNTL_Type) SetSTORE5(value uint32) {
	volatile.StoreUint32(&o.STORE5.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE5() uint32 {
	return volatile.LoadUint32(&o.STORE5.Reg)
}

// RTC_CNTL.STORE6
func (o *RTC_CNTL_Type) SetSTORE6(value uint32) {
	volatile.StoreUint32(&o.STORE6.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE6() uint32 {
	return volatile.LoadUint32(&o.STORE6.Reg)
}

// RTC_CNTL.STORE7
func (o *RTC_CNTL_Type) SetSTORE7(value uint32) {
	volatile.StoreUint32(&o.STORE7.Reg, value)
}
func (o *RTC_CNTL_Type) GetSTORE7() uint32 {
	return volatile.LoadUint32(&o.STORE7.Reg)
}

// RTC_CNTL.LOW_POWER_ST
func (o *RTC_CNTL_Type) SetLOW_POWER_ST(value uint32) {
	volatile.StoreUint32(&o.LOW_POWER_ST.Reg, value)
}
func (o *RTC_CNTL_Type) GetLOW_POWER_ST() uint32 {
	return volatile.LoadUint32(&o.LOW_POWER_ST.Reg)
}
func (o *RTC_CNTL_Type) SetLOW_POWER_ST_RDY_FOR_WAKEUP(value uint32) {
	volatile.StoreUint32(&o.LOW_POWER_ST.Reg, volatile.LoadUint32(&o.LOW_POWER_ST.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_CNTL_Type) GetLOW_POWER_ST_RDY_FOR_WAKEUP() uint32 {
	return (volatile.LoadUint32(&o.LOW_POWER_ST.Reg) & 0x80000) >> 19
}

// RTC_CNTL.DIAG1
func (o *RTC_CNTL_Type) SetDIAG1(value uint32) {
	volatile.StoreUint32(&o.DIAG1.Reg, value)
}
func (o *RTC_CNTL_Type) GetDIAG1() uint32 {
	return volatile.LoadUint32(&o.DIAG1.Reg)
}

// RTC_CNTL.HOLD_FORCE
func (o *RTC_CNTL_Type) SetHOLD_FORCE_ADC1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x1)|value)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_ADC1_HOLD_FORCE() uint32 {
	return volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x1
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_ADC2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x2)|value<<1)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_ADC2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x2) >> 1
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_PDAC1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x4)|value<<2)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_PDAC1_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x4) >> 2
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_PDAC2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x8)|value<<3)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_PDAC2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x8) >> 3
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_SENSE1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x10)|value<<4)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_SENSE1_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x10) >> 4
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_SENSE2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x20)|value<<5)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_SENSE2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x20) >> 5
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_SENSE3_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x40)|value<<6)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_SENSE3_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x40) >> 6
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_SENSE4_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x80)|value<<7)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_SENSE4_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x80) >> 7
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD0_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD0_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x200)|value<<9)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD1_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x200) >> 9
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x400) >> 10
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD3_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x800)|value<<11)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD3_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x800) >> 11
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD4_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD4_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x1000) >> 12
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD5_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD5_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x2000) >> 13
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD6_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD6_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x4000) >> 14
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_TOUCH_PAD7_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_TOUCH_PAD7_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x8000) >> 15
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_X32P_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_X32P_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x10000) >> 16
}
func (o *RTC_CNTL_Type) SetHOLD_FORCE_X32N_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_CNTL_Type) GetHOLD_FORCE_X32N_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x20000) >> 17
}

// RTC_CNTL.EXT_WAKEUP1
func (o *RTC_CNTL_Type) SetEXT_WAKEUP1_SEL(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP1.Reg, volatile.LoadUint32(&o.EXT_WAKEUP1.Reg)&^(0x3ffff)|value)
}
func (o *RTC_CNTL_Type) GetEXT_WAKEUP1_SEL() uint32 {
	return volatile.LoadUint32(&o.EXT_WAKEUP1.Reg) & 0x3ffff
}
func (o *RTC_CNTL_Type) SetEXT_WAKEUP1_STATUS_CLR(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP1.Reg, volatile.LoadUint32(&o.EXT_WAKEUP1.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_CNTL_Type) GetEXT_WAKEUP1_STATUS_CLR() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP1.Reg) & 0x40000) >> 18
}

// RTC_CNTL.EXT_WAKEUP1_STATUS
func (o *RTC_CNTL_Type) SetEXT_WAKEUP1_STATUS(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP1_STATUS.Reg, volatile.LoadUint32(&o.EXT_WAKEUP1_STATUS.Reg)&^(0x3ffff)|value)
}
func (o *RTC_CNTL_Type) GetEXT_WAKEUP1_STATUS() uint32 {
	return volatile.LoadUint32(&o.EXT_WAKEUP1_STATUS.Reg) & 0x3ffff
}

// RTC_CNTL.BROWN_OUT
func (o *RTC_CNTL_Type) SetBROWN_OUT_RTC_MEM_PID_CONF(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0xff)|value)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_RTC_MEM_PID_CONF() uint32 {
	return volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0xff
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_RTC_MEM_CRC_START(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x100)|value<<8)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_RTC_MEM_CRC_START() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x100) >> 8
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_RTC_MEM_CRC_ADDR(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0xffe00)|value<<9)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_RTC_MEM_CRC_ADDR() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0xffe00) >> 9
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_CLOSE_FLASH_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_CLOSE_FLASH_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x4000) >> 14
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_PD_RF_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_PD_RF_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x8000) >> 15
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_RST_WAIT(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x3ff0000)|value<<16)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_RST_WAIT() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x3ff0000) >> 16
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_RTC_MEM_CRC_LEN(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x7ff00000)|value<<20)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_RTC_MEM_CRC_LEN() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x7ff00000) >> 20
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_RST_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_RST_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x4000000) >> 26
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_DBROWN_OUT_THRES(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x38000000)|value<<27)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_DBROWN_OUT_THRES() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x38000000) >> 27
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x40000000) >> 30
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_DET(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_DET() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x80000000) >> 31
}
func (o *RTC_CNTL_Type) SetBROWN_OUT_RTC_MEM_CRC_FINISH(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_CNTL_Type) GetBROWN_OUT_RTC_MEM_CRC_FINISH() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x80000000) >> 31
}

// RTC_CNTL.DATE
func (o *RTC_CNTL_Type) SetDATE_CNTL_DATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *RTC_CNTL_Type) GetDATE_CNTL_DATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

// Low-power Input/Output
type RTC_GPIO_Type struct {
	OUT           volatile.Register32 // 0x0
	OUT_W1TS      volatile.Register32 // 0x4
	OUT_W1TC      volatile.Register32 // 0x8
	ENABLE        volatile.Register32 // 0xC
	ENABLE_W1TS   volatile.Register32 // 0x10
	ENABLE_W1TC   volatile.Register32 // 0x14
	STATUS        volatile.Register32 // 0x18
	STATUS_W1TS   volatile.Register32 // 0x1C
	STATUS_W1TC   volatile.Register32 // 0x20
	IN            volatile.Register32 // 0x24
	PIN0          volatile.Register32 // 0x28
	PIN1          volatile.Register32 // 0x2C
	PIN2          volatile.Register32 // 0x30
	PIN3          volatile.Register32 // 0x34
	PIN4          volatile.Register32 // 0x38
	PIN5          volatile.Register32 // 0x3C
	PIN6          volatile.Register32 // 0x40
	PIN7          volatile.Register32 // 0x44
	PIN8          volatile.Register32 // 0x48
	PIN9          volatile.Register32 // 0x4C
	PIN10         volatile.Register32 // 0x50
	PIN11         volatile.Register32 // 0x54
	PIN12         volatile.Register32 // 0x58
	PIN13         volatile.Register32 // 0x5C
	PIN14         volatile.Register32 // 0x60
	PIN15         volatile.Register32 // 0x64
	PIN16         volatile.Register32 // 0x68
	PIN17         volatile.Register32 // 0x6C
	RTC_DEBUG_SEL volatile.Register32 // 0x70
	DIG_PAD_HOLD  volatile.Register32 // 0x74
	HALL_SENS     volatile.Register32 // 0x78
	SENSOR_PADS   volatile.Register32 // 0x7C
	ADC_PAD       volatile.Register32 // 0x80
	PAD_DAC1      volatile.Register32 // 0x84
	PAD_DAC2      volatile.Register32 // 0x88
	XTAL_32K_PAD  volatile.Register32 // 0x8C
	TOUCH_CFG     volatile.Register32 // 0x90
	TOUCH_PAD0    volatile.Register32 // 0x94
	TOUCH_PAD1    volatile.Register32 // 0x98
	TOUCH_PAD2    volatile.Register32 // 0x9C
	TOUCH_PAD3    volatile.Register32 // 0xA0
	TOUCH_PAD4    volatile.Register32 // 0xA4
	TOUCH_PAD5    volatile.Register32 // 0xA8
	TOUCH_PAD6    volatile.Register32 // 0xAC
	TOUCH_PAD7    volatile.Register32 // 0xB0
	TOUCH_PAD8    volatile.Register32 // 0xB4
	TOUCH_PAD9    volatile.Register32 // 0xB8
	EXT_WAKEUP0   volatile.Register32 // 0xBC
	XTL_EXT_CTR   volatile.Register32 // 0xC0
	SAR_I2C_IO    volatile.Register32 // 0xC4
	DATE          volatile.Register32 // 0xC8
}

// RTC_GPIO.OUT
func (o *RTC_GPIO_Type) SetOUT_DATA(value uint32) {
	volatile.StoreUint32(&o.OUT.Reg, volatile.LoadUint32(&o.OUT.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetOUT_DATA() uint32 {
	return (volatile.LoadUint32(&o.OUT.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.OUT_W1TS
func (o *RTC_GPIO_Type) SetOUT_W1TS_OUT_DATA_W1TS(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TS.Reg, volatile.LoadUint32(&o.OUT_W1TS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetOUT_W1TS_OUT_DATA_W1TS() uint32 {
	return (volatile.LoadUint32(&o.OUT_W1TS.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.OUT_W1TC
func (o *RTC_GPIO_Type) SetOUT_W1TC_OUT_DATA_W1TC(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TC.Reg, volatile.LoadUint32(&o.OUT_W1TC.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetOUT_W1TC_OUT_DATA_W1TC() uint32 {
	return (volatile.LoadUint32(&o.OUT_W1TC.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.ENABLE
func (o *RTC_GPIO_Type) SetENABLE(value uint32) {
	volatile.StoreUint32(&o.ENABLE.Reg, volatile.LoadUint32(&o.ENABLE.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetENABLE() uint32 {
	return (volatile.LoadUint32(&o.ENABLE.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.ENABLE_W1TS
func (o *RTC_GPIO_Type) SetENABLE_W1TS(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TS.Reg, volatile.LoadUint32(&o.ENABLE_W1TS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetENABLE_W1TS() uint32 {
	return (volatile.LoadUint32(&o.ENABLE_W1TS.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.ENABLE_W1TC
func (o *RTC_GPIO_Type) SetENABLE_W1TC(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TC.Reg, volatile.LoadUint32(&o.ENABLE_W1TC.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetENABLE_W1TC() uint32 {
	return (volatile.LoadUint32(&o.ENABLE_W1TC.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.STATUS
func (o *RTC_GPIO_Type) SetSTATUS_INT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetSTATUS_INT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.STATUS_W1TS
func (o *RTC_GPIO_Type) SetSTATUS_W1TS_STATUS_INT_W1TS(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TS.Reg, volatile.LoadUint32(&o.STATUS_W1TS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetSTATUS_W1TS_STATUS_INT_W1TS() uint32 {
	return (volatile.LoadUint32(&o.STATUS_W1TS.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.STATUS_W1TC
func (o *RTC_GPIO_Type) SetSTATUS_W1TC_STATUS_INT_W1TC(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TC.Reg, volatile.LoadUint32(&o.STATUS_W1TC.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetSTATUS_W1TC_STATUS_INT_W1TC() uint32 {
	return (volatile.LoadUint32(&o.STATUS_W1TC.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.IN
func (o *RTC_GPIO_Type) SetIN_NEXT(value uint32) {
	volatile.StoreUint32(&o.IN.Reg, volatile.LoadUint32(&o.IN.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTC_GPIO_Type) GetIN_NEXT() uint32 {
	return (volatile.LoadUint32(&o.IN.Reg) & 0xffffc000) >> 14
}

// RTC_GPIO.PIN0
func (o *RTC_GPIO_Type) SetPIN0_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN0_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN0_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN0_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN0_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN0_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN1
func (o *RTC_GPIO_Type) SetPIN1_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN1_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN1_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN1_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN1_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN1_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN2
func (o *RTC_GPIO_Type) SetPIN2_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN2_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN2_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN2_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN2_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN2_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN3
func (o *RTC_GPIO_Type) SetPIN3_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN3_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN3_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN3_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN3_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN3_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN4
func (o *RTC_GPIO_Type) SetPIN4_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN4_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN4_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN4_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN4_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN4_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN5
func (o *RTC_GPIO_Type) SetPIN5_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN5_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN5_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN5_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN5_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN5_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN6
func (o *RTC_GPIO_Type) SetPIN6_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN6_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN6_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN6_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN6_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN6_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN7
func (o *RTC_GPIO_Type) SetPIN7_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN7_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN7_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN7_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN7_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN7_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN8
func (o *RTC_GPIO_Type) SetPIN8_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN8_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN8_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN8_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN8_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN8_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN9
func (o *RTC_GPIO_Type) SetPIN9_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN9_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN9_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN9_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN9_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN9_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN10
func (o *RTC_GPIO_Type) SetPIN10_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN10_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN10_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN10_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN10_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN10_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN11
func (o *RTC_GPIO_Type) SetPIN11_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN11_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN11_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN11_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN11_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN11_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN12
func (o *RTC_GPIO_Type) SetPIN12_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN12_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN12_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN12_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN12_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN12_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN13
func (o *RTC_GPIO_Type) SetPIN13_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN13_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN13_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN13_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN13_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN13_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN14
func (o *RTC_GPIO_Type) SetPIN14_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN14_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN14_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN14_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN14_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN14_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN15
func (o *RTC_GPIO_Type) SetPIN15_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN15_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN15_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN15_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN15_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN15_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN16
func (o *RTC_GPIO_Type) SetPIN16_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN16_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN16_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN16_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN16_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN16_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x400) >> 10
}

// RTC_GPIO.PIN17
func (o *RTC_GPIO_Type) SetPIN17_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x4)|value<<2)
}
func (o *RTC_GPIO_Type) GetPIN17_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x4) >> 2
}
func (o *RTC_GPIO_Type) SetPIN17_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x380)|value<<7)
}
func (o *RTC_GPIO_Type) GetPIN17_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x380) >> 7
}
func (o *RTC_GPIO_Type) SetPIN17_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPIN17_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x400) >> 10
}

// RTC_GPIO.RTC_DEBUG_SEL
func (o *RTC_GPIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL0(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x1f)|value)
}
func (o *RTC_GPIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL0() uint32 {
	return volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x1f
}
func (o *RTC_GPIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL1(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x3e0)|value<<5)
}
func (o *RTC_GPIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL1() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x3e0) >> 5
}
func (o *RTC_GPIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL2(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x7c00)|value<<10)
}
func (o *RTC_GPIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL2() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x7c00) >> 10
}
func (o *RTC_GPIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL3(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0xf8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL3() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0xf8000) >> 15
}
func (o *RTC_GPIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL4(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x1f00000)|value<<20)
}
func (o *RTC_GPIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL4() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x1f00000) >> 20
}
func (o *RTC_GPIO_Type) SetRTC_DEBUG_SEL_DEBUG_12M_NO_GATING(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_GPIO_Type) GetRTC_DEBUG_SEL_DEBUG_12M_NO_GATING() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x2000000) >> 25
}

// RTC_GPIO.DIG_PAD_HOLD
func (o *RTC_GPIO_Type) SetDIG_PAD_HOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_PAD_HOLD.Reg, value)
}
func (o *RTC_GPIO_Type) GetDIG_PAD_HOLD() uint32 {
	return volatile.LoadUint32(&o.DIG_PAD_HOLD.Reg)
}

// RTC_GPIO.HALL_SENS
func (o *RTC_GPIO_Type) SetHALL_SENS_HALL_PHASE(value uint32) {
	volatile.StoreUint32(&o.HALL_SENS.Reg, volatile.LoadUint32(&o.HALL_SENS.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_GPIO_Type) GetHALL_SENS_HALL_PHASE() uint32 {
	return (volatile.LoadUint32(&o.HALL_SENS.Reg) & 0x40000000) >> 30
}
func (o *RTC_GPIO_Type) SetHALL_SENS_XPD_HALL(value uint32) {
	volatile.StoreUint32(&o.HALL_SENS.Reg, volatile.LoadUint32(&o.HALL_SENS.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetHALL_SENS_XPD_HALL() uint32 {
	return (volatile.LoadUint32(&o.HALL_SENS.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.SENSOR_PADS
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE4_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x10)|value<<4)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE4_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x10) >> 4
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE4_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x20)|value<<5)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE4_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x20) >> 5
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE4_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x40)|value<<6)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE4_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x40) >> 6
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE4_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x180)|value<<7)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE4_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x180) >> 7
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE3_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x200)|value<<9)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE3_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x200) >> 9
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE3_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE3_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x400) >> 10
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE3_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x800)|value<<11)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE3_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x800) >> 11
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE3_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x3000)|value<<12)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE3_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x3000) >> 12
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0xc00000)|value<<22)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0xc00000) >> 22
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE4_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE4_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x1000000) >> 24
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE3_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE3_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x2000000) >> 25
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x4000000)|value<<26)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x4000000) >> 26
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE4_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE4_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE3_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE3_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x20000000) >> 29
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE2_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x40000000) >> 30
}
func (o *RTC_GPIO_Type) SetSENSOR_PADS_SENSE1_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetSENSOR_PADS_SENSE1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.ADC_PAD
func (o *RTC_GPIO_Type) SetADC_PAD_ADC2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x40000) >> 18
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x600000)|value<<21)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x600000) >> 21
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x800000) >> 23
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x1000000) >> 24
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x2000000)|value<<25)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x2000000) >> 25
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0xc000000)|value<<26)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0xc000000) >> 26
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x20000000) >> 29
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC2_HOLD(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x40000000)|value<<30)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x40000000) >> 30
}
func (o *RTC_GPIO_Type) SetADC_PAD_ADC1_HOLD(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetADC_PAD_ADC1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.PAD_DAC1
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_DAC_XPD_FORCE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_DAC_XPD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x400) >> 10
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x800)|value<<11)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x800) >> 11
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x18000)|value<<15)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x18000) >> 15
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x20000) >> 17
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_XPD_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_XPD_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x40000) >> 18
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x7f80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x7f80000) >> 19
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_RUE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_RUE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_RDE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_RDE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_HOLD(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x20000000) >> 29
}
func (o *RTC_GPIO_Type) SetPAD_DAC1_PDAC1_DRV(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTC_GPIO_Type) GetPAD_DAC1_PDAC1_DRV() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0xc0000000) >> 30
}

// RTC_GPIO.PAD_DAC2
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_DAC_XPD_FORCE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x400)|value<<10)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_DAC_XPD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x400) >> 10
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x800)|value<<11)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x800) >> 11
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x18000)|value<<15)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x18000) >> 15
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x20000) >> 17
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_XPD_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_XPD_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x40000) >> 18
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x7f80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x7f80000) >> 19
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_RUE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_RUE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_RDE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_RDE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_HOLD(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x20000000) >> 29
}
func (o *RTC_GPIO_Type) SetPAD_DAC2_PDAC2_DRV(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTC_GPIO_Type) GetPAD_DAC2_PDAC2_DRV() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0xc0000000) >> 30
}

// RTC_GPIO.XTAL_32K_PAD
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_DBIAS_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x6)|value<<1)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_DBIAS_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x6) >> 1
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_DRES_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x18)|value<<3)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_DRES_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x18) >> 3
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x20)|value<<5)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x20) >> 5
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x40)|value<<6)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x40) >> 6
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x80)|value<<7)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x80) >> 7
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x100)|value<<8)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x100) >> 8
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x600)|value<<9)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x600) >> 9
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x800)|value<<11)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x800) >> 11
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x18000)|value<<15)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x18000) >> 15
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x20000)|value<<17)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x20000) >> 17
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x40000)|value<<18)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x40000) >> 18
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_XPD_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_XPD_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_DAC_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x300000)|value<<20)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_DAC_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x300000) >> 20
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_RUE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_RUE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_RDE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_RDE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x800000) >> 23
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_HOLD(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x1000000)|value<<24)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_HOLD() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x1000000) >> 24
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32P_DRV(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x6000000)|value<<25)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32P_DRV() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x6000000) >> 25
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_RUE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_RUE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_RDE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_RDE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_HOLD(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x20000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_HOLD() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x20000000) >> 29
}
func (o *RTC_GPIO_Type) SetXTAL_32K_PAD_X32N_DRV(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTC_GPIO_Type) GetXTAL_32K_PAD_X32N_DRV() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0xc0000000) >> 30
}

// RTC_GPIO.TOUCH_CFG
func (o *RTC_GPIO_Type) SetTOUCH_CFG_TOUCH_DCUR(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x1800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_CFG_TOUCH_DCUR() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x1800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_CFG_TOUCH_DRANGE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x6000000)|value<<25)
}
func (o *RTC_GPIO_Type) GetTOUCH_CFG_TOUCH_DRANGE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x6000000) >> 25
}
func (o *RTC_GPIO_Type) SetTOUCH_CFG_TOUCH_DREFL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x18000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_CFG_TOUCH_DREFL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x18000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_CFG_TOUCH_DREFH(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_CFG_TOUCH_DREFH() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_CFG_TOUCH_XPD_BIAS(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_CFG_TOUCH_XPD_BIAS() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD0
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD0_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD0_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD1
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD1_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD2
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD2_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD3
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD3_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD3_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD4
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD4_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD4_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD5
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD5_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD5_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD6
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD6_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD6_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD7
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x1000)|value<<12)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x1000) >> 12
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x2000)|value<<13)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x2000) >> 13
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x4000)|value<<14)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x4000) >> 14
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x8000)|value<<15)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x8000) >> 15
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x10000)|value<<16)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x10000) >> 16
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x60000)|value<<17)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x60000) >> 17
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x3800000) >> 23
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x8000000) >> 27
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x10000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x10000000) >> 28
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x60000000)|value<<29)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x60000000) >> 29
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD7_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD7_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x80000000) >> 31
}

// RTC_GPIO.TOUCH_PAD8
func (o *RTC_GPIO_Type) SetTOUCH_PAD8_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD8_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD8_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD8_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD8_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD8_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD8_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD8_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD8_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD8_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x3800000) >> 23
}

// RTC_GPIO.TOUCH_PAD9
func (o *RTC_GPIO_Type) SetTOUCH_PAD9_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x80000)|value<<19)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD9_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x80000) >> 19
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD9_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x100000)|value<<20)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD9_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x100000) >> 20
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD9_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x200000)|value<<21)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD9_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x200000) >> 21
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD9_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x400000)|value<<22)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD9_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x400000) >> 22
}
func (o *RTC_GPIO_Type) SetTOUCH_PAD9_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x3800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetTOUCH_PAD9_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x3800000) >> 23
}

// RTC_GPIO.EXT_WAKEUP0
func (o *RTC_GPIO_Type) SetEXT_WAKEUP0_SEL(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP0.Reg, volatile.LoadUint32(&o.EXT_WAKEUP0.Reg)&^(0xf8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetEXT_WAKEUP0_SEL() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP0.Reg) & 0xf8000000) >> 27
}

// RTC_GPIO.XTL_EXT_CTR
func (o *RTC_GPIO_Type) SetXTL_EXT_CTR_SEL(value uint32) {
	volatile.StoreUint32(&o.XTL_EXT_CTR.Reg, volatile.LoadUint32(&o.XTL_EXT_CTR.Reg)&^(0xf8000000)|value<<27)
}
func (o *RTC_GPIO_Type) GetXTL_EXT_CTR_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTL_EXT_CTR.Reg) & 0xf8000000) >> 27
}

// RTC_GPIO.SAR_I2C_IO
func (o *RTC_GPIO_Type) SetSAR_I2C_IO_SAR_DEBUG_BIT_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_IO.Reg, volatile.LoadUint32(&o.SAR_I2C_IO.Reg)&^(0xf800000)|value<<23)
}
func (o *RTC_GPIO_Type) GetSAR_I2C_IO_SAR_DEBUG_BIT_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_IO.Reg) & 0xf800000) >> 23
}
func (o *RTC_GPIO_Type) SetSAR_I2C_IO_SAR_I2C_SCL_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_IO.Reg, volatile.LoadUint32(&o.SAR_I2C_IO.Reg)&^(0x30000000)|value<<28)
}
func (o *RTC_GPIO_Type) GetSAR_I2C_IO_SAR_I2C_SCL_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_IO.Reg) & 0x30000000) >> 28
}
func (o *RTC_GPIO_Type) SetSAR_I2C_IO_SAR_I2C_SDA_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_IO.Reg, volatile.LoadUint32(&o.SAR_I2C_IO.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTC_GPIO_Type) GetSAR_I2C_IO_SAR_I2C_SDA_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_IO.Reg) & 0xc0000000) >> 30
}

// RTC_GPIO.DATE
func (o *RTC_GPIO_Type) SetDATE_IO_DATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *RTC_GPIO_Type) GetDATE_IO_DATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

// Low-power I2C (Inter-Integrated Circuit) Controller
type RTC_I2C_Type struct {
	SCL_LOW_PERIOD   volatile.Register32 // 0x0
	CTRL             volatile.Register32 // 0x4
	DEBUG_STATUS     volatile.Register32 // 0x8
	TIMEOUT          volatile.Register32 // 0xC
	SLAVE_ADDR       volatile.Register32 // 0x10
	_                [8]byte
	DATA             volatile.Register32 // 0x1C
	INT_RAW          volatile.Register32 // 0x20
	INT_CLR          volatile.Register32 // 0x24
	INT_EN           volatile.Register32 // 0x28
	INT_ST           volatile.Register32 // 0x2C
	SDA_DUTY         volatile.Register32 // 0x30
	_                [4]byte
	SCL_HIGH_PERIOD  volatile.Register32 // 0x38
	_                [4]byte
	SCL_START_PERIOD volatile.Register32 // 0x40
	SCL_STOP_PERIOD  volatile.Register32 // 0x44
	CMD              volatile.Register32 // 0x48
}

// RTC_I2C.SCL_LOW_PERIOD
func (o *RTC_I2C_Type) SetSCL_LOW_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_LOW_PERIOD.Reg, volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg)&^(0x1ffffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_LOW_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg) & 0x1ffffff
}

// RTC_I2C.CTRL
func (o *RTC_I2C_Type) SetCTRL_SDA_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1)|value)
}
func (o *RTC_I2C_Type) GetCTRL_SDA_FORCE_OUT() uint32 {
	return volatile.LoadUint32(&o.CTRL.Reg) & 0x1
}
func (o *RTC_I2C_Type) SetCTRL_SCL_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2)|value<<1)
}
func (o *RTC_I2C_Type) GetCTRL_SCL_FORCE_OUT() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2) >> 1
}
func (o *RTC_I2C_Type) SetCTRL_MS_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetCTRL_MS_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x10) >> 4
}
func (o *RTC_I2C_Type) SetCTRL_TRANS_START(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetCTRL_TRANS_START() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetCTRL_TX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetCTRL_TX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetCTRL_RX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x80)|value<<7)
}
func (o *RTC_I2C_Type) GetCTRL_RX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x80) >> 7
}

// RTC_I2C.DEBUG_STATUS
func (o *RTC_I2C_Type) SetDEBUG_STATUS_ACK_VAL(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x1)|value)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_ACK_VAL() uint32 {
	return volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x1
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_SLAVE_RW(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_SLAVE_RW() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x2) >> 1
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_TIMED_OUT(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_TIMED_OUT() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x4) >> 2
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_ARB_LOST(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_ARB_LOST() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x8) >> 3
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_BUS_BUSY(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_BUS_BUSY() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x10) >> 4
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_SLAVE_ADDR_MATCH(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_SLAVE_ADDR_MATCH() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_BYTE_TRANS(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_BYTE_TRANS() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_MAIN_STATE(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0xe000000)|value<<25)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_MAIN_STATE() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0xe000000) >> 25
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_SCL_STATE(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x70000000)|value<<28)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_SCL_STATE() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x70000000) >> 28
}

// RTC_I2C.TIMEOUT
func (o *RTC_I2C_Type) SetTIMEOUT(value uint32) {
	volatile.StoreUint32(&o.TIMEOUT.Reg, volatile.LoadUint32(&o.TIMEOUT.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetTIMEOUT() uint32 {
	return volatile.LoadUint32(&o.TIMEOUT.Reg) & 0xfffff
}

// RTC_I2C.SLAVE_ADDR
func (o *RTC_I2C_Type) SetSLAVE_ADDR(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x7fff)|value)
}
func (o *RTC_I2C_Type) GetSLAVE_ADDR() uint32 {
	return volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x7fff
}
func (o *RTC_I2C_Type) SetSLAVE_ADDR__10BIT(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_I2C_Type) GetSLAVE_ADDR__10BIT() uint32 {
	return (volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x80000000) >> 31
}

// RTC_I2C.INT_RAW
func (o *RTC_I2C_Type) SetINT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *RTC_I2C_Type) GetINT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *RTC_I2C_Type) SetINT_RAW_ARBITRATION_LOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetINT_RAW_ARBITRATION_LOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *RTC_I2C_Type) SetINT_RAW_MASTER_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetINT_RAW_MASTER_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetINT_RAW_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetINT_RAW_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetINT_RAW_TIME_OUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *RTC_I2C_Type) GetINT_RAW_TIME_OUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}

// RTC_I2C.INT_CLR
func (o *RTC_I2C_Type) SetINT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetINT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *RTC_I2C_Type) SetINT_CLR_ARBITRATION_LOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetINT_CLR_ARBITRATION_LOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetINT_CLR_MASTER_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetINT_CLR_MASTER_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetINT_CLR_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *RTC_I2C_Type) GetINT_CLR_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *RTC_I2C_Type) SetINT_CLR_TIME_OUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *RTC_I2C_Type) GetINT_CLR_TIME_OUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}

// RTC_I2C.SDA_DUTY
func (o *RTC_I2C_Type) SetSDA_DUTY(value uint32) {
	volatile.StoreUint32(&o.SDA_DUTY.Reg, volatile.LoadUint32(&o.SDA_DUTY.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSDA_DUTY() uint32 {
	return volatile.LoadUint32(&o.SDA_DUTY.Reg) & 0xfffff
}

// RTC_I2C.SCL_HIGH_PERIOD
func (o *RTC_I2C_Type) SetSCL_HIGH_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_HIGH_PERIOD.Reg, volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_HIGH_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg) & 0xfffff
}

// RTC_I2C.SCL_START_PERIOD
func (o *RTC_I2C_Type) SetSCL_START_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_START_PERIOD.Reg, volatile.LoadUint32(&o.SCL_START_PERIOD.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_START_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_START_PERIOD.Reg) & 0xfffff
}

// RTC_I2C.SCL_STOP_PERIOD
func (o *RTC_I2C_Type) SetSCL_STOP_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_STOP_PERIOD.Reg, volatile.LoadUint32(&o.SCL_STOP_PERIOD.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_STOP_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_STOP_PERIOD.Reg) & 0xfffff
}

// RTC_I2C.CMD
func (o *RTC_I2C_Type) SetCMD_VAL(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x3fff)|value)
}
func (o *RTC_I2C_Type) GetCMD_VAL() uint32 {
	return volatile.LoadUint32(&o.CMD.Reg) & 0x3fff
}
func (o *RTC_I2C_Type) SetCMD_DONE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_I2C_Type) GetCMD_DONE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x80000000) >> 31
}

// SD/MMC Host Controller
type SDHOST_Type struct {
	CTRL         volatile.Register32 // 0x0
	_            [4]byte
	CLKDIV       volatile.Register32 // 0x8
	CLKSRC       volatile.Register32 // 0xC
	CLKENA       volatile.Register32 // 0x10
	TMOUT        volatile.Register32 // 0x14
	CTYPE        volatile.Register32 // 0x18
	BLKSIZ       volatile.Register32 // 0x1C
	BYTCNT       volatile.Register32 // 0x20
	INTMASK      volatile.Register32 // 0x24
	CMDARG       volatile.Register32 // 0x28
	CMD          volatile.Register32 // 0x2C
	RESP0        volatile.Register32 // 0x30
	RESP1        volatile.Register32 // 0x34
	RESP2        volatile.Register32 // 0x38
	RESP3        volatile.Register32 // 0x3C
	MINTSTS      volatile.Register32 // 0x40
	RINTSTS      volatile.Register32 // 0x44
	STATUS       volatile.Register32 // 0x48
	FIFOTH       volatile.Register32 // 0x4C
	CDETECT      volatile.Register32 // 0x50
	WRTPRT       volatile.Register32 // 0x54
	_            [4]byte
	TCBCNT       volatile.Register32 // 0x5C
	TBBCNT       volatile.Register32 // 0x60
	DEBNCE       volatile.Register32 // 0x64
	USRID        volatile.Register32 // 0x68
	VERID        volatile.Register32 // 0x6C
	HCON         volatile.Register32 // 0x70
	UHS          volatile.Register32 // 0x74
	RST_N        volatile.Register32 // 0x78
	_            [4]byte
	BMOD         volatile.Register32 // 0x80
	PLDMND       volatile.Register32 // 0x84
	DBADDR       volatile.Register32 // 0x88
	IDSTS        volatile.Register32 // 0x8C
	IDINTEN      volatile.Register32 // 0x90
	DSCADDR      volatile.Register32 // 0x94
	BUFADDR      volatile.Register32 // 0x98
	_            [100]byte
	CARDTHRCTL   volatile.Register32 // 0x100
	_            [8]byte
	EMMCDDR      volatile.Register32 // 0x10C
	ENSHIFT      volatile.Register32 // 0x110
	_            [236]byte
	BUFFIFO      volatile.Register32 // 0x200
	_            [1532]byte
	CLK_EDGE_SEL volatile.Register32 // 0x800
}

// SDHOST.CTRL: Control register
func (o *SDHOST_Type) SetCTRL_CONTROLLER_RESET(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1)|value)
}
func (o *SDHOST_Type) GetCTRL_CONTROLLER_RESET() uint32 {
	return volatile.LoadUint32(&o.CTRL.Reg) & 0x1
}
func (o *SDHOST_Type) SetCTRL_FIFO_RESET(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2)|value<<1)
}
func (o *SDHOST_Type) GetCTRL_FIFO_RESET() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2) >> 1
}
func (o *SDHOST_Type) SetCTRL_DMA_RESET(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4)|value<<2)
}
func (o *SDHOST_Type) GetCTRL_DMA_RESET() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4) >> 2
}
func (o *SDHOST_Type) SetCTRL_INT_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x10)|value<<4)
}
func (o *SDHOST_Type) GetCTRL_INT_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x10) >> 4
}
func (o *SDHOST_Type) SetCTRL_READ_WAIT(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x40)|value<<6)
}
func (o *SDHOST_Type) GetCTRL_READ_WAIT() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x40) >> 6
}
func (o *SDHOST_Type) SetCTRL_SEND_IRQ_RESPONSE(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x80)|value<<7)
}
func (o *SDHOST_Type) GetCTRL_SEND_IRQ_RESPONSE() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x80) >> 7
}
func (o *SDHOST_Type) SetCTRL_ABORT_READ_DATA(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x100)|value<<8)
}
func (o *SDHOST_Type) GetCTRL_ABORT_READ_DATA() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x100) >> 8
}
func (o *SDHOST_Type) SetCTRL_SEND_CCSD(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x200)|value<<9)
}
func (o *SDHOST_Type) GetCTRL_SEND_CCSD() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x200) >> 9
}
func (o *SDHOST_Type) SetCTRL_SEND_AUTO_STOP_CCSD(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x400)|value<<10)
}
func (o *SDHOST_Type) GetCTRL_SEND_AUTO_STOP_CCSD() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x400) >> 10
}
func (o *SDHOST_Type) SetCTRL_CEATA_DEVICE_INTERRUPT_STATUS(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x800)|value<<11)
}
func (o *SDHOST_Type) GetCTRL_CEATA_DEVICE_INTERRUPT_STATUS() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x800) >> 11
}

// SDHOST.CLKDIV: Clock divider configuration register
func (o *SDHOST_Type) SetCLKDIV_CLK_DIVIDER0(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xff)|value)
}
func (o *SDHOST_Type) GetCLKDIV_CLK_DIVIDER0() uint32 {
	return volatile.LoadUint32(&o.CLKDIV.Reg) & 0xff
}
func (o *SDHOST_Type) SetCLKDIV_CLK_DIVIDER1(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xff00)|value<<8)
}
func (o *SDHOST_Type) GetCLKDIV_CLK_DIVIDER1() uint32 {
	return (volatile.LoadUint32(&o.CLKDIV.Reg) & 0xff00) >> 8
}
func (o *SDHOST_Type) SetCLKDIV_CLK_DIVIDER2(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xff0000)|value<<16)
}
func (o *SDHOST_Type) GetCLKDIV_CLK_DIVIDER2() uint32 {
	return (volatile.LoadUint32(&o.CLKDIV.Reg) & 0xff0000) >> 16
}
func (o *SDHOST_Type) SetCLKDIV_CLK_DIVIDER3(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xff000000)|value<<24)
}
func (o *SDHOST_Type) GetCLKDIV_CLK_DIVIDER3() uint32 {
	return (volatile.LoadUint32(&o.CLKDIV.Reg) & 0xff000000) >> 24
}

// SDHOST.CLKSRC: Clock source selection register
func (o *SDHOST_Type) SetCLKSRC(value uint32) {
	volatile.StoreUint32(&o.CLKSRC.Reg, volatile.LoadUint32(&o.CLKSRC.Reg)&^(0xf)|value)
}
func (o *SDHOST_Type) GetCLKSRC() uint32 {
	return volatile.LoadUint32(&o.CLKSRC.Reg) & 0xf
}

// SDHOST.CLKENA: Clock enable register
func (o *SDHOST_Type) SetCLKENA_CCLK_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CLKENA.Reg, volatile.LoadUint32(&o.CLKENA.Reg)&^(0x3)|value)
}
func (o *SDHOST_Type) GetCLKENA_CCLK_ENABLE() uint32 {
	return volatile.LoadUint32(&o.CLKENA.Reg) & 0x3
}
func (o *SDHOST_Type) SetCLKENA_LP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CLKENA.Reg, volatile.LoadUint32(&o.CLKENA.Reg)&^(0x30000)|value<<16)
}
func (o *SDHOST_Type) GetCLKENA_LP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CLKENA.Reg) & 0x30000) >> 16
}

// SDHOST.TMOUT: Data and response timeout configuration register
func (o *SDHOST_Type) SetTMOUT_RESPONSE_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.TMOUT.Reg, volatile.LoadUint32(&o.TMOUT.Reg)&^(0xff)|value)
}
func (o *SDHOST_Type) GetTMOUT_RESPONSE_TIMEOUT() uint32 {
	return volatile.LoadUint32(&o.TMOUT.Reg) & 0xff
}
func (o *SDHOST_Type) SetTMOUT_DATA_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.TMOUT.Reg, volatile.LoadUint32(&o.TMOUT.Reg)&^(0xffffff00)|value<<8)
}
func (o *SDHOST_Type) GetTMOUT_DATA_TIMEOUT() uint32 {
	return (volatile.LoadUint32(&o.TMOUT.Reg) & 0xffffff00) >> 8
}

// SDHOST.CTYPE: Card bus width configuration register
func (o *SDHOST_Type) SetCTYPE_CARD_WIDTH4(value uint32) {
	volatile.StoreUint32(&o.CTYPE.Reg, volatile.LoadUint32(&o.CTYPE.Reg)&^(0x3)|value)
}
func (o *SDHOST_Type) GetCTYPE_CARD_WIDTH4() uint32 {
	return volatile.LoadUint32(&o.CTYPE.Reg) & 0x3
}
func (o *SDHOST_Type) SetCTYPE_CARD_WIDTH8(value uint32) {
	volatile.StoreUint32(&o.CTYPE.Reg, volatile.LoadUint32(&o.CTYPE.Reg)&^(0x30000)|value<<16)
}
func (o *SDHOST_Type) GetCTYPE_CARD_WIDTH8() uint32 {
	return (volatile.LoadUint32(&o.CTYPE.Reg) & 0x30000) >> 16
}

// SDHOST.BLKSIZ: Card data block size configuration register
func (o *SDHOST_Type) SetBLKSIZ_BLOCK_SIZE(value uint32) {
	volatile.StoreUint32(&o.BLKSIZ.Reg, volatile.LoadUint32(&o.BLKSIZ.Reg)&^(0xffff)|value)
}
func (o *SDHOST_Type) GetBLKSIZ_BLOCK_SIZE() uint32 {
	return volatile.LoadUint32(&o.BLKSIZ.Reg) & 0xffff
}

// SDHOST.BYTCNT: Data transfer length configuration register
func (o *SDHOST_Type) SetBYTCNT(value uint32) {
	volatile.StoreUint32(&o.BYTCNT.Reg, value)
}
func (o *SDHOST_Type) GetBYTCNT() uint32 {
	return volatile.LoadUint32(&o.BYTCNT.Reg)
}

// SDHOST.INTMASK: SDIO interrupt mask register
func (o *SDHOST_Type) SetINTMASK_INT_MASK(value uint32) {
	volatile.StoreUint32(&o.INTMASK.Reg, volatile.LoadUint32(&o.INTMASK.Reg)&^(0xffff)|value)
}
func (o *SDHOST_Type) GetINTMASK_INT_MASK() uint32 {
	return volatile.LoadUint32(&o.INTMASK.Reg) & 0xffff
}
func (o *SDHOST_Type) SetINTMASK_SDIO_INT_MASK(value uint32) {
	volatile.StoreUint32(&o.INTMASK.Reg, volatile.LoadUint32(&o.INTMASK.Reg)&^(0x30000)|value<<16)
}
func (o *SDHOST_Type) GetINTMASK_SDIO_INT_MASK() uint32 {
	return (volatile.LoadUint32(&o.INTMASK.Reg) & 0x30000) >> 16
}

// SDHOST.CMDARG: Command argument data register
func (o *SDHOST_Type) SetCMDARG(value uint32) {
	volatile.StoreUint32(&o.CMDARG.Reg, value)
}
func (o *SDHOST_Type) GetCMDARG() uint32 {
	return volatile.LoadUint32(&o.CMDARG.Reg)
}

// SDHOST.CMD: Command and boot configuration register
func (o *SDHOST_Type) SetCMD_INDEX(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x3f)|value)
}
func (o *SDHOST_Type) GetCMD_INDEX() uint32 {
	return volatile.LoadUint32(&o.CMD.Reg) & 0x3f
}
func (o *SDHOST_Type) SetCMD_RESPONSE_EXPECT(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x40)|value<<6)
}
func (o *SDHOST_Type) GetCMD_RESPONSE_EXPECT() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x40) >> 6
}
func (o *SDHOST_Type) SetCMD_RESPONSE_LENGTH(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x80)|value<<7)
}
func (o *SDHOST_Type) GetCMD_RESPONSE_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x80) >> 7
}
func (o *SDHOST_Type) SetCMD_CHECK_RESPONSE_CRC(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x100)|value<<8)
}
func (o *SDHOST_Type) GetCMD_CHECK_RESPONSE_CRC() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x100) >> 8
}
func (o *SDHOST_Type) SetCMD_DATA_EXPECTED(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x200)|value<<9)
}
func (o *SDHOST_Type) GetCMD_DATA_EXPECTED() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x200) >> 9
}
func (o *SDHOST_Type) SetCMD_READ_WRITE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x400)|value<<10)
}
func (o *SDHOST_Type) GetCMD_READ_WRITE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x400) >> 10
}
func (o *SDHOST_Type) SetCMD_TRANSFER_MODE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x800)|value<<11)
}
func (o *SDHOST_Type) GetCMD_TRANSFER_MODE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x800) >> 11
}
func (o *SDHOST_Type) SetCMD_SEND_AUTO_STOP(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x1000)|value<<12)
}
func (o *SDHOST_Type) GetCMD_SEND_AUTO_STOP() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x1000) >> 12
}
func (o *SDHOST_Type) SetCMD_WAIT_PRVDATA_COMPLETE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x2000)|value<<13)
}
func (o *SDHOST_Type) GetCMD_WAIT_PRVDATA_COMPLETE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x2000) >> 13
}
func (o *SDHOST_Type) SetCMD_STOP_ABORT_CMD(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x4000)|value<<14)
}
func (o *SDHOST_Type) GetCMD_STOP_ABORT_CMD() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x4000) >> 14
}
func (o *SDHOST_Type) SetCMD_SEND_INITIALIZATION(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x8000)|value<<15)
}
func (o *SDHOST_Type) GetCMD_SEND_INITIALIZATION() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x8000) >> 15
}
func (o *SDHOST_Type) SetCMD_CARD_NUMBER(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x1f0000)|value<<16)
}
func (o *SDHOST_Type) GetCMD_CARD_NUMBER() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x1f0000) >> 16
}
func (o *SDHOST_Type) SetCMD_UPDATE_CLOCK_REGISTERS_ONLY(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x200000)|value<<21)
}
func (o *SDHOST_Type) GetCMD_UPDATE_CLOCK_REGISTERS_ONLY() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x200000) >> 21
}
func (o *SDHOST_Type) SetCMD_READ_CEATA_DEVICE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x400000)|value<<22)
}
func (o *SDHOST_Type) GetCMD_READ_CEATA_DEVICE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x400000) >> 22
}
func (o *SDHOST_Type) SetCMD_CCS_EXPECTED(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x800000)|value<<23)
}
func (o *SDHOST_Type) GetCMD_CCS_EXPECTED() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x800000) >> 23
}
func (o *SDHOST_Type) SetCMD_USE_HOLE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x20000000)|value<<29)
}
func (o *SDHOST_Type) GetCMD_USE_HOLE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x20000000) >> 29
}
func (o *SDHOST_Type) SetCMD_START_CMD(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x80000000)|value<<31)
}
func (o *SDHOST_Type) GetCMD_START_CMD() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x80000000) >> 31
}

// SDHOST.RESP0: Response data register
func (o *SDHOST_Type) SetRESP0(value uint32) {
	volatile.StoreUint32(&o.RESP0.Reg, value)
}
func (o *SDHOST_Type) GetRESP0() uint32 {
	return volatile.LoadUint32(&o.RESP0.Reg)
}

// SDHOST.RESP1: Long response data register
func (o *SDHOST_Type) SetRESP1(value uint32) {
	volatile.StoreUint32(&o.RESP1.Reg, value)
}
func (o *SDHOST_Type) GetRESP1() uint32 {
	return volatile.LoadUint32(&o.RESP1.Reg)
}

// SDHOST.RESP2: Long response data register
func (o *SDHOST_Type) SetRESP2(value uint32) {
	volatile.StoreUint32(&o.RESP2.Reg, value)
}
func (o *SDHOST_Type) GetRESP2() uint32 {
	return volatile.LoadUint32(&o.RESP2.Reg)
}

// SDHOST.RESP3: Long response data register
func (o *SDHOST_Type) SetRESP3(value uint32) {
	volatile.StoreUint32(&o.RESP3.Reg, value)
}
func (o *SDHOST_Type) GetRESP3() uint32 {
	return volatile.LoadUint32(&o.RESP3.Reg)
}

// SDHOST.MINTSTS: Masked interrupt status register
func (o *SDHOST_Type) SetMINTSTS_INT_STATUS_MSK(value uint32) {
	volatile.StoreUint32(&o.MINTSTS.Reg, volatile.LoadUint32(&o.MINTSTS.Reg)&^(0xffff)|value)
}
func (o *SDHOST_Type) GetMINTSTS_INT_STATUS_MSK() uint32 {
	return volatile.LoadUint32(&o.MINTSTS.Reg) & 0xffff
}
func (o *SDHOST_Type) SetMINTSTS_SDIO_INTERRUPT_MSK(value uint32) {
	volatile.StoreUint32(&o.MINTSTS.Reg, volatile.LoadUint32(&o.MINTSTS.Reg)&^(0x30000)|value<<16)
}
func (o *SDHOST_Type) GetMINTSTS_SDIO_INTERRUPT_MSK() uint32 {
	return (volatile.LoadUint32(&o.MINTSTS.Reg) & 0x30000) >> 16
}

// SDHOST.RINTSTS: Raw interrupt status register
func (o *SDHOST_Type) SetRINTSTS_INT_STATUS_RAW(value uint32) {
	volatile.StoreUint32(&o.RINTSTS.Reg, volatile.LoadUint32(&o.RINTSTS.Reg)&^(0xffff)|value)
}
func (o *SDHOST_Type) GetRINTSTS_INT_STATUS_RAW() uint32 {
	return volatile.LoadUint32(&o.RINTSTS.Reg) & 0xffff
}
func (o *SDHOST_Type) SetRINTSTS_SDIO_INTERRUPT_RAW(value uint32) {
	volatile.StoreUint32(&o.RINTSTS.Reg, volatile.LoadUint32(&o.RINTSTS.Reg)&^(0x30000)|value<<16)
}
func (o *SDHOST_Type) GetRINTSTS_SDIO_INTERRUPT_RAW() uint32 {
	return (volatile.LoadUint32(&o.RINTSTS.Reg) & 0x30000) >> 16
}

// SDHOST.STATUS: SD/MMC status register
func (o *SDHOST_Type) SetSTATUS_FIFO_RX_WATERMARK(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x1)|value)
}
func (o *SDHOST_Type) GetSTATUS_FIFO_RX_WATERMARK() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg) & 0x1
}
func (o *SDHOST_Type) SetSTATUS_FIFO_TX_WATERMARK(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x2)|value<<1)
}
func (o *SDHOST_Type) GetSTATUS_FIFO_TX_WATERMARK() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x2) >> 1
}
func (o *SDHOST_Type) SetSTATUS_FIFO_EMPTY(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x4)|value<<2)
}
func (o *SDHOST_Type) GetSTATUS_FIFO_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x4) >> 2
}
func (o *SDHOST_Type) SetSTATUS_FIFO_FULL(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x8)|value<<3)
}
func (o *SDHOST_Type) GetSTATUS_FIFO_FULL() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x8) >> 3
}
func (o *SDHOST_Type) SetSTATUS_COMMAND_FSM_STATES(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xf0)|value<<4)
}
func (o *SDHOST_Type) GetSTATUS_COMMAND_FSM_STATES() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xf0) >> 4
}
func (o *SDHOST_Type) SetSTATUS_DATA_3_STATUS(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x100)|value<<8)
}
func (o *SDHOST_Type) GetSTATUS_DATA_3_STATUS() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x100) >> 8
}
func (o *SDHOST_Type) SetSTATUS_DATA_BUSY(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x200)|value<<9)
}
func (o *SDHOST_Type) GetSTATUS_DATA_BUSY() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x200) >> 9
}
func (o *SDHOST_Type) SetSTATUS_DATA_STATE_MC_BUSY(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x400)|value<<10)
}
func (o *SDHOST_Type) GetSTATUS_DATA_STATE_MC_BUSY() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x400) >> 10
}
func (o *SDHOST_Type) SetSTATUS_RESPONSE_INDEX(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x1f800)|value<<11)
}
func (o *SDHOST_Type) GetSTATUS_RESPONSE_INDEX() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x1f800) >> 11
}
func (o *SDHOST_Type) SetSTATUS_FIFO_COUNT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x3ffe0000)|value<<17)
}
func (o *SDHOST_Type) GetSTATUS_FIFO_COUNT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x3ffe0000) >> 17
}

// SDHOST.FIFOTH: FIFO configuration register
func (o *SDHOST_Type) SetFIFOTH_TX_WMARK(value uint32) {
	volatile.StoreUint32(&o.FIFOTH.Reg, volatile.LoadUint32(&o.FIFOTH.Reg)&^(0xfff)|value)
}
func (o *SDHOST_Type) GetFIFOTH_TX_WMARK() uint32 {
	return volatile.LoadUint32(&o.FIFOTH.Reg) & 0xfff
}
func (o *SDHOST_Type) SetFIFOTH_RX_WMARK(value uint32) {
	volatile.StoreUint32(&o.FIFOTH.Reg, volatile.LoadUint32(&o.FIFOTH.Reg)&^(0x7ff0000)|value<<16)
}
func (o *SDHOST_Type) GetFIFOTH_RX_WMARK() uint32 {
	return (volatile.LoadUint32(&o.FIFOTH.Reg) & 0x7ff0000) >> 16
}
func (o *SDHOST_Type) SetFIFOTH_DMA_MULTIPLE_TRANSACTION_SIZE(value uint32) {
	volatile.StoreUint32(&o.FIFOTH.Reg, volatile.LoadUint32(&o.FIFOTH.Reg)&^(0x70000000)|value<<28)
}
func (o *SDHOST_Type) GetFIFOTH_DMA_MULTIPLE_TRANSACTION_SIZE() uint32 {
	return (volatile.LoadUint32(&o.FIFOTH.Reg) & 0x70000000) >> 28
}

// SDHOST.CDETECT: Card detect register
func (o *SDHOST_Type) SetCDETECT_CARD_DETECT_N(value uint32) {
	volatile.StoreUint32(&o.CDETECT.Reg, volatile.LoadUint32(&o.CDETECT.Reg)&^(0x3)|value)
}
func (o *SDHOST_Type) GetCDETECT_CARD_DETECT_N() uint32 {
	return volatile.LoadUint32(&o.CDETECT.Reg) & 0x3
}

// SDHOST.WRTPRT: Card write protection (WP) status register
func (o *SDHOST_Type) SetWRTPRT_WRITE_PROTECT(value uint32) {
	volatile.StoreUint32(&o.WRTPRT.Reg, volatile.LoadUint32(&o.WRTPRT.Reg)&^(0x3)|value)
}
func (o *SDHOST_Type) GetWRTPRT_WRITE_PROTECT() uint32 {
	return volatile.LoadUint32(&o.WRTPRT.Reg) & 0x3
}

// SDHOST.TCBCNT: Transferred byte count register
func (o *SDHOST_Type) SetTCBCNT(value uint32) {
	volatile.StoreUint32(&o.TCBCNT.Reg, value)
}
func (o *SDHOST_Type) GetTCBCNT() uint32 {
	return volatile.LoadUint32(&o.TCBCNT.Reg)
}

// SDHOST.TBBCNT: Transferred byte count register
func (o *SDHOST_Type) SetTBBCNT(value uint32) {
	volatile.StoreUint32(&o.TBBCNT.Reg, value)
}
func (o *SDHOST_Type) GetTBBCNT() uint32 {
	return volatile.LoadUint32(&o.TBBCNT.Reg)
}

// SDHOST.DEBNCE: Debounce filter time configuration register
func (o *SDHOST_Type) SetDEBNCE_DEBOUNCE_COUNT(value uint32) {
	volatile.StoreUint32(&o.DEBNCE.Reg, volatile.LoadUint32(&o.DEBNCE.Reg)&^(0xffffff)|value)
}
func (o *SDHOST_Type) GetDEBNCE_DEBOUNCE_COUNT() uint32 {
	return volatile.LoadUint32(&o.DEBNCE.Reg) & 0xffffff
}

// SDHOST.USRID: User ID (scratchpad) register
func (o *SDHOST_Type) SetUSRID(value uint32) {
	volatile.StoreUint32(&o.USRID.Reg, value)
}
func (o *SDHOST_Type) GetUSRID() uint32 {
	return volatile.LoadUint32(&o.USRID.Reg)
}

// SDHOST.VERID: Version ID (scratchpad) register
func (o *SDHOST_Type) SetVERID(value uint32) {
	volatile.StoreUint32(&o.VERID.Reg, value)
}
func (o *SDHOST_Type) GetVERID() uint32 {
	return volatile.LoadUint32(&o.VERID.Reg)
}

// SDHOST.HCON: Hardware feature register
func (o *SDHOST_Type) SetHCON_CARD_TYPE(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x1)|value)
}
func (o *SDHOST_Type) GetHCON_CARD_TYPE() uint32 {
	return volatile.LoadUint32(&o.HCON.Reg) & 0x1
}
func (o *SDHOST_Type) SetHCON_CARD_NUM(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x3e)|value<<1)
}
func (o *SDHOST_Type) GetHCON_CARD_NUM() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0x3e) >> 1
}
func (o *SDHOST_Type) SetHCON_BUS_TYPE(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x40)|value<<6)
}
func (o *SDHOST_Type) GetHCON_BUS_TYPE() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0x40) >> 6
}
func (o *SDHOST_Type) SetHCON_DATA_WIDTH(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x380)|value<<7)
}
func (o *SDHOST_Type) GetHCON_DATA_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0x380) >> 7
}
func (o *SDHOST_Type) SetHCON_ADDR_WIDTH(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0xfc00)|value<<10)
}
func (o *SDHOST_Type) GetHCON_ADDR_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0xfc00) >> 10
}
func (o *SDHOST_Type) SetHCON_DMA_WIDTH(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x1c0000)|value<<18)
}
func (o *SDHOST_Type) GetHCON_DMA_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0x1c0000) >> 18
}
func (o *SDHOST_Type) SetHCON_RAM_INDISE(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x200000)|value<<21)
}
func (o *SDHOST_Type) GetHCON_RAM_INDISE() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0x200000) >> 21
}
func (o *SDHOST_Type) SetHCON_HOLD(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x400000)|value<<22)
}
func (o *SDHOST_Type) GetHCON_HOLD() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0x400000) >> 22
}
func (o *SDHOST_Type) SetHCON_NUM_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.HCON.Reg, volatile.LoadUint32(&o.HCON.Reg)&^(0x3000000)|value<<24)
}
func (o *SDHOST_Type) GetHCON_NUM_CLK_DIV() uint32 {
	return (volatile.LoadUint32(&o.HCON.Reg) & 0x3000000) >> 24
}

// SDHOST.UHS: UHS-1 register
func (o *SDHOST_Type) SetUHS_DDR(value uint32) {
	volatile.StoreUint32(&o.UHS.Reg, volatile.LoadUint32(&o.UHS.Reg)&^(0x30000)|value<<16)
}
func (o *SDHOST_Type) GetUHS_DDR() uint32 {
	return (volatile.LoadUint32(&o.UHS.Reg) & 0x30000) >> 16
}

// SDHOST.RST_N: Card reset register
func (o *SDHOST_Type) SetRST_N_CARD_RESET(value uint32) {
	volatile.StoreUint32(&o.RST_N.Reg, volatile.LoadUint32(&o.RST_N.Reg)&^(0x3)|value)
}
func (o *SDHOST_Type) GetRST_N_CARD_RESET() uint32 {
	return volatile.LoadUint32(&o.RST_N.Reg) & 0x3
}

// SDHOST.BMOD: Burst mode transfer configuration register
func (o *SDHOST_Type) SetBMOD_SWR(value uint32) {
	volatile.StoreUint32(&o.BMOD.Reg, volatile.LoadUint32(&o.BMOD.Reg)&^(0x1)|value)
}
func (o *SDHOST_Type) GetBMOD_SWR() uint32 {
	return volatile.LoadUint32(&o.BMOD.Reg) & 0x1
}
func (o *SDHOST_Type) SetBMOD_FB(value uint32) {
	volatile.StoreUint32(&o.BMOD.Reg, volatile.LoadUint32(&o.BMOD.Reg)&^(0x2)|value<<1)
}
func (o *SDHOST_Type) GetBMOD_FB() uint32 {
	return (volatile.LoadUint32(&o.BMOD.Reg) & 0x2) >> 1
}
func (o *SDHOST_Type) SetBMOD_DE(value uint32) {
	volatile.StoreUint32(&o.BMOD.Reg, volatile.LoadUint32(&o.BMOD.Reg)&^(0x80)|value<<7)
}
func (o *SDHOST_Type) GetBMOD_DE() uint32 {
	return (volatile.LoadUint32(&o.BMOD.Reg) & 0x80) >> 7
}
func (o *SDHOST_Type) SetBMOD_PBL(value uint32) {
	volatile.StoreUint32(&o.BMOD.Reg, volatile.LoadUint32(&o.BMOD.Reg)&^(0x700)|value<<8)
}
func (o *SDHOST_Type) GetBMOD_PBL() uint32 {
	return (volatile.LoadUint32(&o.BMOD.Reg) & 0x700) >> 8
}

// SDHOST.PLDMND: Poll demand configuration register
func (o *SDHOST_Type) SetPLDMND(value uint32) {
	volatile.StoreUint32(&o.PLDMND.Reg, value)
}
func (o *SDHOST_Type) GetPLDMND() uint32 {
	return volatile.LoadUint32(&o.PLDMND.Reg)
}

// SDHOST.DBADDR: Descriptor base address register
func (o *SDHOST_Type) SetDBADDR(value uint32) {
	volatile.StoreUint32(&o.DBADDR.Reg, value)
}
func (o *SDHOST_Type) GetDBADDR() uint32 {
	return volatile.LoadUint32(&o.DBADDR.Reg)
}

// SDHOST.IDSTS: IDMAC status register
func (o *SDHOST_Type) SetIDSTS_TI(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x1)|value)
}
func (o *SDHOST_Type) GetIDSTS_TI() uint32 {
	return volatile.LoadUint32(&o.IDSTS.Reg) & 0x1
}
func (o *SDHOST_Type) SetIDSTS_RI(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x2)|value<<1)
}
func (o *SDHOST_Type) GetIDSTS_RI() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x2) >> 1
}
func (o *SDHOST_Type) SetIDSTS_FBE(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x4)|value<<2)
}
func (o *SDHOST_Type) GetIDSTS_FBE() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x4) >> 2
}
func (o *SDHOST_Type) SetIDSTS_DU(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x10)|value<<4)
}
func (o *SDHOST_Type) GetIDSTS_DU() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x10) >> 4
}
func (o *SDHOST_Type) SetIDSTS_CES(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x20)|value<<5)
}
func (o *SDHOST_Type) GetIDSTS_CES() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x20) >> 5
}
func (o *SDHOST_Type) SetIDSTS_NIS(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x100)|value<<8)
}
func (o *SDHOST_Type) GetIDSTS_NIS() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x100) >> 8
}
func (o *SDHOST_Type) SetIDSTS_AIS(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x200)|value<<9)
}
func (o *SDHOST_Type) GetIDSTS_AIS() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x200) >> 9
}
func (o *SDHOST_Type) SetIDSTS_FBE_CODE(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x1c00)|value<<10)
}
func (o *SDHOST_Type) GetIDSTS_FBE_CODE() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x1c00) >> 10
}
func (o *SDHOST_Type) SetIDSTS_FSM(value uint32) {
	volatile.StoreUint32(&o.IDSTS.Reg, volatile.LoadUint32(&o.IDSTS.Reg)&^(0x1e000)|value<<13)
}
func (o *SDHOST_Type) GetIDSTS_FSM() uint32 {
	return (volatile.LoadUint32(&o.IDSTS.Reg) & 0x1e000) >> 13
}

// SDHOST.IDINTEN: IDMAC interrupt enable register
func (o *SDHOST_Type) SetIDINTEN_TI(value uint32) {
	volatile.StoreUint32(&o.IDINTEN.Reg, volatile.LoadUint32(&o.IDINTEN.Reg)&^(0x1)|value)
}
func (o *SDHOST_Type) GetIDINTEN_TI() uint32 {
	return volatile.LoadUint32(&o.IDINTEN.Reg) & 0x1
}
func (o *SDHOST_Type) SetIDINTEN_RI(value uint32) {
	volatile.StoreUint32(&o.IDINTEN.Reg, volatile.LoadUint32(&o.IDINTEN.Reg)&^(0x2)|value<<1)
}
func (o *SDHOST_Type) GetIDINTEN_RI() uint32 {
	return (volatile.LoadUint32(&o.IDINTEN.Reg) & 0x2) >> 1
}
func (o *SDHOST_Type) SetIDINTEN_FBE(value uint32) {
	volatile.StoreUint32(&o.IDINTEN.Reg, volatile.LoadUint32(&o.IDINTEN.Reg)&^(0x4)|value<<2)
}
func (o *SDHOST_Type) GetIDINTEN_FBE() uint32 {
	return (volatile.LoadUint32(&o.IDINTEN.Reg) & 0x4) >> 2
}
func (o *SDHOST_Type) SetIDINTEN_DU(value uint32) {
	volatile.StoreUint32(&o.IDINTEN.Reg, volatile.LoadUint32(&o.IDINTEN.Reg)&^(0x10)|value<<4)
}
func (o *SDHOST_Type) GetIDINTEN_DU() uint32 {
	return (volatile.LoadUint32(&o.IDINTEN.Reg) & 0x10) >> 4
}
func (o *SDHOST_Type) SetIDINTEN_CES(value uint32) {
	volatile.StoreUint32(&o.IDINTEN.Reg, volatile.LoadUint32(&o.IDINTEN.Reg)&^(0x20)|value<<5)
}
func (o *SDHOST_Type) GetIDINTEN_CES() uint32 {
	return (volatile.LoadUint32(&o.IDINTEN.Reg) & 0x20) >> 5
}
func (o *SDHOST_Type) SetIDINTEN_NI(value uint32) {
	volatile.StoreUint32(&o.IDINTEN.Reg, volatile.LoadUint32(&o.IDINTEN.Reg)&^(0x100)|value<<8)
}
func (o *SDHOST_Type) GetIDINTEN_NI() uint32 {
	return (volatile.LoadUint32(&o.IDINTEN.Reg) & 0x100) >> 8
}
func (o *SDHOST_Type) SetIDINTEN_AI(value uint32) {
	volatile.StoreUint32(&o.IDINTEN.Reg, volatile.LoadUint32(&o.IDINTEN.Reg)&^(0x200)|value<<9)
}
func (o *SDHOST_Type) GetIDINTEN_AI() uint32 {
	return (volatile.LoadUint32(&o.IDINTEN.Reg) & 0x200) >> 9
}

// SDHOST.DSCADDR: Host descriptor address pointer
func (o *SDHOST_Type) SetDSCADDR(value uint32) {
	volatile.StoreUint32(&o.DSCADDR.Reg, value)
}
func (o *SDHOST_Type) GetDSCADDR() uint32 {
	return volatile.LoadUint32(&o.DSCADDR.Reg)
}

// SDHOST.BUFADDR: Host buffer address pointer register
func (o *SDHOST_Type) SetBUFADDR(value uint32) {
	volatile.StoreUint32(&o.BUFADDR.Reg, value)
}
func (o *SDHOST_Type) GetBUFADDR() uint32 {
	return volatile.LoadUint32(&o.BUFADDR.Reg)
}

// SDHOST.CARDTHRCTL: Card Threshold Control register
func (o *SDHOST_Type) SetCARDTHRCTL_CARDRDTHREN(value uint32) {
	volatile.StoreUint32(&o.CARDTHRCTL.Reg, volatile.LoadUint32(&o.CARDTHRCTL.Reg)&^(0x1)|value)
}
func (o *SDHOST_Type) GetCARDTHRCTL_CARDRDTHREN() uint32 {
	return volatile.LoadUint32(&o.CARDTHRCTL.Reg) & 0x1
}
func (o *SDHOST_Type) SetCARDTHRCTL_CARDCLRINTEN(value uint32) {
	volatile.StoreUint32(&o.CARDTHRCTL.Reg, volatile.LoadUint32(&o.CARDTHRCTL.Reg)&^(0x2)|value<<1)
}
func (o *SDHOST_Type) GetCARDTHRCTL_CARDCLRINTEN() uint32 {
	return (volatile.LoadUint32(&o.CARDTHRCTL.Reg) & 0x2) >> 1
}
func (o *SDHOST_Type) SetCARDTHRCTL_CARDWRTHREN(value uint32) {
	volatile.StoreUint32(&o.CARDTHRCTL.Reg, volatile.LoadUint32(&o.CARDTHRCTL.Reg)&^(0x4)|value<<2)
}
func (o *SDHOST_Type) GetCARDTHRCTL_CARDWRTHREN() uint32 {
	return (volatile.LoadUint32(&o.CARDTHRCTL.Reg) & 0x4) >> 2
}
func (o *SDHOST_Type) SetCARDTHRCTL_CARDTHRESHOLD(value uint32) {
	volatile.StoreUint32(&o.CARDTHRCTL.Reg, volatile.LoadUint32(&o.CARDTHRCTL.Reg)&^(0xffff0000)|value<<16)
}
func (o *SDHOST_Type) GetCARDTHRCTL_CARDTHRESHOLD() uint32 {
	return (volatile.LoadUint32(&o.CARDTHRCTL.Reg) & 0xffff0000) >> 16
}

// SDHOST.EMMCDDR: eMMC DDR register
func (o *SDHOST_Type) SetEMMCDDR_HALFSTARTBIT(value uint32) {
	volatile.StoreUint32(&o.EMMCDDR.Reg, volatile.LoadUint32(&o.EMMCDDR.Reg)&^(0x3)|value)
}
func (o *SDHOST_Type) GetEMMCDDR_HALFSTARTBIT() uint32 {
	return volatile.LoadUint32(&o.EMMCDDR.Reg) & 0x3
}
func (o *SDHOST_Type) SetEMMCDDR_HS400_MODE(value uint32) {
	volatile.StoreUint32(&o.EMMCDDR.Reg, volatile.LoadUint32(&o.EMMCDDR.Reg)&^(0x80000000)|value<<31)
}
func (o *SDHOST_Type) GetEMMCDDR_HS400_MODE() uint32 {
	return (volatile.LoadUint32(&o.EMMCDDR.Reg) & 0x80000000) >> 31
}

// SDHOST.ENSHIFT: Enable Phase Shift register
func (o *SDHOST_Type) SetENSHIFT_ENABLE_SHIFT(value uint32) {
	volatile.StoreUint32(&o.ENSHIFT.Reg, volatile.LoadUint32(&o.ENSHIFT.Reg)&^(0xf)|value)
}
func (o *SDHOST_Type) GetENSHIFT_ENABLE_SHIFT() uint32 {
	return volatile.LoadUint32(&o.ENSHIFT.Reg) & 0xf
}

// SDHOST.BUFFIFO: CPU write and read transmit data by FIFO
func (o *SDHOST_Type) SetBUFFIFO(value uint32) {
	volatile.StoreUint32(&o.BUFFIFO.Reg, value)
}
func (o *SDHOST_Type) GetBUFFIFO() uint32 {
	return volatile.LoadUint32(&o.BUFFIFO.Reg)
}

// SDHOST.CLK_EDGE_SEL: SDIO control register.
func (o *SDHOST_Type) SetCLK_EDGE_SEL_CCLKIN_EDGE_DRV_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x7)|value)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_CCLKIN_EDGE_DRV_SEL() uint32 {
	return volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x7
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_CCLKIN_EDGE_SAM_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x38)|value<<3)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_CCLKIN_EDGE_SAM_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x38) >> 3
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_CCLKIN_EDGE_SLF_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x1c0)|value<<6)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_CCLKIN_EDGE_SLF_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x1c0) >> 6
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_CCLLKIN_EDGE_H(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x1e00)|value<<9)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_CCLLKIN_EDGE_H() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x1e00) >> 9
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_CCLLKIN_EDGE_L(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x1e000)|value<<13)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_CCLLKIN_EDGE_L() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x1e000) >> 13
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_CCLLKIN_EDGE_N(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x1e0000)|value<<17)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_CCLLKIN_EDGE_N() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x1e0000) >> 17
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_ESDIO_MODE(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x200000)|value<<21)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_ESDIO_MODE() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x200000) >> 21
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_ESD_MODE(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x400000)|value<<22)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_ESD_MODE() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x400000) >> 22
}
func (o *SDHOST_Type) SetCLK_EDGE_SEL_CCLK_EN(value uint32) {
	volatile.StoreUint32(&o.CLK_EDGE_SEL.Reg, volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg)&^(0x800000)|value<<23)
}
func (o *SDHOST_Type) GetCLK_EDGE_SEL_CCLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK_EDGE_SEL.Reg) & 0x800000) >> 23
}

// SENS Peripheral
type SENS_Type struct {
	SAR_READ_CTRL     volatile.Register32 // 0x0
	SAR_READ_STATUS1  volatile.Register32 // 0x4
	SAR_MEAS_WAIT1    volatile.Register32 // 0x8
	SAR_MEAS_WAIT2    volatile.Register32 // 0xC
	SAR_MEAS_CTRL     volatile.Register32 // 0x10
	SAR_READ_STATUS2  volatile.Register32 // 0x14
	ULP_CP_SLEEP_CYC0 volatile.Register32 // 0x18
	ULP_CP_SLEEP_CYC1 volatile.Register32 // 0x1C
	ULP_CP_SLEEP_CYC2 volatile.Register32 // 0x20
	ULP_CP_SLEEP_CYC3 volatile.Register32 // 0x24
	ULP_CP_SLEEP_CYC4 volatile.Register32 // 0x28
	SAR_START_FORCE   volatile.Register32 // 0x2C
	SAR_MEM_WR_CTRL   volatile.Register32 // 0x30
	SAR_ATTEN1        volatile.Register32 // 0x34
	SAR_ATTEN2        volatile.Register32 // 0x38
	SAR_SLAVE_ADDR1   volatile.Register32 // 0x3C
	SAR_SLAVE_ADDR2   volatile.Register32 // 0x40
	SAR_SLAVE_ADDR3   volatile.Register32 // 0x44
	SAR_SLAVE_ADDR4   volatile.Register32 // 0x48
	SAR_TSENS_CTRL    volatile.Register32 // 0x4C
	SAR_I2C_CTRL      volatile.Register32 // 0x50
	SAR_MEAS_START1   volatile.Register32 // 0x54
	SAR_TOUCH_CTRL1   volatile.Register32 // 0x58
	SAR_TOUCH_THRES1  volatile.Register32 // 0x5C
	SAR_TOUCH_THRES2  volatile.Register32 // 0x60
	SAR_TOUCH_THRES3  volatile.Register32 // 0x64
	SAR_TOUCH_THRES4  volatile.Register32 // 0x68
	SAR_TOUCH_THRES5  volatile.Register32 // 0x6C
	SAR_TOUCH_OUT1    volatile.Register32 // 0x70
	SAR_TOUCH_OUT2    volatile.Register32 // 0x74
	SAR_TOUCH_OUT3    volatile.Register32 // 0x78
	SAR_TOUCH_OUT4    volatile.Register32 // 0x7C
	SAR_TOUCH_OUT5    volatile.Register32 // 0x80
	SAR_TOUCH_CTRL2   volatile.Register32 // 0x84
	_                 [4]byte
	SAR_TOUCH_ENABLE  volatile.Register32 // 0x8C
	SAR_READ_CTRL2    volatile.Register32 // 0x90
	SAR_MEAS_START2   volatile.Register32 // 0x94
	SAR_DAC_CTRL1     volatile.Register32 // 0x98
	SAR_DAC_CTRL2     volatile.Register32 // 0x9C
	SAR_MEAS_CTRL2    volatile.Register32 // 0xA0
	_                 [84]byte
	SAR_NOUSE         volatile.Register32 // 0xF8
	SARDATE           volatile.Register32 // 0xFC
}

// SENS.SAR_READ_CTRL
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0xff)|value)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_CLK_DIV() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0xff
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_SAMPLE_CYCLE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0xff00)|value<<8)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_SAMPLE_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0xff00) >> 8
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_SAMPLE_BIT(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_SAMPLE_BIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_SAMPLE_NUM(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x7f80000)|value<<19)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_SAMPLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x7f80000) >> 19
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_DIG_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x8000000)|value<<27)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_DIG_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x8000000) >> 27
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_DATA_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x10000000)|value<<28)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_DATA_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x10000000) >> 28
}

// SENS.SAR_READ_STATUS1
func (o *SENS_Type) SetSAR_READ_STATUS1(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_STATUS1.Reg, value)
}
func (o *SENS_Type) GetSAR_READ_STATUS1() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_STATUS1.Reg)
}

// SENS.SAR_MEAS_WAIT1
func (o *SENS_Type) SetSAR_MEAS_WAIT1_SAR_AMP_WAIT1(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT1.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT1_SAR_AMP_WAIT1() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_MEAS_WAIT1_SAR_AMP_WAIT2(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT1.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT1_SAR_AMP_WAIT2() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_MEAS_WAIT2
func (o *SENS_Type) SetSAR_MEAS_WAIT2_FORCE_XPD_SAR_SW(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0x1)|value)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_FORCE_XPD_SAR_SW() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0x1
}
func (o *SENS_Type) SetSAR_MEAS_WAIT2_SAR_AMP_WAIT3(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_SAR_AMP_WAIT3() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_MEAS_WAIT2_FORCE_XPD_AMP(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_FORCE_XPD_AMP() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_WAIT2_FORCE_XPD_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0xc0000)|value<<18)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_FORCE_XPD_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0xc0000) >> 18
}
func (o *SENS_Type) SetSAR_MEAS_WAIT2_SAR2_RSTB_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0xff00000)|value<<20)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_SAR2_RSTB_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0xff00000) >> 20
}

// SENS.SAR_MEAS_CTRL
func (o *SENS_Type) SetSAR_MEAS_CTRL_XPD_SAR_AMP_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf)|value)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_XPD_SAR_AMP_FSM() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_AMP_RST_FB_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf0)|value<<4)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_AMP_RST_FB_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf0) >> 4
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_AMP_SHORT_REF_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf00)|value<<8)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_AMP_SHORT_REF_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf00) >> 8
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf000)|value<<12)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf000) >> 12
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_XPD_SAR_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf0000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_XPD_SAR_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf0000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_SAR_RSTB_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf00000)|value<<20)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_SAR_RSTB_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf00000) >> 20
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_SAR2_XPD_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xff000000)|value<<24)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_SAR2_XPD_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xff000000) >> 24
}

// SENS.SAR_READ_STATUS2
func (o *SENS_Type) SetSAR_READ_STATUS2(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_STATUS2.Reg, value)
}
func (o *SENS_Type) GetSAR_READ_STATUS2() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_STATUS2.Reg)
}

// SENS.ULP_CP_SLEEP_CYC0
func (o *SENS_Type) SetULP_CP_SLEEP_CYC0(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC0.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC0() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC0.Reg)
}

// SENS.ULP_CP_SLEEP_CYC1
func (o *SENS_Type) SetULP_CP_SLEEP_CYC1(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC1.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC1() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC1.Reg)
}

// SENS.ULP_CP_SLEEP_CYC2
func (o *SENS_Type) SetULP_CP_SLEEP_CYC2(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC2.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC2() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC2.Reg)
}

// SENS.ULP_CP_SLEEP_CYC3
func (o *SENS_Type) SetULP_CP_SLEEP_CYC3(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC3.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC3() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC3.Reg)
}

// SENS.ULP_CP_SLEEP_CYC4
func (o *SENS_Type) SetULP_CP_SLEEP_CYC4(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC4.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC4() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC4.Reg)
}

// SENS.SAR_START_FORCE
func (o *SENS_Type) SetSAR_START_FORCE_SAR1_BIT_WIDTH(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x3)|value)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR1_BIT_WIDTH() uint32 {
	return volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x3
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_BIT_WIDTH(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0xc)|value<<2)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_BIT_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0xc) >> 2
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_EN_TEST(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x10)|value<<4)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_EN_TEST() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x10) >> 4
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_PWDET_CCT(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0xe0)|value<<5)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_PWDET_CCT() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0xe0) >> 5
}
func (o *SENS_Type) SetSAR_START_FORCE_ULP_CP_FORCE_START_TOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x100)|value<<8)
}
func (o *SENS_Type) GetSAR_START_FORCE_ULP_CP_FORCE_START_TOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x100) >> 8
}
func (o *SENS_Type) SetSAR_START_FORCE_ULP_CP_START_TOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x200)|value<<9)
}
func (o *SENS_Type) GetSAR_START_FORCE_ULP_CP_START_TOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x200) >> 9
}
func (o *SENS_Type) SetSAR_START_FORCE_SARCLK_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *SENS_Type) GetSAR_START_FORCE_SARCLK_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x400) >> 10
}
func (o *SENS_Type) SetSAR_START_FORCE_PC_INIT(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_START_FORCE_PC_INIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_STOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x400000)|value<<22)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_STOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x400000) >> 22
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR1_STOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x800000)|value<<23)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR1_STOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x800000) >> 23
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_PWDET_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_PWDET_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x1000000) >> 24
}

// SENS.SAR_MEM_WR_CTRL
func (o *SENS_Type) SetSAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT(value uint32) {
	volatile.StoreUint32(&o.SAR_MEM_WR_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT() uint32 {
	return volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg) & 0x7ff
}
func (o *SENS_Type) SetSAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEM_WR_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEM_WR_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg)&^(0x400000)|value<<22)
}
func (o *SENS_Type) GetSAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg) & 0x400000) >> 22
}

// SENS.SAR_ATTEN1
func (o *SENS_Type) SetSAR_ATTEN1(value uint32) {
	volatile.StoreUint32(&o.SAR_ATTEN1.Reg, value)
}
func (o *SENS_Type) GetSAR_ATTEN1() uint32 {
	return volatile.LoadUint32(&o.SAR_ATTEN1.Reg)
}

// SENS.SAR_ATTEN2
func (o *SENS_Type) SetSAR_ATTEN2(value uint32) {
	volatile.StoreUint32(&o.SAR_ATTEN2.Reg, value)
}
func (o *SENS_Type) GetSAR_ATTEN2() uint32 {
	return volatile.LoadUint32(&o.SAR_ATTEN2.Reg)
}

// SENS.SAR_SLAVE_ADDR1
func (o *SENS_Type) SetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR1.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg) & 0x7ff
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR1.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR1_MEAS_STATUS(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR1.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg)&^(0x3fc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR1_MEAS_STATUS() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg) & 0x3fc00000) >> 22
}

// SENS.SAR_SLAVE_ADDR2
func (o *SENS_Type) SetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR2.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg) & 0x7ff
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR2.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg) & 0x3ff800) >> 11
}

// SENS.SAR_SLAVE_ADDR3
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x7ff
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_TSENS_OUT(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x3fc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_TSENS_OUT() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x3fc00000) >> 22
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_TSENS_RDY_OUT(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x40000000)|value<<30)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_TSENS_RDY_OUT() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x40000000) >> 30
}

// SENS.SAR_SLAVE_ADDR4
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x7ff
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_RDATA(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x3fc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_RDATA() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x3fc00000) >> 22
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_DONE(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x40000000)|value<<30)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_DONE() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x40000000) >> 30
}

// SENS.SAR_TSENS_CTRL
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_XPD_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0xfff)|value)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_XPD_WAIT() uint32 {
	return volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0xfff
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_XPD_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_XPD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x1000) >> 12
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_CLK_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_CLK_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x2000) >> 13
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x4000) >> 14
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_IN_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_IN_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x8000) >> 15
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0xff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_CLK_DIV() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0xff0000) >> 16
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_POWER_UP(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_POWER_UP() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_POWER_UP_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_POWER_UP_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x2000000) >> 25
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_DUMP_OUT(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x4000000)|value<<26)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_DUMP_OUT() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x4000000) >> 26
}

// SENS.SAR_I2C_CTRL
func (o *SENS_Type) SetSAR_I2C_CTRL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_CTRL.Reg, volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg)&^(0xfffffff)|value)
}
func (o *SENS_Type) GetSAR_I2C_CTRL() uint32 {
	return volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg) & 0xfffffff
}
func (o *SENS_Type) SetSAR_I2C_CTRL_SAR_I2C_START(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_CTRL.Reg, volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg)&^(0x10000000)|value<<28)
}
func (o *SENS_Type) GetSAR_I2C_CTRL_SAR_I2C_START() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg) & 0x10000000) >> 28
}
func (o *SENS_Type) SetSAR_I2C_CTRL_SAR_I2C_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_CTRL.Reg, volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg)&^(0x20000000)|value<<29)
}
func (o *SENS_Type) GetSAR_I2C_CTRL_SAR_I2C_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg) & 0x20000000) >> 29
}

// SENS.SAR_MEAS_START1
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_DATA_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_DATA_SAR() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_DONE_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x10000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_DONE_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x10000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_START_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x20000)|value<<17)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_START_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x20000) >> 17
}
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_MEAS_START1_SAR1_EN_PAD(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x7ff80000)|value<<19)
}
func (o *SENS_Type) GetSAR_MEAS_START1_SAR1_EN_PAD() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x7ff80000) >> 19
}
func (o *SENS_Type) SetSAR_MEAS_START1_SAR1_EN_PAD_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x80000000)|value<<31)
}
func (o *SENS_Type) GetSAR_MEAS_START1_SAR1_EN_PAD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x80000000) >> 31
}

// SENS.SAR_TOUCH_CTRL1
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_XPD_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0xff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_XPD_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0xff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_OUT_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_OUT_1EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_OUT_1EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x2000000) >> 25
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_XPD_HALL_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x4000000)|value<<26)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_XPD_HALL_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x4000000) >> 26
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_HALL_PHASE_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x8000000)|value<<27)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_HALL_PHASE_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x8000000) >> 27
}

// SENS.SAR_TOUCH_THRES1
func (o *SENS_Type) SetSAR_TOUCH_THRES1_TOUCH_OUT_TH1(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES1_TOUCH_OUT_TH1() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_THRES1_TOUCH_OUT_TH0(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES1_TOUCH_OUT_TH0() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_THRES2
func (o *SENS_Type) SetSAR_TOUCH_THRES2_TOUCH_OUT_TH3(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES2_TOUCH_OUT_TH3() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_THRES2_TOUCH_OUT_TH2(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES2_TOUCH_OUT_TH2() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_THRES3
func (o *SENS_Type) SetSAR_TOUCH_THRES3_TOUCH_OUT_TH5(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES3_TOUCH_OUT_TH5() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_THRES3_TOUCH_OUT_TH4(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES3_TOUCH_OUT_TH4() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_THRES4
func (o *SENS_Type) SetSAR_TOUCH_THRES4_TOUCH_OUT_TH7(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES4_TOUCH_OUT_TH7() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_THRES4_TOUCH_OUT_TH6(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES4_TOUCH_OUT_TH6() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_THRES5
func (o *SENS_Type) SetSAR_TOUCH_THRES5_TOUCH_OUT_TH9(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES5_TOUCH_OUT_TH9() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_THRES5_TOUCH_OUT_TH8(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES5_TOUCH_OUT_TH8() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_OUT1
func (o *SENS_Type) SetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT1(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT1() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT0(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT0() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_OUT2
func (o *SENS_Type) SetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT3(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT3() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT2(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT2() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_OUT3
func (o *SENS_Type) SetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT5(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT5() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT4(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT4() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_OUT4
func (o *SENS_Type) SetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT7(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT7() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT6(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT6() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_OUT5
func (o *SENS_Type) SetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT9(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT9() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT8(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT8() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg) & 0xffff0000) >> 16
}

// SENS.SAR_TOUCH_CTRL2
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x3ff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x3ff
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_MEAS_DONE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x400)|value<<10)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_MEAS_DONE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x400) >> 10
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_START_FSM_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x800)|value<<11)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_START_FSM_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x800) >> 11
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_START_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x1000)|value<<12)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_START_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x1000) >> 12
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x2000)|value<<13)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x2000) >> 13
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x3fffc000)|value<<14)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x3fffc000) >> 14
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x40000000)|value<<30)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x40000000) >> 30
}

// SENS.SAR_TOUCH_ENABLE
func (o *SENS_Type) SetSAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_ENABLE.Reg, volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg)&^(0x3ff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg) & 0x3ff
}
func (o *SENS_Type) SetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_ENABLE.Reg, volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg)&^(0xffc00)|value<<10)
}
func (o *SENS_Type) GetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg) & 0xffc00) >> 10
}
func (o *SENS_Type) SetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_ENABLE.Reg, volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg)&^(0x3ff00000)|value<<20)
}
func (o *SENS_Type) GetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg) & 0x3ff00000) >> 20
}

// SENS.SAR_READ_CTRL2
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0xff)|value)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_CLK_DIV() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0xff
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_SAMPLE_CYCLE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0xff00)|value<<8)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_SAMPLE_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0xff00) >> 8
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_SAMPLE_BIT(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_SAMPLE_BIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_SAMPLE_NUM(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x7f80000)|value<<19)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_SAMPLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x7f80000) >> 19
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_PWDET_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x8000000)|value<<27)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_PWDET_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x8000000) >> 27
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_DIG_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x10000000)|value<<28)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_DIG_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x10000000) >> 28
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_DATA_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x20000000)|value<<29)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_DATA_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x20000000) >> 29
}

// SENS.SAR_MEAS_START2
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_DATA_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_DATA_SAR() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_DONE_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x10000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_DONE_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x10000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_START_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x20000)|value<<17)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_START_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x20000) >> 17
}
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_MEAS_START2_SAR2_EN_PAD(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x7ff80000)|value<<19)
}
func (o *SENS_Type) GetSAR_MEAS_START2_SAR2_EN_PAD() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x7ff80000) >> 19
}
func (o *SENS_Type) SetSAR_MEAS_START2_SAR2_EN_PAD_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x80000000)|value<<31)
}
func (o *SENS_Type) GetSAR_MEAS_START2_SAR2_EN_PAD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x80000000) >> 31
}

// SENS.SAR_DAC_CTRL1
func (o *SENS_Type) SetSAR_DAC_CTRL1_SW_FSTEP(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_SW_FSTEP() uint32 {
	return volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0xffff
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_SW_TONE_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x10000)|value<<16)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_SW_TONE_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x10000) >> 16
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DEBUG_BIT_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x3e0000)|value<<17)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DEBUG_BIT_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x3e0000) >> 17
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_DIG_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x400000)|value<<22)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_DIG_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x400000) >> 22
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_CLK_FORCE_LOW(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x800000)|value<<23)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_CLK_FORCE_LOW() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x800000) >> 23
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_CLK_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_CLK_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x2000000) >> 25
}

// SENS.SAR_DAC_CTRL2
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_DC1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xff)|value)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_DC1() uint32 {
	return volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xff
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_DC2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xff00)|value<<8)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_DC2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xff00) >> 8
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_SCALE1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_SCALE1() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_SCALE2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xc0000)|value<<18)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_SCALE2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xc0000) >> 18
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_INV1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x300000)|value<<20)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_INV1() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x300000) >> 20
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_INV2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_INV2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xc00000) >> 22
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_CW_EN1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_CW_EN1() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_CW_EN2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_CW_EN2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x2000000) >> 25
}

// SENS.SAR_MEAS_CTRL2
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0xf)|value)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0xf
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x10)|value<<4)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x10) >> 4
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x20)|value<<5)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x20) >> 5
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x40)|value<<6)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x40) >> 6
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x80)|value<<7)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x80) >> 7
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x100)|value<<8)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x100) >> 8
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x200)|value<<9)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x200) >> 9
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x400)|value<<10)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x400) >> 10
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR2_RSTB_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x1800)|value<<11)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR2_RSTB_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x1800) >> 11
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_RST_FB_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x6000)|value<<13)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_RST_FB_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x6000) >> 13
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x18000)|value<<15)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x18000) >> 15
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x60000)|value<<17)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x60000) >> 17
}

// SENS.SAR_NOUSE
func (o *SENS_Type) SetSAR_NOUSE(value uint32) {
	volatile.StoreUint32(&o.SAR_NOUSE.Reg, value)
}
func (o *SENS_Type) GetSAR_NOUSE() uint32 {
	return volatile.LoadUint32(&o.SAR_NOUSE.Reg)
}

// SENS.SARDATE
func (o *SENS_Type) SetSARDATE_SAR_DATE(value uint32) {
	volatile.StoreUint32(&o.SARDATE.Reg, volatile.LoadUint32(&o.SARDATE.Reg)&^(0xfffffff)|value)
}
func (o *SENS_Type) GetSARDATE_SAR_DATE() uint32 {
	return volatile.LoadUint32(&o.SARDATE.Reg) & 0xfffffff
}

// SHA (Secure Hash Algorithm) Accelerator
type SHA_Type struct {
	TEXT0           volatile.Register32 // 0x0
	TEXT1           volatile.Register32 // 0x4
	TEXT2           volatile.Register32 // 0x8
	TEXT3           volatile.Register32 // 0xC
	TEXT4           volatile.Register32 // 0x10
	TEXT5           volatile.Register32 // 0x14
	TEXT6           volatile.Register32 // 0x18
	TEXT7           volatile.Register32 // 0x1C
	TEXT8           volatile.Register32 // 0x20
	TEXT9           volatile.Register32 // 0x24
	TEXT10          volatile.Register32 // 0x28
	TEXT11          volatile.Register32 // 0x2C
	TEXT12          volatile.Register32 // 0x30
	TEXT13          volatile.Register32 // 0x34
	TEXT14          volatile.Register32 // 0x38
	TEXT15          volatile.Register32 // 0x3C
	TEXT16          volatile.Register32 // 0x40
	TEXT17          volatile.Register32 // 0x44
	TEXT18          volatile.Register32 // 0x48
	TEXT19          volatile.Register32 // 0x4C
	TEXT20          volatile.Register32 // 0x50
	TEXT21          volatile.Register32 // 0x54
	TEXT22          volatile.Register32 // 0x58
	TEXT23          volatile.Register32 // 0x5C
	TEXT24          volatile.Register32 // 0x60
	TEXT25          volatile.Register32 // 0x64
	TEXT26          volatile.Register32 // 0x68
	TEXT27          volatile.Register32 // 0x6C
	TEXT28          volatile.Register32 // 0x70
	TEXT29          volatile.Register32 // 0x74
	TEXT30          volatile.Register32 // 0x78
	TEXT31          volatile.Register32 // 0x7C
	SHA1_START      volatile.Register32 // 0x80
	SHA1_CONTINUE   volatile.Register32 // 0x84
	SHA1_LOAD       volatile.Register32 // 0x88
	SHA1_BUSY       volatile.Register32 // 0x8C
	SHA256_START    volatile.Register32 // 0x90
	SHA256_CONTINUE volatile.Register32 // 0x94
	SHA256_LOAD     volatile.Register32 // 0x98
	SHA256_BUSY     volatile.Register32 // 0x9C
	SHA384_START    volatile.Register32 // 0xA0
	SHA384_CONTINUE volatile.Register32 // 0xA4
	SHA384_LOAD     volatile.Register32 // 0xA8
	SHA384_BUSY     volatile.Register32 // 0xAC
	SHA512_START    volatile.Register32 // 0xB0
	SHA512_CONTINUE volatile.Register32 // 0xB4
	SHA512_LOAD     volatile.Register32 // 0xB8
	SHA512_BUSY     volatile.Register32 // 0xBC
}

// SHA.TEXT0
func (o *SHA_Type) SetTEXT0(value uint32) {
	volatile.StoreUint32(&o.TEXT0.Reg, value)
}
func (o *SHA_Type) GetTEXT0() uint32 {
	return volatile.LoadUint32(&o.TEXT0.Reg)
}

// SHA.TEXT1
func (o *SHA_Type) SetTEXT1(value uint32) {
	volatile.StoreUint32(&o.TEXT1.Reg, value)
}
func (o *SHA_Type) GetTEXT1() uint32 {
	return volatile.LoadUint32(&o.TEXT1.Reg)
}

// SHA.TEXT2
func (o *SHA_Type) SetTEXT2(value uint32) {
	volatile.StoreUint32(&o.TEXT2.Reg, value)
}
func (o *SHA_Type) GetTEXT2() uint32 {
	return volatile.LoadUint32(&o.TEXT2.Reg)
}

// SHA.TEXT3
func (o *SHA_Type) SetTEXT3(value uint32) {
	volatile.StoreUint32(&o.TEXT3.Reg, value)
}
func (o *SHA_Type) GetTEXT3() uint32 {
	return volatile.LoadUint32(&o.TEXT3.Reg)
}

// SHA.TEXT4
func (o *SHA_Type) SetTEXT4(value uint32) {
	volatile.StoreUint32(&o.TEXT4.Reg, value)
}
func (o *SHA_Type) GetTEXT4() uint32 {
	return volatile.LoadUint32(&o.TEXT4.Reg)
}

// SHA.TEXT5
func (o *SHA_Type) SetTEXT5(value uint32) {
	volatile.StoreUint32(&o.TEXT5.Reg, value)
}
func (o *SHA_Type) GetTEXT5() uint32 {
	return volatile.LoadUint32(&o.TEXT5.Reg)
}

// SHA.TEXT6
func (o *SHA_Type) SetTEXT6(value uint32) {
	volatile.StoreUint32(&o.TEXT6.Reg, value)
}
func (o *SHA_Type) GetTEXT6() uint32 {
	return volatile.LoadUint32(&o.TEXT6.Reg)
}

// SHA.TEXT7
func (o *SHA_Type) SetTEXT7(value uint32) {
	volatile.StoreUint32(&o.TEXT7.Reg, value)
}
func (o *SHA_Type) GetTEXT7() uint32 {
	return volatile.LoadUint32(&o.TEXT7.Reg)
}

// SHA.TEXT8
func (o *SHA_Type) SetTEXT8(value uint32) {
	volatile.StoreUint32(&o.TEXT8.Reg, value)
}
func (o *SHA_Type) GetTEXT8() uint32 {
	return volatile.LoadUint32(&o.TEXT8.Reg)
}

// SHA.TEXT9
func (o *SHA_Type) SetTEXT9(value uint32) {
	volatile.StoreUint32(&o.TEXT9.Reg, value)
}
func (o *SHA_Type) GetTEXT9() uint32 {
	return volatile.LoadUint32(&o.TEXT9.Reg)
}

// SHA.TEXT10
func (o *SHA_Type) SetTEXT10(value uint32) {
	volatile.StoreUint32(&o.TEXT10.Reg, value)
}
func (o *SHA_Type) GetTEXT10() uint32 {
	return volatile.LoadUint32(&o.TEXT10.Reg)
}

// SHA.TEXT11
func (o *SHA_Type) SetTEXT11(value uint32) {
	volatile.StoreUint32(&o.TEXT11.Reg, value)
}
func (o *SHA_Type) GetTEXT11() uint32 {
	return volatile.LoadUint32(&o.TEXT11.Reg)
}

// SHA.TEXT12
func (o *SHA_Type) SetTEXT12(value uint32) {
	volatile.StoreUint32(&o.TEXT12.Reg, value)
}
func (o *SHA_Type) GetTEXT12() uint32 {
	return volatile.LoadUint32(&o.TEXT12.Reg)
}

// SHA.TEXT13
func (o *SHA_Type) SetTEXT13(value uint32) {
	volatile.StoreUint32(&o.TEXT13.Reg, value)
}
func (o *SHA_Type) GetTEXT13() uint32 {
	return volatile.LoadUint32(&o.TEXT13.Reg)
}

// SHA.TEXT14
func (o *SHA_Type) SetTEXT14(value uint32) {
	volatile.StoreUint32(&o.TEXT14.Reg, value)
}
func (o *SHA_Type) GetTEXT14() uint32 {
	return volatile.LoadUint32(&o.TEXT14.Reg)
}

// SHA.TEXT15
func (o *SHA_Type) SetTEXT15(value uint32) {
	volatile.StoreUint32(&o.TEXT15.Reg, value)
}
func (o *SHA_Type) GetTEXT15() uint32 {
	return volatile.LoadUint32(&o.TEXT15.Reg)
}

// SHA.TEXT16
func (o *SHA_Type) SetTEXT16(value uint32) {
	volatile.StoreUint32(&o.TEXT16.Reg, value)
}
func (o *SHA_Type) GetTEXT16() uint32 {
	return volatile.LoadUint32(&o.TEXT16.Reg)
}

// SHA.TEXT17
func (o *SHA_Type) SetTEXT17(value uint32) {
	volatile.StoreUint32(&o.TEXT17.Reg, value)
}
func (o *SHA_Type) GetTEXT17() uint32 {
	return volatile.LoadUint32(&o.TEXT17.Reg)
}

// SHA.TEXT18
func (o *SHA_Type) SetTEXT18(value uint32) {
	volatile.StoreUint32(&o.TEXT18.Reg, value)
}
func (o *SHA_Type) GetTEXT18() uint32 {
	return volatile.LoadUint32(&o.TEXT18.Reg)
}

// SHA.TEXT19
func (o *SHA_Type) SetTEXT19(value uint32) {
	volatile.StoreUint32(&o.TEXT19.Reg, value)
}
func (o *SHA_Type) GetTEXT19() uint32 {
	return volatile.LoadUint32(&o.TEXT19.Reg)
}

// SHA.TEXT20
func (o *SHA_Type) SetTEXT20(value uint32) {
	volatile.StoreUint32(&o.TEXT20.Reg, value)
}
func (o *SHA_Type) GetTEXT20() uint32 {
	return volatile.LoadUint32(&o.TEXT20.Reg)
}

// SHA.TEXT21
func (o *SHA_Type) SetTEXT21(value uint32) {
	volatile.StoreUint32(&o.TEXT21.Reg, value)
}
func (o *SHA_Type) GetTEXT21() uint32 {
	return volatile.LoadUint32(&o.TEXT21.Reg)
}

// SHA.TEXT22
func (o *SHA_Type) SetTEXT22(value uint32) {
	volatile.StoreUint32(&o.TEXT22.Reg, value)
}
func (o *SHA_Type) GetTEXT22() uint32 {
	return volatile.LoadUint32(&o.TEXT22.Reg)
}

// SHA.TEXT23
func (o *SHA_Type) SetTEXT23(value uint32) {
	volatile.StoreUint32(&o.TEXT23.Reg, value)
}
func (o *SHA_Type) GetTEXT23() uint32 {
	return volatile.LoadUint32(&o.TEXT23.Reg)
}

// SHA.TEXT24
func (o *SHA_Type) SetTEXT24(value uint32) {
	volatile.StoreUint32(&o.TEXT24.Reg, value)
}
func (o *SHA_Type) GetTEXT24() uint32 {
	return volatile.LoadUint32(&o.TEXT24.Reg)
}

// SHA.TEXT25
func (o *SHA_Type) SetTEXT25(value uint32) {
	volatile.StoreUint32(&o.TEXT25.Reg, value)
}
func (o *SHA_Type) GetTEXT25() uint32 {
	return volatile.LoadUint32(&o.TEXT25.Reg)
}

// SHA.TEXT26
func (o *SHA_Type) SetTEXT26(value uint32) {
	volatile.StoreUint32(&o.TEXT26.Reg, value)
}
func (o *SHA_Type) GetTEXT26() uint32 {
	return volatile.LoadUint32(&o.TEXT26.Reg)
}

// SHA.TEXT27
func (o *SHA_Type) SetTEXT27(value uint32) {
	volatile.StoreUint32(&o.TEXT27.Reg, value)
}
func (o *SHA_Type) GetTEXT27() uint32 {
	return volatile.LoadUint32(&o.TEXT27.Reg)
}

// SHA.TEXT28
func (o *SHA_Type) SetTEXT28(value uint32) {
	volatile.StoreUint32(&o.TEXT28.Reg, value)
}
func (o *SHA_Type) GetTEXT28() uint32 {
	return volatile.LoadUint32(&o.TEXT28.Reg)
}

// SHA.TEXT29
func (o *SHA_Type) SetTEXT29(value uint32) {
	volatile.StoreUint32(&o.TEXT29.Reg, value)
}
func (o *SHA_Type) GetTEXT29() uint32 {
	return volatile.LoadUint32(&o.TEXT29.Reg)
}

// SHA.TEXT30
func (o *SHA_Type) SetTEXT30(value uint32) {
	volatile.StoreUint32(&o.TEXT30.Reg, value)
}
func (o *SHA_Type) GetTEXT30() uint32 {
	return volatile.LoadUint32(&o.TEXT30.Reg)
}

// SHA.TEXT31
func (o *SHA_Type) SetTEXT31(value uint32) {
	volatile.StoreUint32(&o.TEXT31.Reg, value)
}
func (o *SHA_Type) GetTEXT31() uint32 {
	return volatile.LoadUint32(&o.TEXT31.Reg)
}

// SHA.SHA1_START
func (o *SHA_Type) SetSHA1_START(value uint32) {
	volatile.StoreUint32(&o.SHA1_START.Reg, volatile.LoadUint32(&o.SHA1_START.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA1_START() uint32 {
	return volatile.LoadUint32(&o.SHA1_START.Reg) & 0x1
}

// SHA.SHA1_CONTINUE
func (o *SHA_Type) SetSHA1_CONTINUE(value uint32) {
	volatile.StoreUint32(&o.SHA1_CONTINUE.Reg, volatile.LoadUint32(&o.SHA1_CONTINUE.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA1_CONTINUE() uint32 {
	return volatile.LoadUint32(&o.SHA1_CONTINUE.Reg) & 0x1
}

// SHA.SHA1_LOAD
func (o *SHA_Type) SetSHA1_LOAD(value uint32) {
	volatile.StoreUint32(&o.SHA1_LOAD.Reg, volatile.LoadUint32(&o.SHA1_LOAD.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA1_LOAD() uint32 {
	return volatile.LoadUint32(&o.SHA1_LOAD.Reg) & 0x1
}

// SHA.SHA1_BUSY
func (o *SHA_Type) SetSHA1_BUSY(value uint32) {
	volatile.StoreUint32(&o.SHA1_BUSY.Reg, volatile.LoadUint32(&o.SHA1_BUSY.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA1_BUSY() uint32 {
	return volatile.LoadUint32(&o.SHA1_BUSY.Reg) & 0x1
}

// SHA.SHA256_START
func (o *SHA_Type) SetSHA256_START(value uint32) {
	volatile.StoreUint32(&o.SHA256_START.Reg, volatile.LoadUint32(&o.SHA256_START.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA256_START() uint32 {
	return volatile.LoadUint32(&o.SHA256_START.Reg) & 0x1
}

// SHA.SHA256_CONTINUE
func (o *SHA_Type) SetSHA256_CONTINUE(value uint32) {
	volatile.StoreUint32(&o.SHA256_CONTINUE.Reg, volatile.LoadUint32(&o.SHA256_CONTINUE.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA256_CONTINUE() uint32 {
	return volatile.LoadUint32(&o.SHA256_CONTINUE.Reg) & 0x1
}

// SHA.SHA256_LOAD
func (o *SHA_Type) SetSHA256_LOAD(value uint32) {
	volatile.StoreUint32(&o.SHA256_LOAD.Reg, volatile.LoadUint32(&o.SHA256_LOAD.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA256_LOAD() uint32 {
	return volatile.LoadUint32(&o.SHA256_LOAD.Reg) & 0x1
}

// SHA.SHA256_BUSY
func (o *SHA_Type) SetSHA256_BUSY(value uint32) {
	volatile.StoreUint32(&o.SHA256_BUSY.Reg, volatile.LoadUint32(&o.SHA256_BUSY.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA256_BUSY() uint32 {
	return volatile.LoadUint32(&o.SHA256_BUSY.Reg) & 0x1
}

// SHA.SHA384_START
func (o *SHA_Type) SetSHA384_START(value uint32) {
	volatile.StoreUint32(&o.SHA384_START.Reg, volatile.LoadUint32(&o.SHA384_START.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA384_START() uint32 {
	return volatile.LoadUint32(&o.SHA384_START.Reg) & 0x1
}

// SHA.SHA384_CONTINUE
func (o *SHA_Type) SetSHA384_CONTINUE(value uint32) {
	volatile.StoreUint32(&o.SHA384_CONTINUE.Reg, volatile.LoadUint32(&o.SHA384_CONTINUE.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA384_CONTINUE() uint32 {
	return volatile.LoadUint32(&o.SHA384_CONTINUE.Reg) & 0x1
}

// SHA.SHA384_LOAD
func (o *SHA_Type) SetSHA384_LOAD(value uint32) {
	volatile.StoreUint32(&o.SHA384_LOAD.Reg, volatile.LoadUint32(&o.SHA384_LOAD.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA384_LOAD() uint32 {
	return volatile.LoadUint32(&o.SHA384_LOAD.Reg) & 0x1
}

// SHA.SHA384_BUSY
func (o *SHA_Type) SetSHA384_BUSY(value uint32) {
	volatile.StoreUint32(&o.SHA384_BUSY.Reg, volatile.LoadUint32(&o.SHA384_BUSY.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA384_BUSY() uint32 {
	return volatile.LoadUint32(&o.SHA384_BUSY.Reg) & 0x1
}

// SHA.SHA512_START
func (o *SHA_Type) SetSHA512_START(value uint32) {
	volatile.StoreUint32(&o.SHA512_START.Reg, volatile.LoadUint32(&o.SHA512_START.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA512_START() uint32 {
	return volatile.LoadUint32(&o.SHA512_START.Reg) & 0x1
}

// SHA.SHA512_CONTINUE
func (o *SHA_Type) SetSHA512_CONTINUE(value uint32) {
	volatile.StoreUint32(&o.SHA512_CONTINUE.Reg, volatile.LoadUint32(&o.SHA512_CONTINUE.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA512_CONTINUE() uint32 {
	return volatile.LoadUint32(&o.SHA512_CONTINUE.Reg) & 0x1
}

// SHA.SHA512_LOAD
func (o *SHA_Type) SetSHA512_LOAD(value uint32) {
	volatile.StoreUint32(&o.SHA512_LOAD.Reg, volatile.LoadUint32(&o.SHA512_LOAD.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA512_LOAD() uint32 {
	return volatile.LoadUint32(&o.SHA512_LOAD.Reg) & 0x1
}

// SHA.SHA512_BUSY
func (o *SHA_Type) SetSHA512_BUSY(value uint32) {
	volatile.StoreUint32(&o.SHA512_BUSY.Reg, volatile.LoadUint32(&o.SHA512_BUSY.Reg)&^(0x1)|value)
}
func (o *SHA_Type) GetSHA512_BUSY() uint32 {
	return volatile.LoadUint32(&o.SHA512_BUSY.Reg) & 0x1
}

// SLC Peripheral
type SLC_Type struct {
	CONF0                  volatile.Register32 // 0x0
	_0INT_RAW              volatile.Register32 // 0x4
	_0INT_ST               volatile.Register32 // 0x8
	_0INT_ENA              volatile.Register32 // 0xC
	_0INT_CLR              volatile.Register32 // 0x10
	_1INT_RAW              volatile.Register32 // 0x14
	_1INT_ST               volatile.Register32 // 0x18
	_1INT_ENA              volatile.Register32 // 0x1C
	_1INT_CLR              volatile.Register32 // 0x20
	RX_STATUS              volatile.Register32 // 0x24
	_0RXFIFO_PUSH          volatile.Register32 // 0x28
	_1RXFIFO_PUSH          volatile.Register32 // 0x2C
	TX_STATUS              volatile.Register32 // 0x30
	_0TXFIFO_POP           volatile.Register32 // 0x34
	_1TXFIFO_POP           volatile.Register32 // 0x38
	_0RX_LINK              volatile.Register32 // 0x3C
	_0TX_LINK              volatile.Register32 // 0x40
	_1RX_LINK              volatile.Register32 // 0x44
	_1TX_LINK              volatile.Register32 // 0x48
	INTVEC_TOHOST          volatile.Register32 // 0x4C
	_0TOKEN0               volatile.Register32 // 0x50
	_0TOKEN1               volatile.Register32 // 0x54
	_1TOKEN0               volatile.Register32 // 0x58
	_1TOKEN1               volatile.Register32 // 0x5C
	CONF1                  volatile.Register32 // 0x60
	_0_STATE0              volatile.Register32 // 0x64
	_0_STATE1              volatile.Register32 // 0x68
	_1_STATE0              volatile.Register32 // 0x6C
	_1_STATE1              volatile.Register32 // 0x70
	BRIDGE_CONF            volatile.Register32 // 0x74
	_0_TO_EOF_DES_ADDR     volatile.Register32 // 0x78
	_0_TX_EOF_DES_ADDR     volatile.Register32 // 0x7C
	_0_TO_EOF_BFR_DES_ADDR volatile.Register32 // 0x80
	_1_TO_EOF_DES_ADDR     volatile.Register32 // 0x84
	_1_TX_EOF_DES_ADDR     volatile.Register32 // 0x88
	_1_TO_EOF_BFR_DES_ADDR volatile.Register32 // 0x8C
	AHB_TEST               volatile.Register32 // 0x90
	SDIO_ST                volatile.Register32 // 0x94
	RX_DSCR_CONF           volatile.Register32 // 0x98
	_0_TXLINK_DSCR         volatile.Register32 // 0x9C
	_0_TXLINK_DSCR_BF0     volatile.Register32 // 0xA0
	_0_TXLINK_DSCR_BF1     volatile.Register32 // 0xA4
	_0_RXLINK_DSCR         volatile.Register32 // 0xA8
	_0_RXLINK_DSCR_BF0     volatile.Register32 // 0xAC
	_0_RXLINK_DSCR_BF1     volatile.Register32 // 0xB0
	_1_TXLINK_DSCR         volatile.Register32 // 0xB4
	_1_TXLINK_DSCR_BF0     volatile.Register32 // 0xB8
	_1_TXLINK_DSCR_BF1     volatile.Register32 // 0xBC
	_1_RXLINK_DSCR         volatile.Register32 // 0xC0
	_1_RXLINK_DSCR_BF0     volatile.Register32 // 0xC4
	_1_RXLINK_DSCR_BF1     volatile.Register32 // 0xC8
	_0_TX_ERREOF_DES_ADDR  volatile.Register32 // 0xCC
	_1_TX_ERREOF_DES_ADDR  volatile.Register32 // 0xD0
	TOKEN_LAT              volatile.Register32 // 0xD4
	TX_DSCR_CONF           volatile.Register32 // 0xD8
	CMD_INFOR0             volatile.Register32 // 0xDC
	CMD_INFOR1             volatile.Register32 // 0xE0
	_0_LEN_CONF            volatile.Register32 // 0xE4
	_0_LENGTH              volatile.Register32 // 0xE8
	_0_TXPKT_H_DSCR        volatile.Register32 // 0xEC
	_0_TXPKT_E_DSCR        volatile.Register32 // 0xF0
	_0_RXPKT_H_DSCR        volatile.Register32 // 0xF4
	_0_RXPKT_E_DSCR        volatile.Register32 // 0xF8
	_0_TXPKTU_H_DSCR       volatile.Register32 // 0xFC
	_0_TXPKTU_E_DSCR       volatile.Register32 // 0x100
	_0_RXPKTU_H_DSCR       volatile.Register32 // 0x104
	_0_RXPKTU_E_DSCR       volatile.Register32 // 0x108
	_                      [8]byte
	SEQ_POSITION           volatile.Register32 // 0x114
	_0_DSCR_REC_CONF       volatile.Register32 // 0x118
	SDIO_CRC_ST0           volatile.Register32 // 0x11C
	SDIO_CRC_ST1           volatile.Register32 // 0x120
	_0_EOF_START_DES       volatile.Register32 // 0x124
	_0_PUSH_DSCR_ADDR      volatile.Register32 // 0x128
	_0_DONE_DSCR_ADDR      volatile.Register32 // 0x12C
	_0_SUB_START_DES       volatile.Register32 // 0x130
	_0_DSCR_CNT            volatile.Register32 // 0x134
	_0_LEN_LIM_CONF        volatile.Register32 // 0x138
	_0INT_ST1              volatile.Register32 // 0x13C
	_0INT_ENA1             volatile.Register32 // 0x140
	_1INT_ST1              volatile.Register32 // 0x144
	_1INT_ENA1             volatile.Register32 // 0x148
	_                      [172]byte
	DATE                   volatile.Register32 // 0x1F8
	ID                     volatile.Register32 // 0x1FC
}

// SLC.CONF0
func (o *SLC_Type) SetCONF0_SLC0_TX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetCONF0_SLC0_TX_RST() uint32 {
	return volatile.LoadUint32(&o.CONF0.Reg) & 0x1
}
func (o *SLC_Type) SetCONF0_SLC0_RX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetCONF0_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) GetCONF0_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4) >> 2
}
func (o *SLC_Type) SetCONF0_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) GetCONF0_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8) >> 3
}
func (o *SLC_Type) SetCONF0_SLC0_TX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) GetCONF0_SLC0_TX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10) >> 4
}
func (o *SLC_Type) SetCONF0_SLC0_RX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20) >> 5
}
func (o *SLC_Type) SetCONF0_SLC0_RX_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40) >> 6
}
func (o *SLC_Type) SetCONF0_SLC0_RX_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80) >> 7
}
func (o *SLC_Type) SetCONF0_SLC0_RXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) GetCONF0_SLC0_RXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100) >> 8
}
func (o *SLC_Type) SetCONF0_SLC0_RXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) GetCONF0_SLC0_RXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200) >> 9
}
func (o *SLC_Type) SetCONF0_SLC0_RXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) GetCONF0_SLC0_RXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400) >> 10
}
func (o *SLC_Type) SetCONF0_SLC0_TXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) GetCONF0_SLC0_TXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800) >> 11
}
func (o *SLC_Type) SetCONF0_SLC0_TXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) GetCONF0_SLC0_TXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) SetCONF0_SLC0_TXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) GetCONF0_SLC0_TXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) SetCONF0_SLC0_TOKEN_AUTO_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) GetCONF0_SLC0_TOKEN_AUTO_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) SetCONF0_SLC0_TOKEN_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) GetCONF0_SLC0_TOKEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) SetCONF0_SLC1_TX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetCONF0_SLC1_TX_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetCONF0_SLC1_RX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetCONF0_SLC0_WR_RETRY_MASK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) GetCONF0_SLC0_WR_RETRY_MASK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) SetCONF0_SLC1_WR_RETRY_MASK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) GetCONF0_SLC1_WR_RETRY_MASK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) SetCONF0_SLC1_TX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) GetCONF0_SLC1_TX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) SetCONF0_SLC1_RX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) SetCONF0_SLC1_RX_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) SetCONF0_SLC1_RX_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) SetCONF0_SLC1_RXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) GetCONF0_SLC1_RXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) SetCONF0_SLC1_RXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) GetCONF0_SLC1_RXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) SetCONF0_SLC1_RXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) GetCONF0_SLC1_RXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) SetCONF0_SLC1_TXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000000)|value<<27)
}
func (o *SLC_Type) GetCONF0_SLC1_TXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000000) >> 27
}
func (o *SLC_Type) SetCONF0_SLC1_TXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) GetCONF0_SLC1_TXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) SetCONF0_SLC1_TXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) GetCONF0_SLC1_TXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) SetCONF0_SLC1_TOKEN_AUTO_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) GetCONF0_SLC1_TOKEN_AUTO_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) SetCONF0_SLC1_TOKEN_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) GetCONF0_SLC1_TOKEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000000) >> 31
}

// SLC._0INT_RAW
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x1
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TOHOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TOHOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_RAW_CMD_DTC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_RAW_CMD_DTC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x4000000) >> 26
}

// SLC._0INT_ST
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT0_INT_ST() uint32 {
	return volatile.LoadUint32(&o._0INT_ST.Reg) & 0x1
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT4_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT5_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT6_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT7_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TOHOST_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TOHOST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ST_SLC0_HOST_RD_ACK_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_HOST_RD_ACK_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ST_SLC0_WR_RETRY_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_WR_RETRY_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ST_CMD_DTC_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ST_CMD_DTC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_QUICK_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_QUICK_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x4000000) >> 26
}

// SLC._0INT_ENA
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x1
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TOHOST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TOHOST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ENA_CMD_DTC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ENA_CMD_DTC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x4000000) >> 26
}

// SLC._0INT_CLR
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x1
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TOHOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TOHOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_CLR_CMD_DTC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_CLR_CMD_DTC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x4000000) >> 26
}

// SLC._1INT_RAW
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT8_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT8_INT_RAW() uint32 {
	return volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x1
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT9_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT9_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT10_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT10_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT11_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT11_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT12_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT12_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT13_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT13_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT14_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT14_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT15_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT15_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TOHOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TOHOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x1000000) >> 24
}

// SLC._1INT_ST
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT8_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT8_INT_ST() uint32 {
	return volatile.LoadUint32(&o._1INT_ST.Reg) & 0x1
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT9_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT9_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT10_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT10_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT11_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT11_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT12_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT12_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT13_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT13_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT14_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT14_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT15_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT15_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TOHOST_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TOHOST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ST_SLC1_HOST_RD_ACK_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_HOST_RD_ACK_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ST_SLC1_WR_RETRY_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_WR_RETRY_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x1000000) >> 24
}

// SLC._1INT_ENA
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT8_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT8_INT_ENA() uint32 {
	return volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x1
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT9_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT9_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT10_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT10_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT11_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT11_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT12_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT12_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT13_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT13_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT14_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT14_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT15_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT15_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TOHOST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TOHOST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x1000000) >> 24
}

// SLC._1INT_CLR
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT8_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT8_INT_CLR() uint32 {
	return volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x1
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT9_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT9_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT10_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT10_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT11_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT11_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT12_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT12_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT13_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT13_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT14_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT14_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT15_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT15_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TOHOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TOHOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x1000000) >> 24
}

// SLC.RX_STATUS
func (o *SLC_Type) SetRX_STATUS_SLC0_RX_FULL(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetRX_STATUS_SLC0_RX_FULL() uint32 {
	return volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x1
}
func (o *SLC_Type) SetRX_STATUS_SLC0_RX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetRX_STATUS_SLC0_RX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetRX_STATUS_SLC1_RX_FULL(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetRX_STATUS_SLC1_RX_FULL() uint32 {
	return (volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetRX_STATUS_SLC1_RX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetRX_STATUS_SLC1_RX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x20000) >> 17
}

// SLC._0RXFIFO_PUSH
func (o *SLC_Type) Set_0RXFIFO_PUSH_SLC0_RXFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o._0RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg)&^(0x1ff)|value)
}
func (o *SLC_Type) Get_0RXFIFO_PUSH_SLC0_RXFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg) & 0x1ff
}
func (o *SLC_Type) Set_0RXFIFO_PUSH_SLC0_RXFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o._0RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0RXFIFO_PUSH_SLC0_RXFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg) & 0x10000) >> 16
}

// SLC._1RXFIFO_PUSH
func (o *SLC_Type) Set_1RXFIFO_PUSH_SLC1_RXFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o._1RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg)&^(0x1ff)|value)
}
func (o *SLC_Type) Get_1RXFIFO_PUSH_SLC1_RXFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg) & 0x1ff
}
func (o *SLC_Type) Set_1RXFIFO_PUSH_SLC1_RXFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o._1RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1RXFIFO_PUSH_SLC1_RXFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg) & 0x10000) >> 16
}

// SLC.TX_STATUS
func (o *SLC_Type) SetTX_STATUS_SLC0_TX_FULL(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetTX_STATUS_SLC0_TX_FULL() uint32 {
	return volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x1
}
func (o *SLC_Type) SetTX_STATUS_SLC0_TX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetTX_STATUS_SLC0_TX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetTX_STATUS_SLC1_TX_FULL(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetTX_STATUS_SLC1_TX_FULL() uint32 {
	return (volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetTX_STATUS_SLC1_TX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetTX_STATUS_SLC1_TX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x20000) >> 17
}

// SLC._0TXFIFO_POP
func (o *SLC_Type) Set_0TXFIFO_POP_SLC0_TXFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o._0TXFIFO_POP.Reg, volatile.LoadUint32(&o._0TXFIFO_POP.Reg)&^(0x7ff)|value)
}
func (o *SLC_Type) Get_0TXFIFO_POP_SLC0_TXFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o._0TXFIFO_POP.Reg) & 0x7ff
}
func (o *SLC_Type) Set_0TXFIFO_POP_SLC0_TXFIFO_POP(value uint32) {
	volatile.StoreUint32(&o._0TXFIFO_POP.Reg, volatile.LoadUint32(&o._0TXFIFO_POP.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0TXFIFO_POP_SLC0_TXFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o._0TXFIFO_POP.Reg) & 0x10000) >> 16
}

// SLC._1TXFIFO_POP
func (o *SLC_Type) Set_1TXFIFO_POP_SLC1_TXFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o._1TXFIFO_POP.Reg, volatile.LoadUint32(&o._1TXFIFO_POP.Reg)&^(0x7ff)|value)
}
func (o *SLC_Type) Get_1TXFIFO_POP_SLC1_TXFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o._1TXFIFO_POP.Reg) & 0x7ff
}
func (o *SLC_Type) Set_1TXFIFO_POP_SLC1_TXFIFO_POP(value uint32) {
	volatile.StoreUint32(&o._1TXFIFO_POP.Reg, volatile.LoadUint32(&o._1TXFIFO_POP.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1TXFIFO_POP_SLC1_TXFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o._1TXFIFO_POP.Reg) & 0x10000) >> 16
}

// SLC._0RX_LINK
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._0RX_LINK.Reg) & 0xfffff
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_START(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x80000000) >> 31
}

// SLC._0TX_LINK
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._0TX_LINK.Reg) & 0xfffff
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_START(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x80000000) >> 31
}

// SLC._1RX_LINK
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._1RX_LINK.Reg) & 0xfffff
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_BT_PACKET(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_BT_PACKET() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_START(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x80000000) >> 31
}

// SLC._1TX_LINK
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._1TX_LINK.Reg) & 0xfffff
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_START(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x80000000) >> 31
}

// SLC.INTVEC_TOHOST
func (o *SLC_Type) SetINTVEC_TOHOST_SLC0_TOHOST_INTVEC(value uint32) {
	volatile.StoreUint32(&o.INTVEC_TOHOST.Reg, volatile.LoadUint32(&o.INTVEC_TOHOST.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetINTVEC_TOHOST_SLC0_TOHOST_INTVEC() uint32 {
	return volatile.LoadUint32(&o.INTVEC_TOHOST.Reg) & 0xff
}
func (o *SLC_Type) SetINTVEC_TOHOST_SLC1_TOHOST_INTVEC(value uint32) {
	volatile.StoreUint32(&o.INTVEC_TOHOST.Reg, volatile.LoadUint32(&o.INTVEC_TOHOST.Reg)&^(0xff0000)|value<<16)
}
func (o *SLC_Type) GetINTVEC_TOHOST_SLC1_TOHOST_INTVEC() uint32 {
	return (volatile.LoadUint32(&o.INTVEC_TOHOST.Reg) & 0xff0000) >> 16
}

// SLC._0TOKEN0
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_WDATA(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_WDATA() uint32 {
	return volatile.LoadUint32(&o._0TOKEN0.Reg) & 0xfff
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_INC(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_INC() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0xfff0000) >> 16
}

// SLC._0TOKEN1
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_WDATA(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_WDATA() uint32 {
	return volatile.LoadUint32(&o._0TOKEN1.Reg) & 0xfff
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_INC(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_INC() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0xfff0000) >> 16
}

// SLC._1TOKEN0
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_WDATA(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_WDATA() uint32 {
	return volatile.LoadUint32(&o._1TOKEN0.Reg) & 0xfff
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_INC(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_INC() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0xfff0000) >> 16
}

// SLC._1TOKEN1
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_WDATA(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_WDATA() uint32 {
	return volatile.LoadUint32(&o._1TOKEN1.Reg) & 0xfff
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_INC(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_INC() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0xfff0000) >> 16
}

// SLC.CONF1
func (o *SLC_Type) SetCONF1_SLC0_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetCONF1_SLC0_CHECK_OWNER() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x1
}
func (o *SLC_Type) SetCONF1_SLC0_TX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetCONF1_SLC0_TX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetCONF1_SLC0_RX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) GetCONF1_SLC0_RX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) SetCONF1_CMD_HOLD_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) GetCONF1_CMD_HOLD_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) SetCONF1_SLC0_LEN_AUTO_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) GetCONF1_SLC0_LEN_AUTO_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) SetCONF1_SLC0_TX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) GetCONF1_SLC0_TX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) SetCONF1_SLC0_RX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) GetCONF1_SLC0_RX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) SetCONF1_SLC1_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetCONF1_SLC1_CHECK_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetCONF1_SLC1_TX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetCONF1_SLC1_TX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetCONF1_SLC1_RX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) GetCONF1_SLC1_RX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) SetCONF1_HOST_INT_LEVEL_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) GetCONF1_HOST_INT_LEVEL_SEL() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) SetCONF1_SLC1_TX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) GetCONF1_SLC1_TX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) SetCONF1_SLC1_RX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) GetCONF1_SLC1_RX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) SetCONF1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) GetCONF1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x400000) >> 22
}

// SLC._0_STATE0
func (o *SLC_Type) Set_0_STATE0(value uint32) {
	volatile.StoreUint32(&o._0_STATE0.Reg, value)
}
func (o *SLC_Type) Get_0_STATE0() uint32 {
	return volatile.LoadUint32(&o._0_STATE0.Reg)
}

// SLC._0_STATE1
func (o *SLC_Type) Set_0_STATE1(value uint32) {
	volatile.StoreUint32(&o._0_STATE1.Reg, value)
}
func (o *SLC_Type) Get_0_STATE1() uint32 {
	return volatile.LoadUint32(&o._0_STATE1.Reg)
}

// SLC._1_STATE0
func (o *SLC_Type) Set_1_STATE0(value uint32) {
	volatile.StoreUint32(&o._1_STATE0.Reg, value)
}
func (o *SLC_Type) Get_1_STATE0() uint32 {
	return volatile.LoadUint32(&o._1_STATE0.Reg)
}

// SLC._1_STATE1
func (o *SLC_Type) Set_1_STATE1(value uint32) {
	volatile.StoreUint32(&o._1_STATE1.Reg, value)
}
func (o *SLC_Type) Get_1_STATE1() uint32 {
	return volatile.LoadUint32(&o._1_STATE1.Reg)
}

// SLC.BRIDGE_CONF
func (o *SLC_Type) SetBRIDGE_CONF_TXEOF_ENA(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x3f)|value)
}
func (o *SLC_Type) GetBRIDGE_CONF_TXEOF_ENA() uint32 {
	return volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x3f
}
func (o *SLC_Type) SetBRIDGE_CONF_FIFO_MAP_ENA(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0xf00)|value<<8)
}
func (o *SLC_Type) GetBRIDGE_CONF_FIFO_MAP_ENA() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0xf00) >> 8
}
func (o *SLC_Type) SetBRIDGE_CONF_SLC0_TX_DUMMY_MODE(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) GetBRIDGE_CONF_SLC0_TX_DUMMY_MODE() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) SetBRIDGE_CONF_HDA_MAP_128K(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) GetBRIDGE_CONF_HDA_MAP_128K() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) SetBRIDGE_CONF_SLC1_TX_DUMMY_MODE(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) GetBRIDGE_CONF_SLC1_TX_DUMMY_MODE() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) SetBRIDGE_CONF_TX_PUSH_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0xffff0000)|value<<16)
}
func (o *SLC_Type) GetBRIDGE_CONF_TX_PUSH_IDLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0xffff0000) >> 16
}

// SLC._0_TO_EOF_DES_ADDR
func (o *SLC_Type) Set_0_TO_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TO_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TO_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TO_EOF_DES_ADDR.Reg)
}

// SLC._0_TX_EOF_DES_ADDR
func (o *SLC_Type) Set_0_TX_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TX_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TX_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TX_EOF_DES_ADDR.Reg)
}

// SLC._0_TO_EOF_BFR_DES_ADDR
func (o *SLC_Type) Set_0_TO_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TO_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TO_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TO_EOF_BFR_DES_ADDR.Reg)
}

// SLC._1_TO_EOF_DES_ADDR
func (o *SLC_Type) Set_1_TO_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TO_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TO_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TO_EOF_DES_ADDR.Reg)
}

// SLC._1_TX_EOF_DES_ADDR
func (o *SLC_Type) Set_1_TX_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TX_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TX_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TX_EOF_DES_ADDR.Reg)
}

// SLC._1_TO_EOF_BFR_DES_ADDR
func (o *SLC_Type) Set_1_TO_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TO_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TO_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TO_EOF_BFR_DES_ADDR.Reg)
}

// SLC.AHB_TEST
func (o *SLC_Type) SetAHB_TEST_AHB_TESTMODE(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x7)|value)
}
func (o *SLC_Type) GetAHB_TEST_AHB_TESTMODE() uint32 {
	return volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x7
}
func (o *SLC_Type) SetAHB_TEST_AHB_TESTADDR(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x30)|value<<4)
}
func (o *SLC_Type) GetAHB_TEST_AHB_TESTADDR() uint32 {
	return (volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x30) >> 4
}

// SLC.SDIO_ST
func (o *SLC_Type) SetSDIO_ST_CMD_ST(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x7)|value)
}
func (o *SLC_Type) GetSDIO_ST_CMD_ST() uint32 {
	return volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x7
}
func (o *SLC_Type) SetSDIO_ST_FUNC_ST(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0xf0)|value<<4)
}
func (o *SLC_Type) GetSDIO_ST_FUNC_ST() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0xf0) >> 4
}
func (o *SLC_Type) SetSDIO_ST_SDIO_WAKEUP(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) GetSDIO_ST_SDIO_WAKEUP() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x100) >> 8
}
func (o *SLC_Type) SetSDIO_ST_BUS_ST(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x7000)|value<<12)
}
func (o *SLC_Type) GetSDIO_ST_BUS_ST() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x7000) >> 12
}
func (o *SLC_Type) SetSDIO_ST_FUNC1_ACC_STATE(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x1f0000)|value<<16)
}
func (o *SLC_Type) GetSDIO_ST_FUNC1_ACC_STATE() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x1f0000) >> 16
}
func (o *SLC_Type) SetSDIO_ST_FUNC2_ACC_STATE(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x1f000000)|value<<24)
}
func (o *SLC_Type) GetSDIO_ST_FUNC2_ACC_STATE() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x1f000000) >> 24
}

// SLC.RX_DSCR_CONF
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE() uint32 {
	return volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x1
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_INFOR_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_INFOR_NO_REPLACE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RX_FILL_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RX_FILL_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x4) >> 2
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RX_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RX_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x8) >> 3
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RX_FILL_EN(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RX_FILL_EN() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x10) >> 4
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0xffe0)|value<<5)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0xffe0) >> 5
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_INFOR_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_INFOR_NO_REPLACE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RX_FILL_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RX_FILL_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RX_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RX_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RX_FILL_EN(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RX_FILL_EN() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0xffe00000)|value<<21)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0xffe00000) >> 21
}

// SLC._0_TXLINK_DSCR
func (o *SLC_Type) Set_0_TXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXLINK_DSCR.Reg)
}

// SLC._0_TXLINK_DSCR_BF0
func (o *SLC_Type) Set_0_TXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._0_TXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_0_TXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._0_TXLINK_DSCR_BF0.Reg)
}

// SLC._0_TXLINK_DSCR_BF1
func (o *SLC_Type) Set_0_TXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._0_TXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_0_TXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._0_TXLINK_DSCR_BF1.Reg)
}

// SLC._0_RXLINK_DSCR
func (o *SLC_Type) Set_0_RXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXLINK_DSCR.Reg)
}

// SLC._0_RXLINK_DSCR_BF0
func (o *SLC_Type) Set_0_RXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._0_RXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_0_RXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._0_RXLINK_DSCR_BF0.Reg)
}

// SLC._0_RXLINK_DSCR_BF1
func (o *SLC_Type) Set_0_RXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._0_RXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_0_RXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._0_RXLINK_DSCR_BF1.Reg)
}

// SLC._1_TXLINK_DSCR
func (o *SLC_Type) Set_1_TXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._1_TXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_1_TXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._1_TXLINK_DSCR.Reg)
}

// SLC._1_TXLINK_DSCR_BF0
func (o *SLC_Type) Set_1_TXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._1_TXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_1_TXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._1_TXLINK_DSCR_BF0.Reg)
}

// SLC._1_TXLINK_DSCR_BF1
func (o *SLC_Type) Set_1_TXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._1_TXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_1_TXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._1_TXLINK_DSCR_BF1.Reg)
}

// SLC._1_RXLINK_DSCR
func (o *SLC_Type) Set_1_RXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._1_RXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_1_RXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._1_RXLINK_DSCR.Reg)
}

// SLC._1_RXLINK_DSCR_BF0
func (o *SLC_Type) Set_1_RXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._1_RXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_1_RXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._1_RXLINK_DSCR_BF0.Reg)
}

// SLC._1_RXLINK_DSCR_BF1
func (o *SLC_Type) Set_1_RXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._1_RXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_1_RXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._1_RXLINK_DSCR_BF1.Reg)
}

// SLC._0_TX_ERREOF_DES_ADDR
func (o *SLC_Type) Set_0_TX_ERREOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TX_ERREOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TX_ERREOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TX_ERREOF_DES_ADDR.Reg)
}

// SLC._1_TX_ERREOF_DES_ADDR
func (o *SLC_Type) Set_1_TX_ERREOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TX_ERREOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TX_ERREOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TX_ERREOF_DES_ADDR.Reg)
}

// SLC.TOKEN_LAT
func (o *SLC_Type) SetTOKEN_LAT_SLC0_TOKEN(value uint32) {
	volatile.StoreUint32(&o.TOKEN_LAT.Reg, volatile.LoadUint32(&o.TOKEN_LAT.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) GetTOKEN_LAT_SLC0_TOKEN() uint32 {
	return volatile.LoadUint32(&o.TOKEN_LAT.Reg) & 0xfff
}
func (o *SLC_Type) SetTOKEN_LAT_SLC1_TOKEN(value uint32) {
	volatile.StoreUint32(&o.TOKEN_LAT.Reg, volatile.LoadUint32(&o.TOKEN_LAT.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) GetTOKEN_LAT_SLC1_TOKEN() uint32 {
	return (volatile.LoadUint32(&o.TOKEN_LAT.Reg) & 0xfff0000) >> 16
}

// SLC.TX_DSCR_CONF
func (o *SLC_Type) SetTX_DSCR_CONF_WR_RETRY_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.TX_DSCR_CONF.Reg, volatile.LoadUint32(&o.TX_DSCR_CONF.Reg)&^(0x7ff)|value)
}
func (o *SLC_Type) GetTX_DSCR_CONF_WR_RETRY_THRESHOLD() uint32 {
	return volatile.LoadUint32(&o.TX_DSCR_CONF.Reg) & 0x7ff
}

// SLC.CMD_INFOR0
func (o *SLC_Type) SetCMD_INFOR0(value uint32) {
	volatile.StoreUint32(&o.CMD_INFOR0.Reg, value)
}
func (o *SLC_Type) GetCMD_INFOR0() uint32 {
	return volatile.LoadUint32(&o.CMD_INFOR0.Reg)
}

// SLC.CMD_INFOR1
func (o *SLC_Type) SetCMD_INFOR1(value uint32) {
	volatile.StoreUint32(&o.CMD_INFOR1.Reg, value)
}
func (o *SLC_Type) GetCMD_INFOR1() uint32 {
	return volatile.LoadUint32(&o.CMD_INFOR1.Reg)
}

// SLC._0_LEN_CONF
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_WDATA(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_WDATA() uint32 {
	return volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0xfffff
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_WR(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_WR() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_INC(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_INC() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_RX_GET_USED_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_RX_GET_USED_DSCR() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_TX_GET_USED_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_TX_GET_USED_DSCR() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_RX_NEW_PKT_IND(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_RX_NEW_PKT_IND() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x8000000) >> 27
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_TX_NEW_PKT_IND(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_TX_NEW_PKT_IND() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x10000000) >> 28
}

// SLC._0_LENGTH
func (o *SLC_Type) Set_0_LENGTH_SLC0_LEN(value uint32) {
	volatile.StoreUint32(&o._0_LENGTH.Reg, volatile.LoadUint32(&o._0_LENGTH.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0_LENGTH_SLC0_LEN() uint32 {
	return volatile.LoadUint32(&o._0_LENGTH.Reg) & 0xfffff
}

// SLC._0_TXPKT_H_DSCR
func (o *SLC_Type) Set_0_TXPKT_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKT_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKT_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKT_H_DSCR.Reg)
}

// SLC._0_TXPKT_E_DSCR
func (o *SLC_Type) Set_0_TXPKT_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKT_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKT_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKT_E_DSCR.Reg)
}

// SLC._0_RXPKT_H_DSCR
func (o *SLC_Type) Set_0_RXPKT_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKT_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKT_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKT_H_DSCR.Reg)
}

// SLC._0_RXPKT_E_DSCR
func (o *SLC_Type) Set_0_RXPKT_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKT_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKT_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKT_E_DSCR.Reg)
}

// SLC._0_TXPKTU_H_DSCR
func (o *SLC_Type) Set_0_TXPKTU_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKTU_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKTU_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKTU_H_DSCR.Reg)
}

// SLC._0_TXPKTU_E_DSCR
func (o *SLC_Type) Set_0_TXPKTU_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKTU_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKTU_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKTU_E_DSCR.Reg)
}

// SLC._0_RXPKTU_H_DSCR
func (o *SLC_Type) Set_0_RXPKTU_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKTU_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKTU_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKTU_H_DSCR.Reg)
}

// SLC._0_RXPKTU_E_DSCR
func (o *SLC_Type) Set_0_RXPKTU_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKTU_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKTU_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKTU_E_DSCR.Reg)
}

// SLC.SEQ_POSITION
func (o *SLC_Type) SetSEQ_POSITION_SLC0_SEQ_POSITION(value uint32) {
	volatile.StoreUint32(&o.SEQ_POSITION.Reg, volatile.LoadUint32(&o.SEQ_POSITION.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetSEQ_POSITION_SLC0_SEQ_POSITION() uint32 {
	return volatile.LoadUint32(&o.SEQ_POSITION.Reg) & 0xff
}
func (o *SLC_Type) SetSEQ_POSITION_SLC1_SEQ_POSITION(value uint32) {
	volatile.StoreUint32(&o.SEQ_POSITION.Reg, volatile.LoadUint32(&o.SEQ_POSITION.Reg)&^(0xff00)|value<<8)
}
func (o *SLC_Type) GetSEQ_POSITION_SLC1_SEQ_POSITION() uint32 {
	return (volatile.LoadUint32(&o.SEQ_POSITION.Reg) & 0xff00) >> 8
}

// SLC._0_DSCR_REC_CONF
func (o *SLC_Type) Set_0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM(value uint32) {
	volatile.StoreUint32(&o._0_DSCR_REC_CONF.Reg, volatile.LoadUint32(&o._0_DSCR_REC_CONF.Reg)&^(0x3ff)|value)
}
func (o *SLC_Type) Get_0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM() uint32 {
	return volatile.LoadUint32(&o._0_DSCR_REC_CONF.Reg) & 0x3ff
}

// SLC.SDIO_CRC_ST0
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT0_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT0_CRC_ERR_CNT() uint32 {
	return volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff
}
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT1_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff00)|value<<8)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT1_CRC_ERR_CNT() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff00) >> 8
}
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT2_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff0000)|value<<16)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT2_CRC_ERR_CNT() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff0000) >> 16
}
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT3_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff000000)|value<<24)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT3_CRC_ERR_CNT() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff000000) >> 24
}

// SLC.SDIO_CRC_ST1
func (o *SLC_Type) SetSDIO_CRC_ST1_CMD_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST1.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetSDIO_CRC_ST1_CMD_CRC_ERR_CNT() uint32 {
	return volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg) & 0xff
}
func (o *SLC_Type) SetSDIO_CRC_ST1_ERR_CNT_CLR(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST1.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) GetSDIO_CRC_ST1_ERR_CNT_CLR() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg) & 0x80000000) >> 31
}

// SLC._0_EOF_START_DES
func (o *SLC_Type) Set_0_EOF_START_DES(value uint32) {
	volatile.StoreUint32(&o._0_EOF_START_DES.Reg, value)
}
func (o *SLC_Type) Get_0_EOF_START_DES() uint32 {
	return volatile.LoadUint32(&o._0_EOF_START_DES.Reg)
}

// SLC._0_PUSH_DSCR_ADDR
func (o *SLC_Type) Set_0_PUSH_DSCR_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_PUSH_DSCR_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_PUSH_DSCR_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_PUSH_DSCR_ADDR.Reg)
}

// SLC._0_DONE_DSCR_ADDR
func (o *SLC_Type) Set_0_DONE_DSCR_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_DONE_DSCR_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_DONE_DSCR_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_DONE_DSCR_ADDR.Reg)
}

// SLC._0_SUB_START_DES
func (o *SLC_Type) Set_0_SUB_START_DES(value uint32) {
	volatile.StoreUint32(&o._0_SUB_START_DES.Reg, value)
}
func (o *SLC_Type) Get_0_SUB_START_DES() uint32 {
	return volatile.LoadUint32(&o._0_SUB_START_DES.Reg)
}

// SLC._0_DSCR_CNT
func (o *SLC_Type) Set_0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT(value uint32) {
	volatile.StoreUint32(&o._0_DSCR_CNT.Reg, volatile.LoadUint32(&o._0_DSCR_CNT.Reg)&^(0x3ff)|value)
}
func (o *SLC_Type) Get_0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT() uint32 {
	return volatile.LoadUint32(&o._0_DSCR_CNT.Reg) & 0x3ff
}
func (o *SLC_Type) Set_0_DSCR_CNT_SLC0_RX_GET_EOF_OCC(value uint32) {
	volatile.StoreUint32(&o._0_DSCR_CNT.Reg, volatile.LoadUint32(&o._0_DSCR_CNT.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0_DSCR_CNT_SLC0_RX_GET_EOF_OCC() uint32 {
	return (volatile.LoadUint32(&o._0_DSCR_CNT.Reg) & 0x10000) >> 16
}

// SLC._0_LEN_LIM_CONF
func (o *SLC_Type) Set_0_LEN_LIM_CONF_SLC0_LEN_LIM(value uint32) {
	volatile.StoreUint32(&o._0_LEN_LIM_CONF.Reg, volatile.LoadUint32(&o._0_LEN_LIM_CONF.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0_LEN_LIM_CONF_SLC0_LEN_LIM() uint32 {
	return volatile.LoadUint32(&o._0_LEN_LIM_CONF.Reg) & 0xfffff
}

// SLC._0INT_ST1
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT0_INT_ST1() uint32 {
	return volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x1
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT1_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT1_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT2_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT2_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT3_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT3_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT4_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT4_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT5_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT5_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT6_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT6_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT7_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT7_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_UDF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_UDF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_OVF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_OVF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TOHOST_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TOHOST_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ST1_CMD_DTC_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ST1_CMD_DTC_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x4000000) >> 26
}

// SLC._0INT_ENA1
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT0_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x1
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT4_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT4_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT5_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT5_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT6_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT6_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT7_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT7_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TOHOST_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TOHOST_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ENA1_CMD_DTC_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ENA1_CMD_DTC_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x4000000) >> 26
}

// SLC._1INT_ST1
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT8_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT8_INT_ST1() uint32 {
	return volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x1
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT9_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT9_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT10_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT10_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT11_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT11_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT12_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT12_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT13_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT13_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT14_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT14_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT15_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT15_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_UDF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_UDF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_OVF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_OVF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TOHOST_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TOHOST_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x1000000) >> 24
}

// SLC._1INT_ENA1
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT8_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT8_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x1
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT9_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT9_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT10_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT10_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT11_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT11_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT12_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT12_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT13_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT13_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT14_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT14_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT15_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT15_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TOHOST_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TOHOST_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x1000000) >> 24
}

// SLC.DATE
func (o *SLC_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *SLC_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// SLC.ID
func (o *SLC_Type) SetID(value uint32) {
	volatile.StoreUint32(&o.ID.Reg, value)
}
func (o *SLC_Type) GetID() uint32 {
	return volatile.LoadUint32(&o.ID.Reg)
}

// SLCHOST Peripheral
type SLCHOST_Type struct {
	_                           [16]byte
	HOST_SLCHOST_FUNC2_0        volatile.Register32 // 0x10
	HOST_SLCHOST_FUNC2_1        volatile.Register32 // 0x14
	_                           [8]byte
	HOST_SLCHOST_FUNC2_2        volatile.Register32 // 0x20
	_                           [16]byte
	HOST_SLCHOST_GPIO_STATUS0   volatile.Register32 // 0x34
	HOST_SLCHOST_GPIO_STATUS1   volatile.Register32 // 0x38
	HOST_SLCHOST_GPIO_IN0       volatile.Register32 // 0x3C
	HOST_SLCHOST_GPIO_IN1       volatile.Register32 // 0x40
	HOST_SLC0HOST_TOKEN_RDATA   volatile.Register32 // 0x44
	HOST_SLC0_HOST_PF           volatile.Register32 // 0x48
	HOST_SLC1_HOST_PF           volatile.Register32 // 0x4C
	HOST_SLC0HOST_INT_RAW       volatile.Register32 // 0x50
	HOST_SLC1HOST_INT_RAW       volatile.Register32 // 0x54
	HOST_SLC0HOST_INT_ST        volatile.Register32 // 0x58
	HOST_SLC1HOST_INT_ST        volatile.Register32 // 0x5C
	HOST_SLCHOST_PKT_LEN        volatile.Register32 // 0x60
	HOST_SLCHOST_STATE_W0       volatile.Register32 // 0x64
	HOST_SLCHOST_STATE_W1       volatile.Register32 // 0x68
	HOST_SLCHOST_CONF_W0        volatile.Register32 // 0x6C
	HOST_SLCHOST_CONF_W1        volatile.Register32 // 0x70
	HOST_SLCHOST_CONF_W2        volatile.Register32 // 0x74
	HOST_SLCHOST_CONF_W3        volatile.Register32 // 0x78
	HOST_SLCHOST_CONF_W4        volatile.Register32 // 0x7C
	HOST_SLCHOST_CONF_W5        volatile.Register32 // 0x80
	HOST_SLCHOST_WIN_CMD        volatile.Register32 // 0x84
	HOST_SLCHOST_CONF_W6        volatile.Register32 // 0x88
	HOST_SLCHOST_CONF_W7        volatile.Register32 // 0x8C
	HOST_SLCHOST_PKT_LEN0       volatile.Register32 // 0x90
	HOST_SLCHOST_PKT_LEN1       volatile.Register32 // 0x94
	HOST_SLCHOST_PKT_LEN2       volatile.Register32 // 0x98
	HOST_SLCHOST_CONF_W8        volatile.Register32 // 0x9C
	HOST_SLCHOST_CONF_W9        volatile.Register32 // 0xA0
	HOST_SLCHOST_CONF_W10       volatile.Register32 // 0xA4
	HOST_SLCHOST_CONF_W11       volatile.Register32 // 0xA8
	HOST_SLCHOST_CONF_W12       volatile.Register32 // 0xAC
	HOST_SLCHOST_CONF_W13       volatile.Register32 // 0xB0
	HOST_SLCHOST_CONF_W14       volatile.Register32 // 0xB4
	HOST_SLCHOST_CONF_W15       volatile.Register32 // 0xB8
	HOST_SLCHOST_CHECK_SUM0     volatile.Register32 // 0xBC
	HOST_SLCHOST_CHECK_SUM1     volatile.Register32 // 0xC0
	HOST_SLC1HOST_TOKEN_RDATA   volatile.Register32 // 0xC4
	HOST_SLC0HOST_TOKEN_WDATA   volatile.Register32 // 0xC8
	HOST_SLC1HOST_TOKEN_WDATA   volatile.Register32 // 0xCC
	HOST_SLCHOST_TOKEN_CON      volatile.Register32 // 0xD0
	HOST_SLC0HOST_INT_CLR       volatile.Register32 // 0xD4
	HOST_SLC1HOST_INT_CLR       volatile.Register32 // 0xD8
	HOST_SLC0HOST_FUNC1_INT_ENA volatile.Register32 // 0xDC
	HOST_SLC1HOST_FUNC1_INT_ENA volatile.Register32 // 0xE0
	HOST_SLC0HOST_FUNC2_INT_ENA volatile.Register32 // 0xE4
	HOST_SLC1HOST_FUNC2_INT_ENA volatile.Register32 // 0xE8
	HOST_SLC0HOST_INT_ENA       volatile.Register32 // 0xEC
	HOST_SLC1HOST_INT_ENA       volatile.Register32 // 0xF0
	HOST_SLC0HOST_RX_INFOR      volatile.Register32 // 0xF4
	HOST_SLC1HOST_RX_INFOR      volatile.Register32 // 0xF8
	HOST_SLC0HOST_LEN_WD        volatile.Register32 // 0xFC
	HOST_SLC_APBWIN_WDATA       volatile.Register32 // 0x100
	HOST_SLC_APBWIN_CONF        volatile.Register32 // 0x104
	HOST_SLC_APBWIN_RDATA       volatile.Register32 // 0x108
	HOST_SLCHOST_RDCLR0         volatile.Register32 // 0x10C
	HOST_SLCHOST_RDCLR1         volatile.Register32 // 0x110
	HOST_SLC0HOST_INT_ENA1      volatile.Register32 // 0x114
	HOST_SLC1HOST_INT_ENA1      volatile.Register32 // 0x118
	_                           [92]byte
	HOST_SLCHOSTDATE            volatile.Register32 // 0x178
	HOST_SLCHOSTID              volatile.Register32 // 0x17C
	_                           [112]byte
	HOST_SLCHOST_CONF           volatile.Register32 // 0x1F0
	HOST_SLCHOST_INF_ST         volatile.Register32 // 0x1F4
}

// SLCHOST.HOST_SLCHOST_FUNC2_0
func (o *SLCHOST_Type) SetHOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_FUNC2_0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_0.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_0.Reg) & 0x1000000) >> 24
}

// SLCHOST.HOST_SLCHOST_FUNC2_1
func (o *SLCHOST_Type) SetHOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_FUNC2_1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_1.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_1.Reg) & 0x1
}

// SLCHOST.HOST_SLCHOST_FUNC2_2
func (o *SLCHOST_Type) SetHOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_FUNC2_2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_2.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_2.Reg) & 0x1
}

// SLCHOST.HOST_SLCHOST_GPIO_STATUS0
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_STATUS0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_STATUS0.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_STATUS0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_STATUS0.Reg)
}

// SLCHOST.HOST_SLCHOST_GPIO_STATUS1
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_STATUS1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_STATUS1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_STATUS1.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_GPIO_IN0
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_IN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_IN0.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_IN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_IN0.Reg)
}

// SLCHOST.HOST_SLCHOST_GPIO_IN1
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_IN1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_IN1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_IN1.Reg) & 0xff
}

// SLCHOST.HOST_SLC0HOST_TOKEN_RDATA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0xfff
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0xfff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0xf0000000)|value<<28)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0xf0000000) >> 28
}

// SLCHOST.HOST_SLC0_HOST_PF
func (o *SLCHOST_Type) SetHOST_SLC0_HOST_PF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0_HOST_PF.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC0_HOST_PF() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0_HOST_PF.Reg)
}

// SLCHOST.HOST_SLC1_HOST_PF
func (o *SLCHOST_Type) SetHOST_SLC1_HOST_PF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1_HOST_PF.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC1_HOST_PF() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1_HOST_PF.Reg)
}

// SLCHOST.HOST_SLC0HOST_INT_RAW
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC1HOST_INT_RAW
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC0HOST_INT_ST
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC1HOST_INT_ST
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLCHOST_PKT_LEN
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg) & 0xfffff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg)&^(0xfff00000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg) & 0xfff00000) >> 20
}

// SLCHOST.HOST_SLCHOST_STATE_W0
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_STATE_W1
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W0
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W1
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W2
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W3
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W4
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W5
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W6
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W7
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_PKT_LEN0
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN0.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN0.Reg) & 0xfffff
}

// SLCHOST.HOST_SLCHOST_PKT_LEN1
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN1.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN1.Reg) & 0xfffff
}

// SLCHOST.HOST_SLCHOST_PKT_LEN2
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN2.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN2.Reg) & 0xfffff
}

// SLCHOST.HOST_SLCHOST_CONF_W8
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W9
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W10
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W11
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W12
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W13
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W14
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CONF_W15
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff000000) >> 24
}

// SLCHOST.HOST_SLCHOST_CHECK_SUM0
func (o *SLCHOST_Type) SetHOST_SLCHOST_CHECK_SUM0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CHECK_SUM0.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CHECK_SUM0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CHECK_SUM0.Reg)
}

// SLCHOST.HOST_SLCHOST_CHECK_SUM1
func (o *SLCHOST_Type) SetHOST_SLCHOST_CHECK_SUM1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CHECK_SUM1.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CHECK_SUM1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CHECK_SUM1.Reg)
}

// SLCHOST.HOST_SLC1HOST_TOKEN_RDATA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0xfff
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0xfff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0xf0000000)|value<<28)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0xf0000000) >> 28
}

// SLCHOST.HOST_SLC0HOST_TOKEN_WDATA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg) & 0xfff
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg) & 0xfff0000) >> 16
}

// SLCHOST.HOST_SLC1HOST_TOKEN_WDATA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg) & 0xfff
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg) & 0xfff0000) >> 16
}

// SLCHOST.HOST_SLCHOST_TOKEN_CON
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x100) >> 8
}

// SLCHOST.HOST_SLC0HOST_INT_CLR
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC1HOST_INT_CLR
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC0HOST_FUNC1_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC1HOST_FUNC1_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC0HOST_FUNC2_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC1HOST_FUNC2_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC0HOST_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC1HOST_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC0HOST_RX_INFOR
func (o *SLCHOST_Type) SetHOST_SLC0HOST_RX_INFOR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_RX_INFOR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_RX_INFOR.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_RX_INFOR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_RX_INFOR.Reg) & 0xfffff
}

// SLCHOST.HOST_SLC1HOST_RX_INFOR
func (o *SLCHOST_Type) SetHOST_SLC1HOST_RX_INFOR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_RX_INFOR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_RX_INFOR.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_RX_INFOR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_RX_INFOR.Reg) & 0xfffff
}

// SLCHOST.HOST_SLC0HOST_LEN_WD
func (o *SLCHOST_Type) SetHOST_SLC0HOST_LEN_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_LEN_WD.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_LEN_WD() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_LEN_WD.Reg)
}

// SLCHOST.HOST_SLC_APBWIN_WDATA
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_WDATA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_WDATA.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_WDATA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC_APBWIN_WDATA.Reg)
}

// SLCHOST.HOST_SLC_APBWIN_CONF
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_CONF.Reg, volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg)&^(0xfffffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg) & 0xfffffff
}
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_CONF.Reg, volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg) & 0x10000000) >> 28
}
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_CONF.Reg, volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg) & 0x20000000) >> 29
}

// SLCHOST.HOST_SLC_APBWIN_RDATA
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_RDATA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_RDATA.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_RDATA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC_APBWIN_RDATA.Reg)
}

// SLCHOST.HOST_SLCHOST_RDCLR0
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg)&^(0x1ff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg) & 0x1ff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg)&^(0x3fe00)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg) & 0x3fe00) >> 9
}

// SLCHOST.HOST_SLCHOST_RDCLR1
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg)&^(0x1ff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg) & 0x1ff
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg)&^(0x3fe00)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg) & 0x3fe00) >> 9
}

// SLCHOST.HOST_SLC0HOST_INT_ENA1
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLC1HOST_INT_ENA1
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x2000000) >> 25
}

// SLCHOST.HOST_SLCHOSTDATE
func (o *SLCHOST_Type) SetHOST_SLCHOSTDATE(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOSTDATE.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOSTDATE() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOSTDATE.Reg)
}

// SLCHOST.HOST_SLCHOSTID
func (o *SLCHOST_Type) SetHOST_SLCHOSTID(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOSTID.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOSTID() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOSTID.Reg)
}

// SLCHOST.HOST_SLCHOST_CONF
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_SDIO11(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x1f)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_SDIO11() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x1f
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_SDIO20(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x3e0)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_SDIO20() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x3e0) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x7c00)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x7c00) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_POS_SAMP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0xf8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_POS_SAMP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0xf8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_QUICK_IN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x1f00000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_QUICK_IN() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x1f00000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x4000000) >> 26
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_HSPEED_CON_EN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_HSPEED_CON_EN() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x8000000) >> 27
}

// SLCHOST.HOST_SLCHOST_INF_ST
func (o *SLCHOST_Type) SetHOST_SLCHOST_INF_ST_HOST_SDIO20_MODE(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_INF_ST.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg)&^(0x1f)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_INF_ST_HOST_SDIO20_MODE() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg) & 0x1f
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_INF_ST.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg)&^(0x3e0)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg) & 0x3e0) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_INF_ST.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg)&^(0x7c00)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg) & 0x7c00) >> 10
}

// SPI (Serial Peripheral Interface) Controller 0
type SPI_Type struct {
	CMD                  volatile.Register32 // 0x0
	ADDR                 volatile.Register32 // 0x4
	CTRL                 volatile.Register32 // 0x8
	CTRL1                volatile.Register32 // 0xC
	RD_STATUS            volatile.Register32 // 0x10
	CTRL2                volatile.Register32 // 0x14
	CLOCK                volatile.Register32 // 0x18
	USER                 volatile.Register32 // 0x1C
	USER1                volatile.Register32 // 0x20
	USER2                volatile.Register32 // 0x24
	MOSI_DLEN            volatile.Register32 // 0x28
	MISO_DLEN            volatile.Register32 // 0x2C
	SLV_WR_STATUS        volatile.Register32 // 0x30
	PIN                  volatile.Register32 // 0x34
	SLAVE                volatile.Register32 // 0x38
	SLAVE1               volatile.Register32 // 0x3C
	SLAVE2               volatile.Register32 // 0x40
	SLAVE3               volatile.Register32 // 0x44
	SLV_WRBUF_DLEN       volatile.Register32 // 0x48
	SLV_RDBUF_DLEN       volatile.Register32 // 0x4C
	CACHE_FCTRL          volatile.Register32 // 0x50
	CACHE_SCTRL          volatile.Register32 // 0x54
	SRAM_CMD             volatile.Register32 // 0x58
	SRAM_DRD_CMD         volatile.Register32 // 0x5C
	SRAM_DWR_CMD         volatile.Register32 // 0x60
	SLV_RD_BIT           volatile.Register32 // 0x64
	_                    [24]byte
	W0                   volatile.Register32 // 0x80
	W1                   volatile.Register32 // 0x84
	W2                   volatile.Register32 // 0x88
	W3                   volatile.Register32 // 0x8C
	W4                   volatile.Register32 // 0x90
	W5                   volatile.Register32 // 0x94
	W6                   volatile.Register32 // 0x98
	W7                   volatile.Register32 // 0x9C
	W8                   volatile.Register32 // 0xA0
	W9                   volatile.Register32 // 0xA4
	W10                  volatile.Register32 // 0xA8
	W11                  volatile.Register32 // 0xAC
	W12                  volatile.Register32 // 0xB0
	W13                  volatile.Register32 // 0xB4
	W14                  volatile.Register32 // 0xB8
	W15                  volatile.Register32 // 0xBC
	TX_CRC               volatile.Register32 // 0xC0
	_                    [44]byte
	EXT0                 volatile.Register32 // 0xF0
	EXT1                 volatile.Register32 // 0xF4
	EXT2                 volatile.Register32 // 0xF8
	EXT3                 volatile.Register32 // 0xFC
	DMA_CONF             volatile.Register32 // 0x100
	DMA_OUT_LINK         volatile.Register32 // 0x104
	DMA_IN_LINK          volatile.Register32 // 0x108
	DMA_STATUS           volatile.Register32 // 0x10C
	DMA_INT_ENA          volatile.Register32 // 0x110
	DMA_INT_RAW          volatile.Register32 // 0x114
	DMA_INT_ST           volatile.Register32 // 0x118
	DMA_INT_CLR          volatile.Register32 // 0x11C
	IN_ERR_EOF_DES_ADDR  volatile.Register32 // 0x120
	IN_SUC_EOF_DES_ADDR  volatile.Register32 // 0x124
	INLINK_DSCR          volatile.Register32 // 0x128
	INLINK_DSCR_BF0      volatile.Register32 // 0x12C
	INLINK_DSCR_BF1      volatile.Register32 // 0x130
	OUT_EOF_BFR_DES_ADDR volatile.Register32 // 0x134
	OUT_EOF_DES_ADDR     volatile.Register32 // 0x138
	OUTLINK_DSCR         volatile.Register32 // 0x13C
	OUTLINK_DSCR_BF0     volatile.Register32 // 0x140
	OUTLINK_DSCR_BF1     volatile.Register32 // 0x144
	DMA_RSTATUS          volatile.Register32 // 0x148
	DMA_TSTATUS          volatile.Register32 // 0x14C
	_                    [684]byte
	DATE                 volatile.Register32 // 0x3FC
}

// SPI.CMD
func (o *SPI_Type) SetCMD_FLASH_PER(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x10000)|value<<16)
}
func (o *SPI_Type) GetCMD_FLASH_PER() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x10000) >> 16
}
func (o *SPI_Type) SetCMD_FLASH_PES(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x20000)|value<<17)
}
func (o *SPI_Type) GetCMD_FLASH_PES() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x20000) >> 17
}
func (o *SPI_Type) SetCMD_USR(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x40000)|value<<18)
}
func (o *SPI_Type) GetCMD_USR() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x40000) >> 18
}
func (o *SPI_Type) SetCMD_FLASH_HPM(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x80000)|value<<19)
}
func (o *SPI_Type) GetCMD_FLASH_HPM() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x80000) >> 19
}
func (o *SPI_Type) SetCMD_FLASH_RES(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetCMD_FLASH_RES() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetCMD_FLASH_DP(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x200000)|value<<21)
}
func (o *SPI_Type) GetCMD_FLASH_DP() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x200000) >> 21
}
func (o *SPI_Type) SetCMD_FLASH_CE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x400000)|value<<22)
}
func (o *SPI_Type) GetCMD_FLASH_CE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x400000) >> 22
}
func (o *SPI_Type) SetCMD_FLASH_BE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x800000)|value<<23)
}
func (o *SPI_Type) GetCMD_FLASH_BE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x800000) >> 23
}
func (o *SPI_Type) SetCMD_FLASH_SE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x1000000)|value<<24)
}
func (o *SPI_Type) GetCMD_FLASH_SE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x1000000) >> 24
}
func (o *SPI_Type) SetCMD_FLASH_PP(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetCMD_FLASH_PP() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetCMD_FLASH_WRSR(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetCMD_FLASH_WRSR() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x4000000) >> 26
}
func (o *SPI_Type) SetCMD_FLASH_RDSR(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x8000000)|value<<27)
}
func (o *SPI_Type) GetCMD_FLASH_RDSR() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x8000000) >> 27
}
func (o *SPI_Type) SetCMD_FLASH_RDID(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetCMD_FLASH_RDID() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetCMD_FLASH_WRDI(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetCMD_FLASH_WRDI() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetCMD_FLASH_WREN(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetCMD_FLASH_WREN() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetCMD_FLASH_READ(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetCMD_FLASH_READ() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x80000000) >> 31
}

// SPI.CTRL
func (o *SPI_Type) SetCTRL_FCS_CRC_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x400)|value<<10)
}
func (o *SPI_Type) GetCTRL_FCS_CRC_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x400) >> 10
}
func (o *SPI_Type) SetCTRL_TX_CRC_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x800)|value<<11)
}
func (o *SPI_Type) GetCTRL_TX_CRC_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x800) >> 11
}
func (o *SPI_Type) SetCTRL_WAIT_FLASH_IDLE_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *SPI_Type) GetCTRL_WAIT_FLASH_IDLE_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x1000) >> 12
}
func (o *SPI_Type) SetCTRL_FASTRD_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *SPI_Type) GetCTRL_FASTRD_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2000) >> 13
}
func (o *SPI_Type) SetCTRL_FREAD_DUAL(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *SPI_Type) GetCTRL_FREAD_DUAL() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4000) >> 14
}
func (o *SPI_Type) SetCTRL_RESANDRES(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *SPI_Type) GetCTRL_RESANDRES() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x8000) >> 15
}
func (o *SPI_Type) SetCTRL_FREAD_QUAD(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetCTRL_FREAD_QUAD() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetCTRL_WP(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x200000)|value<<21)
}
func (o *SPI_Type) GetCTRL_WP() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x200000) >> 21
}
func (o *SPI_Type) SetCTRL_WRSR_2B(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x400000)|value<<22)
}
func (o *SPI_Type) GetCTRL_WRSR_2B() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x400000) >> 22
}
func (o *SPI_Type) SetCTRL_FREAD_DIO(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x800000)|value<<23)
}
func (o *SPI_Type) GetCTRL_FREAD_DIO() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x800000) >> 23
}
func (o *SPI_Type) SetCTRL_FREAD_QIO(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1000000)|value<<24)
}
func (o *SPI_Type) GetCTRL_FREAD_QIO() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x1000000) >> 24
}
func (o *SPI_Type) SetCTRL_RD_BIT_ORDER(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetCTRL_RD_BIT_ORDER() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetCTRL_WR_BIT_ORDER(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetCTRL_WR_BIT_ORDER() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4000000) >> 26
}

// SPI.CTRL1
func (o *SPI_Type) SetCTRL1_CS_HOLD_DELAY_RES(value uint32) {
	volatile.StoreUint32(&o.CTRL1.Reg, volatile.LoadUint32(&o.CTRL1.Reg)&^(0xfff0000)|value<<16)
}
func (o *SPI_Type) GetCTRL1_CS_HOLD_DELAY_RES() uint32 {
	return (volatile.LoadUint32(&o.CTRL1.Reg) & 0xfff0000) >> 16
}
func (o *SPI_Type) SetCTRL1_CS_HOLD_DELAY(value uint32) {
	volatile.StoreUint32(&o.CTRL1.Reg, volatile.LoadUint32(&o.CTRL1.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetCTRL1_CS_HOLD_DELAY() uint32 {
	return (volatile.LoadUint32(&o.CTRL1.Reg) & 0xf0000000) >> 28
}

// SPI.RD_STATUS
func (o *SPI_Type) SetRD_STATUS_STATUS(value uint32) {
	volatile.StoreUint32(&o.RD_STATUS.Reg, volatile.LoadUint32(&o.RD_STATUS.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetRD_STATUS_STATUS() uint32 {
	return volatile.LoadUint32(&o.RD_STATUS.Reg) & 0xffff
}
func (o *SPI_Type) SetRD_STATUS_WB_MODE(value uint32) {
	volatile.StoreUint32(&o.RD_STATUS.Reg, volatile.LoadUint32(&o.RD_STATUS.Reg)&^(0xff0000)|value<<16)
}
func (o *SPI_Type) GetRD_STATUS_WB_MODE() uint32 {
	return (volatile.LoadUint32(&o.RD_STATUS.Reg) & 0xff0000) >> 16
}
func (o *SPI_Type) SetRD_STATUS_STATUS_EXT(value uint32) {
	volatile.StoreUint32(&o.RD_STATUS.Reg, volatile.LoadUint32(&o.RD_STATUS.Reg)&^(0xff000000)|value<<24)
}
func (o *SPI_Type) GetRD_STATUS_STATUS_EXT() uint32 {
	return (volatile.LoadUint32(&o.RD_STATUS.Reg) & 0xff000000) >> 24
}

// SPI.CTRL2
func (o *SPI_Type) SetCTRL2_SETUP_TIME(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf)|value)
}
func (o *SPI_Type) GetCTRL2_SETUP_TIME() uint32 {
	return volatile.LoadUint32(&o.CTRL2.Reg) & 0xf
}
func (o *SPI_Type) SetCTRL2_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf0)|value<<4)
}
func (o *SPI_Type) GetCTRL2_HOLD_TIME() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf0) >> 4
}
func (o *SPI_Type) SetCTRL2_CK_OUT_LOW_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf00)|value<<8)
}
func (o *SPI_Type) GetCTRL2_CK_OUT_LOW_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf00) >> 8
}
func (o *SPI_Type) SetCTRL2_CK_OUT_HIGH_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf000)|value<<12)
}
func (o *SPI_Type) GetCTRL2_CK_OUT_HIGH_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf000) >> 12
}
func (o *SPI_Type) SetCTRL2_MISO_DELAY_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x30000)|value<<16)
}
func (o *SPI_Type) GetCTRL2_MISO_DELAY_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x30000) >> 16
}
func (o *SPI_Type) SetCTRL2_MISO_DELAY_NUM(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x1c0000)|value<<18)
}
func (o *SPI_Type) GetCTRL2_MISO_DELAY_NUM() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x1c0000) >> 18
}
func (o *SPI_Type) SetCTRL2_MOSI_DELAY_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x600000)|value<<21)
}
func (o *SPI_Type) GetCTRL2_MOSI_DELAY_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x600000) >> 21
}
func (o *SPI_Type) SetCTRL2_MOSI_DELAY_NUM(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x3800000)|value<<23)
}
func (o *SPI_Type) GetCTRL2_MOSI_DELAY_NUM() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x3800000) >> 23
}
func (o *SPI_Type) SetCTRL2_CS_DELAY_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xc000000)|value<<26)
}
func (o *SPI_Type) GetCTRL2_CS_DELAY_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xc000000) >> 26
}
func (o *SPI_Type) SetCTRL2_CS_DELAY_NUM(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetCTRL2_CS_DELAY_NUM() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf0000000) >> 28
}

// SPI.CLOCK
func (o *SPI_Type) SetCLOCK_CLKCNT_L(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x3f)|value)
}
func (o *SPI_Type) GetCLOCK_CLKCNT_L() uint32 {
	return volatile.LoadUint32(&o.CLOCK.Reg) & 0x3f
}
func (o *SPI_Type) SetCLOCK_CLKCNT_H(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0xfc0)|value<<6)
}
func (o *SPI_Type) GetCLOCK_CLKCNT_H() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0xfc0) >> 6
}
func (o *SPI_Type) SetCLOCK_CLKCNT_N(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x3f000)|value<<12)
}
func (o *SPI_Type) GetCLOCK_CLKCNT_N() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0x3f000) >> 12
}
func (o *SPI_Type) SetCLOCK_CLKDIV_PRE(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x7ffc0000)|value<<18)
}
func (o *SPI_Type) GetCLOCK_CLKDIV_PRE() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0x7ffc0000) >> 18
}
func (o *SPI_Type) SetCLOCK_CLK_EQU_SYSCLK(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetCLOCK_CLK_EQU_SYSCLK() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0x80000000) >> 31
}

// SPI.USER
func (o *SPI_Type) SetUSER_DOUTDIN(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetUSER_DOUTDIN() uint32 {
	return volatile.LoadUint32(&o.USER.Reg) & 0x1
}
func (o *SPI_Type) SetUSER_CS_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetUSER_CS_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetUSER_CS_SETUP(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetUSER_CS_SETUP() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetUSER_CK_I_EDGE(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetUSER_CK_I_EDGE() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetUSER_CK_OUT_EDGE(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetUSER_CK_OUT_EDGE() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetUSER_RD_BYTE_ORDER(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x400)|value<<10)
}
func (o *SPI_Type) GetUSER_RD_BYTE_ORDER() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x400) >> 10
}
func (o *SPI_Type) SetUSER_WR_BYTE_ORDER(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x800)|value<<11)
}
func (o *SPI_Type) GetUSER_WR_BYTE_ORDER() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x800) >> 11
}
func (o *SPI_Type) SetUSER_FWRITE_DUAL(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x1000)|value<<12)
}
func (o *SPI_Type) GetUSER_FWRITE_DUAL() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x1000) >> 12
}
func (o *SPI_Type) SetUSER_FWRITE_QUAD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x2000)|value<<13)
}
func (o *SPI_Type) GetUSER_FWRITE_QUAD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x2000) >> 13
}
func (o *SPI_Type) SetUSER_FWRITE_DIO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x4000)|value<<14)
}
func (o *SPI_Type) GetUSER_FWRITE_DIO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x4000) >> 14
}
func (o *SPI_Type) SetUSER_FWRITE_QIO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x8000)|value<<15)
}
func (o *SPI_Type) GetUSER_FWRITE_QIO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x8000) >> 15
}
func (o *SPI_Type) SetUSER_SIO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x10000)|value<<16)
}
func (o *SPI_Type) GetUSER_SIO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x10000) >> 16
}
func (o *SPI_Type) SetUSER_USR_HOLD_POL(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x20000)|value<<17)
}
func (o *SPI_Type) GetUSER_USR_HOLD_POL() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x20000) >> 17
}
func (o *SPI_Type) SetUSER_USR_DOUT_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x40000)|value<<18)
}
func (o *SPI_Type) GetUSER_USR_DOUT_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x40000) >> 18
}
func (o *SPI_Type) SetUSER_USR_DIN_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x80000)|value<<19)
}
func (o *SPI_Type) GetUSER_USR_DIN_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x80000) >> 19
}
func (o *SPI_Type) SetUSER_USR_DUMMY_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetUSER_USR_DUMMY_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetUSER_USR_ADDR_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x200000)|value<<21)
}
func (o *SPI_Type) GetUSER_USR_ADDR_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x200000) >> 21
}
func (o *SPI_Type) SetUSER_USR_CMD_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x400000)|value<<22)
}
func (o *SPI_Type) GetUSER_USR_CMD_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x400000) >> 22
}
func (o *SPI_Type) SetUSER_USR_PREP_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x800000)|value<<23)
}
func (o *SPI_Type) GetUSER_USR_PREP_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x800000) >> 23
}
func (o *SPI_Type) SetUSER_USR_MISO_HIGHPART(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x1000000)|value<<24)
}
func (o *SPI_Type) GetUSER_USR_MISO_HIGHPART() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x1000000) >> 24
}
func (o *SPI_Type) SetUSER_USR_MOSI_HIGHPART(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetUSER_USR_MOSI_HIGHPART() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetUSER_USR_DUMMY_IDLE(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetUSER_USR_DUMMY_IDLE() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x4000000) >> 26
}
func (o *SPI_Type) SetUSER_USR_MOSI(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x8000000)|value<<27)
}
func (o *SPI_Type) GetUSER_USR_MOSI() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x8000000) >> 27
}
func (o *SPI_Type) SetUSER_USR_MISO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetUSER_USR_MISO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetUSER_USR_DUMMY(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetUSER_USR_DUMMY() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetUSER_USR_ADDR(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetUSER_USR_ADDR() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetUSER_USR_COMMAND(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetUSER_USR_COMMAND() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x80000000) >> 31
}

// SPI.USER1
func (o *SPI_Type) SetUSER1_USR_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.USER1.Reg, volatile.LoadUint32(&o.USER1.Reg)&^(0xff)|value)
}
func (o *SPI_Type) GetUSER1_USR_DUMMY_CYCLELEN() uint32 {
	return volatile.LoadUint32(&o.USER1.Reg) & 0xff
}
func (o *SPI_Type) SetUSER1_USR_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.USER1.Reg, volatile.LoadUint32(&o.USER1.Reg)&^(0xfc000000)|value<<26)
}
func (o *SPI_Type) GetUSER1_USR_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.USER1.Reg) & 0xfc000000) >> 26
}

// SPI.USER2
func (o *SPI_Type) SetUSER2_USR_COMMAND_VALUE(value uint32) {
	volatile.StoreUint32(&o.USER2.Reg, volatile.LoadUint32(&o.USER2.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetUSER2_USR_COMMAND_VALUE() uint32 {
	return volatile.LoadUint32(&o.USER2.Reg) & 0xffff
}
func (o *SPI_Type) SetUSER2_USR_COMMAND_BITLEN(value uint32) {
	volatile.StoreUint32(&o.USER2.Reg, volatile.LoadUint32(&o.USER2.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetUSER2_USR_COMMAND_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.USER2.Reg) & 0xf0000000) >> 28
}

// SPI.MOSI_DLEN
func (o *SPI_Type) SetMOSI_DLEN_USR_MOSI_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.MOSI_DLEN.Reg, volatile.LoadUint32(&o.MOSI_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetMOSI_DLEN_USR_MOSI_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.MOSI_DLEN.Reg) & 0xffffff
}

// SPI.MISO_DLEN
func (o *SPI_Type) SetMISO_DLEN_USR_MISO_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.MISO_DLEN.Reg, volatile.LoadUint32(&o.MISO_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetMISO_DLEN_USR_MISO_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.MISO_DLEN.Reg) & 0xffffff
}

// SPI.SLV_WR_STATUS
func (o *SPI_Type) SetSLV_WR_STATUS(value uint32) {
	volatile.StoreUint32(&o.SLV_WR_STATUS.Reg, value)
}
func (o *SPI_Type) GetSLV_WR_STATUS() uint32 {
	return volatile.LoadUint32(&o.SLV_WR_STATUS.Reg)
}

// SPI.PIN
func (o *SPI_Type) SetPIN_CS0_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetPIN_CS0_DIS() uint32 {
	return volatile.LoadUint32(&o.PIN.Reg) & 0x1
}
func (o *SPI_Type) SetPIN_CS1_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetPIN_CS1_DIS() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetPIN_CS2_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetPIN_CS2_DIS() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetPIN_CK_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetPIN_CK_DIS() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetPIN_MASTER_CS_POL(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x1c0)|value<<6)
}
func (o *SPI_Type) GetPIN_MASTER_CS_POL() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x1c0) >> 6
}
func (o *SPI_Type) SetPIN_MASTER_CK_SEL(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x3800)|value<<11)
}
func (o *SPI_Type) GetPIN_MASTER_CK_SEL() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x3800) >> 11
}
func (o *SPI_Type) SetPIN_CK_IDLE_EDGE(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetPIN_CK_IDLE_EDGE() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetPIN_CS_KEEP_ACTIVE(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetPIN_CS_KEEP_ACTIVE() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x40000000) >> 30
}

// SPI.SLAVE
func (o *SPI_Type) SetSLAVE_SLV_RD_BUF_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetSLAVE_SLV_RD_BUF_DONE() uint32 {
	return volatile.LoadUint32(&o.SLAVE.Reg) & 0x1
}
func (o *SPI_Type) SetSLAVE_SLV_WR_BUF_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_BUF_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetSLAVE_SLV_RD_STA_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetSLAVE_SLV_RD_STA_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetSLAVE_SLV_WR_STA_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_STA_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetSLAVE_TRANS_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetSLAVE_TRANS_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetSLAVE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x3e0)|value<<5)
}
func (o *SPI_Type) GetSLAVE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x3e0) >> 5
}
func (o *SPI_Type) SetSLAVE_CS_I_MODE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0xc00)|value<<10)
}
func (o *SPI_Type) GetSLAVE_CS_I_MODE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0xc00) >> 10
}
func (o *SPI_Type) SetSLAVE_SLV_LAST_COMMAND(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0xe0000)|value<<17)
}
func (o *SPI_Type) GetSLAVE_SLV_LAST_COMMAND() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0xe0000) >> 17
}
func (o *SPI_Type) SetSLAVE_SLV_LAST_STATE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x700000)|value<<20)
}
func (o *SPI_Type) GetSLAVE_SLV_LAST_STATE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x700000) >> 20
}
func (o *SPI_Type) SetSLAVE_TRANS_CNT(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x7800000)|value<<23)
}
func (o *SPI_Type) GetSLAVE_TRANS_CNT() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x7800000) >> 23
}
func (o *SPI_Type) SetSLAVE_SLV_CMD_DEFINE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x8000000)|value<<27)
}
func (o *SPI_Type) GetSLAVE_SLV_CMD_DEFINE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x8000000) >> 27
}
func (o *SPI_Type) SetSLAVE_SLV_WR_RD_STA_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_RD_STA_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetSLAVE_SLV_WR_RD_BUF_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_RD_BUF_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetSLAVE_MODE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetSLAVE_MODE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetSLAVE_SYNC_RESET(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetSLAVE_SYNC_RESET() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x80000000) >> 31
}

// SPI.SLAVE1
func (o *SPI_Type) SetSLAVE1_SLV_RDBUF_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetSLAVE1_SLV_RDBUF_DUMMY_EN() uint32 {
	return volatile.LoadUint32(&o.SLAVE1.Reg) & 0x1
}
func (o *SPI_Type) SetSLAVE1_SLV_WRBUF_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetSLAVE1_SLV_WRBUF_DUMMY_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetSLAVE1_SLV_RDSTA_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetSLAVE1_SLV_RDSTA_DUMMY_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetSLAVE1_SLV_WRSTA_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetSLAVE1_SLV_WRSTA_DUMMY_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetSLAVE1_SLV_WR_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x3f0)|value<<4)
}
func (o *SPI_Type) GetSLAVE1_SLV_WR_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x3f0) >> 4
}
func (o *SPI_Type) SetSLAVE1_SLV_RD_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0xfc00)|value<<10)
}
func (o *SPI_Type) GetSLAVE1_SLV_RD_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0xfc00) >> 10
}
func (o *SPI_Type) SetSLAVE1_SLV_STATUS_READBACK(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetSLAVE1_SLV_STATUS_READBACK() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetSLAVE1_SLV_STATUS_FAST_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetSLAVE1_SLV_STATUS_FAST_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x4000000) >> 26
}
func (o *SPI_Type) SetSLAVE1_SLV_STATUS_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0xf8000000)|value<<27)
}
func (o *SPI_Type) GetSLAVE1_SLV_STATUS_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0xf8000000) >> 27
}

// SPI.SLAVE2
func (o *SPI_Type) SetSLAVE2_SLV_RDSTA_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff)|value)
}
func (o *SPI_Type) GetSLAVE2_SLV_RDSTA_DUMMY_CYCLELEN() uint32 {
	return volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff
}
func (o *SPI_Type) SetSLAVE2_SLV_WRSTA_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff00)|value<<8)
}
func (o *SPI_Type) GetSLAVE2_SLV_WRSTA_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff00) >> 8
}
func (o *SPI_Type) SetSLAVE2_SLV_RDBUF_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff0000)|value<<16)
}
func (o *SPI_Type) GetSLAVE2_SLV_RDBUF_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff0000) >> 16
}
func (o *SPI_Type) SetSLAVE2_SLV_WRBUF_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff000000)|value<<24)
}
func (o *SPI_Type) GetSLAVE2_SLV_WRBUF_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff000000) >> 24
}

// SPI.SLAVE3
func (o *SPI_Type) SetSLAVE3_SLV_RDBUF_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff)|value)
}
func (o *SPI_Type) GetSLAVE3_SLV_RDBUF_CMD_VALUE() uint32 {
	return volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff
}
func (o *SPI_Type) SetSLAVE3_SLV_WRBUF_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff00)|value<<8)
}
func (o *SPI_Type) GetSLAVE3_SLV_WRBUF_CMD_VALUE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff00) >> 8
}
func (o *SPI_Type) SetSLAVE3_SLV_RDSTA_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff0000)|value<<16)
}
func (o *SPI_Type) GetSLAVE3_SLV_RDSTA_CMD_VALUE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff0000) >> 16
}
func (o *SPI_Type) SetSLAVE3_SLV_WRSTA_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff000000)|value<<24)
}
func (o *SPI_Type) GetSLAVE3_SLV_WRSTA_CMD_VALUE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff000000) >> 24
}

// SPI.SLV_WRBUF_DLEN
func (o *SPI_Type) SetSLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.SLV_WRBUF_DLEN.Reg, volatile.LoadUint32(&o.SLV_WRBUF_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetSLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.SLV_WRBUF_DLEN.Reg) & 0xffffff
}

// SPI.SLV_RDBUF_DLEN
func (o *SPI_Type) SetSLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.SLV_RDBUF_DLEN.Reg, volatile.LoadUint32(&o.SLV_RDBUF_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetSLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.SLV_RDBUF_DLEN.Reg) & 0xffffff
}

// SPI.CACHE_FCTRL
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_REQ_EN(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_REQ_EN() uint32 {
	return volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x1
}
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_USR_CMD_4BYTE(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_USR_CMD_4BYTE() uint32 {
	return (volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_FLASH_USR_CMD(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_FLASH_USR_CMD() uint32 {
	return (volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_FLASH_PES_EN(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_FLASH_PES_EN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x8) >> 3
}

// SPI.CACHE_SCTRL
func (o *SPI_Type) SetCACHE_SCTRL_USR_SRAM_DIO(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_SRAM_DIO() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetCACHE_SCTRL_USR_SRAM_QIO(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_SRAM_QIO() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetCACHE_SCTRL_USR_WR_SRAM_DUMMY(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_WR_SRAM_DUMMY() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetCACHE_SCTRL_USR_RD_SRAM_DUMMY(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_RD_SRAM_DUMMY() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetCACHE_SCTRL_CACHE_SRAM_USR_RCMD(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetCACHE_SCTRL_CACHE_SRAM_USR_RCMD() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetCACHE_SCTRL_SRAM_BYTES_LEN(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x3fc0)|value<<6)
}
func (o *SPI_Type) GetCACHE_SCTRL_SRAM_BYTES_LEN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x3fc0) >> 6
}
func (o *SPI_Type) SetCACHE_SCTRL_SRAM_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x3fc000)|value<<14)
}
func (o *SPI_Type) GetCACHE_SCTRL_SRAM_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x3fc000) >> 14
}
func (o *SPI_Type) SetCACHE_SCTRL_SRAM_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0xfc00000)|value<<22)
}
func (o *SPI_Type) GetCACHE_SCTRL_SRAM_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0xfc00000) >> 22
}
func (o *SPI_Type) SetCACHE_SCTRL_CACHE_SRAM_USR_WCMD(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetCACHE_SCTRL_CACHE_SRAM_USR_WCMD() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x10000000) >> 28
}

// SPI.SRAM_CMD
func (o *SPI_Type) SetSRAM_CMD_SRAM_DIO(value uint32) {
	volatile.StoreUint32(&o.SRAM_CMD.Reg, volatile.LoadUint32(&o.SRAM_CMD.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetSRAM_CMD_SRAM_DIO() uint32 {
	return volatile.LoadUint32(&o.SRAM_CMD.Reg) & 0x1
}
func (o *SPI_Type) SetSRAM_CMD_SRAM_QIO(value uint32) {
	volatile.StoreUint32(&o.SRAM_CMD.Reg, volatile.LoadUint32(&o.SRAM_CMD.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetSRAM_CMD_SRAM_QIO() uint32 {
	return (volatile.LoadUint32(&o.SRAM_CMD.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetSRAM_CMD_SRAM_RSTIO(value uint32) {
	volatile.StoreUint32(&o.SRAM_CMD.Reg, volatile.LoadUint32(&o.SRAM_CMD.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetSRAM_CMD_SRAM_RSTIO() uint32 {
	return (volatile.LoadUint32(&o.SRAM_CMD.Reg) & 0x10) >> 4
}

// SPI.SRAM_DRD_CMD
func (o *SPI_Type) SetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SRAM_DRD_CMD.Reg, volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE() uint32 {
	return volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg) & 0xffff
}
func (o *SPI_Type) SetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SRAM_DRD_CMD.Reg, volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg) & 0xf0000000) >> 28
}

// SPI.SRAM_DWR_CMD
func (o *SPI_Type) SetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SRAM_DWR_CMD.Reg, volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE() uint32 {
	return volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg) & 0xffff
}
func (o *SPI_Type) SetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SRAM_DWR_CMD.Reg, volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg) & 0xf0000000) >> 28
}

// SPI.SLV_RD_BIT
func (o *SPI_Type) SetSLV_RD_BIT_SLV_RDATA_BIT(value uint32) {
	volatile.StoreUint32(&o.SLV_RD_BIT.Reg, volatile.LoadUint32(&o.SLV_RD_BIT.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetSLV_RD_BIT_SLV_RDATA_BIT() uint32 {
	return volatile.LoadUint32(&o.SLV_RD_BIT.Reg) & 0xffffff
}

// SPI.W0
func (o *SPI_Type) SetW0(value uint32) {
	volatile.StoreUint32(&o.W0.Reg, value)
}
func (o *SPI_Type) GetW0() uint32 {
	return volatile.LoadUint32(&o.W0.Reg)
}

// SPI.W1
func (o *SPI_Type) SetW1(value uint32) {
	volatile.StoreUint32(&o.W1.Reg, value)
}
func (o *SPI_Type) GetW1() uint32 {
	return volatile.LoadUint32(&o.W1.Reg)
}

// SPI.W2
func (o *SPI_Type) SetW2(value uint32) {
	volatile.StoreUint32(&o.W2.Reg, value)
}
func (o *SPI_Type) GetW2() uint32 {
	return volatile.LoadUint32(&o.W2.Reg)
}

// SPI.W3
func (o *SPI_Type) SetW3(value uint32) {
	volatile.StoreUint32(&o.W3.Reg, value)
}
func (o *SPI_Type) GetW3() uint32 {
	return volatile.LoadUint32(&o.W3.Reg)
}

// SPI.W4
func (o *SPI_Type) SetW4(value uint32) {
	volatile.StoreUint32(&o.W4.Reg, value)
}
func (o *SPI_Type) GetW4() uint32 {
	return volatile.LoadUint32(&o.W4.Reg)
}

// SPI.W5
func (o *SPI_Type) SetW5(value uint32) {
	volatile.StoreUint32(&o.W5.Reg, value)
}
func (o *SPI_Type) GetW5() uint32 {
	return volatile.LoadUint32(&o.W5.Reg)
}

// SPI.W6
func (o *SPI_Type) SetW6(value uint32) {
	volatile.StoreUint32(&o.W6.Reg, value)
}
func (o *SPI_Type) GetW6() uint32 {
	return volatile.LoadUint32(&o.W6.Reg)
}

// SPI.W7
func (o *SPI_Type) SetW7(value uint32) {
	volatile.StoreUint32(&o.W7.Reg, value)
}
func (o *SPI_Type) GetW7() uint32 {
	return volatile.LoadUint32(&o.W7.Reg)
}

// SPI.W8
func (o *SPI_Type) SetW8(value uint32) {
	volatile.StoreUint32(&o.W8.Reg, value)
}
func (o *SPI_Type) GetW8() uint32 {
	return volatile.LoadUint32(&o.W8.Reg)
}

// SPI.W9
func (o *SPI_Type) SetW9(value uint32) {
	volatile.StoreUint32(&o.W9.Reg, value)
}
func (o *SPI_Type) GetW9() uint32 {
	return volatile.LoadUint32(&o.W9.Reg)
}

// SPI.W10
func (o *SPI_Type) SetW10(value uint32) {
	volatile.StoreUint32(&o.W10.Reg, value)
}
func (o *SPI_Type) GetW10() uint32 {
	return volatile.LoadUint32(&o.W10.Reg)
}

// SPI.W11
func (o *SPI_Type) SetW11(value uint32) {
	volatile.StoreUint32(&o.W11.Reg, value)
}
func (o *SPI_Type) GetW11() uint32 {
	return volatile.LoadUint32(&o.W11.Reg)
}

// SPI.W12
func (o *SPI_Type) SetW12(value uint32) {
	volatile.StoreUint32(&o.W12.Reg, value)
}
func (o *SPI_Type) GetW12() uint32 {
	return volatile.LoadUint32(&o.W12.Reg)
}

// SPI.W13
func (o *SPI_Type) SetW13(value uint32) {
	volatile.StoreUint32(&o.W13.Reg, value)
}
func (o *SPI_Type) GetW13() uint32 {
	return volatile.LoadUint32(&o.W13.Reg)
}

// SPI.W14
func (o *SPI_Type) SetW14(value uint32) {
	volatile.StoreUint32(&o.W14.Reg, value)
}
func (o *SPI_Type) GetW14() uint32 {
	return volatile.LoadUint32(&o.W14.Reg)
}

// SPI.W15
func (o *SPI_Type) SetW15(value uint32) {
	volatile.StoreUint32(&o.W15.Reg, value)
}
func (o *SPI_Type) GetW15() uint32 {
	return volatile.LoadUint32(&o.W15.Reg)
}

// SPI.TX_CRC
func (o *SPI_Type) SetTX_CRC(value uint32) {
	volatile.StoreUint32(&o.TX_CRC.Reg, value)
}
func (o *SPI_Type) GetTX_CRC() uint32 {
	return volatile.LoadUint32(&o.TX_CRC.Reg)
}

// SPI.EXT0
func (o *SPI_Type) SetEXT0_T_PP_TIME(value uint32) {
	volatile.StoreUint32(&o.EXT0.Reg, volatile.LoadUint32(&o.EXT0.Reg)&^(0xfff)|value)
}
func (o *SPI_Type) GetEXT0_T_PP_TIME() uint32 {
	return volatile.LoadUint32(&o.EXT0.Reg) & 0xfff
}
func (o *SPI_Type) SetEXT0_T_PP_SHIFT(value uint32) {
	volatile.StoreUint32(&o.EXT0.Reg, volatile.LoadUint32(&o.EXT0.Reg)&^(0xf0000)|value<<16)
}
func (o *SPI_Type) GetEXT0_T_PP_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.EXT0.Reg) & 0xf0000) >> 16
}
func (o *SPI_Type) SetEXT0_T_PP_ENA(value uint32) {
	volatile.StoreUint32(&o.EXT0.Reg, volatile.LoadUint32(&o.EXT0.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetEXT0_T_PP_ENA() uint32 {
	return (volatile.LoadUint32(&o.EXT0.Reg) & 0x80000000) >> 31
}

// SPI.EXT1
func (o *SPI_Type) SetEXT1_T_ERASE_TIME(value uint32) {
	volatile.StoreUint32(&o.EXT1.Reg, volatile.LoadUint32(&o.EXT1.Reg)&^(0xfff)|value)
}
func (o *SPI_Type) GetEXT1_T_ERASE_TIME() uint32 {
	return volatile.LoadUint32(&o.EXT1.Reg) & 0xfff
}
func (o *SPI_Type) SetEXT1_T_ERASE_SHIFT(value uint32) {
	volatile.StoreUint32(&o.EXT1.Reg, volatile.LoadUint32(&o.EXT1.Reg)&^(0xf0000)|value<<16)
}
func (o *SPI_Type) GetEXT1_T_ERASE_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.EXT1.Reg) & 0xf0000) >> 16
}
func (o *SPI_Type) SetEXT1_T_ERASE_ENA(value uint32) {
	volatile.StoreUint32(&o.EXT1.Reg, volatile.LoadUint32(&o.EXT1.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetEXT1_T_ERASE_ENA() uint32 {
	return (volatile.LoadUint32(&o.EXT1.Reg) & 0x80000000) >> 31
}

// SPI.EXT2
func (o *SPI_Type) SetEXT2_ST(value uint32) {
	volatile.StoreUint32(&o.EXT2.Reg, volatile.LoadUint32(&o.EXT2.Reg)&^(0x7)|value)
}
func (o *SPI_Type) GetEXT2_ST() uint32 {
	return volatile.LoadUint32(&o.EXT2.Reg) & 0x7
}

// SPI.EXT3
func (o *SPI_Type) SetEXT3_INT_HOLD_ENA(value uint32) {
	volatile.StoreUint32(&o.EXT3.Reg, volatile.LoadUint32(&o.EXT3.Reg)&^(0x3)|value)
}
func (o *SPI_Type) GetEXT3_INT_HOLD_ENA() uint32 {
	return volatile.LoadUint32(&o.EXT3.Reg) & 0x3
}

// SPI.DMA_CONF
func (o *SPI_Type) SetDMA_CONF_IN_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_CONF_IN_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_CONF_OUT_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_CONF_OUT_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_CONF_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_CONF_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_CONF_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_CONF_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_CONF_IN_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_CONF_IN_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_CONF_OUT_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_CONF_OUT_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_CONF_OUT_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_CONF_OUT_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x100) >> 8
}
func (o *SPI_Type) SetDMA_CONF_OUT_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x200)|value<<9)
}
func (o *SPI_Type) GetDMA_CONF_OUT_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x200) >> 9
}
func (o *SPI_Type) SetDMA_CONF_OUTDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x400)|value<<10)
}
func (o *SPI_Type) GetDMA_CONF_OUTDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x400) >> 10
}
func (o *SPI_Type) SetDMA_CONF_INDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x800)|value<<11)
}
func (o *SPI_Type) GetDMA_CONF_INDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x800) >> 11
}
func (o *SPI_Type) SetDMA_CONF_OUT_DATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *SPI_Type) GetDMA_CONF_OUT_DATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x1000) >> 12
}
func (o *SPI_Type) SetDMA_CONF_DMA_RX_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x4000)|value<<14)
}
func (o *SPI_Type) GetDMA_CONF_DMA_RX_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x4000) >> 14
}
func (o *SPI_Type) SetDMA_CONF_DMA_TX_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x8000)|value<<15)
}
func (o *SPI_Type) GetDMA_CONF_DMA_TX_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x8000) >> 15
}
func (o *SPI_Type) SetDMA_CONF_DMA_CONTINUE(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x10000)|value<<16)
}
func (o *SPI_Type) GetDMA_CONF_DMA_CONTINUE() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x10000) >> 16
}

// SPI.DMA_OUT_LINK
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0xfffff)|value)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0xfffff
}
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x40000000) >> 30
}

// SPI.DMA_IN_LINK
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0xfffff)|value)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0xfffff
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x40000000) >> 30
}

// SPI.DMA_STATUS
func (o *SPI_Type) SetDMA_STATUS_DMA_RX_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_STATUS.Reg, volatile.LoadUint32(&o.DMA_STATUS.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_STATUS_DMA_RX_EN() uint32 {
	return volatile.LoadUint32(&o.DMA_STATUS.Reg) & 0x1
}
func (o *SPI_Type) SetDMA_STATUS_DMA_TX_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_STATUS.Reg, volatile.LoadUint32(&o.DMA_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_STATUS_DMA_TX_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_STATUS.Reg) & 0x2) >> 1
}

// SPI.DMA_INT_ENA
func (o *SPI_Type) SetDMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x1
}
func (o *SPI_Type) SetDMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_ENA_IN_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_ENA_IN_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_ENA_IN_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_ENA_IN_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_ENA_IN_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_ENA_IN_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_ENA_OUT_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUT_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_ENA_OUT_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUT_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x100) >> 8
}

// SPI.DMA_INT_RAW
func (o *SPI_Type) SetDMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x1
}
func (o *SPI_Type) SetDMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_RAW_IN_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_RAW_IN_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_RAW_IN_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_RAW_IN_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_RAW_IN_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_RAW_IN_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_RAW_OUT_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUT_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_RAW_OUT_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUT_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x100) >> 8
}

// SPI.DMA_INT_ST
func (o *SPI_Type) SetDMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x1
}
func (o *SPI_Type) SetDMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_ST_INLINK_DSCR_ERROR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_ST_INLINK_DSCR_ERROR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_ST_IN_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_ST_IN_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_ST_IN_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_ST_IN_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_ST_IN_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_ST_IN_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_ST_OUT_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_ST_OUT_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_ST_OUT_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_ST_OUT_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_ST_OUT_TOTAL_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_ST_OUT_TOTAL_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x100) >> 8
}

// SPI.DMA_INT_CLR
func (o *SPI_Type) SetDMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x1
}
func (o *SPI_Type) SetDMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_CLR_IN_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_CLR_IN_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_CLR_IN_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_CLR_IN_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_CLR_IN_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_CLR_IN_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_CLR_OUT_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUT_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_CLR_OUT_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUT_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x100) >> 8
}

// SPI.IN_ERR_EOF_DES_ADDR
func (o *SPI_Type) SetIN_ERR_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_ERR_EOF_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetIN_ERR_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_ERR_EOF_DES_ADDR.Reg)
}

// SPI.IN_SUC_EOF_DES_ADDR
func (o *SPI_Type) SetIN_SUC_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_SUC_EOF_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetIN_SUC_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_SUC_EOF_DES_ADDR.Reg)
}

// SPI.INLINK_DSCR
func (o *SPI_Type) SetINLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR.Reg, value)
}
func (o *SPI_Type) GetINLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR.Reg)
}

// SPI.INLINK_DSCR_BF0
func (o *SPI_Type) SetINLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF0.Reg, value)
}
func (o *SPI_Type) GetINLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF0.Reg)
}

// SPI.INLINK_DSCR_BF1
func (o *SPI_Type) SetINLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF1.Reg, value)
}
func (o *SPI_Type) GetINLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF1.Reg)
}

// SPI.OUT_EOF_BFR_DES_ADDR
func (o *SPI_Type) SetOUT_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetOUT_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg)
}

// SPI.OUT_EOF_DES_ADDR
func (o *SPI_Type) SetOUT_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetOUT_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_DES_ADDR.Reg)
}

// SPI.OUTLINK_DSCR
func (o *SPI_Type) SetOUTLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR.Reg, value)
}
func (o *SPI_Type) GetOUTLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR.Reg)
}

// SPI.OUTLINK_DSCR_BF0
func (o *SPI_Type) SetOUTLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF0.Reg, value)
}
func (o *SPI_Type) GetOUTLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF0.Reg)
}

// SPI.OUTLINK_DSCR_BF1
func (o *SPI_Type) SetOUTLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF1.Reg, value)
}
func (o *SPI_Type) GetOUTLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF1.Reg)
}

// SPI.DMA_RSTATUS
func (o *SPI_Type) SetDMA_RSTATUS(value uint32) {
	volatile.StoreUint32(&o.DMA_RSTATUS.Reg, value)
}
func (o *SPI_Type) GetDMA_RSTATUS() uint32 {
	return volatile.LoadUint32(&o.DMA_RSTATUS.Reg)
}

// SPI.DMA_TSTATUS
func (o *SPI_Type) SetDMA_TSTATUS(value uint32) {
	volatile.StoreUint32(&o.DMA_TSTATUS.Reg, value)
}
func (o *SPI_Type) GetDMA_TSTATUS() uint32 {
	return volatile.LoadUint32(&o.DMA_TSTATUS.Reg)
}

// SPI.DATE
func (o *SPI_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *SPI_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

// Timer Group 0
type TIMG_Type struct {
	T0CONFIG       volatile.Register32 // 0x0
	T0LO           volatile.Register32 // 0x4
	T0HI           volatile.Register32 // 0x8
	T0UPDATE       volatile.Register32 // 0xC
	T0ALARMLO      volatile.Register32 // 0x10
	T0ALARMHI      volatile.Register32 // 0x14
	T0LOADLO       volatile.Register32 // 0x18
	T0LOADHI       volatile.Register32 // 0x1C
	T0LOAD         volatile.Register32 // 0x20
	T1CONFIG       volatile.Register32 // 0x24
	T1LO           volatile.Register32 // 0x28
	T1HI           volatile.Register32 // 0x2C
	T1UPDATE       volatile.Register32 // 0x30
	T1ALARMLO      volatile.Register32 // 0x34
	T1ALARMHI      volatile.Register32 // 0x38
	T1LOADLO       volatile.Register32 // 0x3C
	T1LOADHI       volatile.Register32 // 0x40
	T1LOAD         volatile.Register32 // 0x44
	WDTCONFIG0     volatile.Register32 // 0x48
	WDTCONFIG1     volatile.Register32 // 0x4C
	WDTCONFIG2     volatile.Register32 // 0x50
	WDTCONFIG3     volatile.Register32 // 0x54
	WDTCONFIG4     volatile.Register32 // 0x58
	WDTCONFIG5     volatile.Register32 // 0x5C
	WDTFEED        volatile.Register32 // 0x60
	WDTWPROTECT    volatile.Register32 // 0x64
	RTCCALICFG     volatile.Register32 // 0x68
	RTCCALICFG1    volatile.Register32 // 0x6C
	LACTCONFIG     volatile.Register32 // 0x70
	LACTRTC        volatile.Register32 // 0x74
	LACTLO         volatile.Register32 // 0x78
	LACTHI         volatile.Register32 // 0x7C
	LACTUPDATE     volatile.Register32 // 0x80
	LACTALARMLO    volatile.Register32 // 0x84
	LACTALARMHI    volatile.Register32 // 0x88
	LACTLOADLO     volatile.Register32 // 0x8C
	LACTLOADHI     volatile.Register32 // 0x90
	LACTLOAD       volatile.Register32 // 0x94
	INT_ENA_TIMERS volatile.Register32 // 0x98
	INT_RAW_TIMERS volatile.Register32 // 0x9C
	INT_ST_TIMERS  volatile.Register32 // 0xA0
	INT_CLR_TIMERS volatile.Register32 // 0xA4
	_              [80]byte
	NTIMERS_DATE   volatile.Register32 // 0xF8
	TIMGCLK        volatile.Register32 // 0xFC
}

// TIMG.T0CONFIG
func (o *TIMG_Type) SetT0CONFIG_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x400)|value<<10)
}
func (o *TIMG_Type) GetT0CONFIG_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x400) >> 10
}
func (o *TIMG_Type) SetT0CONFIG_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x800)|value<<11)
}
func (o *TIMG_Type) GetT0CONFIG_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x800) >> 11
}
func (o *TIMG_Type) SetT0CONFIG_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetT0CONFIG_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x1000) >> 12
}
func (o *TIMG_Type) SetT0CONFIG_DIVIDER(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x1fffe000)|value<<13)
}
func (o *TIMG_Type) GetT0CONFIG_DIVIDER() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x1fffe000) >> 13
}
func (o *TIMG_Type) SetT0CONFIG_AUTORELOAD(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x20000000)|value<<29)
}
func (o *TIMG_Type) GetT0CONFIG_AUTORELOAD() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x20000000) >> 29
}
func (o *TIMG_Type) SetT0CONFIG_INCREASE(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x40000000)|value<<30)
}
func (o *TIMG_Type) GetT0CONFIG_INCREASE() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x40000000) >> 30
}
func (o *TIMG_Type) SetT0CONFIG_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetT0CONFIG_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x80000000) >> 31
}

// TIMG.T0LO
func (o *TIMG_Type) SetT0LO(value uint32) {
	volatile.StoreUint32(&o.T0LO.Reg, value)
}
func (o *TIMG_Type) GetT0LO() uint32 {
	return volatile.LoadUint32(&o.T0LO.Reg)
}

// TIMG.T0HI
func (o *TIMG_Type) SetT0HI(value uint32) {
	volatile.StoreUint32(&o.T0HI.Reg, value)
}
func (o *TIMG_Type) GetT0HI() uint32 {
	return volatile.LoadUint32(&o.T0HI.Reg)
}

// TIMG.T0UPDATE
func (o *TIMG_Type) SetT0UPDATE(value uint32) {
	volatile.StoreUint32(&o.T0UPDATE.Reg, value)
}
func (o *TIMG_Type) GetT0UPDATE() uint32 {
	return volatile.LoadUint32(&o.T0UPDATE.Reg)
}

// TIMG.T0ALARMLO
func (o *TIMG_Type) SetT0ALARMLO(value uint32) {
	volatile.StoreUint32(&o.T0ALARMLO.Reg, value)
}
func (o *TIMG_Type) GetT0ALARMLO() uint32 {
	return volatile.LoadUint32(&o.T0ALARMLO.Reg)
}

// TIMG.T0ALARMHI
func (o *TIMG_Type) SetT0ALARMHI(value uint32) {
	volatile.StoreUint32(&o.T0ALARMHI.Reg, value)
}
func (o *TIMG_Type) GetT0ALARMHI() uint32 {
	return volatile.LoadUint32(&o.T0ALARMHI.Reg)
}

// TIMG.T0LOADLO
func (o *TIMG_Type) SetT0LOADLO(value uint32) {
	volatile.StoreUint32(&o.T0LOADLO.Reg, value)
}
func (o *TIMG_Type) GetT0LOADLO() uint32 {
	return volatile.LoadUint32(&o.T0LOADLO.Reg)
}

// TIMG.T0LOADHI
func (o *TIMG_Type) SetT0LOADHI(value uint32) {
	volatile.StoreUint32(&o.T0LOADHI.Reg, value)
}
func (o *TIMG_Type) GetT0LOADHI() uint32 {
	return volatile.LoadUint32(&o.T0LOADHI.Reg)
}

// TIMG.T0LOAD
func (o *TIMG_Type) SetT0LOAD(value uint32) {
	volatile.StoreUint32(&o.T0LOAD.Reg, value)
}
func (o *TIMG_Type) GetT0LOAD() uint32 {
	return volatile.LoadUint32(&o.T0LOAD.Reg)
}

// TIMG.T1CONFIG
func (o *TIMG_Type) SetT1CONFIG_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x400)|value<<10)
}
func (o *TIMG_Type) GetT1CONFIG_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x400) >> 10
}
func (o *TIMG_Type) SetT1CONFIG_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x800)|value<<11)
}
func (o *TIMG_Type) GetT1CONFIG_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x800) >> 11
}
func (o *TIMG_Type) SetT1CONFIG_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetT1CONFIG_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x1000) >> 12
}
func (o *TIMG_Type) SetT1CONFIG_DIVIDER(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x1fffe000)|value<<13)
}
func (o *TIMG_Type) GetT1CONFIG_DIVIDER() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x1fffe000) >> 13
}
func (o *TIMG_Type) SetT1CONFIG_AUTORELOAD(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x20000000)|value<<29)
}
func (o *TIMG_Type) GetT1CONFIG_AUTORELOAD() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x20000000) >> 29
}
func (o *TIMG_Type) SetT1CONFIG_INCREASE(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x40000000)|value<<30)
}
func (o *TIMG_Type) GetT1CONFIG_INCREASE() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x40000000) >> 30
}
func (o *TIMG_Type) SetT1CONFIG_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetT1CONFIG_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x80000000) >> 31
}

// TIMG.T1LO
func (o *TIMG_Type) SetT1LO(value uint32) {
	volatile.StoreUint32(&o.T1LO.Reg, value)
}
func (o *TIMG_Type) GetT1LO() uint32 {
	return volatile.LoadUint32(&o.T1LO.Reg)
}

// TIMG.T1HI
func (o *TIMG_Type) SetT1HI(value uint32) {
	volatile.StoreUint32(&o.T1HI.Reg, value)
}
func (o *TIMG_Type) GetT1HI() uint32 {
	return volatile.LoadUint32(&o.T1HI.Reg)
}

// TIMG.T1UPDATE
func (o *TIMG_Type) SetT1UPDATE(value uint32) {
	volatile.StoreUint32(&o.T1UPDATE.Reg, value)
}
func (o *TIMG_Type) GetT1UPDATE() uint32 {
	return volatile.LoadUint32(&o.T1UPDATE.Reg)
}

// TIMG.T1ALARMLO
func (o *TIMG_Type) SetT1ALARMLO(value uint32) {
	volatile.StoreUint32(&o.T1ALARMLO.Reg, value)
}
func (o *TIMG_Type) GetT1ALARMLO() uint32 {
	return volatile.LoadUint32(&o.T1ALARMLO.Reg)
}

// TIMG.T1ALARMHI
func (o *TIMG_Type) SetT1ALARMHI(value uint32) {
	volatile.StoreUint32(&o.T1ALARMHI.Reg, value)
}
func (o *TIMG_Type) GetT1ALARMHI() uint32 {
	return volatile.LoadUint32(&o.T1ALARMHI.Reg)
}

// TIMG.T1LOADLO
func (o *TIMG_Type) SetT1LOADLO(value uint32) {
	volatile.StoreUint32(&o.T1LOADLO.Reg, value)
}
func (o *TIMG_Type) GetT1LOADLO() uint32 {
	return volatile.LoadUint32(&o.T1LOADLO.Reg)
}

// TIMG.T1LOADHI
func (o *TIMG_Type) SetT1LOADHI(value uint32) {
	volatile.StoreUint32(&o.T1LOADHI.Reg, value)
}
func (o *TIMG_Type) GetT1LOADHI() uint32 {
	return volatile.LoadUint32(&o.T1LOADHI.Reg)
}

// TIMG.T1LOAD
func (o *TIMG_Type) SetT1LOAD(value uint32) {
	volatile.StoreUint32(&o.T1LOAD.Reg, value)
}
func (o *TIMG_Type) GetT1LOAD() uint32 {
	return volatile.LoadUint32(&o.T1LOAD.Reg)
}

// TIMG.WDTCONFIG0
func (o *TIMG_Type) SetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x4000)|value<<14)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x4000) >> 14
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_SYS_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x38000)|value<<15)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_SYS_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x38000) >> 15
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_CPU_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1c0000)|value<<18)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_CPU_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1c0000) >> 18
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x200000)|value<<21)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x200000) >> 21
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x400000)|value<<22)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x400000) >> 22
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1800000)|value<<23)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG3() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1800000) >> 23
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x6000000)|value<<25)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG2() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x6000000) >> 25
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG1(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x18000000)|value<<27)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG1() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x18000000) >> 27
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG0(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x60000000)|value<<29)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG0() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x60000000) >> 29
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x80000000) >> 31
}

// TIMG.WDTCONFIG1
func (o *TIMG_Type) SetWDTCONFIG1_WDT_CLK_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG1.Reg, volatile.LoadUint32(&o.WDTCONFIG1.Reg)&^(0xffff0000)|value<<16)
}
func (o *TIMG_Type) GetWDTCONFIG1_WDT_CLK_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG1.Reg) & 0xffff0000) >> 16
}

// TIMG.WDTCONFIG2
func (o *TIMG_Type) SetWDTCONFIG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG2.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG2() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG2.Reg)
}

// TIMG.WDTCONFIG3
func (o *TIMG_Type) SetWDTCONFIG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG3.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG3() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG3.Reg)
}

// TIMG.WDTCONFIG4
func (o *TIMG_Type) SetWDTCONFIG4(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG4.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG4() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG4.Reg)
}

// TIMG.WDTCONFIG5
func (o *TIMG_Type) SetWDTCONFIG5(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG5.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG5() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG5.Reg)
}

// TIMG.WDTFEED
func (o *TIMG_Type) SetWDTFEED(value uint32) {
	volatile.StoreUint32(&o.WDTFEED.Reg, value)
}
func (o *TIMG_Type) GetWDTFEED() uint32 {
	return volatile.LoadUint32(&o.WDTFEED.Reg)
}

// TIMG.WDTWPROTECT
func (o *TIMG_Type) SetWDTWPROTECT(value uint32) {
	volatile.StoreUint32(&o.WDTWPROTECT.Reg, value)
}
func (o *TIMG_Type) GetWDTWPROTECT() uint32 {
	return volatile.LoadUint32(&o.WDTWPROTECT.Reg)
}

// TIMG.RTCCALICFG
func (o *TIMG_Type) SetRTCCALICFG_RTC_CALI_START_CYCLING(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetRTCCALICFG_RTC_CALI_START_CYCLING() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x1000) >> 12
}
func (o *TIMG_Type) SetRTCCALICFG_RTC_CALI_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x6000)|value<<13)
}
func (o *TIMG_Type) GetRTCCALICFG_RTC_CALI_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x6000) >> 13
}
func (o *TIMG_Type) SetRTCCALICFG_RTC_CALI_RDY(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x8000)|value<<15)
}
func (o *TIMG_Type) GetRTCCALICFG_RTC_CALI_RDY() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x8000) >> 15
}
func (o *TIMG_Type) SetRTCCALICFG_RTC_CALI_MAX(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x7fff0000)|value<<16)
}
func (o *TIMG_Type) GetRTCCALICFG_RTC_CALI_MAX() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x7fff0000) >> 16
}
func (o *TIMG_Type) SetRTCCALICFG_RTC_CALI_START(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetRTCCALICFG_RTC_CALI_START() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x80000000) >> 31
}

// TIMG.RTCCALICFG1
func (o *TIMG_Type) SetRTCCALICFG1_RTC_CALI_VALUE(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG1.Reg, volatile.LoadUint32(&o.RTCCALICFG1.Reg)&^(0xffffff80)|value<<7)
}
func (o *TIMG_Type) GetRTCCALICFG1_RTC_CALI_VALUE() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG1.Reg) & 0xffffff80) >> 7
}

// TIMG.LACTCONFIG
func (o *TIMG_Type) SetLACTCONFIG_LACT_RTC_ONLY(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x80)|value<<7)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_RTC_ONLY() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x80) >> 7
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_CPST_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x100)|value<<8)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_CPST_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x100) >> 8
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_LAC_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x200)|value<<9)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_LAC_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x200) >> 9
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x400)|value<<10)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x400) >> 10
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x800)|value<<11)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x800) >> 11
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x1000) >> 12
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_DIVIDER(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x1fffe000)|value<<13)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_DIVIDER() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x1fffe000) >> 13
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_AUTORELOAD(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x20000000)|value<<29)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_AUTORELOAD() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x20000000) >> 29
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_INCREASE(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x40000000)|value<<30)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_INCREASE() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x40000000) >> 30
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x80000000) >> 31
}

// TIMG.LACTRTC
func (o *TIMG_Type) SetLACTRTC_LACT_RTC_STEP_LEN(value uint32) {
	volatile.StoreUint32(&o.LACTRTC.Reg, volatile.LoadUint32(&o.LACTRTC.Reg)&^(0xffffffc0)|value<<6)
}
func (o *TIMG_Type) GetLACTRTC_LACT_RTC_STEP_LEN() uint32 {
	return (volatile.LoadUint32(&o.LACTRTC.Reg) & 0xffffffc0) >> 6
}

// TIMG.LACTLO
func (o *TIMG_Type) SetLACTLO(value uint32) {
	volatile.StoreUint32(&o.LACTLO.Reg, value)
}
func (o *TIMG_Type) GetLACTLO() uint32 {
	return volatile.LoadUint32(&o.LACTLO.Reg)
}

// TIMG.LACTHI
func (o *TIMG_Type) SetLACTHI(value uint32) {
	volatile.StoreUint32(&o.LACTHI.Reg, value)
}
func (o *TIMG_Type) GetLACTHI() uint32 {
	return volatile.LoadUint32(&o.LACTHI.Reg)
}

// TIMG.LACTUPDATE
func (o *TIMG_Type) SetLACTUPDATE(value uint32) {
	volatile.StoreUint32(&o.LACTUPDATE.Reg, value)
}
func (o *TIMG_Type) GetLACTUPDATE() uint32 {
	return volatile.LoadUint32(&o.LACTUPDATE.Reg)
}

// TIMG.LACTALARMLO
func (o *TIMG_Type) SetLACTALARMLO(value uint32) {
	volatile.StoreUint32(&o.LACTALARMLO.Reg, value)
}
func (o *TIMG_Type) GetLACTALARMLO() uint32 {
	return volatile.LoadUint32(&o.LACTALARMLO.Reg)
}

// TIMG.LACTALARMHI
func (o *TIMG_Type) SetLACTALARMHI(value uint32) {
	volatile.StoreUint32(&o.LACTALARMHI.Reg, value)
}
func (o *TIMG_Type) GetLACTALARMHI() uint32 {
	return volatile.LoadUint32(&o.LACTALARMHI.Reg)
}

// TIMG.LACTLOADLO
func (o *TIMG_Type) SetLACTLOADLO(value uint32) {
	volatile.StoreUint32(&o.LACTLOADLO.Reg, value)
}
func (o *TIMG_Type) GetLACTLOADLO() uint32 {
	return volatile.LoadUint32(&o.LACTLOADLO.Reg)
}

// TIMG.LACTLOADHI
func (o *TIMG_Type) SetLACTLOADHI(value uint32) {
	volatile.StoreUint32(&o.LACTLOADHI.Reg, value)
}
func (o *TIMG_Type) GetLACTLOADHI() uint32 {
	return volatile.LoadUint32(&o.LACTLOADHI.Reg)
}

// TIMG.LACTLOAD
func (o *TIMG_Type) SetLACTLOAD(value uint32) {
	volatile.StoreUint32(&o.LACTLOAD.Reg, value)
}
func (o *TIMG_Type) GetLACTLOAD() uint32 {
	return volatile.LoadUint32(&o.LACTLOAD.Reg)
}

// TIMG.INT_ENA_TIMERS
func (o *TIMG_Type) SetINT_ENA_TIMERS_T0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_T0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x1
}
func (o *TIMG_Type) SetINT_ENA_TIMERS_T1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_T1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_ENA_TIMERS_WDT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_WDT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_ENA_TIMERS_LACT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_LACT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x8) >> 3
}

// TIMG.INT_RAW_TIMERS
func (o *TIMG_Type) SetINT_RAW_TIMERS_T0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_T0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x1
}
func (o *TIMG_Type) SetINT_RAW_TIMERS_T1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_T1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_RAW_TIMERS_WDT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_WDT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_RAW_TIMERS_LACT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_LACT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x8) >> 3
}

// TIMG.INT_ST_TIMERS
func (o *TIMG_Type) SetINT_ST_TIMERS_T0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_T0_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x1
}
func (o *TIMG_Type) SetINT_ST_TIMERS_T1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_T1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_ST_TIMERS_WDT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_WDT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_ST_TIMERS_LACT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_LACT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x8) >> 3
}

// TIMG.INT_CLR_TIMERS
func (o *TIMG_Type) SetINT_CLR_TIMERS_T0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_T0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x1
}
func (o *TIMG_Type) SetINT_CLR_TIMERS_T1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_T1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_CLR_TIMERS_WDT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_WDT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_CLR_TIMERS_LACT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_LACT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x8) >> 3
}

// TIMG.NTIMERS_DATE
func (o *TIMG_Type) SetNTIMERS_DATE(value uint32) {
	volatile.StoreUint32(&o.NTIMERS_DATE.Reg, volatile.LoadUint32(&o.NTIMERS_DATE.Reg)&^(0xfffffff)|value)
}
func (o *TIMG_Type) GetNTIMERS_DATE() uint32 {
	return volatile.LoadUint32(&o.NTIMERS_DATE.Reg) & 0xfffffff
}

// TIMG.TIMGCLK
func (o *TIMG_Type) SetTIMGCLK_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.TIMGCLK.Reg, volatile.LoadUint32(&o.TIMGCLK.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetTIMGCLK_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.TIMGCLK.Reg) & 0x80000000) >> 31
}

// Two-Wire Automotive Interface
type TWAI_Type struct {
	MODE              volatile.Register32 // 0x0
	CMD               volatile.Register32 // 0x4
	STATUS            volatile.Register32 // 0x8
	INT_RAW           volatile.Register32 // 0xC
	INT_ENA           volatile.Register32 // 0x10
	_                 [4]byte
	BUS_TIMING_0      volatile.Register32 // 0x18
	BUS_TIMING_1      volatile.Register32 // 0x1C
	_                 [12]byte
	ARB_LOST_CAP      volatile.Register32 // 0x2C
	ERR_CODE_CAP      volatile.Register32 // 0x30
	ERR_WARNING_LIMIT volatile.Register32 // 0x34
	RX_ERR_CNT        volatile.Register32 // 0x38
	TX_ERR_CNT        volatile.Register32 // 0x3C
	DATA_0            volatile.Register32 // 0x40
	DATA_1            volatile.Register32 // 0x44
	DATA_2            volatile.Register32 // 0x48
	DATA_3            volatile.Register32 // 0x4C
	DATA_4            volatile.Register32 // 0x50
	DATA_5            volatile.Register32 // 0x54
	DATA_6            volatile.Register32 // 0x58
	DATA_7            volatile.Register32 // 0x5C
	DATA_8            volatile.Register32 // 0x60
	DATA_9            volatile.Register32 // 0x64
	DATA_10           volatile.Register32 // 0x68
	DATA_11           volatile.Register32 // 0x6C
	DATA_12           volatile.Register32 // 0x70
	RX_MESSAGE_CNT    volatile.Register32 // 0x74
	_                 [4]byte
	CLOCK_DIVIDER     volatile.Register32 // 0x7C
}

// TWAI.MODE: Mode Register
func (o *TWAI_Type) SetMODE_RESET_MODE(value uint32) {
	volatile.StoreUint32(&o.MODE.Reg, volatile.LoadUint32(&o.MODE.Reg)&^(0x1)|value)
}
func (o *TWAI_Type) GetMODE_RESET_MODE() uint32 {
	return volatile.LoadUint32(&o.MODE.Reg) & 0x1
}
func (o *TWAI_Type) SetMODE_LISTEN_ONLY_MODE(value uint32) {
	volatile.StoreUint32(&o.MODE.Reg, volatile.LoadUint32(&o.MODE.Reg)&^(0x2)|value<<1)
}
func (o *TWAI_Type) GetMODE_LISTEN_ONLY_MODE() uint32 {
	return (volatile.LoadUint32(&o.MODE.Reg) & 0x2) >> 1
}
func (o *TWAI_Type) SetMODE_SELF_TEST_MODE(value uint32) {
	volatile.StoreUint32(&o.MODE.Reg, volatile.LoadUint32(&o.MODE.Reg)&^(0x4)|value<<2)
}
func (o *TWAI_Type) GetMODE_SELF_TEST_MODE() uint32 {
	return (volatile.LoadUint32(&o.MODE.Reg) & 0x4) >> 2
}
func (o *TWAI_Type) SetMODE_RX_FILTER_MODE(value uint32) {
	volatile.StoreUint32(&o.MODE.Reg, volatile.LoadUint32(&o.MODE.Reg)&^(0x8)|value<<3)
}
func (o *TWAI_Type) GetMODE_RX_FILTER_MODE() uint32 {
	return (volatile.LoadUint32(&o.MODE.Reg) & 0x8) >> 3
}

// TWAI.CMD: Command Register
func (o *TWAI_Type) SetCMD_TX_REQ(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x1)|value)
}
func (o *TWAI_Type) GetCMD_TX_REQ() uint32 {
	return volatile.LoadUint32(&o.CMD.Reg) & 0x1
}
func (o *TWAI_Type) SetCMD_ABORT_TX(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x2)|value<<1)
}
func (o *TWAI_Type) GetCMD_ABORT_TX() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x2) >> 1
}
func (o *TWAI_Type) SetCMD_RELEASE_BUF(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x4)|value<<2)
}
func (o *TWAI_Type) GetCMD_RELEASE_BUF() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x4) >> 2
}
func (o *TWAI_Type) SetCMD_CLR_OVERRUN(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x8)|value<<3)
}
func (o *TWAI_Type) GetCMD_CLR_OVERRUN() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x8) >> 3
}
func (o *TWAI_Type) SetCMD_SELF_RX_REQ(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x10)|value<<4)
}
func (o *TWAI_Type) GetCMD_SELF_RX_REQ() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x10) >> 4
}

// TWAI.STATUS: Status register
func (o *TWAI_Type) SetSTATUS_RX_BUF_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x1)|value)
}
func (o *TWAI_Type) GetSTATUS_RX_BUF_ST() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg) & 0x1
}
func (o *TWAI_Type) SetSTATUS_OVERRUN_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x2)|value<<1)
}
func (o *TWAI_Type) GetSTATUS_OVERRUN_ST() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x2) >> 1
}
func (o *TWAI_Type) SetSTATUS_TX_BUF_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x4)|value<<2)
}
func (o *TWAI_Type) GetSTATUS_TX_BUF_ST() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x4) >> 2
}
func (o *TWAI_Type) SetSTATUS_TX_COMPLETE(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x8)|value<<3)
}
func (o *TWAI_Type) GetSTATUS_TX_COMPLETE() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x8) >> 3
}
func (o *TWAI_Type) SetSTATUS_RX_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x10)|value<<4)
}
func (o *TWAI_Type) GetSTATUS_RX_ST() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x10) >> 4
}
func (o *TWAI_Type) SetSTATUS_TX_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x20)|value<<5)
}
func (o *TWAI_Type) GetSTATUS_TX_ST() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x20) >> 5
}
func (o *TWAI_Type) SetSTATUS_ERR_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x40)|value<<6)
}
func (o *TWAI_Type) GetSTATUS_ERR_ST() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x40) >> 6
}
func (o *TWAI_Type) SetSTATUS_BUS_OFF_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x80)|value<<7)
}
func (o *TWAI_Type) GetSTATUS_BUS_OFF_ST() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x80) >> 7
}
func (o *TWAI_Type) SetSTATUS_MISS_ST(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x100)|value<<8)
}
func (o *TWAI_Type) GetSTATUS_MISS_ST() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x100) >> 8
}

// TWAI.INT_RAW: Interrupt Register
func (o *TWAI_Type) SetINT_RAW_RX_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *TWAI_Type) GetINT_RAW_RX_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *TWAI_Type) SetINT_RAW_TX_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *TWAI_Type) GetINT_RAW_TX_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *TWAI_Type) SetINT_RAW_ERR_WARN_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *TWAI_Type) GetINT_RAW_ERR_WARN_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *TWAI_Type) SetINT_RAW_OVERRUN_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *TWAI_Type) GetINT_RAW_OVERRUN_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *TWAI_Type) SetINT_RAW_ERR_PASSIVE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *TWAI_Type) GetINT_RAW_ERR_PASSIVE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *TWAI_Type) SetINT_RAW_ARB_LOST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *TWAI_Type) GetINT_RAW_ARB_LOST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *TWAI_Type) SetINT_RAW_BUS_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *TWAI_Type) GetINT_RAW_BUS_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}

// TWAI.INT_ENA: Interrupt Enable Register
func (o *TWAI_Type) SetINT_ENA_RX_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *TWAI_Type) GetINT_ENA_RX_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *TWAI_Type) SetINT_ENA_TX_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *TWAI_Type) GetINT_ENA_TX_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *TWAI_Type) SetINT_ENA_ERR_WARN_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *TWAI_Type) GetINT_ENA_ERR_WARN_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *TWAI_Type) SetINT_ENA_OVERRUN_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *TWAI_Type) GetINT_ENA_OVERRUN_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *TWAI_Type) SetINT_ENA_ERR_PASSIVE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *TWAI_Type) GetINT_ENA_ERR_PASSIVE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *TWAI_Type) SetINT_ENA_ARB_LOST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *TWAI_Type) GetINT_ENA_ARB_LOST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *TWAI_Type) SetINT_ENA_BUS_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *TWAI_Type) GetINT_ENA_BUS_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}

// TWAI.BUS_TIMING_0: Bus Timing Register 0
func (o *TWAI_Type) SetBUS_TIMING_0_BAUD_PRESC(value uint32) {
	volatile.StoreUint32(&o.BUS_TIMING_0.Reg, volatile.LoadUint32(&o.BUS_TIMING_0.Reg)&^(0x3f)|value)
}
func (o *TWAI_Type) GetBUS_TIMING_0_BAUD_PRESC() uint32 {
	return volatile.LoadUint32(&o.BUS_TIMING_0.Reg) & 0x3f
}
func (o *TWAI_Type) SetBUS_TIMING_0_SYNC_JUMP_WIDTH(value uint32) {
	volatile.StoreUint32(&o.BUS_TIMING_0.Reg, volatile.LoadUint32(&o.BUS_TIMING_0.Reg)&^(0xc0)|value<<6)
}
func (o *TWAI_Type) GetBUS_TIMING_0_SYNC_JUMP_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.BUS_TIMING_0.Reg) & 0xc0) >> 6
}

// TWAI.BUS_TIMING_1: Bus Timing Register 1
func (o *TWAI_Type) SetBUS_TIMING_1_TIME_SEG1(value uint32) {
	volatile.StoreUint32(&o.BUS_TIMING_1.Reg, volatile.LoadUint32(&o.BUS_TIMING_1.Reg)&^(0xf)|value)
}
func (o *TWAI_Type) GetBUS_TIMING_1_TIME_SEG1() uint32 {
	return volatile.LoadUint32(&o.BUS_TIMING_1.Reg) & 0xf
}
func (o *TWAI_Type) SetBUS_TIMING_1_TIME_SEG2(value uint32) {
	volatile.StoreUint32(&o.BUS_TIMING_1.Reg, volatile.LoadUint32(&o.BUS_TIMING_1.Reg)&^(0x70)|value<<4)
}
func (o *TWAI_Type) GetBUS_TIMING_1_TIME_SEG2() uint32 {
	return (volatile.LoadUint32(&o.BUS_TIMING_1.Reg) & 0x70) >> 4
}
func (o *TWAI_Type) SetBUS_TIMING_1_TIME_SAMP(value uint32) {
	volatile.StoreUint32(&o.BUS_TIMING_1.Reg, volatile.LoadUint32(&o.BUS_TIMING_1.Reg)&^(0x80)|value<<7)
}
func (o *TWAI_Type) GetBUS_TIMING_1_TIME_SAMP() uint32 {
	return (volatile.LoadUint32(&o.BUS_TIMING_1.Reg) & 0x80) >> 7
}

// TWAI.ARB_LOST_CAP: Arbitration Lost Capture Register
func (o *TWAI_Type) SetARB_LOST_CAP(value uint32) {
	volatile.StoreUint32(&o.ARB_LOST_CAP.Reg, volatile.LoadUint32(&o.ARB_LOST_CAP.Reg)&^(0x1f)|value)
}
func (o *TWAI_Type) GetARB_LOST_CAP() uint32 {
	return volatile.LoadUint32(&o.ARB_LOST_CAP.Reg) & 0x1f
}

// TWAI.ERR_CODE_CAP: Error Code Capture Register
func (o *TWAI_Type) SetERR_CODE_CAP_ECC_SEGMENT(value uint32) {
	volatile.StoreUint32(&o.ERR_CODE_CAP.Reg, volatile.LoadUint32(&o.ERR_CODE_CAP.Reg)&^(0x1f)|value)
}
func (o *TWAI_Type) GetERR_CODE_CAP_ECC_SEGMENT() uint32 {
	return volatile.LoadUint32(&o.ERR_CODE_CAP.Reg) & 0x1f
}
func (o *TWAI_Type) SetERR_CODE_CAP_ECC_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.ERR_CODE_CAP.Reg, volatile.LoadUint32(&o.ERR_CODE_CAP.Reg)&^(0x20)|value<<5)
}
func (o *TWAI_Type) GetERR_CODE_CAP_ECC_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.ERR_CODE_CAP.Reg) & 0x20) >> 5
}
func (o *TWAI_Type) SetERR_CODE_CAP_ECC_TYPE(value uint32) {
	volatile.StoreUint32(&o.ERR_CODE_CAP.Reg, volatile.LoadUint32(&o.ERR_CODE_CAP.Reg)&^(0xc0)|value<<6)
}
func (o *TWAI_Type) GetERR_CODE_CAP_ECC_TYPE() uint32 {
	return (volatile.LoadUint32(&o.ERR_CODE_CAP.Reg) & 0xc0) >> 6
}

// TWAI.ERR_WARNING_LIMIT: Error Warning Limit Register
func (o *TWAI_Type) SetERR_WARNING_LIMIT(value uint32) {
	volatile.StoreUint32(&o.ERR_WARNING_LIMIT.Reg, volatile.LoadUint32(&o.ERR_WARNING_LIMIT.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetERR_WARNING_LIMIT() uint32 {
	return volatile.LoadUint32(&o.ERR_WARNING_LIMIT.Reg) & 0xff
}

// TWAI.RX_ERR_CNT: Receive Error Counter Register
func (o *TWAI_Type) SetRX_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.RX_ERR_CNT.Reg, volatile.LoadUint32(&o.RX_ERR_CNT.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetRX_ERR_CNT() uint32 {
	return volatile.LoadUint32(&o.RX_ERR_CNT.Reg) & 0xff
}

// TWAI.TX_ERR_CNT: Transmit Error Counter Register
func (o *TWAI_Type) SetTX_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.TX_ERR_CNT.Reg, volatile.LoadUint32(&o.TX_ERR_CNT.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetTX_ERR_CNT() uint32 {
	return volatile.LoadUint32(&o.TX_ERR_CNT.Reg) & 0xff
}

// TWAI.DATA_0: Data register 0
func (o *TWAI_Type) SetDATA_0_TX_BYTE_0(value uint32) {
	volatile.StoreUint32(&o.DATA_0.Reg, volatile.LoadUint32(&o.DATA_0.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_0_TX_BYTE_0() uint32 {
	return volatile.LoadUint32(&o.DATA_0.Reg) & 0xff
}

// TWAI.DATA_1: Data register 1
func (o *TWAI_Type) SetDATA_1_TX_BYTE_1(value uint32) {
	volatile.StoreUint32(&o.DATA_1.Reg, volatile.LoadUint32(&o.DATA_1.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_1_TX_BYTE_1() uint32 {
	return volatile.LoadUint32(&o.DATA_1.Reg) & 0xff
}

// TWAI.DATA_2: Data register 2
func (o *TWAI_Type) SetDATA_2_TX_BYTE_2(value uint32) {
	volatile.StoreUint32(&o.DATA_2.Reg, volatile.LoadUint32(&o.DATA_2.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_2_TX_BYTE_2() uint32 {
	return volatile.LoadUint32(&o.DATA_2.Reg) & 0xff
}

// TWAI.DATA_3: Data register 3
func (o *TWAI_Type) SetDATA_3_TX_BYTE_3(value uint32) {
	volatile.StoreUint32(&o.DATA_3.Reg, volatile.LoadUint32(&o.DATA_3.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_3_TX_BYTE_3() uint32 {
	return volatile.LoadUint32(&o.DATA_3.Reg) & 0xff
}

// TWAI.DATA_4: Data register 4
func (o *TWAI_Type) SetDATA_4_TX_BYTE_4(value uint32) {
	volatile.StoreUint32(&o.DATA_4.Reg, volatile.LoadUint32(&o.DATA_4.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_4_TX_BYTE_4() uint32 {
	return volatile.LoadUint32(&o.DATA_4.Reg) & 0xff
}

// TWAI.DATA_5: Data register 5
func (o *TWAI_Type) SetDATA_5_TX_BYTE_5(value uint32) {
	volatile.StoreUint32(&o.DATA_5.Reg, volatile.LoadUint32(&o.DATA_5.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_5_TX_BYTE_5() uint32 {
	return volatile.LoadUint32(&o.DATA_5.Reg) & 0xff
}

// TWAI.DATA_6: Data register 6
func (o *TWAI_Type) SetDATA_6_TX_BYTE_6(value uint32) {
	volatile.StoreUint32(&o.DATA_6.Reg, volatile.LoadUint32(&o.DATA_6.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_6_TX_BYTE_6() uint32 {
	return volatile.LoadUint32(&o.DATA_6.Reg) & 0xff
}

// TWAI.DATA_7: Data register 7
func (o *TWAI_Type) SetDATA_7_TX_BYTE_7(value uint32) {
	volatile.StoreUint32(&o.DATA_7.Reg, volatile.LoadUint32(&o.DATA_7.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_7_TX_BYTE_7() uint32 {
	return volatile.LoadUint32(&o.DATA_7.Reg) & 0xff
}

// TWAI.DATA_8: Data register 8
func (o *TWAI_Type) SetDATA_8_TX_BYTE_8(value uint32) {
	volatile.StoreUint32(&o.DATA_8.Reg, volatile.LoadUint32(&o.DATA_8.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_8_TX_BYTE_8() uint32 {
	return volatile.LoadUint32(&o.DATA_8.Reg) & 0xff
}

// TWAI.DATA_9: Data register 9
func (o *TWAI_Type) SetDATA_9_TX_BYTE_9(value uint32) {
	volatile.StoreUint32(&o.DATA_9.Reg, volatile.LoadUint32(&o.DATA_9.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_9_TX_BYTE_9() uint32 {
	return volatile.LoadUint32(&o.DATA_9.Reg) & 0xff
}

// TWAI.DATA_10: Data register 10
func (o *TWAI_Type) SetDATA_10_TX_BYTE_10(value uint32) {
	volatile.StoreUint32(&o.DATA_10.Reg, volatile.LoadUint32(&o.DATA_10.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_10_TX_BYTE_10() uint32 {
	return volatile.LoadUint32(&o.DATA_10.Reg) & 0xff
}

// TWAI.DATA_11: Data register 11
func (o *TWAI_Type) SetDATA_11_TX_BYTE_11(value uint32) {
	volatile.StoreUint32(&o.DATA_11.Reg, volatile.LoadUint32(&o.DATA_11.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_11_TX_BYTE_11() uint32 {
	return volatile.LoadUint32(&o.DATA_11.Reg) & 0xff
}

// TWAI.DATA_12: Data register 12
func (o *TWAI_Type) SetDATA_12_TX_BYTE_12(value uint32) {
	volatile.StoreUint32(&o.DATA_12.Reg, volatile.LoadUint32(&o.DATA_12.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetDATA_12_TX_BYTE_12() uint32 {
	return volatile.LoadUint32(&o.DATA_12.Reg) & 0xff
}

// TWAI.RX_MESSAGE_CNT: Receive Message Counter Register
func (o *TWAI_Type) SetRX_MESSAGE_CNT_RX_MESSAGE_COUNTER(value uint32) {
	volatile.StoreUint32(&o.RX_MESSAGE_CNT.Reg, volatile.LoadUint32(&o.RX_MESSAGE_CNT.Reg)&^(0x7f)|value)
}
func (o *TWAI_Type) GetRX_MESSAGE_CNT_RX_MESSAGE_COUNTER() uint32 {
	return volatile.LoadUint32(&o.RX_MESSAGE_CNT.Reg) & 0x7f
}

// TWAI.CLOCK_DIVIDER: Clock Divider register
func (o *TWAI_Type) SetCLOCK_DIVIDER_CD(value uint32) {
	volatile.StoreUint32(&o.CLOCK_DIVIDER.Reg, volatile.LoadUint32(&o.CLOCK_DIVIDER.Reg)&^(0xff)|value)
}
func (o *TWAI_Type) GetCLOCK_DIVIDER_CD() uint32 {
	return volatile.LoadUint32(&o.CLOCK_DIVIDER.Reg) & 0xff
}
func (o *TWAI_Type) SetCLOCK_DIVIDER_CLOCK_OFF(value uint32) {
	volatile.StoreUint32(&o.CLOCK_DIVIDER.Reg, volatile.LoadUint32(&o.CLOCK_DIVIDER.Reg)&^(0x100)|value<<8)
}
func (o *TWAI_Type) GetCLOCK_DIVIDER_CLOCK_OFF() uint32 {
	return (volatile.LoadUint32(&o.CLOCK_DIVIDER.Reg) & 0x100) >> 8
}

// UART (Universal Asynchronous Receiver-Transmitter) Controller 0
type UART_Type struct {
	FIFO           volatile.Register32 // 0x0
	INT_RAW        volatile.Register32 // 0x4
	INT_ST         volatile.Register32 // 0x8
	INT_ENA        volatile.Register32 // 0xC
	INT_CLR        volatile.Register32 // 0x10
	CLKDIV         volatile.Register32 // 0x14
	AUTOBAUD       volatile.Register32 // 0x18
	STATUS         volatile.Register32 // 0x1C
	CONF0          volatile.Register32 // 0x20
	CONF1          volatile.Register32 // 0x24
	LOWPULSE       volatile.Register32 // 0x28
	HIGHPULSE      volatile.Register32 // 0x2C
	RXD_CNT        volatile.Register32 // 0x30
	FLOW_CONF      volatile.Register32 // 0x34
	SLEEP_CONF     volatile.Register32 // 0x38
	SWFC_CONF      volatile.Register32 // 0x3C
	IDLE_CONF      volatile.Register32 // 0x40
	RS485_CONF     volatile.Register32 // 0x44
	AT_CMD_PRECNT  volatile.Register32 // 0x48
	AT_CMD_POSTCNT volatile.Register32 // 0x4C
	AT_CMD_GAPTOUT volatile.Register32 // 0x50
	AT_CMD_CHAR    volatile.Register32 // 0x54
	MEM_CONF       volatile.Register32 // 0x58
	MEM_TX_STATUS  volatile.Register32 // 0x5C
	MEM_RX_STATUS  volatile.Register32 // 0x60
	MEM_CNT_STATUS volatile.Register32 // 0x64
	POSPULSE       volatile.Register32 // 0x68
	NEGPULSE       volatile.Register32 // 0x6C
	_              [8]byte
	DATE           volatile.Register32 // 0x78
	ID             volatile.Register32 // 0x7C
}

// UART.FIFO
func (o *UART_Type) SetFIFO_RXFIFO_RD_BYTE(value uint32) {
	volatile.StoreUint32(&o.FIFO.Reg, volatile.LoadUint32(&o.FIFO.Reg)&^(0xff)|value)
}
func (o *UART_Type) GetFIFO_RXFIFO_RD_BYTE() uint32 {
	return volatile.LoadUint32(&o.FIFO.Reg) & 0xff
}

// UART.INT_RAW
func (o *UART_Type) SetINT_RAW_RXFIFO_FULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_RAW_RXFIFO_FULL_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *UART_Type) SetINT_RAW_TXFIFO_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_RAW_TXFIFO_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_RAW_PARITY_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_RAW_PARITY_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_RAW_FRM_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_RAW_FRM_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_RAW_RXFIFO_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_RAW_RXFIFO_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_RAW_DSR_CHG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_RAW_DSR_CHG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_RAW_CTS_CHG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_RAW_CTS_CHG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_RAW_BRK_DET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_RAW_BRK_DET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_RAW_RXFIFO_TOUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_RAW_RXFIFO_TOUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_RAW_SW_XON_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_RAW_SW_XON_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_RAW_SW_XOFF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_RAW_SW_XOFF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_RAW_GLITCH_DET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_RAW_GLITCH_DET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_RAW_TX_BRK_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_RAW_TX_BRK_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_RAW_TX_BRK_IDLE_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_RAW_TX_BRK_IDLE_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_RAW_TX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_RAW_TX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_RAW_RS485_PARITY_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_RAW_RS485_PARITY_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_RAW_RS485_FRM_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_RAW_RS485_FRM_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_RAW_RS485_CLASH_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_RAW_RS485_CLASH_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_RAW_AT_CMD_CHAR_DET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_RAW_AT_CMD_CHAR_DET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40000) >> 18
}

// UART.INT_ST
func (o *UART_Type) SetINT_ST_RXFIFO_FULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_ST_RXFIFO_FULL_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *UART_Type) SetINT_ST_TXFIFO_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_ST_TXFIFO_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_ST_PARITY_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_ST_PARITY_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_ST_FRM_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_ST_FRM_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_ST_RXFIFO_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_ST_RXFIFO_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_ST_DSR_CHG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_ST_DSR_CHG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_ST_CTS_CHG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_ST_CTS_CHG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_ST_BRK_DET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_ST_BRK_DET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_ST_RXFIFO_TOUT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_ST_RXFIFO_TOUT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_ST_SW_XON_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_ST_SW_XON_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_ST_SW_XOFF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_ST_SW_XOFF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_ST_GLITCH_DET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_ST_GLITCH_DET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_ST_TX_BRK_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_ST_TX_BRK_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_ST_TX_BRK_IDLE_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_ST_TX_BRK_IDLE_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_ST_TX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_ST_TX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_ST_RS485_PARITY_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_ST_RS485_PARITY_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_ST_RS485_FRM_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_ST_RS485_FRM_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_ST_RS485_CLASH_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_ST_RS485_CLASH_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_ST_AT_CMD_CHAR_DET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_ST_AT_CMD_CHAR_DET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40000) >> 18
}

// UART.INT_ENA
func (o *UART_Type) SetINT_ENA_RXFIFO_FULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_ENA_RXFIFO_FULL_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *UART_Type) SetINT_ENA_TXFIFO_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_ENA_TXFIFO_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_ENA_PARITY_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_ENA_PARITY_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_ENA_FRM_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_ENA_FRM_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_ENA_RXFIFO_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_ENA_RXFIFO_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_ENA_DSR_CHG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_ENA_DSR_CHG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_ENA_CTS_CHG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_ENA_CTS_CHG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_ENA_BRK_DET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_ENA_BRK_DET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_ENA_RXFIFO_TOUT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_ENA_RXFIFO_TOUT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_ENA_SW_XON_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_ENA_SW_XON_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_ENA_SW_XOFF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_ENA_SW_XOFF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_ENA_GLITCH_DET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_ENA_GLITCH_DET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_ENA_TX_BRK_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_ENA_TX_BRK_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_ENA_TX_BRK_IDLE_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_ENA_TX_BRK_IDLE_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_ENA_TX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_ENA_TX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_ENA_RS485_PARITY_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_ENA_RS485_PARITY_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_ENA_RS485_FRM_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_ENA_RS485_FRM_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_ENA_RS485_CLASH_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_ENA_RS485_CLASH_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_ENA_AT_CMD_CHAR_DET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_ENA_AT_CMD_CHAR_DET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40000) >> 18
}

// UART.INT_CLR
func (o *UART_Type) SetINT_CLR_RXFIFO_FULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_CLR_RXFIFO_FULL_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *UART_Type) SetINT_CLR_TXFIFO_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_CLR_TXFIFO_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_CLR_PARITY_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_CLR_PARITY_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_CLR_FRM_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_CLR_FRM_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_CLR_RXFIFO_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_CLR_RXFIFO_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_CLR_DSR_CHG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_CLR_DSR_CHG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_CLR_CTS_CHG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_CLR_CTS_CHG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_CLR_BRK_DET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_CLR_BRK_DET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_CLR_RXFIFO_TOUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_CLR_RXFIFO_TOUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_CLR_SW_XON_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_CLR_SW_XON_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_CLR_SW_XOFF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_CLR_SW_XOFF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_CLR_GLITCH_DET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_CLR_GLITCH_DET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_CLR_TX_BRK_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_CLR_TX_BRK_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_CLR_TX_BRK_IDLE_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_CLR_TX_BRK_IDLE_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_CLR_TX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_CLR_TX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_CLR_RS485_PARITY_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_CLR_RS485_PARITY_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_CLR_RS485_FRM_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_CLR_RS485_FRM_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_CLR_RS485_CLASH_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_CLR_RS485_CLASH_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_CLR_AT_CMD_CHAR_DET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_CLR_AT_CMD_CHAR_DET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40000) >> 18
}

// UART.CLKDIV
func (o *UART_Type) SetCLKDIV(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetCLKDIV() uint32 {
	return volatile.LoadUint32(&o.CLKDIV.Reg) & 0xfffff
}
func (o *UART_Type) SetCLKDIV_FRAG(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xf00000)|value<<20)
}
func (o *UART_Type) GetCLKDIV_FRAG() uint32 {
	return (volatile.LoadUint32(&o.CLKDIV.Reg) & 0xf00000) >> 20
}

// UART.AUTOBAUD
func (o *UART_Type) SetAUTOBAUD_EN(value uint32) {
	volatile.StoreUint32(&o.AUTOBAUD.Reg, volatile.LoadUint32(&o.AUTOBAUD.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetAUTOBAUD_EN() uint32 {
	return volatile.LoadUint32(&o.AUTOBAUD.Reg) & 0x1
}
func (o *UART_Type) SetAUTOBAUD_GLITCH_FILT(value uint32) {
	volatile.StoreUint32(&o.AUTOBAUD.Reg, volatile.LoadUint32(&o.AUTOBAUD.Reg)&^(0xff00)|value<<8)
}
func (o *UART_Type) GetAUTOBAUD_GLITCH_FILT() uint32 {
	return (volatile.LoadUint32(&o.AUTOBAUD.Reg) & 0xff00) >> 8
}

// UART.STATUS
func (o *UART_Type) SetSTATUS_RXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xff)|value)
}
func (o *UART_Type) GetSTATUS_RXFIFO_CNT() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg) & 0xff
}
func (o *UART_Type) SetSTATUS_ST_URX_OUT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xf00)|value<<8)
}
func (o *UART_Type) GetSTATUS_ST_URX_OUT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xf00) >> 8
}
func (o *UART_Type) SetSTATUS_DSRN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetSTATUS_DSRN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetSTATUS_CTSN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetSTATUS_CTSN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetSTATUS_RXD(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetSTATUS_RXD() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetSTATUS_TXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xff0000)|value<<16)
}
func (o *UART_Type) GetSTATUS_TXFIFO_CNT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xff0000) >> 16
}
func (o *UART_Type) SetSTATUS_ST_UTX_OUT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xf000000)|value<<24)
}
func (o *UART_Type) GetSTATUS_ST_UTX_OUT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xf000000) >> 24
}
func (o *UART_Type) SetSTATUS_DTRN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *UART_Type) GetSTATUS_DTRN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x20000000) >> 29
}
func (o *UART_Type) SetSTATUS_RTSN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *UART_Type) GetSTATUS_RTSN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x40000000) >> 30
}
func (o *UART_Type) SetSTATUS_TXD(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *UART_Type) GetSTATUS_TXD() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x80000000) >> 31
}

// UART.CONF0
func (o *UART_Type) SetCONF0_PARITY(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetCONF0_PARITY() uint32 {
	return volatile.LoadUint32(&o.CONF0.Reg) & 0x1
}
func (o *UART_Type) SetCONF0_PARITY_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetCONF0_PARITY_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetCONF0_BIT_NUM(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0xc)|value<<2)
}
func (o *UART_Type) GetCONF0_BIT_NUM() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0xc) >> 2
}
func (o *UART_Type) SetCONF0_STOP_BIT_NUM(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x30)|value<<4)
}
func (o *UART_Type) GetCONF0_STOP_BIT_NUM() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x30) >> 4
}
func (o *UART_Type) SetCONF0_SW_RTS(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetCONF0_SW_RTS() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetCONF0_SW_DTR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetCONF0_SW_DTR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetCONF0_TXD_BRK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetCONF0_TXD_BRK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetCONF0_IRDA_DPLX(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetCONF0_IRDA_DPLX() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetCONF0_IRDA_TX_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetCONF0_IRDA_TX_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetCONF0_IRDA_WCTL(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetCONF0_IRDA_WCTL() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetCONF0_IRDA_TX_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetCONF0_IRDA_TX_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetCONF0_IRDA_RX_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetCONF0_IRDA_RX_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetCONF0_LOOPBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetCONF0_LOOPBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetCONF0_TX_FLOW_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetCONF0_TX_FLOW_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetCONF0_IRDA_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetCONF0_IRDA_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetCONF0_RXFIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetCONF0_RXFIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetCONF0_TXFIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetCONF0_TXFIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000) >> 18
}
func (o *UART_Type) SetCONF0_RXD_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000)|value<<19)
}
func (o *UART_Type) GetCONF0_RXD_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000) >> 19
}
func (o *UART_Type) SetCONF0_CTS_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100000)|value<<20)
}
func (o *UART_Type) GetCONF0_CTS_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100000) >> 20
}
func (o *UART_Type) SetCONF0_DSR_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200000)|value<<21)
}
func (o *UART_Type) GetCONF0_DSR_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200000) >> 21
}
func (o *UART_Type) SetCONF0_TXD_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400000)|value<<22)
}
func (o *UART_Type) GetCONF0_TXD_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400000) >> 22
}
func (o *UART_Type) SetCONF0_RTS_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800000)|value<<23)
}
func (o *UART_Type) GetCONF0_RTS_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800000) >> 23
}
func (o *UART_Type) SetCONF0_DTR_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000000)|value<<24)
}
func (o *UART_Type) GetCONF0_DTR_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000000) >> 24
}
func (o *UART_Type) SetCONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000000)|value<<25)
}
func (o *UART_Type) GetCONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000000) >> 25
}
func (o *UART_Type) SetCONF0_ERR_WR_MASK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000000)|value<<26)
}
func (o *UART_Type) GetCONF0_ERR_WR_MASK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000000) >> 26
}
func (o *UART_Type) SetCONF0_TICK_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000000)|value<<27)
}
func (o *UART_Type) GetCONF0_TICK_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000000) >> 27
}

// UART.CONF1
func (o *UART_Type) SetCONF1_RXFIFO_FULL_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f)|value)
}
func (o *UART_Type) GetCONF1_RXFIFO_FULL_THRHD() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x7f
}
func (o *UART_Type) SetCONF1_TXFIFO_EMPTY_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f00)|value<<8)
}
func (o *UART_Type) GetCONF1_TXFIFO_EMPTY_THRHD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x7f00) >> 8
}
func (o *UART_Type) SetCONF1_RX_FLOW_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f0000)|value<<16)
}
func (o *UART_Type) GetCONF1_RX_FLOW_THRHD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x7f0000) >> 16
}
func (o *UART_Type) SetCONF1_RX_FLOW_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x800000)|value<<23)
}
func (o *UART_Type) GetCONF1_RX_FLOW_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x800000) >> 23
}
func (o *UART_Type) SetCONF1_RX_TOUT_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f000000)|value<<24)
}
func (o *UART_Type) GetCONF1_RX_TOUT_THRHD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x7f000000) >> 24
}
func (o *UART_Type) SetCONF1_RX_TOUT_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *UART_Type) GetCONF1_RX_TOUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80000000) >> 31
}

// UART.LOWPULSE
func (o *UART_Type) SetLOWPULSE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.LOWPULSE.Reg, volatile.LoadUint32(&o.LOWPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetLOWPULSE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.LOWPULSE.Reg) & 0xfffff
}

// UART.HIGHPULSE
func (o *UART_Type) SetHIGHPULSE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.HIGHPULSE.Reg, volatile.LoadUint32(&o.HIGHPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetHIGHPULSE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.HIGHPULSE.Reg) & 0xfffff
}

// UART.RXD_CNT
func (o *UART_Type) SetRXD_CNT_RXD_EDGE_CNT(value uint32) {
	volatile.StoreUint32(&o.RXD_CNT.Reg, volatile.LoadUint32(&o.RXD_CNT.Reg)&^(0x3ff)|value)
}
func (o *UART_Type) GetRXD_CNT_RXD_EDGE_CNT() uint32 {
	return volatile.LoadUint32(&o.RXD_CNT.Reg) & 0x3ff
}

// UART.FLOW_CONF
func (o *UART_Type) SetFLOW_CONF_SW_FLOW_CON_EN(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetFLOW_CONF_SW_FLOW_CON_EN() uint32 {
	return volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x1
}
func (o *UART_Type) SetFLOW_CONF_XONOFF_DEL(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetFLOW_CONF_XONOFF_DEL() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetFLOW_CONF_FORCE_XON(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetFLOW_CONF_FORCE_XON() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetFLOW_CONF_FORCE_XOFF(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetFLOW_CONF_FORCE_XOFF() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetFLOW_CONF_SEND_XON(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetFLOW_CONF_SEND_XON() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetFLOW_CONF_SEND_XOFF(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetFLOW_CONF_SEND_XOFF() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x20) >> 5
}

// UART.SLEEP_CONF
func (o *UART_Type) SetSLEEP_CONF_ACTIVE_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.SLEEP_CONF.Reg, volatile.LoadUint32(&o.SLEEP_CONF.Reg)&^(0x3ff)|value)
}
func (o *UART_Type) GetSLEEP_CONF_ACTIVE_THRESHOLD() uint32 {
	return volatile.LoadUint32(&o.SLEEP_CONF.Reg) & 0x3ff
}

// UART.SWFC_CONF
func (o *UART_Type) SetSWFC_CONF_XON_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff)|value)
}
func (o *UART_Type) GetSWFC_CONF_XON_THRESHOLD() uint32 {
	return volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff
}
func (o *UART_Type) SetSWFC_CONF_XOFF_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff00)|value<<8)
}
func (o *UART_Type) GetSWFC_CONF_XOFF_THRESHOLD() uint32 {
	return (volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff00) >> 8
}
func (o *UART_Type) SetSWFC_CONF_XON_CHAR(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff0000)|value<<16)
}
func (o *UART_Type) GetSWFC_CONF_XON_CHAR() uint32 {
	return (volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff0000) >> 16
}
func (o *UART_Type) SetSWFC_CONF_XOFF_CHAR(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff000000)|value<<24)
}
func (o *UART_Type) GetSWFC_CONF_XOFF_CHAR() uint32 {
	return (volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff000000) >> 24
}

// UART.IDLE_CONF
func (o *UART_Type) SetIDLE_CONF_RX_IDLE_THRHD(value uint32) {
	volatile.StoreUint32(&o.IDLE_CONF.Reg, volatile.LoadUint32(&o.IDLE_CONF.Reg)&^(0x3ff)|value)
}
func (o *UART_Type) GetIDLE_CONF_RX_IDLE_THRHD() uint32 {
	return volatile.LoadUint32(&o.IDLE_CONF.Reg) & 0x3ff
}
func (o *UART_Type) SetIDLE_CONF_TX_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.IDLE_CONF.Reg, volatile.LoadUint32(&o.IDLE_CONF.Reg)&^(0xffc00)|value<<10)
}
func (o *UART_Type) GetIDLE_CONF_TX_IDLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.IDLE_CONF.Reg) & 0xffc00) >> 10
}
func (o *UART_Type) SetIDLE_CONF_TX_BRK_NUM(value uint32) {
	volatile.StoreUint32(&o.IDLE_CONF.Reg, volatile.LoadUint32(&o.IDLE_CONF.Reg)&^(0xff00000)|value<<20)
}
func (o *UART_Type) GetIDLE_CONF_TX_BRK_NUM() uint32 {
	return (volatile.LoadUint32(&o.IDLE_CONF.Reg) & 0xff00000) >> 20
}

// UART.RS485_CONF
func (o *UART_Type) SetRS485_CONF_RS485_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetRS485_CONF_RS485_EN() uint32 {
	return volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x1
}
func (o *UART_Type) SetRS485_CONF_DL0_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetRS485_CONF_DL0_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetRS485_CONF_DL1_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetRS485_CONF_DL1_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetRS485_CONF_RS485TX_RX_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetRS485_CONF_RS485TX_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetRS485_CONF_RS485RXBY_TX_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetRS485_CONF_RS485RXBY_TX_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetRS485_CONF_RS485_RX_DLY_NUM(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetRS485_CONF_RS485_RX_DLY_NUM() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetRS485_CONF_RS485_TX_DLY_NUM(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x3c0)|value<<6)
}
func (o *UART_Type) GetRS485_CONF_RS485_TX_DLY_NUM() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x3c0) >> 6
}

// UART.AT_CMD_PRECNT
func (o *UART_Type) SetAT_CMD_PRECNT_PRE_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_PRECNT.Reg, volatile.LoadUint32(&o.AT_CMD_PRECNT.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetAT_CMD_PRECNT_PRE_IDLE_NUM() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_PRECNT.Reg) & 0xffffff
}

// UART.AT_CMD_POSTCNT
func (o *UART_Type) SetAT_CMD_POSTCNT_POST_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_POSTCNT.Reg, volatile.LoadUint32(&o.AT_CMD_POSTCNT.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetAT_CMD_POSTCNT_POST_IDLE_NUM() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_POSTCNT.Reg) & 0xffffff
}

// UART.AT_CMD_GAPTOUT
func (o *UART_Type) SetAT_CMD_GAPTOUT_RX_GAP_TOUT(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_GAPTOUT.Reg, volatile.LoadUint32(&o.AT_CMD_GAPTOUT.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetAT_CMD_GAPTOUT_RX_GAP_TOUT() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_GAPTOUT.Reg) & 0xffffff
}

// UART.AT_CMD_CHAR
func (o *UART_Type) SetAT_CMD_CHAR(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_CHAR.Reg, volatile.LoadUint32(&o.AT_CMD_CHAR.Reg)&^(0xff)|value)
}
func (o *UART_Type) GetAT_CMD_CHAR() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_CHAR.Reg) & 0xff
}
func (o *UART_Type) SetAT_CMD_CHAR_CHAR_NUM(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_CHAR.Reg, volatile.LoadUint32(&o.AT_CMD_CHAR.Reg)&^(0xff00)|value<<8)
}
func (o *UART_Type) GetAT_CMD_CHAR_CHAR_NUM() uint32 {
	return (volatile.LoadUint32(&o.AT_CMD_CHAR.Reg) & 0xff00) >> 8
}

// UART.MEM_CONF
func (o *UART_Type) SetMEM_CONF_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetMEM_CONF_MEM_PD() uint32 {
	return volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x1
}
func (o *UART_Type) SetMEM_CONF_RX_SIZE(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x78)|value<<3)
}
func (o *UART_Type) GetMEM_CONF_RX_SIZE() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x78) >> 3
}
func (o *UART_Type) SetMEM_CONF_TX_SIZE(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x780)|value<<7)
}
func (o *UART_Type) GetMEM_CONF_TX_SIZE() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x780) >> 7
}
func (o *UART_Type) SetMEM_CONF_RX_FLOW_THRHD_H3(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x38000)|value<<15)
}
func (o *UART_Type) GetMEM_CONF_RX_FLOW_THRHD_H3() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x38000) >> 15
}
func (o *UART_Type) SetMEM_CONF_RX_TOUT_THRHD_H3(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x1c0000)|value<<18)
}
func (o *UART_Type) GetMEM_CONF_RX_TOUT_THRHD_H3() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x1c0000) >> 18
}
func (o *UART_Type) SetMEM_CONF_XON_THRESHOLD_H2(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x600000)|value<<21)
}
func (o *UART_Type) GetMEM_CONF_XON_THRESHOLD_H2() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x600000) >> 21
}
func (o *UART_Type) SetMEM_CONF_XOFF_THRESHOLD_H2(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x1800000)|value<<23)
}
func (o *UART_Type) GetMEM_CONF_XOFF_THRESHOLD_H2() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x1800000) >> 23
}
func (o *UART_Type) SetMEM_CONF_RX_MEM_FULL_THRHD(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0xe000000)|value<<25)
}
func (o *UART_Type) GetMEM_CONF_RX_MEM_FULL_THRHD() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0xe000000) >> 25
}
func (o *UART_Type) SetMEM_CONF_TX_MEM_EMPTY_THRHD(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x70000000)|value<<28)
}
func (o *UART_Type) GetMEM_CONF_TX_MEM_EMPTY_THRHD() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x70000000) >> 28
}

// UART.MEM_TX_STATUS
func (o *UART_Type) SetMEM_TX_STATUS(value uint32) {
	volatile.StoreUint32(&o.MEM_TX_STATUS.Reg, volatile.LoadUint32(&o.MEM_TX_STATUS.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetMEM_TX_STATUS() uint32 {
	return volatile.LoadUint32(&o.MEM_TX_STATUS.Reg) & 0xffffff
}

// UART.MEM_RX_STATUS
func (o *UART_Type) SetMEM_RX_STATUS(value uint32) {
	volatile.StoreUint32(&o.MEM_RX_STATUS.Reg, volatile.LoadUint32(&o.MEM_RX_STATUS.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetMEM_RX_STATUS() uint32 {
	return volatile.LoadUint32(&o.MEM_RX_STATUS.Reg) & 0xffffff
}
func (o *UART_Type) SetMEM_RX_STATUS_MEM_RX_RD_ADDR(value uint32) {
	volatile.StoreUint32(&o.MEM_RX_STATUS.Reg, volatile.LoadUint32(&o.MEM_RX_STATUS.Reg)&^(0x1ffc)|value<<2)
}
func (o *UART_Type) GetMEM_RX_STATUS_MEM_RX_RD_ADDR() uint32 {
	return (volatile.LoadUint32(&o.MEM_RX_STATUS.Reg) & 0x1ffc) >> 2
}
func (o *UART_Type) SetMEM_RX_STATUS_MEM_RX_WR_ADDR(value uint32) {
	volatile.StoreUint32(&o.MEM_RX_STATUS.Reg, volatile.LoadUint32(&o.MEM_RX_STATUS.Reg)&^(0xffe000)|value<<13)
}
func (o *UART_Type) GetMEM_RX_STATUS_MEM_RX_WR_ADDR() uint32 {
	return (volatile.LoadUint32(&o.MEM_RX_STATUS.Reg) & 0xffe000) >> 13
}

// UART.MEM_CNT_STATUS
func (o *UART_Type) SetMEM_CNT_STATUS_RX_MEM_CNT(value uint32) {
	volatile.StoreUint32(&o.MEM_CNT_STATUS.Reg, volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg)&^(0x7)|value)
}
func (o *UART_Type) GetMEM_CNT_STATUS_RX_MEM_CNT() uint32 {
	return volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg) & 0x7
}
func (o *UART_Type) SetMEM_CNT_STATUS_TX_MEM_CNT(value uint32) {
	volatile.StoreUint32(&o.MEM_CNT_STATUS.Reg, volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg)&^(0x38)|value<<3)
}
func (o *UART_Type) GetMEM_CNT_STATUS_TX_MEM_CNT() uint32 {
	return (volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg) & 0x38) >> 3
}

// UART.POSPULSE
func (o *UART_Type) SetPOSPULSE_POSEDGE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.POSPULSE.Reg, volatile.LoadUint32(&o.POSPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetPOSPULSE_POSEDGE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.POSPULSE.Reg) & 0xfffff
}

// UART.NEGPULSE
func (o *UART_Type) SetNEGPULSE_NEGEDGE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.NEGPULSE.Reg, volatile.LoadUint32(&o.NEGPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetNEGPULSE_NEGEDGE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.NEGPULSE.Reg) & 0xfffff
}

// UART.DATE
func (o *UART_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *UART_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// UART.ID
func (o *UART_Type) SetID(value uint32) {
	volatile.StoreUint32(&o.ID.Reg, value)
}
func (o *UART_Type) GetID() uint32 {
	return volatile.LoadUint32(&o.ID.Reg)
}

// Universal Host Controller Interface 0
type UHCI_Type struct {
	CONF0                    volatile.Register32 // 0x0
	INT_RAW                  volatile.Register32 // 0x4
	INT_ST                   volatile.Register32 // 0x8
	INT_ENA                  volatile.Register32 // 0xC
	INT_CLR                  volatile.Register32 // 0x10
	DMA_OUT_STATUS           volatile.Register32 // 0x14
	DMA_OUT_PUSH             volatile.Register32 // 0x18
	DMA_IN_STATUS            volatile.Register32 // 0x1C
	DMA_IN_POP               volatile.Register32 // 0x20
	DMA_OUT_LINK             volatile.Register32 // 0x24
	DMA_IN_LINK              volatile.Register32 // 0x28
	CONF1                    volatile.Register32 // 0x2C
	STATE0                   volatile.Register32 // 0x30
	STATE1                   volatile.Register32 // 0x34
	DMA_OUT_EOF_DES_ADDR     volatile.Register32 // 0x38
	DMA_IN_SUC_EOF_DES_ADDR  volatile.Register32 // 0x3C
	DMA_IN_ERR_EOF_DES_ADDR  volatile.Register32 // 0x40
	DMA_OUT_EOF_BFR_DES_ADDR volatile.Register32 // 0x44
	AHB_TEST                 volatile.Register32 // 0x48
	DMA_IN_DSCR              volatile.Register32 // 0x4C
	DMA_IN_DSCR_BF0          volatile.Register32 // 0x50
	DMA_IN_DSCR_BF1          volatile.Register32 // 0x54
	DMA_OUT_DSCR             volatile.Register32 // 0x58
	DMA_OUT_DSCR_BF0         volatile.Register32 // 0x5C
	DMA_OUT_DSCR_BF1         volatile.Register32 // 0x60
	ESCAPE_CONF              volatile.Register32 // 0x64
	HUNG_CONF                volatile.Register32 // 0x68
	ACK_NUM                  volatile.Register32 // 0x6C
	RX_HEAD                  volatile.Register32 // 0x70
	QUICK_SENT               volatile.Register32 // 0x74
	Q0_WORD0                 volatile.Register32 // 0x78
	Q0_WORD1                 volatile.Register32 // 0x7C
	Q1_WORD0                 volatile.Register32 // 0x80
	Q1_WORD1                 volatile.Register32 // 0x84
	Q2_WORD0                 volatile.Register32 // 0x88
	Q2_WORD1                 volatile.Register32 // 0x8C
	Q3_WORD0                 volatile.Register32 // 0x90
	Q3_WORD1                 volatile.Register32 // 0x94
	Q4_WORD0                 volatile.Register32 // 0x98
	Q4_WORD1                 volatile.Register32 // 0x9C
	Q5_WORD0                 volatile.Register32 // 0xA0
	Q5_WORD1                 volatile.Register32 // 0xA4
	Q6_WORD0                 volatile.Register32 // 0xA8
	Q6_WORD1                 volatile.Register32 // 0xAC
	ESC_CONF0                volatile.Register32 // 0xB0
	ESC_CONF1                volatile.Register32 // 0xB4
	ESC_CONF2                volatile.Register32 // 0xB8
	ESC_CONF3                volatile.Register32 // 0xBC
	PKT_THRES                volatile.Register32 // 0xC0
	_                        [56]byte
	DATE                     volatile.Register32 // 0xFC
}

// UHCI.CONF0
func (o *UHCI_Type) SetCONF0_IN_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetCONF0_IN_RST() uint32 {
	return volatile.LoadUint32(&o.CONF0.Reg) & 0x1
}
func (o *UHCI_Type) SetCONF0_OUT_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetCONF0_OUT_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetCONF0_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetCONF0_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetCONF0_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetCONF0_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetCONF0_IN_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetCONF0_IN_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetCONF0_OUT_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetCONF0_OUT_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetCONF0_OUT_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetCONF0_OUT_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetCONF0_OUT_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetCONF0_OUT_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetCONF0_OUT_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetCONF0_OUT_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetCONF0_UART0_CE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetCONF0_UART0_CE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetCONF0_UART1_CE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetCONF0_UART1_CE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetCONF0_UART2_CE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetCONF0_UART2_CE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetCONF0_OUTDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetCONF0_OUTDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetCONF0_INDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetCONF0_INDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetCONF0_OUT_DATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetCONF0_OUT_DATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetCONF0_MEM_TRANS_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetCONF0_MEM_TRANS_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetCONF0_SEPER_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetCONF0_SEPER_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetCONF0_HEAD_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000)|value<<17)
}
func (o *UHCI_Type) GetCONF0_HEAD_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000) >> 17
}
func (o *UHCI_Type) SetCONF0_CRC_REC_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000)|value<<18)
}
func (o *UHCI_Type) GetCONF0_CRC_REC_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000) >> 18
}
func (o *UHCI_Type) SetCONF0_UART_IDLE_EOF_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000)|value<<19)
}
func (o *UHCI_Type) GetCONF0_UART_IDLE_EOF_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000) >> 19
}
func (o *UHCI_Type) SetCONF0_LEN_EOF_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100000)|value<<20)
}
func (o *UHCI_Type) GetCONF0_LEN_EOF_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100000) >> 20
}
func (o *UHCI_Type) SetCONF0_ENCODE_CRC_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200000)|value<<21)
}
func (o *UHCI_Type) GetCONF0_ENCODE_CRC_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200000) >> 21
}
func (o *UHCI_Type) SetCONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400000)|value<<22)
}
func (o *UHCI_Type) GetCONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400000) >> 22
}
func (o *UHCI_Type) SetCONF0_UART_RX_BRK_EOF_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800000)|value<<23)
}
func (o *UHCI_Type) GetCONF0_UART_RX_BRK_EOF_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800000) >> 23
}

// UHCI.INT_RAW
func (o *UHCI_Type) SetINT_RAW_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_RAW_RX_START_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}
func (o *UHCI_Type) SetINT_RAW_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_RAW_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_RAW_RX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_RAW_RX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_RAW_TX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_RAW_TX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_RAW_IN_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_RAW_IN_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_RAW_IN_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_RAW_IN_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_RAW_IN_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_RAW_IN_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_RAW_OUT_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_RAW_OUT_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_RAW_OUT_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_RAW_OUT_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_RAW_IN_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_RAW_IN_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_RAW_OUT_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_RAW_OUT_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_RAW_IN_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_RAW_IN_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_RAW_OUTLINK_EOF_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_RAW_OUTLINK_EOF_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_RAW_OUT_TOTAL_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_RAW_OUT_TOTAL_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_RAW_SEND_S_Q_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_RAW_SEND_S_Q_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_RAW_SEND_A_Q_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_RAW_SEND_A_Q_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_RAW_DMA_INFIFO_FULL_WM_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_RAW_DMA_INFIFO_FULL_WM_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}

// UHCI.INT_ST
func (o *UHCI_Type) SetINT_ST_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_ST_RX_START_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}
func (o *UHCI_Type) SetINT_ST_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_ST_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_ST_RX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_ST_RX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_ST_TX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_ST_TX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_ST_IN_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_ST_IN_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_ST_IN_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_ST_IN_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_ST_IN_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_ST_IN_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_ST_OUT_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_ST_OUT_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_ST_OUT_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_ST_OUT_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_ST_IN_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_ST_IN_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_ST_OUT_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_ST_OUT_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_ST_IN_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_ST_IN_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_ST_OUTLINK_EOF_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_ST_OUTLINK_EOF_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_ST_OUT_TOTAL_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_ST_OUT_TOTAL_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_ST_SEND_S_Q_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_ST_SEND_S_Q_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_ST_SEND_A_Q_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_ST_SEND_A_Q_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_ST_DMA_INFIFO_FULL_WM_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_ST_DMA_INFIFO_FULL_WM_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}

// UHCI.INT_ENA
func (o *UHCI_Type) SetINT_ENA_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_ENA_RX_START_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}
func (o *UHCI_Type) SetINT_ENA_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_ENA_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_ENA_RX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_ENA_RX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_ENA_TX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_ENA_TX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_ENA_IN_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_ENA_IN_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_ENA_IN_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_ENA_IN_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_ENA_IN_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_ENA_IN_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_ENA_OUT_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_ENA_OUT_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_ENA_OUT_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_ENA_OUT_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_ENA_IN_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_ENA_IN_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_ENA_OUT_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_ENA_OUT_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_ENA_IN_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_ENA_IN_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_ENA_OUTLINK_EOF_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_ENA_OUTLINK_EOF_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_ENA_OUT_TOTAL_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_ENA_OUT_TOTAL_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_ENA_SEND_S_Q_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_ENA_SEND_S_Q_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_ENA_SEND_A_Q_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_ENA_SEND_A_Q_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_ENA_DMA_INFIFO_FULL_WM_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_ENA_DMA_INFIFO_FULL_WM_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}

// UHCI.INT_CLR
func (o *UHCI_Type) SetINT_CLR_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_CLR_RX_START_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}
func (o *UHCI_Type) SetINT_CLR_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_CLR_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_CLR_RX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_CLR_RX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_CLR_TX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_CLR_TX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_CLR_IN_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_CLR_IN_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_CLR_IN_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_CLR_IN_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_CLR_IN_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_CLR_IN_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_CLR_OUT_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_CLR_OUT_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_CLR_OUT_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_CLR_OUT_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_CLR_IN_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_CLR_IN_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_CLR_OUT_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_CLR_OUT_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_CLR_IN_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_CLR_IN_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_CLR_OUTLINK_EOF_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_CLR_OUTLINK_EOF_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_CLR_OUT_TOTAL_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_CLR_OUT_TOTAL_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_CLR_SEND_S_Q_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_CLR_SEND_S_Q_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_CLR_SEND_A_Q_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_CLR_SEND_A_Q_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_CLR_DMA_INFIFO_FULL_WM_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_CLR_DMA_INFIFO_FULL_WM_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}

// UHCI.DMA_OUT_STATUS
func (o *UHCI_Type) SetDMA_OUT_STATUS_OUT_FULL(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_STATUS.Reg, volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetDMA_OUT_STATUS_OUT_FULL() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg) & 0x1
}
func (o *UHCI_Type) SetDMA_OUT_STATUS_OUT_EMPTY(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_STATUS.Reg, volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetDMA_OUT_STATUS_OUT_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg) & 0x2) >> 1
}

// UHCI.DMA_OUT_PUSH
func (o *UHCI_Type) SetDMA_OUT_PUSH_OUTFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_PUSH.Reg, volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg)&^(0x1ff)|value)
}
func (o *UHCI_Type) GetDMA_OUT_PUSH_OUTFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg) & 0x1ff
}
func (o *UHCI_Type) SetDMA_OUT_PUSH_OUTFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_PUSH.Reg, volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetDMA_OUT_PUSH_OUTFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg) & 0x10000) >> 16
}

// UHCI.DMA_IN_STATUS
func (o *UHCI_Type) SetDMA_IN_STATUS_IN_FULL(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_STATUS.Reg, volatile.LoadUint32(&o.DMA_IN_STATUS.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetDMA_IN_STATUS_IN_FULL() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_STATUS.Reg) & 0x1
}
func (o *UHCI_Type) SetDMA_IN_STATUS_IN_EMPTY(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_STATUS.Reg, volatile.LoadUint32(&o.DMA_IN_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetDMA_IN_STATUS_IN_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_STATUS.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetDMA_IN_STATUS_RX_ERR_CAUSE(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_STATUS.Reg, volatile.LoadUint32(&o.DMA_IN_STATUS.Reg)&^(0x70)|value<<4)
}
func (o *UHCI_Type) GetDMA_IN_STATUS_RX_ERR_CAUSE() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_STATUS.Reg) & 0x70) >> 4
}

// UHCI.DMA_IN_POP
func (o *UHCI_Type) SetDMA_IN_POP_INFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_POP.Reg, volatile.LoadUint32(&o.DMA_IN_POP.Reg)&^(0xfff)|value)
}
func (o *UHCI_Type) GetDMA_IN_POP_INFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_POP.Reg) & 0xfff
}
func (o *UHCI_Type) SetDMA_IN_POP_INFIFO_POP(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_POP.Reg, volatile.LoadUint32(&o.DMA_IN_POP.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetDMA_IN_POP_INFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_POP.Reg) & 0x10000) >> 16
}

// UHCI.DMA_OUT_LINK
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0xfffff)|value)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0xfffff
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x10000000) >> 28
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x20000000) >> 29
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x40000000) >> 30
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x80000000) >> 31
}

// UHCI.DMA_IN_LINK
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0xfffff)|value)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0xfffff
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x100000)|value<<20)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x100000) >> 20
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x10000000) >> 28
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x20000000) >> 29
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x40000000) >> 30
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x80000000) >> 31
}

// UHCI.CONF1
func (o *UHCI_Type) SetCONF1_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetCONF1_CHECK_SUM_EN() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x1
}
func (o *UHCI_Type) SetCONF1_CHECK_SEQ_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetCONF1_CHECK_SEQ_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetCONF1_CRC_DISABLE(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetCONF1_CRC_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetCONF1_SAVE_HEAD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetCONF1_SAVE_HEAD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetCONF1_TX_CHECK_SUM_RE(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetCONF1_TX_CHECK_SUM_RE() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetCONF1_TX_ACK_NUM_RE(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetCONF1_TX_ACK_NUM_RE() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetCONF1_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetCONF1_CHECK_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetCONF1_WAIT_SW_START(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetCONF1_WAIT_SW_START() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetCONF1_SW_START(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetCONF1_SW_START() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetCONF1_DMA_INFIFO_FULL_THRS(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x1ffe00)|value<<9)
}
func (o *UHCI_Type) GetCONF1_DMA_INFIFO_FULL_THRS() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x1ffe00) >> 9
}

// UHCI.STATE0
func (o *UHCI_Type) SetSTATE0(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, value)
}
func (o *UHCI_Type) GetSTATE0() uint32 {
	return volatile.LoadUint32(&o.STATE0.Reg)
}

// UHCI.STATE1
func (o *UHCI_Type) SetSTATE1(value uint32) {
	volatile.StoreUint32(&o.STATE1.Reg, value)
}
func (o *UHCI_Type) GetSTATE1() uint32 {
	return volatile.LoadUint32(&o.STATE1.Reg)
}

// UHCI.DMA_OUT_EOF_DES_ADDR
func (o *UHCI_Type) SetDMA_OUT_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_EOF_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_EOF_DES_ADDR.Reg)
}

// UHCI.DMA_IN_SUC_EOF_DES_ADDR
func (o *UHCI_Type) SetDMA_IN_SUC_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_SUC_EOF_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_SUC_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_SUC_EOF_DES_ADDR.Reg)
}

// UHCI.DMA_IN_ERR_EOF_DES_ADDR
func (o *UHCI_Type) SetDMA_IN_ERR_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_ERR_EOF_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_ERR_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_ERR_EOF_DES_ADDR.Reg)
}

// UHCI.DMA_OUT_EOF_BFR_DES_ADDR
func (o *UHCI_Type) SetDMA_OUT_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_EOF_BFR_DES_ADDR.Reg)
}

// UHCI.AHB_TEST
func (o *UHCI_Type) SetAHB_TEST_AHB_TESTMODE(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x7)|value)
}
func (o *UHCI_Type) GetAHB_TEST_AHB_TESTMODE() uint32 {
	return volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x7
}
func (o *UHCI_Type) SetAHB_TEST_AHB_TESTADDR(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x30)|value<<4)
}
func (o *UHCI_Type) GetAHB_TEST_AHB_TESTADDR() uint32 {
	return (volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x30) >> 4
}

// UHCI.DMA_IN_DSCR
func (o *UHCI_Type) SetDMA_IN_DSCR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_DSCR.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_DSCR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_DSCR.Reg)
}

// UHCI.DMA_IN_DSCR_BF0
func (o *UHCI_Type) SetDMA_IN_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_DSCR_BF0.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_DSCR_BF0.Reg)
}

// UHCI.DMA_IN_DSCR_BF1
func (o *UHCI_Type) SetDMA_IN_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_DSCR_BF1.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_DSCR_BF1.Reg)
}

// UHCI.DMA_OUT_DSCR
func (o *UHCI_Type) SetDMA_OUT_DSCR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_DSCR.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_DSCR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_DSCR.Reg)
}

// UHCI.DMA_OUT_DSCR_BF0
func (o *UHCI_Type) SetDMA_OUT_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_DSCR_BF0.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_DSCR_BF0.Reg)
}

// UHCI.DMA_OUT_DSCR_BF1
func (o *UHCI_Type) SetDMA_OUT_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_DSCR_BF1.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_DSCR_BF1.Reg)
}

// UHCI.ESCAPE_CONF
func (o *UHCI_Type) SetESCAPE_CONF_TX_C0_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_C0_ESC_EN() uint32 {
	return volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x1
}
func (o *UHCI_Type) SetESCAPE_CONF_TX_DB_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_DB_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetESCAPE_CONF_TX_11_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_11_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetESCAPE_CONF_TX_13_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_13_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetESCAPE_CONF_RX_C0_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_C0_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetESCAPE_CONF_RX_DB_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_DB_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetESCAPE_CONF_RX_11_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_11_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetESCAPE_CONF_RX_13_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_13_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x80) >> 7
}

// UHCI.HUNG_CONF
func (o *UHCI_Type) SetHUNG_CONF_TXFIFO_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetHUNG_CONF_TXFIFO_TIMEOUT() uint32 {
	return volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0xff
}
func (o *UHCI_Type) SetHUNG_CONF_TXFIFO_TIMEOUT_SHIFT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x700)|value<<8)
}
func (o *UHCI_Type) GetHUNG_CONF_TXFIFO_TIMEOUT_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x700) >> 8
}
func (o *UHCI_Type) SetHUNG_CONF_TXFIFO_TIMEOUT_ENA(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetHUNG_CONF_TXFIFO_TIMEOUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetHUNG_CONF_RXFIFO_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0xff000)|value<<12)
}
func (o *UHCI_Type) GetHUNG_CONF_RXFIFO_TIMEOUT() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0xff000) >> 12
}
func (o *UHCI_Type) SetHUNG_CONF_RXFIFO_TIMEOUT_SHIFT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x700000)|value<<20)
}
func (o *UHCI_Type) GetHUNG_CONF_RXFIFO_TIMEOUT_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x700000) >> 20
}
func (o *UHCI_Type) SetHUNG_CONF_RXFIFO_TIMEOUT_ENA(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *UHCI_Type) GetHUNG_CONF_RXFIFO_TIMEOUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x800000) >> 23
}

// UHCI.RX_HEAD
func (o *UHCI_Type) SetRX_HEAD(value uint32) {
	volatile.StoreUint32(&o.RX_HEAD.Reg, value)
}
func (o *UHCI_Type) GetRX_HEAD() uint32 {
	return volatile.LoadUint32(&o.RX_HEAD.Reg)
}

// UHCI.QUICK_SENT
func (o *UHCI_Type) SetQUICK_SENT_SINGLE_SEND_NUM(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x7)|value)
}
func (o *UHCI_Type) GetQUICK_SENT_SINGLE_SEND_NUM() uint32 {
	return volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x7
}
func (o *UHCI_Type) SetQUICK_SENT_SINGLE_SEND_EN(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetQUICK_SENT_SINGLE_SEND_EN() uint32 {
	return (volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetQUICK_SENT_ALWAYS_SEND_NUM(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x70)|value<<4)
}
func (o *UHCI_Type) GetQUICK_SENT_ALWAYS_SEND_NUM() uint32 {
	return (volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x70) >> 4
}
func (o *UHCI_Type) SetQUICK_SENT_ALWAYS_SEND_EN(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetQUICK_SENT_ALWAYS_SEND_EN() uint32 {
	return (volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x80) >> 7
}

// UHCI.Q0_WORD0
func (o *UHCI_Type) SetQ0_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q0_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ0_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q0_WORD0.Reg)
}

// UHCI.Q0_WORD1
func (o *UHCI_Type) SetQ0_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q0_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ0_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q0_WORD1.Reg)
}

// UHCI.Q1_WORD0
func (o *UHCI_Type) SetQ1_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q1_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ1_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q1_WORD0.Reg)
}

// UHCI.Q1_WORD1
func (o *UHCI_Type) SetQ1_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q1_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ1_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q1_WORD1.Reg)
}

// UHCI.Q2_WORD0
func (o *UHCI_Type) SetQ2_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q2_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ2_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q2_WORD0.Reg)
}

// UHCI.Q2_WORD1
func (o *UHCI_Type) SetQ2_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q2_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ2_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q2_WORD1.Reg)
}

// UHCI.Q3_WORD0
func (o *UHCI_Type) SetQ3_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q3_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ3_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q3_WORD0.Reg)
}

// UHCI.Q3_WORD1
func (o *UHCI_Type) SetQ3_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q3_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ3_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q3_WORD1.Reg)
}

// UHCI.Q4_WORD0
func (o *UHCI_Type) SetQ4_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q4_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ4_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q4_WORD0.Reg)
}

// UHCI.Q4_WORD1
func (o *UHCI_Type) SetQ4_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q4_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ4_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q4_WORD1.Reg)
}

// UHCI.Q5_WORD0
func (o *UHCI_Type) SetQ5_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q5_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ5_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q5_WORD0.Reg)
}

// UHCI.Q5_WORD1
func (o *UHCI_Type) SetQ5_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q5_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ5_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q5_WORD1.Reg)
}

// UHCI.Q6_WORD0
func (o *UHCI_Type) SetQ6_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q6_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ6_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q6_WORD0.Reg)
}

// UHCI.Q6_WORD1
func (o *UHCI_Type) SetQ6_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q6_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ6_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q6_WORD1.Reg)
}

// UHCI.ESC_CONF0
func (o *UHCI_Type) SetESC_CONF0_SEPER_CHAR(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF0.Reg, volatile.LoadUint32(&o.ESC_CONF0.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF0_SEPER_CHAR() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF0.Reg) & 0xff
}
func (o *UHCI_Type) SetESC_CONF0_SEPER_ESC_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF0.Reg, volatile.LoadUint32(&o.ESC_CONF0.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF0_SEPER_ESC_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF0.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF0_SEPER_ESC_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF0.Reg, volatile.LoadUint32(&o.ESC_CONF0.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF0_SEPER_ESC_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF0.Reg) & 0xff0000) >> 16
}

// UHCI.ESC_CONF1
func (o *UHCI_Type) SetESC_CONF1_ESC_SEQ0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF1.Reg, volatile.LoadUint32(&o.ESC_CONF1.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF1_ESC_SEQ0() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF1.Reg) & 0xff
}
func (o *UHCI_Type) SetESC_CONF1_ESC_SEQ0_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF1.Reg, volatile.LoadUint32(&o.ESC_CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF1_ESC_SEQ0_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF1.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF1_ESC_SEQ0_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF1.Reg, volatile.LoadUint32(&o.ESC_CONF1.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF1_ESC_SEQ0_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF1.Reg) & 0xff0000) >> 16
}

// UHCI.ESC_CONF2
func (o *UHCI_Type) SetESC_CONF2_ESC_SEQ1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF2.Reg, volatile.LoadUint32(&o.ESC_CONF2.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF2_ESC_SEQ1() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF2.Reg) & 0xff
}
func (o *UHCI_Type) SetESC_CONF2_ESC_SEQ1_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF2.Reg, volatile.LoadUint32(&o.ESC_CONF2.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF2_ESC_SEQ1_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF2.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF2_ESC_SEQ1_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF2.Reg, volatile.LoadUint32(&o.ESC_CONF2.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF2_ESC_SEQ1_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF2.Reg) & 0xff0000) >> 16
}

// UHCI.ESC_CONF3
func (o *UHCI_Type) SetESC_CONF3_ESC_SEQ2(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF3.Reg, volatile.LoadUint32(&o.ESC_CONF3.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF3_ESC_SEQ2() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF3.Reg) & 0xff
}
func (o *UHCI_Type) SetESC_CONF3_ESC_SEQ2_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF3.Reg, volatile.LoadUint32(&o.ESC_CONF3.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF3_ESC_SEQ2_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF3.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF3_ESC_SEQ2_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF3.Reg, volatile.LoadUint32(&o.ESC_CONF3.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF3_ESC_SEQ2_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF3.Reg) & 0xff0000) >> 16
}

// UHCI.PKT_THRES
func (o *UHCI_Type) SetPKT_THRES_PKT_THRS(value uint32) {
	volatile.StoreUint32(&o.PKT_THRES.Reg, volatile.LoadUint32(&o.PKT_THRES.Reg)&^(0x1fff)|value)
}
func (o *UHCI_Type) GetPKT_THRES_PKT_THRS() uint32 {
	return volatile.LoadUint32(&o.PKT_THRES.Reg) & 0x1fff
}

// UHCI.DATE
func (o *UHCI_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *UHCI_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// Constants for AES: AES (Advanced Encryption Standard) Accelerator
const (
	// START
	// Position of START field.
	AES_START_START_Pos = 0x0
	// Bit mask of START field.
	AES_START_START_Msk = 0x1
	// Bit START.
	AES_START_START = 0x1

	// IDLE
	// Position of IDLE field.
	AES_IDLE_IDLE_Pos = 0x0
	// Bit mask of IDLE field.
	AES_IDLE_IDLE_Msk = 0x1
	// Bit IDLE.
	AES_IDLE_IDLE = 0x1

	// MODE
	// Position of MODE field.
	AES_MODE_MODE_Pos = 0x0
	// Bit mask of MODE field.
	AES_MODE_MODE_Msk = 0xff

	// KEY_0
	// Position of KEY field.
	AES_KEY_KEY_Pos = 0x0
	// Bit mask of KEY field.
	AES_KEY_KEY_Msk = 0xff

	// TEXT_0
	// Position of TEXT field.
	AES_TEXT_TEXT_Pos = 0x0
	// Bit mask of TEXT field.
	AES_TEXT_TEXT_Msk = 0xff

	// ENDIAN
	// Position of ENDIAN field.
	AES_ENDIAN_ENDIAN_Pos = 0x0
	// Bit mask of ENDIAN field.
	AES_ENDIAN_ENDIAN_Msk = 0x3
)

// Constants for APB_CTRL: APB (Advanced Peripheral Bus) Controller
const (
	// SYSCLK_CONF
	// Position of PRE_DIV_CNT field.
	APB_CTRL_SYSCLK_CONF_PRE_DIV_CNT_Pos = 0x0
	// Bit mask of PRE_DIV_CNT field.
	APB_CTRL_SYSCLK_CONF_PRE_DIV_CNT_Msk = 0x3ff
	// Position of CLK_320M_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_320M_EN_Pos = 0xa
	// Bit mask of CLK_320M_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_320M_EN_Msk = 0x400
	// Bit CLK_320M_EN.
	APB_CTRL_SYSCLK_CONF_CLK_320M_EN = 0x400
	// Position of CLK_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_EN_Pos = 0xb
	// Bit mask of CLK_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_EN_Msk = 0x800
	// Bit CLK_EN.
	APB_CTRL_SYSCLK_CONF_CLK_EN = 0x800
	// Position of RST_TICK_CNT field.
	APB_CTRL_SYSCLK_CONF_RST_TICK_CNT_Pos = 0xc
	// Bit mask of RST_TICK_CNT field.
	APB_CTRL_SYSCLK_CONF_RST_TICK_CNT_Msk = 0x1000
	// Bit RST_TICK_CNT.
	APB_CTRL_SYSCLK_CONF_RST_TICK_CNT = 0x1000
	// Position of QUICK_CLK_CHNG field.
	APB_CTRL_SYSCLK_CONF_QUICK_CLK_CHNG_Pos = 0xd
	// Bit mask of QUICK_CLK_CHNG field.
	APB_CTRL_SYSCLK_CONF_QUICK_CLK_CHNG_Msk = 0x2000
	// Bit QUICK_CLK_CHNG.
	APB_CTRL_SYSCLK_CONF_QUICK_CLK_CHNG = 0x2000

	// XTAL_TICK_CONF
	// Position of XTAL_TICK_NUM field.
	APB_CTRL_XTAL_TICK_CONF_XTAL_TICK_NUM_Pos = 0x0
	// Bit mask of XTAL_TICK_NUM field.
	APB_CTRL_XTAL_TICK_CONF_XTAL_TICK_NUM_Msk = 0xff

	// PLL_TICK_CONF
	// Position of PLL_TICK_NUM field.
	APB_CTRL_PLL_TICK_CONF_PLL_TICK_NUM_Pos = 0x0
	// Bit mask of PLL_TICK_NUM field.
	APB_CTRL_PLL_TICK_CONF_PLL_TICK_NUM_Msk = 0xff

	// CK8M_TICK_CONF
	// Position of CK8M_TICK_NUM field.
	APB_CTRL_CK8M_TICK_CONF_CK8M_TICK_NUM_Pos = 0x0
	// Bit mask of CK8M_TICK_NUM field.
	APB_CTRL_CK8M_TICK_CONF_CK8M_TICK_NUM_Msk = 0xff

	// APB_SARADC_CTRL
	// Position of SARADC_START_FORCE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_FORCE_Pos = 0x0
	// Bit mask of SARADC_START_FORCE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_FORCE_Msk = 0x1
	// Bit SARADC_START_FORCE.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_FORCE = 0x1
	// Position of SARADC_START field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_Pos = 0x1
	// Bit mask of SARADC_START field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_Msk = 0x2
	// Bit SARADC_START.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START = 0x2
	// Position of SARADC_SAR2_MUX field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_MUX_Pos = 0x2
	// Bit mask of SARADC_SAR2_MUX field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_MUX_Msk = 0x4
	// Bit SARADC_SAR2_MUX.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_MUX = 0x4
	// Position of SARADC_WORK_MODE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_WORK_MODE_Pos = 0x3
	// Bit mask of SARADC_WORK_MODE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_WORK_MODE_Msk = 0x18
	// Position of SARADC_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_SEL_Pos = 0x5
	// Bit mask of SARADC_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_SEL_Msk = 0x20
	// Bit SARADC_SAR_SEL.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_SEL = 0x20
	// Position of SARADC_SAR_CLK_GATED field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_GATED_Pos = 0x6
	// Bit mask of SARADC_SAR_CLK_GATED field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_GATED_Msk = 0x40
	// Bit SARADC_SAR_CLK_GATED.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_GATED = 0x40
	// Position of SARADC_SAR_CLK_DIV field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_DIV_Pos = 0x7
	// Bit mask of SARADC_SAR_CLK_DIV field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_DIV_Msk = 0x7f80
	// Position of SARADC_SAR1_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_LEN_Pos = 0xf
	// Bit mask of SARADC_SAR1_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_LEN_Msk = 0x78000
	// Position of SARADC_SAR2_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_LEN_Pos = 0x13
	// Bit mask of SARADC_SAR2_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_LEN_Msk = 0x780000
	// Position of SARADC_SAR1_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR_Pos = 0x17
	// Bit mask of SARADC_SAR1_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR_Msk = 0x800000
	// Bit SARADC_SAR1_PATT_P_CLEAR.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR = 0x800000
	// Position of SARADC_SAR2_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR_Pos = 0x18
	// Bit mask of SARADC_SAR2_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR_Msk = 0x1000000
	// Bit SARADC_SAR2_PATT_P_CLEAR.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR = 0x1000000
	// Position of SARADC_DATA_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_SAR_SEL_Pos = 0x19
	// Bit mask of SARADC_DATA_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_SAR_SEL_Msk = 0x2000000
	// Bit SARADC_DATA_SAR_SEL.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_SAR_SEL = 0x2000000
	// Position of SARADC_DATA_TO_I2S field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_TO_I2S_Pos = 0x1a
	// Bit mask of SARADC_DATA_TO_I2S field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_TO_I2S_Msk = 0x4000000
	// Bit SARADC_DATA_TO_I2S.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_TO_I2S = 0x4000000

	// APB_SARADC_CTRL2
	// Position of SARADC_MEAS_NUM_LIMIT field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT_Pos = 0x0
	// Bit mask of SARADC_MEAS_NUM_LIMIT field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT_Msk = 0x1
	// Bit SARADC_MEAS_NUM_LIMIT.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT = 0x1
	// Position of SARADC_MAX_MEAS_NUM field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM_Pos = 0x1
	// Bit mask of SARADC_MAX_MEAS_NUM field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM_Msk = 0x1fe
	// Position of SARADC_SAR1_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR1_INV_Pos = 0x9
	// Bit mask of SARADC_SAR1_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR1_INV_Msk = 0x200
	// Bit SARADC_SAR1_INV.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR1_INV = 0x200
	// Position of SARADC_SAR2_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR2_INV_Pos = 0xa
	// Bit mask of SARADC_SAR2_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR2_INV_Msk = 0x400
	// Bit SARADC_SAR2_INV.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR2_INV = 0x400

	// APB_SARADC_FSM
	// Position of SARADC_RSTB_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_RSTB_WAIT_Pos = 0x0
	// Bit mask of SARADC_RSTB_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_RSTB_WAIT_Msk = 0xff
	// Position of SARADC_STANDBY_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_STANDBY_WAIT_Pos = 0x8
	// Bit mask of SARADC_STANDBY_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_STANDBY_WAIT_Msk = 0xff00
	// Position of SARADC_START_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_START_WAIT_Pos = 0x10
	// Bit mask of SARADC_START_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_START_WAIT_Msk = 0xff0000
	// Position of SARADC_SAMPLE_CYCLE field.
	APB_CTRL_APB_SARADC_FSM_SARADC_SAMPLE_CYCLE_Pos = 0x18
	// Bit mask of SARADC_SAMPLE_CYCLE field.
	APB_CTRL_APB_SARADC_FSM_SARADC_SAMPLE_CYCLE_Msk = 0xff000000

	// APB_SARADC_SAR1_PATT_TAB1
	// Position of SARADC_SAR1_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB_SARADC_SAR1_PATT_TAB1_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB_SARADC_SAR1_PATT_TAB1_Msk = 0xffffffff

	// APB_SARADC_SAR2_PATT_TAB1
	// Position of SARADC_SAR2_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB_SARADC_SAR2_PATT_TAB1_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB_SARADC_SAR2_PATT_TAB1_Msk = 0xffffffff

	// APLL_TICK_CONF
	// Position of APLL_TICK_NUM field.
	APB_CTRL_APLL_TICK_CONF_APLL_TICK_NUM_Pos = 0x0
	// Bit mask of APLL_TICK_NUM field.
	APB_CTRL_APLL_TICK_CONF_APLL_TICK_NUM_Msk = 0xff

	// DATE
	// Position of DATE field.
	APB_CTRL_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	APB_CTRL_DATE_DATE_Msk = 0xffffffff
)

// Constants for BB: BB Peripheral
const (
	// BBPD_CTRL: Baseband control register
	// Position of DC_EST_FORCE_PD field.
	BB_BBPD_CTRL_DC_EST_FORCE_PD_Pos = 0x0
	// Bit mask of DC_EST_FORCE_PD field.
	BB_BBPD_CTRL_DC_EST_FORCE_PD_Msk = 0x1
	// Bit DC_EST_FORCE_PD.
	BB_BBPD_CTRL_DC_EST_FORCE_PD = 0x1
	// Position of DC_EST_FORCE_PU field.
	BB_BBPD_CTRL_DC_EST_FORCE_PU_Pos = 0x1
	// Bit mask of DC_EST_FORCE_PU field.
	BB_BBPD_CTRL_DC_EST_FORCE_PU_Msk = 0x2
	// Bit DC_EST_FORCE_PU.
	BB_BBPD_CTRL_DC_EST_FORCE_PU = 0x2
	// Position of FFT_FORCE_PD field.
	BB_BBPD_CTRL_FFT_FORCE_PD_Pos = 0x2
	// Bit mask of FFT_FORCE_PD field.
	BB_BBPD_CTRL_FFT_FORCE_PD_Msk = 0x4
	// Bit FFT_FORCE_PD.
	BB_BBPD_CTRL_FFT_FORCE_PD = 0x4
	// Position of FFT_FORCE_PU field.
	BB_BBPD_CTRL_FFT_FORCE_PU_Pos = 0x3
	// Bit mask of FFT_FORCE_PU field.
	BB_BBPD_CTRL_FFT_FORCE_PU_Msk = 0x8
	// Bit FFT_FORCE_PU.
	BB_BBPD_CTRL_FFT_FORCE_PU = 0x8
)

// Constants for DPORT: DPORT Peripheral
const (
	// PRO_BOOT_REMAP_CTRL
	// Position of PRO_BOOT_REMAP field.
	DPORT_PRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP_Pos = 0x0
	// Bit mask of PRO_BOOT_REMAP field.
	DPORT_PRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP_Msk = 0x1
	// Bit PRO_BOOT_REMAP.
	DPORT_PRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP = 0x1

	// APP_BOOT_REMAP_CTRL
	// Position of APP_BOOT_REMAP field.
	DPORT_APP_BOOT_REMAP_CTRL_APP_BOOT_REMAP_Pos = 0x0
	// Bit mask of APP_BOOT_REMAP field.
	DPORT_APP_BOOT_REMAP_CTRL_APP_BOOT_REMAP_Msk = 0x1
	// Bit APP_BOOT_REMAP.
	DPORT_APP_BOOT_REMAP_CTRL_APP_BOOT_REMAP = 0x1

	// ACCESS_CHECK
	// Position of PRO field.
	DPORT_ACCESS_CHECK_PRO_Pos = 0x0
	// Bit mask of PRO field.
	DPORT_ACCESS_CHECK_PRO_Msk = 0x1
	// Bit PRO.
	DPORT_ACCESS_CHECK_PRO = 0x1
	// Position of APP field.
	DPORT_ACCESS_CHECK_APP_Pos = 0x8
	// Bit mask of APP field.
	DPORT_ACCESS_CHECK_APP_Msk = 0x100
	// Bit APP.
	DPORT_ACCESS_CHECK_APP = 0x100

	// PRO_DPORT_APB_MASK0
	// Position of PRODPORT_APB_MASK0 field.
	DPORT_PRO_DPORT_APB_MASK0_PRODPORT_APB_MASK0_Pos = 0x0
	// Bit mask of PRODPORT_APB_MASK0 field.
	DPORT_PRO_DPORT_APB_MASK0_PRODPORT_APB_MASK0_Msk = 0xffffffff

	// PRO_DPORT_APB_MASK1
	// Position of PRODPORT_APB_MASK1 field.
	DPORT_PRO_DPORT_APB_MASK1_PRODPORT_APB_MASK1_Pos = 0x0
	// Bit mask of PRODPORT_APB_MASK1 field.
	DPORT_PRO_DPORT_APB_MASK1_PRODPORT_APB_MASK1_Msk = 0xffffffff

	// APP_DPORT_APB_MASK0
	// Position of APPDPORT_APB_MASK0 field.
	DPORT_APP_DPORT_APB_MASK0_APPDPORT_APB_MASK0_Pos = 0x0
	// Bit mask of APPDPORT_APB_MASK0 field.
	DPORT_APP_DPORT_APB_MASK0_APPDPORT_APB_MASK0_Msk = 0xffffffff

	// APP_DPORT_APB_MASK1
	// Position of APPDPORT_APB_MASK1 field.
	DPORT_APP_DPORT_APB_MASK1_APPDPORT_APB_MASK1_Pos = 0x0
	// Bit mask of APPDPORT_APB_MASK1 field.
	DPORT_APP_DPORT_APB_MASK1_APPDPORT_APB_MASK1_Msk = 0xffffffff

	// PERI_CLK_EN
	// Position of PERI_CLK_EN field.
	DPORT_PERI_CLK_EN_PERI_CLK_EN_Pos = 0x0
	// Bit mask of PERI_CLK_EN field.
	DPORT_PERI_CLK_EN_PERI_CLK_EN_Msk = 0xffffffff

	// PERI_RST_EN
	// Position of PERI_RST_EN field.
	DPORT_PERI_RST_EN_PERI_RST_EN_Pos = 0x0
	// Bit mask of PERI_RST_EN field.
	DPORT_PERI_RST_EN_PERI_RST_EN_Msk = 0xffffffff

	// WIFI_BB_CFG
	// Position of WIFI_BB_CFG field.
	DPORT_WIFI_BB_CFG_WIFI_BB_CFG_Pos = 0x0
	// Bit mask of WIFI_BB_CFG field.
	DPORT_WIFI_BB_CFG_WIFI_BB_CFG_Msk = 0xffffffff

	// WIFI_BB_CFG_2
	// Position of WIFI_BB_CFG_2 field.
	DPORT_WIFI_BB_CFG_2_WIFI_BB_CFG_2_Pos = 0x0
	// Bit mask of WIFI_BB_CFG_2 field.
	DPORT_WIFI_BB_CFG_2_WIFI_BB_CFG_2_Msk = 0xffffffff

	// APPCPU_CTRL_A
	// Position of APPCPU_RESETTING field.
	DPORT_APPCPU_CTRL_A_APPCPU_RESETTING_Pos = 0x0
	// Bit mask of APPCPU_RESETTING field.
	DPORT_APPCPU_CTRL_A_APPCPU_RESETTING_Msk = 0x1
	// Bit APPCPU_RESETTING.
	DPORT_APPCPU_CTRL_A_APPCPU_RESETTING = 0x1

	// APPCPU_CTRL_B
	// Position of APPCPU_CLKGATE_EN field.
	DPORT_APPCPU_CTRL_B_APPCPU_CLKGATE_EN_Pos = 0x0
	// Bit mask of APPCPU_CLKGATE_EN field.
	DPORT_APPCPU_CTRL_B_APPCPU_CLKGATE_EN_Msk = 0x1
	// Bit APPCPU_CLKGATE_EN.
	DPORT_APPCPU_CTRL_B_APPCPU_CLKGATE_EN = 0x1

	// APPCPU_CTRL_C
	// Position of APPCPU_RUNSTALL field.
	DPORT_APPCPU_CTRL_C_APPCPU_RUNSTALL_Pos = 0x0
	// Bit mask of APPCPU_RUNSTALL field.
	DPORT_APPCPU_CTRL_C_APPCPU_RUNSTALL_Msk = 0x1
	// Bit APPCPU_RUNSTALL.
	DPORT_APPCPU_CTRL_C_APPCPU_RUNSTALL = 0x1

	// APPCPU_CTRL_D
	// Position of APPCPU_BOOT_ADDR field.
	DPORT_APPCPU_CTRL_D_APPCPU_BOOT_ADDR_Pos = 0x0
	// Bit mask of APPCPU_BOOT_ADDR field.
	DPORT_APPCPU_CTRL_D_APPCPU_BOOT_ADDR_Msk = 0xffffffff

	// CPU_PER_CONF
	// Position of CPUPERIOD_SEL field.
	DPORT_CPU_PER_CONF_CPUPERIOD_SEL_Pos = 0x0
	// Bit mask of CPUPERIOD_SEL field.
	DPORT_CPU_PER_CONF_CPUPERIOD_SEL_Msk = 0x3
	// Position of LOWSPEED_CLK_SEL field.
	DPORT_CPU_PER_CONF_LOWSPEED_CLK_SEL_Pos = 0x2
	// Bit mask of LOWSPEED_CLK_SEL field.
	DPORT_CPU_PER_CONF_LOWSPEED_CLK_SEL_Msk = 0x4
	// Bit LOWSPEED_CLK_SEL.
	DPORT_CPU_PER_CONF_LOWSPEED_CLK_SEL = 0x4
	// Position of FAST_CLK_RTC_SEL field.
	DPORT_CPU_PER_CONF_FAST_CLK_RTC_SEL_Pos = 0x3
	// Bit mask of FAST_CLK_RTC_SEL field.
	DPORT_CPU_PER_CONF_FAST_CLK_RTC_SEL_Msk = 0x8
	// Bit FAST_CLK_RTC_SEL.
	DPORT_CPU_PER_CONF_FAST_CLK_RTC_SEL = 0x8

	// PRO_CACHE_CTRL
	// Position of PRO_CACHE_MODE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_MODE_Pos = 0x2
	// Bit mask of PRO_CACHE_MODE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_MODE_Msk = 0x4
	// Bit PRO_CACHE_MODE.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_MODE = 0x4
	// Position of PRO_CACHE_ENABLE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_ENABLE_Pos = 0x3
	// Bit mask of PRO_CACHE_ENABLE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_ENABLE_Msk = 0x8
	// Bit PRO_CACHE_ENABLE.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_ENABLE = 0x8
	// Position of PRO_CACHE_FLUSH_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA_Pos = 0x4
	// Bit mask of PRO_CACHE_FLUSH_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA_Msk = 0x10
	// Bit PRO_CACHE_FLUSH_ENA.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA = 0x10
	// Position of PRO_CACHE_FLUSH_DONE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE_Pos = 0x5
	// Bit mask of PRO_CACHE_FLUSH_DONE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE_Msk = 0x20
	// Bit PRO_CACHE_FLUSH_DONE.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE = 0x20
	// Position of PRO_CACHE_LOCK_0_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN_Pos = 0x6
	// Bit mask of PRO_CACHE_LOCK_0_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN_Msk = 0x40
	// Bit PRO_CACHE_LOCK_0_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN = 0x40
	// Position of PRO_CACHE_LOCK_1_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN_Pos = 0x7
	// Bit mask of PRO_CACHE_LOCK_1_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN_Msk = 0x80
	// Bit PRO_CACHE_LOCK_1_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN = 0x80
	// Position of PRO_CACHE_LOCK_2_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN_Pos = 0x8
	// Bit mask of PRO_CACHE_LOCK_2_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN_Msk = 0x100
	// Bit PRO_CACHE_LOCK_2_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN = 0x100
	// Position of PRO_CACHE_LOCK_3_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN_Pos = 0x9
	// Bit mask of PRO_CACHE_LOCK_3_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN_Msk = 0x200
	// Bit PRO_CACHE_LOCK_3_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN = 0x200
	// Position of PRO_SINGLE_IRAM_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA_Pos = 0xa
	// Bit mask of PRO_SINGLE_IRAM_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA_Msk = 0x400
	// Bit PRO_SINGLE_IRAM_ENA.
	DPORT_PRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA = 0x400
	// Position of PRO_DRAM_SPLIT field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_SPLIT_Pos = 0xb
	// Bit mask of PRO_DRAM_SPLIT field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_SPLIT_Msk = 0x800
	// Bit PRO_DRAM_SPLIT.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_SPLIT = 0x800
	// Position of PRO_AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_AHB_SPI_REQ_Pos = 0xc
	// Bit mask of PRO_AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_AHB_SPI_REQ_Msk = 0x1000
	// Bit PRO_AHB_SPI_REQ.
	DPORT_PRO_CACHE_CTRL_PRO_AHB_SPI_REQ = 0x1000
	// Position of PRO_SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_SLAVE_REQ_Pos = 0xd
	// Bit mask of PRO_SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_SLAVE_REQ_Msk = 0x2000
	// Bit PRO_SLAVE_REQ.
	DPORT_PRO_CACHE_CTRL_PRO_SLAVE_REQ = 0x2000
	// Position of AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_AHB_SPI_REQ_Pos = 0xe
	// Bit mask of AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_AHB_SPI_REQ_Msk = 0x4000
	// Bit AHB_SPI_REQ.
	DPORT_PRO_CACHE_CTRL_AHB_SPI_REQ = 0x4000
	// Position of SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_SLAVE_REQ_Pos = 0xf
	// Bit mask of SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_SLAVE_REQ_Msk = 0x8000
	// Bit SLAVE_REQ.
	DPORT_PRO_CACHE_CTRL_SLAVE_REQ = 0x8000
	// Position of PRO_DRAM_HL field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_HL_Pos = 0x10
	// Bit mask of PRO_DRAM_HL field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_HL_Msk = 0x10000
	// Bit PRO_DRAM_HL.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_HL = 0x10000

	// PRO_CACHE_CTRL1
	// Position of PRO_CACHE_MASK_IRAM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0_Pos = 0x0
	// Bit mask of PRO_CACHE_MASK_IRAM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0_Msk = 0x1
	// Bit PRO_CACHE_MASK_IRAM0.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0 = 0x1
	// Position of PRO_CACHE_MASK_IRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1_Pos = 0x1
	// Bit mask of PRO_CACHE_MASK_IRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1_Msk = 0x2
	// Bit PRO_CACHE_MASK_IRAM1.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1 = 0x2
	// Position of PRO_CACHE_MASK_IROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0_Pos = 0x2
	// Bit mask of PRO_CACHE_MASK_IROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0_Msk = 0x4
	// Bit PRO_CACHE_MASK_IROM0.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0 = 0x4
	// Position of PRO_CACHE_MASK_DRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1_Pos = 0x3
	// Bit mask of PRO_CACHE_MASK_DRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1_Msk = 0x8
	// Bit PRO_CACHE_MASK_DRAM1.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1 = 0x8
	// Position of PRO_CACHE_MASK_DROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0_Pos = 0x4
	// Bit mask of PRO_CACHE_MASK_DROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0_Msk = 0x10
	// Bit PRO_CACHE_MASK_DROM0.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0 = 0x10
	// Position of PRO_CACHE_MASK_OPSDRAM field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM_Pos = 0x5
	// Bit mask of PRO_CACHE_MASK_OPSDRAM field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM_Msk = 0x20
	// Bit PRO_CACHE_MASK_OPSDRAM.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM = 0x20
	// Position of PRO_CMMU_SRAM_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE_Pos = 0x6
	// Bit mask of PRO_CMMU_SRAM_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE_Msk = 0x1c0
	// Position of PRO_CMMU_FLASH_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE_Pos = 0x9
	// Bit mask of PRO_CMMU_FLASH_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE_Msk = 0x600
	// Position of PRO_CMMU_FORCE_ON field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON_Pos = 0xb
	// Bit mask of PRO_CMMU_FORCE_ON field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON_Msk = 0x800
	// Bit PRO_CMMU_FORCE_ON.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON = 0x800
	// Position of PRO_CMMU_PD field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_PD_Pos = 0xc
	// Bit mask of PRO_CMMU_PD field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_PD_Msk = 0x1000
	// Bit PRO_CMMU_PD.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_PD = 0x1000
	// Position of PRO_CACHE_MMU_IA_CLR field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR_Pos = 0xd
	// Bit mask of PRO_CACHE_MMU_IA_CLR field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR_Msk = 0x2000
	// Bit PRO_CACHE_MMU_IA_CLR.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR = 0x2000

	// PRO_CACHE_LOCK_0_ADDR
	// Position of PRE field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_MAX_Msk = 0x3c0000

	// PRO_CACHE_LOCK_1_ADDR
	// Position of PRE field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_MAX_Msk = 0x3c0000

	// PRO_CACHE_LOCK_2_ADDR
	// Position of PRE field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_MAX_Msk = 0x3c0000

	// PRO_CACHE_LOCK_3_ADDR
	// Position of PRE field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_MAX_Msk = 0x3c0000

	// APP_CACHE_CTRL
	// Position of APP_CACHE_MODE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_MODE_Pos = 0x2
	// Bit mask of APP_CACHE_MODE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_MODE_Msk = 0x4
	// Bit APP_CACHE_MODE.
	DPORT_APP_CACHE_CTRL_APP_CACHE_MODE = 0x4
	// Position of APP_CACHE_ENABLE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_ENABLE_Pos = 0x3
	// Bit mask of APP_CACHE_ENABLE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_ENABLE_Msk = 0x8
	// Bit APP_CACHE_ENABLE.
	DPORT_APP_CACHE_CTRL_APP_CACHE_ENABLE = 0x8
	// Position of APP_CACHE_FLUSH_ENA field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_ENA_Pos = 0x4
	// Bit mask of APP_CACHE_FLUSH_ENA field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_ENA_Msk = 0x10
	// Bit APP_CACHE_FLUSH_ENA.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_ENA = 0x10
	// Position of APP_CACHE_FLUSH_DONE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_DONE_Pos = 0x5
	// Bit mask of APP_CACHE_FLUSH_DONE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_DONE_Msk = 0x20
	// Bit APP_CACHE_FLUSH_DONE.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_DONE = 0x20
	// Position of APP_CACHE_LOCK_0_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_0_EN_Pos = 0x6
	// Bit mask of APP_CACHE_LOCK_0_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_0_EN_Msk = 0x40
	// Bit APP_CACHE_LOCK_0_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_0_EN = 0x40
	// Position of APP_CACHE_LOCK_1_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_1_EN_Pos = 0x7
	// Bit mask of APP_CACHE_LOCK_1_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_1_EN_Msk = 0x80
	// Bit APP_CACHE_LOCK_1_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_1_EN = 0x80
	// Position of APP_CACHE_LOCK_2_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_2_EN_Pos = 0x8
	// Bit mask of APP_CACHE_LOCK_2_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_2_EN_Msk = 0x100
	// Bit APP_CACHE_LOCK_2_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_2_EN = 0x100
	// Position of APP_CACHE_LOCK_3_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_3_EN_Pos = 0x9
	// Bit mask of APP_CACHE_LOCK_3_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_3_EN_Msk = 0x200
	// Bit APP_CACHE_LOCK_3_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_3_EN = 0x200
	// Position of APP_SINGLE_IRAM_ENA field.
	DPORT_APP_CACHE_CTRL_APP_SINGLE_IRAM_ENA_Pos = 0xa
	// Bit mask of APP_SINGLE_IRAM_ENA field.
	DPORT_APP_CACHE_CTRL_APP_SINGLE_IRAM_ENA_Msk = 0x400
	// Bit APP_SINGLE_IRAM_ENA.
	DPORT_APP_CACHE_CTRL_APP_SINGLE_IRAM_ENA = 0x400
	// Position of APP_DRAM_SPLIT field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_SPLIT_Pos = 0xb
	// Bit mask of APP_DRAM_SPLIT field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_SPLIT_Msk = 0x800
	// Bit APP_DRAM_SPLIT.
	DPORT_APP_CACHE_CTRL_APP_DRAM_SPLIT = 0x800
	// Position of APP_AHB_SPI_REQ field.
	DPORT_APP_CACHE_CTRL_APP_AHB_SPI_REQ_Pos = 0xc
	// Bit mask of APP_AHB_SPI_REQ field.
	DPORT_APP_CACHE_CTRL_APP_AHB_SPI_REQ_Msk = 0x1000
	// Bit APP_AHB_SPI_REQ.
	DPORT_APP_CACHE_CTRL_APP_AHB_SPI_REQ = 0x1000
	// Position of APP_SLAVE_REQ field.
	DPORT_APP_CACHE_CTRL_APP_SLAVE_REQ_Pos = 0xd
	// Bit mask of APP_SLAVE_REQ field.
	DPORT_APP_CACHE_CTRL_APP_SLAVE_REQ_Msk = 0x2000
	// Bit APP_SLAVE_REQ.
	DPORT_APP_CACHE_CTRL_APP_SLAVE_REQ = 0x2000
	// Position of APP_DRAM_HL field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_HL_Pos = 0xe
	// Bit mask of APP_DRAM_HL field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_HL_Msk = 0x4000
	// Bit APP_DRAM_HL.
	DPORT_APP_CACHE_CTRL_APP_DRAM_HL = 0x4000

	// APP_CACHE_CTRL1
	// Position of APP_CACHE_MASK_IRAM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0_Pos = 0x0
	// Bit mask of APP_CACHE_MASK_IRAM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0_Msk = 0x1
	// Bit APP_CACHE_MASK_IRAM0.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0 = 0x1
	// Position of APP_CACHE_MASK_IRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1_Pos = 0x1
	// Bit mask of APP_CACHE_MASK_IRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1_Msk = 0x2
	// Bit APP_CACHE_MASK_IRAM1.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1 = 0x2
	// Position of APP_CACHE_MASK_IROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IROM0_Pos = 0x2
	// Bit mask of APP_CACHE_MASK_IROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IROM0_Msk = 0x4
	// Bit APP_CACHE_MASK_IROM0.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IROM0 = 0x4
	// Position of APP_CACHE_MASK_DRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1_Pos = 0x3
	// Bit mask of APP_CACHE_MASK_DRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1_Msk = 0x8
	// Bit APP_CACHE_MASK_DRAM1.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1 = 0x8
	// Position of APP_CACHE_MASK_DROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DROM0_Pos = 0x4
	// Bit mask of APP_CACHE_MASK_DROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DROM0_Msk = 0x10
	// Bit APP_CACHE_MASK_DROM0.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DROM0 = 0x10
	// Position of APP_CACHE_MASK_OPSDRAM field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM_Pos = 0x5
	// Bit mask of APP_CACHE_MASK_OPSDRAM field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM_Msk = 0x20
	// Bit APP_CACHE_MASK_OPSDRAM.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM = 0x20
	// Position of APP_CMMU_SRAM_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE_Pos = 0x6
	// Bit mask of APP_CMMU_SRAM_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE_Msk = 0x1c0
	// Position of APP_CMMU_FLASH_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE_Pos = 0x9
	// Bit mask of APP_CMMU_FLASH_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE_Msk = 0x600
	// Position of APP_CMMU_FORCE_ON field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FORCE_ON_Pos = 0xb
	// Bit mask of APP_CMMU_FORCE_ON field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FORCE_ON_Msk = 0x800
	// Bit APP_CMMU_FORCE_ON.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FORCE_ON = 0x800
	// Position of APP_CMMU_PD field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_PD_Pos = 0xc
	// Bit mask of APP_CMMU_PD field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_PD_Msk = 0x1000
	// Bit APP_CMMU_PD.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_PD = 0x1000
	// Position of APP_CACHE_MMU_IA_CLR field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR_Pos = 0xd
	// Bit mask of APP_CACHE_MMU_IA_CLR field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR_Msk = 0x2000
	// Bit APP_CACHE_MMU_IA_CLR.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR = 0x2000

	// APP_CACHE_LOCK_0_ADDR
	// Position of PRE field.
	DPORT_APP_CACHE_LOCK_0_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_APP_CACHE_LOCK_0_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_APP_CACHE_LOCK_0_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_APP_CACHE_LOCK_0_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_APP_CACHE_LOCK_0_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_APP_CACHE_LOCK_0_ADDR_MAX_Msk = 0x3c0000

	// APP_CACHE_LOCK_1_ADDR
	// Position of PRE field.
	DPORT_APP_CACHE_LOCK_1_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_APP_CACHE_LOCK_1_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_APP_CACHE_LOCK_1_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_APP_CACHE_LOCK_1_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_APP_CACHE_LOCK_1_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_APP_CACHE_LOCK_1_ADDR_MAX_Msk = 0x3c0000

	// APP_CACHE_LOCK_2_ADDR
	// Position of PRE field.
	DPORT_APP_CACHE_LOCK_2_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_APP_CACHE_LOCK_2_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_APP_CACHE_LOCK_2_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_APP_CACHE_LOCK_2_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_APP_CACHE_LOCK_2_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_APP_CACHE_LOCK_2_ADDR_MAX_Msk = 0x3c0000

	// APP_CACHE_LOCK_3_ADDR
	// Position of PRE field.
	DPORT_APP_CACHE_LOCK_3_ADDR_PRE_Pos = 0x0
	// Bit mask of PRE field.
	DPORT_APP_CACHE_LOCK_3_ADDR_PRE_Msk = 0x3fff
	// Position of MIN field.
	DPORT_APP_CACHE_LOCK_3_ADDR_MIN_Pos = 0xe
	// Bit mask of MIN field.
	DPORT_APP_CACHE_LOCK_3_ADDR_MIN_Msk = 0x3c000
	// Position of MAX field.
	DPORT_APP_CACHE_LOCK_3_ADDR_MAX_Pos = 0x12
	// Bit mask of MAX field.
	DPORT_APP_CACHE_LOCK_3_ADDR_MAX_Msk = 0x3c0000

	// TRACEMEM_MUX_MODE
	// Position of TRACEMEM_MUX_MODE field.
	DPORT_TRACEMEM_MUX_MODE_TRACEMEM_MUX_MODE_Pos = 0x0
	// Bit mask of TRACEMEM_MUX_MODE field.
	DPORT_TRACEMEM_MUX_MODE_TRACEMEM_MUX_MODE_Msk = 0x3

	// PRO_TRACEMEM_ENA
	// Position of PRO_TRACEMEM_ENA field.
	DPORT_PRO_TRACEMEM_ENA_PRO_TRACEMEM_ENA_Pos = 0x0
	// Bit mask of PRO_TRACEMEM_ENA field.
	DPORT_PRO_TRACEMEM_ENA_PRO_TRACEMEM_ENA_Msk = 0x1
	// Bit PRO_TRACEMEM_ENA.
	DPORT_PRO_TRACEMEM_ENA_PRO_TRACEMEM_ENA = 0x1

	// APP_TRACEMEM_ENA
	// Position of APP_TRACEMEM_ENA field.
	DPORT_APP_TRACEMEM_ENA_APP_TRACEMEM_ENA_Pos = 0x0
	// Bit mask of APP_TRACEMEM_ENA field.
	DPORT_APP_TRACEMEM_ENA_APP_TRACEMEM_ENA_Msk = 0x1
	// Bit APP_TRACEMEM_ENA.
	DPORT_APP_TRACEMEM_ENA_APP_TRACEMEM_ENA = 0x1

	// CACHE_MUX_MODE
	// Position of CACHE_MUX_MODE field.
	DPORT_CACHE_MUX_MODE_CACHE_MUX_MODE_Pos = 0x0
	// Bit mask of CACHE_MUX_MODE field.
	DPORT_CACHE_MUX_MODE_CACHE_MUX_MODE_Msk = 0x3

	// IMMU_PAGE_MODE
	// Position of INTERNAL_SRAM_IMMU_ENA field.
	DPORT_IMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA_Pos = 0x0
	// Bit mask of INTERNAL_SRAM_IMMU_ENA field.
	DPORT_IMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA_Msk = 0x1
	// Bit INTERNAL_SRAM_IMMU_ENA.
	DPORT_IMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA = 0x1
	// Position of IMMU_PAGE_MODE field.
	DPORT_IMMU_PAGE_MODE_IMMU_PAGE_MODE_Pos = 0x1
	// Bit mask of IMMU_PAGE_MODE field.
	DPORT_IMMU_PAGE_MODE_IMMU_PAGE_MODE_Msk = 0x6

	// DMMU_PAGE_MODE
	// Position of INTERNAL_SRAM_DMMU_ENA field.
	DPORT_DMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA_Pos = 0x0
	// Bit mask of INTERNAL_SRAM_DMMU_ENA field.
	DPORT_DMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA_Msk = 0x1
	// Bit INTERNAL_SRAM_DMMU_ENA.
	DPORT_DMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA = 0x1
	// Position of DMMU_PAGE_MODE field.
	DPORT_DMMU_PAGE_MODE_DMMU_PAGE_MODE_Pos = 0x1
	// Bit mask of DMMU_PAGE_MODE field.
	DPORT_DMMU_PAGE_MODE_DMMU_PAGE_MODE_Msk = 0x6

	// ROM_MPU_ENA
	// Position of SHARE_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_SHARE_ROM_MPU_ENA_Pos = 0x0
	// Bit mask of SHARE_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_SHARE_ROM_MPU_ENA_Msk = 0x1
	// Bit SHARE_ROM_MPU_ENA.
	DPORT_ROM_MPU_ENA_SHARE_ROM_MPU_ENA = 0x1
	// Position of PRO_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_PRO_ROM_MPU_ENA_Pos = 0x1
	// Bit mask of PRO_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_PRO_ROM_MPU_ENA_Msk = 0x2
	// Bit PRO_ROM_MPU_ENA.
	DPORT_ROM_MPU_ENA_PRO_ROM_MPU_ENA = 0x2
	// Position of APP_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_APP_ROM_MPU_ENA_Pos = 0x2
	// Bit mask of APP_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_APP_ROM_MPU_ENA_Msk = 0x4
	// Bit APP_ROM_MPU_ENA.
	DPORT_ROM_MPU_ENA_APP_ROM_MPU_ENA = 0x4

	// MEM_PD_MASK
	// Position of LSLP_MEM_PD_MASK field.
	DPORT_MEM_PD_MASK_LSLP_MEM_PD_MASK_Pos = 0x0
	// Bit mask of LSLP_MEM_PD_MASK field.
	DPORT_MEM_PD_MASK_LSLP_MEM_PD_MASK_Msk = 0x1
	// Bit LSLP_MEM_PD_MASK.
	DPORT_MEM_PD_MASK_LSLP_MEM_PD_MASK = 0x1

	// ROM_PD_CTRL
	// Position of PRO_ROM_PD field.
	DPORT_ROM_PD_CTRL_PRO_ROM_PD_Pos = 0x0
	// Bit mask of PRO_ROM_PD field.
	DPORT_ROM_PD_CTRL_PRO_ROM_PD_Msk = 0x1
	// Bit PRO_ROM_PD.
	DPORT_ROM_PD_CTRL_PRO_ROM_PD = 0x1
	// Position of APP_ROM_PD field.
	DPORT_ROM_PD_CTRL_APP_ROM_PD_Pos = 0x1
	// Bit mask of APP_ROM_PD field.
	DPORT_ROM_PD_CTRL_APP_ROM_PD_Msk = 0x2
	// Bit APP_ROM_PD.
	DPORT_ROM_PD_CTRL_APP_ROM_PD = 0x2
	// Position of SHARE_ROM_PD field.
	DPORT_ROM_PD_CTRL_SHARE_ROM_PD_Pos = 0x2
	// Bit mask of SHARE_ROM_PD field.
	DPORT_ROM_PD_CTRL_SHARE_ROM_PD_Msk = 0xfc

	// ROM_FO_CTRL
	// Position of PRO_ROM_FO field.
	DPORT_ROM_FO_CTRL_PRO_ROM_FO_Pos = 0x0
	// Bit mask of PRO_ROM_FO field.
	DPORT_ROM_FO_CTRL_PRO_ROM_FO_Msk = 0x1
	// Bit PRO_ROM_FO.
	DPORT_ROM_FO_CTRL_PRO_ROM_FO = 0x1
	// Position of APP_ROM_FO field.
	DPORT_ROM_FO_CTRL_APP_ROM_FO_Pos = 0x1
	// Bit mask of APP_ROM_FO field.
	DPORT_ROM_FO_CTRL_APP_ROM_FO_Msk = 0x2
	// Bit APP_ROM_FO.
	DPORT_ROM_FO_CTRL_APP_ROM_FO = 0x2
	// Position of SHARE_ROM_FO field.
	DPORT_ROM_FO_CTRL_SHARE_ROM_FO_Pos = 0x2
	// Bit mask of SHARE_ROM_FO field.
	DPORT_ROM_FO_CTRL_SHARE_ROM_FO_Msk = 0xfc

	// SRAM_PD_CTRL_0
	// Position of SRAM_PD_0 field.
	DPORT_SRAM_PD_CTRL_0_SRAM_PD_0_Pos = 0x0
	// Bit mask of SRAM_PD_0 field.
	DPORT_SRAM_PD_CTRL_0_SRAM_PD_0_Msk = 0xffffffff

	// SRAM_PD_CTRL_1
	// Position of SRAM_PD_1 field.
	DPORT_SRAM_PD_CTRL_1_SRAM_PD_1_Pos = 0x0
	// Bit mask of SRAM_PD_1 field.
	DPORT_SRAM_PD_CTRL_1_SRAM_PD_1_Msk = 0x1
	// Bit SRAM_PD_1.
	DPORT_SRAM_PD_CTRL_1_SRAM_PD_1 = 0x1

	// SRAM_FO_CTRL_0
	// Position of SRAM_FO_0 field.
	DPORT_SRAM_FO_CTRL_0_SRAM_FO_0_Pos = 0x0
	// Bit mask of SRAM_FO_0 field.
	DPORT_SRAM_FO_CTRL_0_SRAM_FO_0_Msk = 0xffffffff

	// SRAM_FO_CTRL_1
	// Position of SRAM_FO_1 field.
	DPORT_SRAM_FO_CTRL_1_SRAM_FO_1_Pos = 0x0
	// Bit mask of SRAM_FO_1 field.
	DPORT_SRAM_FO_CTRL_1_SRAM_FO_1_Msk = 0x1
	// Bit SRAM_FO_1.
	DPORT_SRAM_FO_CTRL_1_SRAM_FO_1 = 0x1

	// IRAM_DRAM_AHB_SEL
	// Position of MASK_PRO_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_IRAM_Pos = 0x0
	// Bit mask of MASK_PRO_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_IRAM_Msk = 0x1
	// Bit MASK_PRO_IRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_IRAM = 0x1
	// Position of MASK_APP_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_IRAM_Pos = 0x1
	// Bit mask of MASK_APP_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_IRAM_Msk = 0x2
	// Bit MASK_APP_IRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_IRAM = 0x2
	// Position of MASK_PRO_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_DRAM_Pos = 0x2
	// Bit mask of MASK_PRO_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_DRAM_Msk = 0x4
	// Bit MASK_PRO_DRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_DRAM = 0x4
	// Position of MASK_APP_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_DRAM_Pos = 0x3
	// Bit mask of MASK_APP_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_DRAM_Msk = 0x8
	// Bit MASK_APP_DRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_DRAM = 0x8
	// Position of MASK_AHB field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_AHB_Pos = 0x4
	// Bit mask of MASK_AHB field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_AHB_Msk = 0x10
	// Bit MASK_AHB.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_AHB = 0x10
	// Position of MAC_DUMP_MODE field.
	DPORT_IRAM_DRAM_AHB_SEL_MAC_DUMP_MODE_Pos = 0x5
	// Bit mask of MAC_DUMP_MODE field.
	DPORT_IRAM_DRAM_AHB_SEL_MAC_DUMP_MODE_Msk = 0x60

	// TAG_FO_CTRL
	// Position of PRO_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON_Pos = 0x0
	// Bit mask of PRO_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON_Msk = 0x1
	// Bit PRO_CACHE_TAG_FORCE_ON.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON = 0x1
	// Position of PRO_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_PD_Pos = 0x1
	// Bit mask of PRO_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_PD_Msk = 0x2
	// Bit PRO_CACHE_TAG_PD.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_PD = 0x2
	// Position of APP_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON_Pos = 0x8
	// Bit mask of APP_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON_Msk = 0x100
	// Bit APP_CACHE_TAG_FORCE_ON.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON = 0x100
	// Position of APP_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_PD_Pos = 0x9
	// Bit mask of APP_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_PD_Msk = 0x200
	// Bit APP_CACHE_TAG_PD.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_PD = 0x200

	// AHB_LITE_MASK
	// Position of PRO field.
	DPORT_AHB_LITE_MASK_PRO_Pos = 0x0
	// Bit mask of PRO field.
	DPORT_AHB_LITE_MASK_PRO_Msk = 0x1
	// Bit PRO.
	DPORT_AHB_LITE_MASK_PRO = 0x1
	// Position of APP field.
	DPORT_AHB_LITE_MASK_APP_Pos = 0x4
	// Bit mask of APP field.
	DPORT_AHB_LITE_MASK_APP_Msk = 0x10
	// Bit APP.
	DPORT_AHB_LITE_MASK_APP = 0x10
	// Position of SDIO field.
	DPORT_AHB_LITE_MASK_SDIO_Pos = 0x8
	// Bit mask of SDIO field.
	DPORT_AHB_LITE_MASK_SDIO_Msk = 0x100
	// Bit SDIO.
	DPORT_AHB_LITE_MASK_SDIO = 0x100
	// Position of PRODPORT field.
	DPORT_AHB_LITE_MASK_PRODPORT_Pos = 0x9
	// Bit mask of PRODPORT field.
	DPORT_AHB_LITE_MASK_PRODPORT_Msk = 0x200
	// Bit PRODPORT.
	DPORT_AHB_LITE_MASK_PRODPORT = 0x200
	// Position of APPDPORT field.
	DPORT_AHB_LITE_MASK_APPDPORT_Pos = 0xa
	// Bit mask of APPDPORT field.
	DPORT_AHB_LITE_MASK_APPDPORT_Msk = 0x400
	// Bit APPDPORT.
	DPORT_AHB_LITE_MASK_APPDPORT = 0x400
	// Position of AHB_LITE_SDHOST_PID field.
	DPORT_AHB_LITE_MASK_AHB_LITE_SDHOST_PID_Pos = 0xb
	// Bit mask of AHB_LITE_SDHOST_PID field.
	DPORT_AHB_LITE_MASK_AHB_LITE_SDHOST_PID_Msk = 0x3800

	// AHB_MPU_TABLE_0
	// Position of AHB_ACCESS_GRANT_0 field.
	DPORT_AHB_MPU_TABLE_0_AHB_ACCESS_GRANT_0_Pos = 0x0
	// Bit mask of AHB_ACCESS_GRANT_0 field.
	DPORT_AHB_MPU_TABLE_0_AHB_ACCESS_GRANT_0_Msk = 0xffffffff

	// AHB_MPU_TABLE_1
	// Position of AHB_ACCESS_GRANT_1 field.
	DPORT_AHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1_Pos = 0x0
	// Bit mask of AHB_ACCESS_GRANT_1 field.
	DPORT_AHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1_Msk = 0x1ff

	// HOST_INF_SEL
	// Position of PERI_IO_SWAP field.
	DPORT_HOST_INF_SEL_PERI_IO_SWAP_Pos = 0x0
	// Bit mask of PERI_IO_SWAP field.
	DPORT_HOST_INF_SEL_PERI_IO_SWAP_Msk = 0xff
	// Position of LINK_DEVICE_SEL field.
	DPORT_HOST_INF_SEL_LINK_DEVICE_SEL_Pos = 0x8
	// Bit mask of LINK_DEVICE_SEL field.
	DPORT_HOST_INF_SEL_LINK_DEVICE_SEL_Msk = 0xff00

	// PERIP_CLK_EN
	// Position of TIMERS_CLK_EN field.
	DPORT_PERIP_CLK_EN_TIMERS_CLK_EN_Pos = 0x0
	// Bit mask of TIMERS_CLK_EN field.
	DPORT_PERIP_CLK_EN_TIMERS_CLK_EN_Msk = 0x1
	// Bit TIMERS_CLK_EN.
	DPORT_PERIP_CLK_EN_TIMERS_CLK_EN = 0x1
	// Position of SPI01_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI01_CLK_EN_Pos = 0x1
	// Bit mask of SPI01_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI01_CLK_EN_Msk = 0x2
	// Bit SPI01_CLK_EN.
	DPORT_PERIP_CLK_EN_SPI01_CLK_EN = 0x2
	// Position of UART_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART_CLK_EN_Pos = 0x2
	// Bit mask of UART_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART_CLK_EN_Msk = 0x4
	// Bit UART_CLK_EN.
	DPORT_PERIP_CLK_EN_UART_CLK_EN = 0x4
	// Position of WDG_CLK_EN field.
	DPORT_PERIP_CLK_EN_WDG_CLK_EN_Pos = 0x3
	// Bit mask of WDG_CLK_EN field.
	DPORT_PERIP_CLK_EN_WDG_CLK_EN_Msk = 0x8
	// Bit WDG_CLK_EN.
	DPORT_PERIP_CLK_EN_WDG_CLK_EN = 0x8
	// Position of I2S0_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2S0_CLK_EN_Pos = 0x4
	// Bit mask of I2S0_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2S0_CLK_EN_Msk = 0x10
	// Bit I2S0_CLK_EN.
	DPORT_PERIP_CLK_EN_I2S0_CLK_EN = 0x10
	// Position of UART1_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART1_CLK_EN_Pos = 0x5
	// Bit mask of UART1_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART1_CLK_EN_Msk = 0x20
	// Bit UART1_CLK_EN.
	DPORT_PERIP_CLK_EN_UART1_CLK_EN = 0x20
	// Position of SPI2_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI2_CLK_EN_Pos = 0x6
	// Bit mask of SPI2_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI2_CLK_EN_Msk = 0x40
	// Bit SPI2_CLK_EN.
	DPORT_PERIP_CLK_EN_SPI2_CLK_EN = 0x40
	// Position of I2C0_EXT0_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2C0_EXT0_CLK_EN_Pos = 0x7
	// Bit mask of I2C0_EXT0_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2C0_EXT0_CLK_EN_Msk = 0x80
	// Bit I2C0_EXT0_CLK_EN.
	DPORT_PERIP_CLK_EN_I2C0_EXT0_CLK_EN = 0x80
	// Position of UHCI0_CLK_EN field.
	DPORT_PERIP_CLK_EN_UHCI0_CLK_EN_Pos = 0x8
	// Bit mask of UHCI0_CLK_EN field.
	DPORT_PERIP_CLK_EN_UHCI0_CLK_EN_Msk = 0x100
	// Bit UHCI0_CLK_EN.
	DPORT_PERIP_CLK_EN_UHCI0_CLK_EN = 0x100
	// Position of RMT_CLK_EN field.
	DPORT_PERIP_CLK_EN_RMT_CLK_EN_Pos = 0x9
	// Bit mask of RMT_CLK_EN field.
	DPORT_PERIP_CLK_EN_RMT_CLK_EN_Msk = 0x200
	// Bit RMT_CLK_EN.
	DPORT_PERIP_CLK_EN_RMT_CLK_EN = 0x200
	// Position of PCNT_CLK_EN field.
	DPORT_PERIP_CLK_EN_PCNT_CLK_EN_Pos = 0xa
	// Bit mask of PCNT_CLK_EN field.
	DPORT_PERIP_CLK_EN_PCNT_CLK_EN_Msk = 0x400
	// Bit PCNT_CLK_EN.
	DPORT_PERIP_CLK_EN_PCNT_CLK_EN = 0x400
	// Position of LEDC_CLK_EN field.
	DPORT_PERIP_CLK_EN_LEDC_CLK_EN_Pos = 0xb
	// Bit mask of LEDC_CLK_EN field.
	DPORT_PERIP_CLK_EN_LEDC_CLK_EN_Msk = 0x800
	// Bit LEDC_CLK_EN.
	DPORT_PERIP_CLK_EN_LEDC_CLK_EN = 0x800
	// Position of UHCI1_CLK_EN field.
	DPORT_PERIP_CLK_EN_UHCI1_CLK_EN_Pos = 0xc
	// Bit mask of UHCI1_CLK_EN field.
	DPORT_PERIP_CLK_EN_UHCI1_CLK_EN_Msk = 0x1000
	// Bit UHCI1_CLK_EN.
	DPORT_PERIP_CLK_EN_UHCI1_CLK_EN = 0x1000
	// Position of TIMERGROUP_CLK_EN field.
	DPORT_PERIP_CLK_EN_TIMERGROUP_CLK_EN_Pos = 0xd
	// Bit mask of TIMERGROUP_CLK_EN field.
	DPORT_PERIP_CLK_EN_TIMERGROUP_CLK_EN_Msk = 0x2000
	// Bit TIMERGROUP_CLK_EN.
	DPORT_PERIP_CLK_EN_TIMERGROUP_CLK_EN = 0x2000
	// Position of EFUSE_CLK_EN field.
	DPORT_PERIP_CLK_EN_EFUSE_CLK_EN_Pos = 0xe
	// Bit mask of EFUSE_CLK_EN field.
	DPORT_PERIP_CLK_EN_EFUSE_CLK_EN_Msk = 0x4000
	// Bit EFUSE_CLK_EN.
	DPORT_PERIP_CLK_EN_EFUSE_CLK_EN = 0x4000
	// Position of TIMERGROUP1_CLK_EN field.
	DPORT_PERIP_CLK_EN_TIMERGROUP1_CLK_EN_Pos = 0xf
	// Bit mask of TIMERGROUP1_CLK_EN field.
	DPORT_PERIP_CLK_EN_TIMERGROUP1_CLK_EN_Msk = 0x8000
	// Bit TIMERGROUP1_CLK_EN.
	DPORT_PERIP_CLK_EN_TIMERGROUP1_CLK_EN = 0x8000
	// Position of SPI3_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI3_CLK_EN_Pos = 0x10
	// Bit mask of SPI3_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI3_CLK_EN_Msk = 0x10000
	// Bit SPI3_CLK_EN.
	DPORT_PERIP_CLK_EN_SPI3_CLK_EN = 0x10000
	// Position of PWM0_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM0_CLK_EN_Pos = 0x11
	// Bit mask of PWM0_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM0_CLK_EN_Msk = 0x20000
	// Bit PWM0_CLK_EN.
	DPORT_PERIP_CLK_EN_PWM0_CLK_EN = 0x20000
	// Position of I2C_EXT1_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2C_EXT1_CLK_EN_Pos = 0x12
	// Bit mask of I2C_EXT1_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2C_EXT1_CLK_EN_Msk = 0x40000
	// Bit I2C_EXT1_CLK_EN.
	DPORT_PERIP_CLK_EN_I2C_EXT1_CLK_EN = 0x40000
	// Position of TWAI_CLK_EN field.
	DPORT_PERIP_CLK_EN_TWAI_CLK_EN_Pos = 0x13
	// Bit mask of TWAI_CLK_EN field.
	DPORT_PERIP_CLK_EN_TWAI_CLK_EN_Msk = 0x80000
	// Bit TWAI_CLK_EN.
	DPORT_PERIP_CLK_EN_TWAI_CLK_EN = 0x80000
	// Position of PWM1_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM1_CLK_EN_Pos = 0x14
	// Bit mask of PWM1_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM1_CLK_EN_Msk = 0x100000
	// Bit PWM1_CLK_EN.
	DPORT_PERIP_CLK_EN_PWM1_CLK_EN = 0x100000
	// Position of I2S1_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2S1_CLK_EN_Pos = 0x15
	// Bit mask of I2S1_CLK_EN field.
	DPORT_PERIP_CLK_EN_I2S1_CLK_EN_Msk = 0x200000
	// Bit I2S1_CLK_EN.
	DPORT_PERIP_CLK_EN_I2S1_CLK_EN = 0x200000
	// Position of SPI_DMA_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI_DMA_CLK_EN_Pos = 0x16
	// Bit mask of SPI_DMA_CLK_EN field.
	DPORT_PERIP_CLK_EN_SPI_DMA_CLK_EN_Msk = 0x400000
	// Bit SPI_DMA_CLK_EN.
	DPORT_PERIP_CLK_EN_SPI_DMA_CLK_EN = 0x400000
	// Position of UART2_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART2_CLK_EN_Pos = 0x17
	// Bit mask of UART2_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART2_CLK_EN_Msk = 0x800000
	// Bit UART2_CLK_EN.
	DPORT_PERIP_CLK_EN_UART2_CLK_EN = 0x800000
	// Position of UART_MEM_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART_MEM_CLK_EN_Pos = 0x18
	// Bit mask of UART_MEM_CLK_EN field.
	DPORT_PERIP_CLK_EN_UART_MEM_CLK_EN_Msk = 0x1000000
	// Bit UART_MEM_CLK_EN.
	DPORT_PERIP_CLK_EN_UART_MEM_CLK_EN = 0x1000000
	// Position of PWM2_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM2_CLK_EN_Pos = 0x19
	// Bit mask of PWM2_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM2_CLK_EN_Msk = 0x2000000
	// Bit PWM2_CLK_EN.
	DPORT_PERIP_CLK_EN_PWM2_CLK_EN = 0x2000000
	// Position of PWM3_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM3_CLK_EN_Pos = 0x1a
	// Bit mask of PWM3_CLK_EN field.
	DPORT_PERIP_CLK_EN_PWM3_CLK_EN_Msk = 0x4000000
	// Bit PWM3_CLK_EN.
	DPORT_PERIP_CLK_EN_PWM3_CLK_EN = 0x4000000

	// PERIP_RST_EN
	// Position of TIMERS_RST field.
	DPORT_PERIP_RST_EN_TIMERS_RST_Pos = 0x0
	// Bit mask of TIMERS_RST field.
	DPORT_PERIP_RST_EN_TIMERS_RST_Msk = 0x1
	// Bit TIMERS_RST.
	DPORT_PERIP_RST_EN_TIMERS_RST = 0x1
	// Position of SPI01_RST field.
	DPORT_PERIP_RST_EN_SPI01_RST_Pos = 0x1
	// Bit mask of SPI01_RST field.
	DPORT_PERIP_RST_EN_SPI01_RST_Msk = 0x2
	// Bit SPI01_RST.
	DPORT_PERIP_RST_EN_SPI01_RST = 0x2
	// Position of UART_RST field.
	DPORT_PERIP_RST_EN_UART_RST_Pos = 0x2
	// Bit mask of UART_RST field.
	DPORT_PERIP_RST_EN_UART_RST_Msk = 0x4
	// Bit UART_RST.
	DPORT_PERIP_RST_EN_UART_RST = 0x4
	// Position of WDG_RST field.
	DPORT_PERIP_RST_EN_WDG_RST_Pos = 0x3
	// Bit mask of WDG_RST field.
	DPORT_PERIP_RST_EN_WDG_RST_Msk = 0x8
	// Bit WDG_RST.
	DPORT_PERIP_RST_EN_WDG_RST = 0x8
	// Position of I2S0_RST field.
	DPORT_PERIP_RST_EN_I2S0_RST_Pos = 0x4
	// Bit mask of I2S0_RST field.
	DPORT_PERIP_RST_EN_I2S0_RST_Msk = 0x10
	// Bit I2S0_RST.
	DPORT_PERIP_RST_EN_I2S0_RST = 0x10
	// Position of UART1_RST field.
	DPORT_PERIP_RST_EN_UART1_RST_Pos = 0x5
	// Bit mask of UART1_RST field.
	DPORT_PERIP_RST_EN_UART1_RST_Msk = 0x20
	// Bit UART1_RST.
	DPORT_PERIP_RST_EN_UART1_RST = 0x20
	// Position of SPI2_RST field.
	DPORT_PERIP_RST_EN_SPI2_RST_Pos = 0x6
	// Bit mask of SPI2_RST field.
	DPORT_PERIP_RST_EN_SPI2_RST_Msk = 0x40
	// Bit SPI2_RST.
	DPORT_PERIP_RST_EN_SPI2_RST = 0x40
	// Position of I2C0_EXT0_RST field.
	DPORT_PERIP_RST_EN_I2C0_EXT0_RST_Pos = 0x7
	// Bit mask of I2C0_EXT0_RST field.
	DPORT_PERIP_RST_EN_I2C0_EXT0_RST_Msk = 0x80
	// Bit I2C0_EXT0_RST.
	DPORT_PERIP_RST_EN_I2C0_EXT0_RST = 0x80
	// Position of UHCI0_RST field.
	DPORT_PERIP_RST_EN_UHCI0_RST_Pos = 0x8
	// Bit mask of UHCI0_RST field.
	DPORT_PERIP_RST_EN_UHCI0_RST_Msk = 0x100
	// Bit UHCI0_RST.
	DPORT_PERIP_RST_EN_UHCI0_RST = 0x100
	// Position of RMT_RST field.
	DPORT_PERIP_RST_EN_RMT_RST_Pos = 0x9
	// Bit mask of RMT_RST field.
	DPORT_PERIP_RST_EN_RMT_RST_Msk = 0x200
	// Bit RMT_RST.
	DPORT_PERIP_RST_EN_RMT_RST = 0x200
	// Position of PCNT_RST field.
	DPORT_PERIP_RST_EN_PCNT_RST_Pos = 0xa
	// Bit mask of PCNT_RST field.
	DPORT_PERIP_RST_EN_PCNT_RST_Msk = 0x400
	// Bit PCNT_RST.
	DPORT_PERIP_RST_EN_PCNT_RST = 0x400
	// Position of LEDC_RST field.
	DPORT_PERIP_RST_EN_LEDC_RST_Pos = 0xb
	// Bit mask of LEDC_RST field.
	DPORT_PERIP_RST_EN_LEDC_RST_Msk = 0x800
	// Bit LEDC_RST.
	DPORT_PERIP_RST_EN_LEDC_RST = 0x800
	// Position of UHCI1_RST field.
	DPORT_PERIP_RST_EN_UHCI1_RST_Pos = 0xc
	// Bit mask of UHCI1_RST field.
	DPORT_PERIP_RST_EN_UHCI1_RST_Msk = 0x1000
	// Bit UHCI1_RST.
	DPORT_PERIP_RST_EN_UHCI1_RST = 0x1000
	// Position of TIMERGROUP_RST field.
	DPORT_PERIP_RST_EN_TIMERGROUP_RST_Pos = 0xd
	// Bit mask of TIMERGROUP_RST field.
	DPORT_PERIP_RST_EN_TIMERGROUP_RST_Msk = 0x2000
	// Bit TIMERGROUP_RST.
	DPORT_PERIP_RST_EN_TIMERGROUP_RST = 0x2000
	// Position of EFUSE_RST field.
	DPORT_PERIP_RST_EN_EFUSE_RST_Pos = 0xe
	// Bit mask of EFUSE_RST field.
	DPORT_PERIP_RST_EN_EFUSE_RST_Msk = 0x4000
	// Bit EFUSE_RST.
	DPORT_PERIP_RST_EN_EFUSE_RST = 0x4000
	// Position of TIMERGROUP1_RST field.
	DPORT_PERIP_RST_EN_TIMERGROUP1_RST_Pos = 0xf
	// Bit mask of TIMERGROUP1_RST field.
	DPORT_PERIP_RST_EN_TIMERGROUP1_RST_Msk = 0x8000
	// Bit TIMERGROUP1_RST.
	DPORT_PERIP_RST_EN_TIMERGROUP1_RST = 0x8000
	// Position of SPI3_RST field.
	DPORT_PERIP_RST_EN_SPI3_RST_Pos = 0x10
	// Bit mask of SPI3_RST field.
	DPORT_PERIP_RST_EN_SPI3_RST_Msk = 0x10000
	// Bit SPI3_RST.
	DPORT_PERIP_RST_EN_SPI3_RST = 0x10000
	// Position of PWM0_RST field.
	DPORT_PERIP_RST_EN_PWM0_RST_Pos = 0x11
	// Bit mask of PWM0_RST field.
	DPORT_PERIP_RST_EN_PWM0_RST_Msk = 0x20000
	// Bit PWM0_RST.
	DPORT_PERIP_RST_EN_PWM0_RST = 0x20000
	// Position of I2C_EXT1_RST field.
	DPORT_PERIP_RST_EN_I2C_EXT1_RST_Pos = 0x12
	// Bit mask of I2C_EXT1_RST field.
	DPORT_PERIP_RST_EN_I2C_EXT1_RST_Msk = 0x40000
	// Bit I2C_EXT1_RST.
	DPORT_PERIP_RST_EN_I2C_EXT1_RST = 0x40000
	// Position of TWAI_RST field.
	DPORT_PERIP_RST_EN_TWAI_RST_Pos = 0x13
	// Bit mask of TWAI_RST field.
	DPORT_PERIP_RST_EN_TWAI_RST_Msk = 0x80000
	// Bit TWAI_RST.
	DPORT_PERIP_RST_EN_TWAI_RST = 0x80000
	// Position of PWM1_RST field.
	DPORT_PERIP_RST_EN_PWM1_RST_Pos = 0x14
	// Bit mask of PWM1_RST field.
	DPORT_PERIP_RST_EN_PWM1_RST_Msk = 0x100000
	// Bit PWM1_RST.
	DPORT_PERIP_RST_EN_PWM1_RST = 0x100000
	// Position of I2S1_RST field.
	DPORT_PERIP_RST_EN_I2S1_RST_Pos = 0x15
	// Bit mask of I2S1_RST field.
	DPORT_PERIP_RST_EN_I2S1_RST_Msk = 0x200000
	// Bit I2S1_RST.
	DPORT_PERIP_RST_EN_I2S1_RST = 0x200000
	// Position of SPI_DMA_RST field.
	DPORT_PERIP_RST_EN_SPI_DMA_RST_Pos = 0x16
	// Bit mask of SPI_DMA_RST field.
	DPORT_PERIP_RST_EN_SPI_DMA_RST_Msk = 0x400000
	// Bit SPI_DMA_RST.
	DPORT_PERIP_RST_EN_SPI_DMA_RST = 0x400000
	// Position of UART2_RST field.
	DPORT_PERIP_RST_EN_UART2_RST_Pos = 0x17
	// Bit mask of UART2_RST field.
	DPORT_PERIP_RST_EN_UART2_RST_Msk = 0x800000
	// Bit UART2_RST.
	DPORT_PERIP_RST_EN_UART2_RST = 0x800000
	// Position of UART_MEM_RST field.
	DPORT_PERIP_RST_EN_UART_MEM_RST_Pos = 0x18
	// Bit mask of UART_MEM_RST field.
	DPORT_PERIP_RST_EN_UART_MEM_RST_Msk = 0x1000000
	// Bit UART_MEM_RST.
	DPORT_PERIP_RST_EN_UART_MEM_RST = 0x1000000
	// Position of PWM2_RST field.
	DPORT_PERIP_RST_EN_PWM2_RST_Pos = 0x19
	// Bit mask of PWM2_RST field.
	DPORT_PERIP_RST_EN_PWM2_RST_Msk = 0x2000000
	// Bit PWM2_RST.
	DPORT_PERIP_RST_EN_PWM2_RST = 0x2000000
	// Position of PWM3_RST field.
	DPORT_PERIP_RST_EN_PWM3_RST_Pos = 0x1a
	// Bit mask of PWM3_RST field.
	DPORT_PERIP_RST_EN_PWM3_RST_Msk = 0x4000000
	// Bit PWM3_RST.
	DPORT_PERIP_RST_EN_PWM3_RST = 0x4000000

	// SLAVE_SPI_CONFIG
	// Position of SLAVE_SPI_MASK_PRO field.
	DPORT_SLAVE_SPI_CONFIG_SLAVE_SPI_MASK_PRO_Pos = 0x0
	// Bit mask of SLAVE_SPI_MASK_PRO field.
	DPORT_SLAVE_SPI_CONFIG_SLAVE_SPI_MASK_PRO_Msk = 0x1
	// Bit SLAVE_SPI_MASK_PRO.
	DPORT_SLAVE_SPI_CONFIG_SLAVE_SPI_MASK_PRO = 0x1
	// Position of SLAVE_SPI_MASK_APP field.
	DPORT_SLAVE_SPI_CONFIG_SLAVE_SPI_MASK_APP_Pos = 0x4
	// Bit mask of SLAVE_SPI_MASK_APP field.
	DPORT_SLAVE_SPI_CONFIG_SLAVE_SPI_MASK_APP_Msk = 0x10
	// Bit SLAVE_SPI_MASK_APP.
	DPORT_SLAVE_SPI_CONFIG_SLAVE_SPI_MASK_APP = 0x10
	// Position of SPI_ENCRYPT_ENABLE field.
	DPORT_SLAVE_SPI_CONFIG_SPI_ENCRYPT_ENABLE_Pos = 0x8
	// Bit mask of SPI_ENCRYPT_ENABLE field.
	DPORT_SLAVE_SPI_CONFIG_SPI_ENCRYPT_ENABLE_Msk = 0x100
	// Bit SPI_ENCRYPT_ENABLE.
	DPORT_SLAVE_SPI_CONFIG_SPI_ENCRYPT_ENABLE = 0x100
	// Position of SPI_DECRYPT_ENABLE field.
	DPORT_SLAVE_SPI_CONFIG_SPI_DECRYPT_ENABLE_Pos = 0xc
	// Bit mask of SPI_DECRYPT_ENABLE field.
	DPORT_SLAVE_SPI_CONFIG_SPI_DECRYPT_ENABLE_Msk = 0x1000
	// Bit SPI_DECRYPT_ENABLE.
	DPORT_SLAVE_SPI_CONFIG_SPI_DECRYPT_ENABLE = 0x1000

	// WIFI_CLK_EN
	// Position of WIFI_CLK_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_EN_Pos = 0x0
	// Bit mask of WIFI_CLK_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_EN_Msk = 0xffffffff
	// Position of WIFI_CLK_WIFI_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_WIFI_EN_Pos = 0x0
	// Bit mask of WIFI_CLK_WIFI_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_WIFI_EN_Msk = 0x7
	// Position of WIFI_CLK_WIFI_BT_COMMON field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_WIFI_BT_COMMON_Pos = 0x0
	// Bit mask of WIFI_CLK_WIFI_BT_COMMON field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_WIFI_BT_COMMON_Msk = 0x3f
	// Position of WIFI_CLK_BT_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_BT_EN_Pos = 0xb
	// Bit mask of WIFI_CLK_BT_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_BT_EN_Msk = 0x3800

	// CORE_RST_EN
	// Position of CORE_RST field.
	DPORT_CORE_RST_EN_CORE_RST_Pos = 0x0
	// Bit mask of CORE_RST field.
	DPORT_CORE_RST_EN_CORE_RST_Msk = 0xff

	// BT_LPCK_DIV_INT
	// Position of BT_LPCK_DIV_NUM field.
	DPORT_BT_LPCK_DIV_INT_BT_LPCK_DIV_NUM_Pos = 0x0
	// Bit mask of BT_LPCK_DIV_NUM field.
	DPORT_BT_LPCK_DIV_INT_BT_LPCK_DIV_NUM_Msk = 0xfff
	// Position of BTEXTWAKEUP_REQ field.
	DPORT_BT_LPCK_DIV_INT_BTEXTWAKEUP_REQ_Pos = 0xc
	// Bit mask of BTEXTWAKEUP_REQ field.
	DPORT_BT_LPCK_DIV_INT_BTEXTWAKEUP_REQ_Msk = 0x1000
	// Bit BTEXTWAKEUP_REQ.
	DPORT_BT_LPCK_DIV_INT_BTEXTWAKEUP_REQ = 0x1000

	// BT_LPCK_DIV_FRAC
	// Position of BT_LPCK_DIV_B field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_B_Pos = 0x0
	// Bit mask of BT_LPCK_DIV_B field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_B_Msk = 0xfff
	// Position of BT_LPCK_DIV_A field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_A_Pos = 0xc
	// Bit mask of BT_LPCK_DIV_A field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_A_Msk = 0xfff000
	// Position of LPCLK_SEL_RTC_SLOW field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW_Pos = 0x18
	// Bit mask of LPCLK_SEL_RTC_SLOW field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW_Msk = 0x1000000
	// Bit LPCLK_SEL_RTC_SLOW.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW = 0x1000000
	// Position of LPCLK_SEL_8M field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_8M_Pos = 0x19
	// Bit mask of LPCLK_SEL_8M field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_8M_Msk = 0x2000000
	// Bit LPCLK_SEL_8M.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_8M = 0x2000000
	// Position of LPCLK_SEL_XTAL field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL_Pos = 0x1a
	// Bit mask of LPCLK_SEL_XTAL field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL_Msk = 0x4000000
	// Bit LPCLK_SEL_XTAL.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL = 0x4000000
	// Position of LPCLK_SEL_XTAL32K field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K_Pos = 0x1b
	// Bit mask of LPCLK_SEL_XTAL32K field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K_Msk = 0x8000000
	// Bit LPCLK_SEL_XTAL32K.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K = 0x8000000

	// CPU_INTR_FROM_CPU_0
	// Position of CPU_INTR_FROM_CPU_0 field.
	DPORT_CPU_INTR_FROM_CPU_0_CPU_INTR_FROM_CPU_0_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_0 field.
	DPORT_CPU_INTR_FROM_CPU_0_CPU_INTR_FROM_CPU_0_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_0.
	DPORT_CPU_INTR_FROM_CPU_0_CPU_INTR_FROM_CPU_0 = 0x1

	// CPU_INTR_FROM_CPU_1
	// Position of CPU_INTR_FROM_CPU_1 field.
	DPORT_CPU_INTR_FROM_CPU_1_CPU_INTR_FROM_CPU_1_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_1 field.
	DPORT_CPU_INTR_FROM_CPU_1_CPU_INTR_FROM_CPU_1_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_1.
	DPORT_CPU_INTR_FROM_CPU_1_CPU_INTR_FROM_CPU_1 = 0x1

	// CPU_INTR_FROM_CPU_2
	// Position of CPU_INTR_FROM_CPU_2 field.
	DPORT_CPU_INTR_FROM_CPU_2_CPU_INTR_FROM_CPU_2_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_2 field.
	DPORT_CPU_INTR_FROM_CPU_2_CPU_INTR_FROM_CPU_2_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_2.
	DPORT_CPU_INTR_FROM_CPU_2_CPU_INTR_FROM_CPU_2 = 0x1

	// CPU_INTR_FROM_CPU_3
	// Position of CPU_INTR_FROM_CPU_3 field.
	DPORT_CPU_INTR_FROM_CPU_3_CPU_INTR_FROM_CPU_3_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_3 field.
	DPORT_CPU_INTR_FROM_CPU_3_CPU_INTR_FROM_CPU_3_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_3.
	DPORT_CPU_INTR_FROM_CPU_3_CPU_INTR_FROM_CPU_3 = 0x1

	// PRO_INTR_STATUS_0
	// Position of PRO_INTR_STATUS_0 field.
	DPORT_PRO_INTR_STATUS_0_PRO_INTR_STATUS_0_Pos = 0x0
	// Bit mask of PRO_INTR_STATUS_0 field.
	DPORT_PRO_INTR_STATUS_0_PRO_INTR_STATUS_0_Msk = 0xffffffff

	// PRO_INTR_STATUS_1
	// Position of PRO_INTR_STATUS_1 field.
	DPORT_PRO_INTR_STATUS_1_PRO_INTR_STATUS_1_Pos = 0x0
	// Bit mask of PRO_INTR_STATUS_1 field.
	DPORT_PRO_INTR_STATUS_1_PRO_INTR_STATUS_1_Msk = 0xffffffff

	// PRO_INTR_STATUS_2
	// Position of PRO_INTR_STATUS_2 field.
	DPORT_PRO_INTR_STATUS_2_PRO_INTR_STATUS_2_Pos = 0x0
	// Bit mask of PRO_INTR_STATUS_2 field.
	DPORT_PRO_INTR_STATUS_2_PRO_INTR_STATUS_2_Msk = 0xffffffff

	// APP_INTR_STATUS_0
	// Position of APP_INTR_STATUS_0 field.
	DPORT_APP_INTR_STATUS_0_APP_INTR_STATUS_0_Pos = 0x0
	// Bit mask of APP_INTR_STATUS_0 field.
	DPORT_APP_INTR_STATUS_0_APP_INTR_STATUS_0_Msk = 0xffffffff

	// APP_INTR_STATUS_1
	// Position of APP_INTR_STATUS_1 field.
	DPORT_APP_INTR_STATUS_1_APP_INTR_STATUS_1_Pos = 0x0
	// Bit mask of APP_INTR_STATUS_1 field.
	DPORT_APP_INTR_STATUS_1_APP_INTR_STATUS_1_Msk = 0xffffffff

	// APP_INTR_STATUS_2
	// Position of APP_INTR_STATUS_2 field.
	DPORT_APP_INTR_STATUS_2_APP_INTR_STATUS_2_Pos = 0x0
	// Bit mask of APP_INTR_STATUS_2 field.
	DPORT_APP_INTR_STATUS_2_APP_INTR_STATUS_2_Msk = 0xffffffff

	// PRO_MAC_INTR_MAP
	// Position of PRO_MAC_INTR_MAP field.
	DPORT_PRO_MAC_INTR_MAP_PRO_MAC_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_MAC_INTR_MAP field.
	DPORT_PRO_MAC_INTR_MAP_PRO_MAC_INTR_MAP_Msk = 0x1f

	// PRO_MAC_NMI_MAP
	// Position of PRO_MAC_NMI_MAP field.
	DPORT_PRO_MAC_NMI_MAP_PRO_MAC_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_MAC_NMI_MAP field.
	DPORT_PRO_MAC_NMI_MAP_PRO_MAC_NMI_MAP_Msk = 0x1f

	// PRO_BB_INT_MAP
	// Position of PRO_BB_INT_MAP field.
	DPORT_PRO_BB_INT_MAP_PRO_BB_INT_MAP_Pos = 0x0
	// Bit mask of PRO_BB_INT_MAP field.
	DPORT_PRO_BB_INT_MAP_PRO_BB_INT_MAP_Msk = 0x1f

	// PRO_BT_MAC_INT_MAP
	// Position of PRO_BT_MAC_INT_MAP field.
	DPORT_PRO_BT_MAC_INT_MAP_PRO_BT_MAC_INT_MAP_Pos = 0x0
	// Bit mask of PRO_BT_MAC_INT_MAP field.
	DPORT_PRO_BT_MAC_INT_MAP_PRO_BT_MAC_INT_MAP_Msk = 0x1f

	// PRO_BT_BB_INT_MAP
	// Position of PRO_BT_BB_INT_MAP field.
	DPORT_PRO_BT_BB_INT_MAP_PRO_BT_BB_INT_MAP_Pos = 0x0
	// Bit mask of PRO_BT_BB_INT_MAP field.
	DPORT_PRO_BT_BB_INT_MAP_PRO_BT_BB_INT_MAP_Msk = 0x1f

	// PRO_BT_BB_NMI_MAP
	// Position of PRO_BT_BB_NMI_MAP field.
	DPORT_PRO_BT_BB_NMI_MAP_PRO_BT_BB_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_BT_BB_NMI_MAP field.
	DPORT_PRO_BT_BB_NMI_MAP_PRO_BT_BB_NMI_MAP_Msk = 0x1f

	// PRO_RWBT_IRQ_MAP
	// Position of PRO_RWBT_IRQ_MAP field.
	DPORT_PRO_RWBT_IRQ_MAP_PRO_RWBT_IRQ_MAP_Pos = 0x0
	// Bit mask of PRO_RWBT_IRQ_MAP field.
	DPORT_PRO_RWBT_IRQ_MAP_PRO_RWBT_IRQ_MAP_Msk = 0x1f

	// PRO_RWBLE_IRQ_MAP
	// Position of PRO_RWBLE_IRQ_MAP field.
	DPORT_PRO_RWBLE_IRQ_MAP_PRO_RWBLE_IRQ_MAP_Pos = 0x0
	// Bit mask of PRO_RWBLE_IRQ_MAP field.
	DPORT_PRO_RWBLE_IRQ_MAP_PRO_RWBLE_IRQ_MAP_Msk = 0x1f

	// PRO_RWBT_NMI_MAP
	// Position of PRO_RWBT_NMI_MAP field.
	DPORT_PRO_RWBT_NMI_MAP_PRO_RWBT_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_RWBT_NMI_MAP field.
	DPORT_PRO_RWBT_NMI_MAP_PRO_RWBT_NMI_MAP_Msk = 0x1f

	// PRO_RWBLE_NMI_MAP
	// Position of PRO_RWBLE_NMI_MAP field.
	DPORT_PRO_RWBLE_NMI_MAP_PRO_RWBLE_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_RWBLE_NMI_MAP field.
	DPORT_PRO_RWBLE_NMI_MAP_PRO_RWBLE_NMI_MAP_Msk = 0x1f

	// PRO_SLC0_INTR_MAP
	// Position of PRO_SLC0_INTR_MAP field.
	DPORT_PRO_SLC0_INTR_MAP_PRO_SLC0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_SLC0_INTR_MAP field.
	DPORT_PRO_SLC0_INTR_MAP_PRO_SLC0_INTR_MAP_Msk = 0x1f

	// PRO_SLC1_INTR_MAP
	// Position of PRO_SLC1_INTR_MAP field.
	DPORT_PRO_SLC1_INTR_MAP_PRO_SLC1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_SLC1_INTR_MAP field.
	DPORT_PRO_SLC1_INTR_MAP_PRO_SLC1_INTR_MAP_Msk = 0x1f

	// PRO_UHCI0_INTR_MAP
	// Position of PRO_UHCI0_INTR_MAP field.
	DPORT_PRO_UHCI0_INTR_MAP_PRO_UHCI0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UHCI0_INTR_MAP field.
	DPORT_PRO_UHCI0_INTR_MAP_PRO_UHCI0_INTR_MAP_Msk = 0x1f

	// PRO_UHCI1_INTR_MAP
	// Position of PRO_UHCI1_INTR_MAP field.
	DPORT_PRO_UHCI1_INTR_MAP_PRO_UHCI1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UHCI1_INTR_MAP field.
	DPORT_PRO_UHCI1_INTR_MAP_PRO_UHCI1_INTR_MAP_Msk = 0x1f

	// PRO_TG_T0_LEVEL_INT_MAP
	// Position of PRO_TG_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T0_LEVEL_INT_MAP_PRO_TG_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T0_LEVEL_INT_MAP_PRO_TG_T0_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG_T1_LEVEL_INT_MAP
	// Position of PRO_TG_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T1_LEVEL_INT_MAP_PRO_TG_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T1_LEVEL_INT_MAP_PRO_TG_T1_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG_WDT_LEVEL_INT_MAP
	// Position of PRO_TG_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_WDT_LEVEL_INT_MAP_PRO_TG_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_WDT_LEVEL_INT_MAP_PRO_TG_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG_LACT_LEVEL_INT_MAP
	// Position of PRO_TG_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_LACT_LEVEL_INT_MAP_PRO_TG_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_LACT_LEVEL_INT_MAP_PRO_TG_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_T0_LEVEL_INT_MAP
	// Position of PRO_TG1_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T0_LEVEL_INT_MAP_PRO_TG1_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T0_LEVEL_INT_MAP_PRO_TG1_T0_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_T1_LEVEL_INT_MAP
	// Position of PRO_TG1_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T1_LEVEL_INT_MAP_PRO_TG1_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T1_LEVEL_INT_MAP_PRO_TG1_T1_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_WDT_LEVEL_INT_MAP
	// Position of PRO_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_WDT_LEVEL_INT_MAP_PRO_TG1_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_WDT_LEVEL_INT_MAP_PRO_TG1_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_LACT_LEVEL_INT_MAP
	// Position of PRO_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_LACT_LEVEL_INT_MAP_PRO_TG1_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_LACT_LEVEL_INT_MAP_PRO_TG1_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_GPIO_INTERRUPT_MAP
	// Position of PRO_GPIO_INTERRUPT_PRO_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP_Pos = 0x0
	// Bit mask of PRO_GPIO_INTERRUPT_PRO_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP_Msk = 0x1f

	// PRO_GPIO_INTERRUPT_NMI_MAP
	// Position of PRO_GPIO_INTERRUPT_PRO_NMI_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_GPIO_INTERRUPT_PRO_NMI_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_0_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_0_MAP_PRO_CPU_INTR_FROM_CPU_0_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_0_MAP_PRO_CPU_INTR_FROM_CPU_0_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_1_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_1_MAP_PRO_CPU_INTR_FROM_CPU_1_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_1_MAP_PRO_CPU_INTR_FROM_CPU_1_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_2_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_2_MAP_PRO_CPU_INTR_FROM_CPU_2_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_2_MAP_PRO_CPU_INTR_FROM_CPU_2_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_3_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_3_MAP_PRO_CPU_INTR_FROM_CPU_3_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_3_MAP_PRO_CPU_INTR_FROM_CPU_3_MAP_Msk = 0x1f

	// PRO_SPI_INTR_0_MAP
	// Position of PRO_SPI_INTR_0_MAP field.
	DPORT_PRO_SPI_INTR_0_MAP_PRO_SPI_INTR_0_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_0_MAP field.
	DPORT_PRO_SPI_INTR_0_MAP_PRO_SPI_INTR_0_MAP_Msk = 0x1f

	// PRO_SPI_INTR_1_MAP
	// Position of PRO_SPI_INTR_1_MAP field.
	DPORT_PRO_SPI_INTR_1_MAP_PRO_SPI_INTR_1_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_1_MAP field.
	DPORT_PRO_SPI_INTR_1_MAP_PRO_SPI_INTR_1_MAP_Msk = 0x1f

	// PRO_SPI_INTR_2_MAP
	// Position of PRO_SPI_INTR_2_MAP field.
	DPORT_PRO_SPI_INTR_2_MAP_PRO_SPI_INTR_2_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_2_MAP field.
	DPORT_PRO_SPI_INTR_2_MAP_PRO_SPI_INTR_2_MAP_Msk = 0x1f

	// PRO_SPI_INTR_3_MAP
	// Position of PRO_SPI_INTR_3_MAP field.
	DPORT_PRO_SPI_INTR_3_MAP_PRO_SPI_INTR_3_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_3_MAP field.
	DPORT_PRO_SPI_INTR_3_MAP_PRO_SPI_INTR_3_MAP_Msk = 0x1f

	// PRO_I2S0_INT_MAP
	// Position of PRO_I2S0_INT_MAP field.
	DPORT_PRO_I2S0_INT_MAP_PRO_I2S0_INT_MAP_Pos = 0x0
	// Bit mask of PRO_I2S0_INT_MAP field.
	DPORT_PRO_I2S0_INT_MAP_PRO_I2S0_INT_MAP_Msk = 0x1f

	// PRO_I2S1_INT_MAP
	// Position of PRO_I2S1_INT_MAP field.
	DPORT_PRO_I2S1_INT_MAP_PRO_I2S1_INT_MAP_Pos = 0x0
	// Bit mask of PRO_I2S1_INT_MAP field.
	DPORT_PRO_I2S1_INT_MAP_PRO_I2S1_INT_MAP_Msk = 0x1f

	// PRO_UART_INTR_MAP
	// Position of PRO_UART_INTR_MAP field.
	DPORT_PRO_UART_INTR_MAP_PRO_UART_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UART_INTR_MAP field.
	DPORT_PRO_UART_INTR_MAP_PRO_UART_INTR_MAP_Msk = 0x1f

	// PRO_UART1_INTR_MAP
	// Position of PRO_UART1_INTR_MAP field.
	DPORT_PRO_UART1_INTR_MAP_PRO_UART1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UART1_INTR_MAP field.
	DPORT_PRO_UART1_INTR_MAP_PRO_UART1_INTR_MAP_Msk = 0x1f

	// PRO_UART2_INTR_MAP
	// Position of PRO_UART2_INTR_MAP field.
	DPORT_PRO_UART2_INTR_MAP_PRO_UART2_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UART2_INTR_MAP field.
	DPORT_PRO_UART2_INTR_MAP_PRO_UART2_INTR_MAP_Msk = 0x1f

	// PRO_SDIO_HOST_INTERRUPT_MAP
	// Position of PRO_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_PRO_SDIO_HOST_INTERRUPT_MAP_PRO_SDIO_HOST_INTERRUPT_MAP_Pos = 0x0
	// Bit mask of PRO_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_PRO_SDIO_HOST_INTERRUPT_MAP_PRO_SDIO_HOST_INTERRUPT_MAP_Msk = 0x1f

	// PRO_EMAC_INT_MAP
	// Position of PRO_EMAC_INT_MAP field.
	DPORT_PRO_EMAC_INT_MAP_PRO_EMAC_INT_MAP_Pos = 0x0
	// Bit mask of PRO_EMAC_INT_MAP field.
	DPORT_PRO_EMAC_INT_MAP_PRO_EMAC_INT_MAP_Msk = 0x1f

	// PRO_PWM0_INTR_MAP
	// Position of PRO_PWM0_INTR_MAP field.
	DPORT_PRO_PWM0_INTR_MAP_PRO_PWM0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM0_INTR_MAP field.
	DPORT_PRO_PWM0_INTR_MAP_PRO_PWM0_INTR_MAP_Msk = 0x1f

	// PRO_PWM1_INTR_MAP
	// Position of PRO_PWM1_INTR_MAP field.
	DPORT_PRO_PWM1_INTR_MAP_PRO_PWM1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM1_INTR_MAP field.
	DPORT_PRO_PWM1_INTR_MAP_PRO_PWM1_INTR_MAP_Msk = 0x1f

	// PRO_PWM2_INTR_MAP
	// Position of PRO_PWM2_INTR_MAP field.
	DPORT_PRO_PWM2_INTR_MAP_PRO_PWM2_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM2_INTR_MAP field.
	DPORT_PRO_PWM2_INTR_MAP_PRO_PWM2_INTR_MAP_Msk = 0x1f

	// PRO_PWM3_INTR_MAP
	// Position of PRO_PWM3_INTR_MAP field.
	DPORT_PRO_PWM3_INTR_MAP_PRO_PWM3_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM3_INTR_MAP field.
	DPORT_PRO_PWM3_INTR_MAP_PRO_PWM3_INTR_MAP_Msk = 0x1f

	// PRO_LEDC_INT_MAP
	// Position of PRO_LEDC_INT_MAP field.
	DPORT_PRO_LEDC_INT_MAP_PRO_LEDC_INT_MAP_Pos = 0x0
	// Bit mask of PRO_LEDC_INT_MAP field.
	DPORT_PRO_LEDC_INT_MAP_PRO_LEDC_INT_MAP_Msk = 0x1f

	// PRO_EFUSE_INT_MAP
	// Position of PRO_EFUSE_INT_MAP field.
	DPORT_PRO_EFUSE_INT_MAP_PRO_EFUSE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_EFUSE_INT_MAP field.
	DPORT_PRO_EFUSE_INT_MAP_PRO_EFUSE_INT_MAP_Msk = 0x1f

	// PRO_CAN_INT_MAP
	// Position of PRO_CAN_INT_MAP field.
	DPORT_PRO_CAN_INT_MAP_PRO_CAN_INT_MAP_Pos = 0x0
	// Bit mask of PRO_CAN_INT_MAP field.
	DPORT_PRO_CAN_INT_MAP_PRO_CAN_INT_MAP_Msk = 0x1f

	// PRO_RTC_CORE_INTR_MAP
	// Position of PRO_RTC_CORE_INTR_MAP field.
	DPORT_PRO_RTC_CORE_INTR_MAP_PRO_RTC_CORE_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_RTC_CORE_INTR_MAP field.
	DPORT_PRO_RTC_CORE_INTR_MAP_PRO_RTC_CORE_INTR_MAP_Msk = 0x1f

	// PRO_RMT_INTR_MAP
	// Position of PRO_RMT_INTR_MAP field.
	DPORT_PRO_RMT_INTR_MAP_PRO_RMT_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_RMT_INTR_MAP field.
	DPORT_PRO_RMT_INTR_MAP_PRO_RMT_INTR_MAP_Msk = 0x1f

	// PRO_PCNT_INTR_MAP
	// Position of PRO_PCNT_INTR_MAP field.
	DPORT_PRO_PCNT_INTR_MAP_PRO_PCNT_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PCNT_INTR_MAP field.
	DPORT_PRO_PCNT_INTR_MAP_PRO_PCNT_INTR_MAP_Msk = 0x1f

	// PRO_I2C_EXT0_INTR_MAP
	// Position of PRO_I2C_EXT0_INTR_MAP field.
	DPORT_PRO_I2C_EXT0_INTR_MAP_PRO_I2C_EXT0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_I2C_EXT0_INTR_MAP field.
	DPORT_PRO_I2C_EXT0_INTR_MAP_PRO_I2C_EXT0_INTR_MAP_Msk = 0x1f

	// PRO_I2C_EXT1_INTR_MAP
	// Position of PRO_I2C_EXT1_INTR_MAP field.
	DPORT_PRO_I2C_EXT1_INTR_MAP_PRO_I2C_EXT1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_I2C_EXT1_INTR_MAP field.
	DPORT_PRO_I2C_EXT1_INTR_MAP_PRO_I2C_EXT1_INTR_MAP_Msk = 0x1f

	// PRO_RSA_INTR_MAP
	// Position of PRO_RSA_INTR_MAP field.
	DPORT_PRO_RSA_INTR_MAP_PRO_RSA_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_RSA_INTR_MAP field.
	DPORT_PRO_RSA_INTR_MAP_PRO_RSA_INTR_MAP_Msk = 0x1f

	// PRO_SPI1_DMA_INT_MAP
	// Position of PRO_SPI1_DMA_INT_MAP field.
	DPORT_PRO_SPI1_DMA_INT_MAP_PRO_SPI1_DMA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_SPI1_DMA_INT_MAP field.
	DPORT_PRO_SPI1_DMA_INT_MAP_PRO_SPI1_DMA_INT_MAP_Msk = 0x1f

	// PRO_SPI2_DMA_INT_MAP
	// Position of PRO_SPI2_DMA_INT_MAP field.
	DPORT_PRO_SPI2_DMA_INT_MAP_PRO_SPI2_DMA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_SPI2_DMA_INT_MAP field.
	DPORT_PRO_SPI2_DMA_INT_MAP_PRO_SPI2_DMA_INT_MAP_Msk = 0x1f

	// PRO_SPI3_DMA_INT_MAP
	// Position of PRO_SPI3_DMA_INT_MAP field.
	DPORT_PRO_SPI3_DMA_INT_MAP_PRO_SPI3_DMA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_SPI3_DMA_INT_MAP field.
	DPORT_PRO_SPI3_DMA_INT_MAP_PRO_SPI3_DMA_INT_MAP_Msk = 0x1f

	// PRO_WDG_INT_MAP
	// Position of PRO_WDG_INT_MAP field.
	DPORT_PRO_WDG_INT_MAP_PRO_WDG_INT_MAP_Pos = 0x0
	// Bit mask of PRO_WDG_INT_MAP field.
	DPORT_PRO_WDG_INT_MAP_PRO_WDG_INT_MAP_Msk = 0x1f

	// PRO_TIMER_INT1_MAP
	// Position of PRO_TIMER_INT1_MAP field.
	DPORT_PRO_TIMER_INT1_MAP_PRO_TIMER_INT1_MAP_Pos = 0x0
	// Bit mask of PRO_TIMER_INT1_MAP field.
	DPORT_PRO_TIMER_INT1_MAP_PRO_TIMER_INT1_MAP_Msk = 0x1f

	// PRO_TIMER_INT2_MAP
	// Position of PRO_TIMER_INT2_MAP field.
	DPORT_PRO_TIMER_INT2_MAP_PRO_TIMER_INT2_MAP_Pos = 0x0
	// Bit mask of PRO_TIMER_INT2_MAP field.
	DPORT_PRO_TIMER_INT2_MAP_PRO_TIMER_INT2_MAP_Msk = 0x1f

	// PRO_TG_T0_EDGE_INT_MAP
	// Position of PRO_TG_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG_T0_EDGE_INT_MAP_PRO_TG_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG_T0_EDGE_INT_MAP_PRO_TG_T0_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG_T1_EDGE_INT_MAP
	// Position of PRO_TG_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG_T1_EDGE_INT_MAP_PRO_TG_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG_T1_EDGE_INT_MAP_PRO_TG_T1_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG_WDT_EDGE_INT_MAP
	// Position of PRO_TG_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG_WDT_EDGE_INT_MAP_PRO_TG_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG_WDT_EDGE_INT_MAP_PRO_TG_WDT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG_LACT_EDGE_INT_MAP
	// Position of PRO_TG_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG_LACT_EDGE_INT_MAP_PRO_TG_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG_LACT_EDGE_INT_MAP_PRO_TG_LACT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_T0_EDGE_INT_MAP
	// Position of PRO_TG1_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T0_EDGE_INT_MAP_PRO_TG1_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T0_EDGE_INT_MAP_PRO_TG1_T0_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_T1_EDGE_INT_MAP
	// Position of PRO_TG1_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T1_EDGE_INT_MAP_PRO_TG1_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T1_EDGE_INT_MAP_PRO_TG1_T1_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_WDT_EDGE_INT_MAP
	// Position of PRO_TG1_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_WDT_EDGE_INT_MAP_PRO_TG1_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_WDT_EDGE_INT_MAP_PRO_TG1_WDT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_LACT_EDGE_INT_MAP
	// Position of PRO_TG1_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_LACT_EDGE_INT_MAP_PRO_TG1_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_LACT_EDGE_INT_MAP_PRO_TG1_LACT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_MMU_IA_INT_MAP
	// Position of PRO_MMU_IA_INT_MAP field.
	DPORT_PRO_MMU_IA_INT_MAP_PRO_MMU_IA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_MMU_IA_INT_MAP field.
	DPORT_PRO_MMU_IA_INT_MAP_PRO_MMU_IA_INT_MAP_Msk = 0x1f

	// PRO_MPU_IA_INT_MAP
	// Position of PRO_MPU_IA_INT_MAP field.
	DPORT_PRO_MPU_IA_INT_MAP_PRO_MPU_IA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_MPU_IA_INT_MAP field.
	DPORT_PRO_MPU_IA_INT_MAP_PRO_MPU_IA_INT_MAP_Msk = 0x1f

	// PRO_CACHE_IA_INT_MAP
	// Position of PRO_CACHE_IA_INT_MAP field.
	DPORT_PRO_CACHE_IA_INT_MAP_PRO_CACHE_IA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_CACHE_IA_INT_MAP field.
	DPORT_PRO_CACHE_IA_INT_MAP_PRO_CACHE_IA_INT_MAP_Msk = 0x1f

	// APP_MAC_INTR_MAP
	// Position of APP_MAC_INTR_MAP field.
	DPORT_APP_MAC_INTR_MAP_APP_MAC_INTR_MAP_Pos = 0x0
	// Bit mask of APP_MAC_INTR_MAP field.
	DPORT_APP_MAC_INTR_MAP_APP_MAC_INTR_MAP_Msk = 0x1f

	// APP_MAC_NMI_MAP
	// Position of APP_MAC_NMI_MAP field.
	DPORT_APP_MAC_NMI_MAP_APP_MAC_NMI_MAP_Pos = 0x0
	// Bit mask of APP_MAC_NMI_MAP field.
	DPORT_APP_MAC_NMI_MAP_APP_MAC_NMI_MAP_Msk = 0x1f

	// APP_BB_INT_MAP
	// Position of APP_BB_INT_MAP field.
	DPORT_APP_BB_INT_MAP_APP_BB_INT_MAP_Pos = 0x0
	// Bit mask of APP_BB_INT_MAP field.
	DPORT_APP_BB_INT_MAP_APP_BB_INT_MAP_Msk = 0x1f

	// APP_BT_MAC_INT_MAP
	// Position of APP_BT_MAC_INT_MAP field.
	DPORT_APP_BT_MAC_INT_MAP_APP_BT_MAC_INT_MAP_Pos = 0x0
	// Bit mask of APP_BT_MAC_INT_MAP field.
	DPORT_APP_BT_MAC_INT_MAP_APP_BT_MAC_INT_MAP_Msk = 0x1f

	// APP_BT_BB_INT_MAP
	// Position of APP_BT_BB_INT_MAP field.
	DPORT_APP_BT_BB_INT_MAP_APP_BT_BB_INT_MAP_Pos = 0x0
	// Bit mask of APP_BT_BB_INT_MAP field.
	DPORT_APP_BT_BB_INT_MAP_APP_BT_BB_INT_MAP_Msk = 0x1f

	// APP_BT_BB_NMI_MAP
	// Position of APP_BT_BB_NMI_MAP field.
	DPORT_APP_BT_BB_NMI_MAP_APP_BT_BB_NMI_MAP_Pos = 0x0
	// Bit mask of APP_BT_BB_NMI_MAP field.
	DPORT_APP_BT_BB_NMI_MAP_APP_BT_BB_NMI_MAP_Msk = 0x1f

	// APP_RWBT_IRQ_MAP
	// Position of APP_RWBT_IRQ_MAP field.
	DPORT_APP_RWBT_IRQ_MAP_APP_RWBT_IRQ_MAP_Pos = 0x0
	// Bit mask of APP_RWBT_IRQ_MAP field.
	DPORT_APP_RWBT_IRQ_MAP_APP_RWBT_IRQ_MAP_Msk = 0x1f

	// APP_RWBLE_IRQ_MAP
	// Position of APP_RWBLE_IRQ_MAP field.
	DPORT_APP_RWBLE_IRQ_MAP_APP_RWBLE_IRQ_MAP_Pos = 0x0
	// Bit mask of APP_RWBLE_IRQ_MAP field.
	DPORT_APP_RWBLE_IRQ_MAP_APP_RWBLE_IRQ_MAP_Msk = 0x1f

	// APP_RWBT_NMI_MAP
	// Position of APP_RWBT_NMI_MAP field.
	DPORT_APP_RWBT_NMI_MAP_APP_RWBT_NMI_MAP_Pos = 0x0
	// Bit mask of APP_RWBT_NMI_MAP field.
	DPORT_APP_RWBT_NMI_MAP_APP_RWBT_NMI_MAP_Msk = 0x1f

	// APP_RWBLE_NMI_MAP
	// Position of APP_RWBLE_NMI_MAP field.
	DPORT_APP_RWBLE_NMI_MAP_APP_RWBLE_NMI_MAP_Pos = 0x0
	// Bit mask of APP_RWBLE_NMI_MAP field.
	DPORT_APP_RWBLE_NMI_MAP_APP_RWBLE_NMI_MAP_Msk = 0x1f

	// APP_SLC0_INTR_MAP
	// Position of APP_SLC0_INTR_MAP field.
	DPORT_APP_SLC0_INTR_MAP_APP_SLC0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_SLC0_INTR_MAP field.
	DPORT_APP_SLC0_INTR_MAP_APP_SLC0_INTR_MAP_Msk = 0x1f

	// APP_SLC1_INTR_MAP
	// Position of APP_SLC1_INTR_MAP field.
	DPORT_APP_SLC1_INTR_MAP_APP_SLC1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_SLC1_INTR_MAP field.
	DPORT_APP_SLC1_INTR_MAP_APP_SLC1_INTR_MAP_Msk = 0x1f

	// APP_UHCI0_INTR_MAP
	// Position of APP_UHCI0_INTR_MAP field.
	DPORT_APP_UHCI0_INTR_MAP_APP_UHCI0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UHCI0_INTR_MAP field.
	DPORT_APP_UHCI0_INTR_MAP_APP_UHCI0_INTR_MAP_Msk = 0x1f

	// APP_UHCI1_INTR_MAP
	// Position of APP_UHCI1_INTR_MAP field.
	DPORT_APP_UHCI1_INTR_MAP_APP_UHCI1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UHCI1_INTR_MAP field.
	DPORT_APP_UHCI1_INTR_MAP_APP_UHCI1_INTR_MAP_Msk = 0x1f

	// APP_TG_T0_LEVEL_INT_MAP
	// Position of APP_TG_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG_T0_LEVEL_INT_MAP_APP_TG_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG_T0_LEVEL_INT_MAP_APP_TG_T0_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG_T1_LEVEL_INT_MAP
	// Position of APP_TG_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG_T1_LEVEL_INT_MAP_APP_TG_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG_T1_LEVEL_INT_MAP_APP_TG_T1_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG_WDT_LEVEL_INT_MAP
	// Position of APP_TG_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG_WDT_LEVEL_INT_MAP_APP_TG_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG_WDT_LEVEL_INT_MAP_APP_TG_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG_LACT_LEVEL_INT_MAP
	// Position of APP_TG_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG_LACT_LEVEL_INT_MAP_APP_TG_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG_LACT_LEVEL_INT_MAP_APP_TG_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_T0_LEVEL_INT_MAP
	// Position of APP_TG1_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T0_LEVEL_INT_MAP_APP_TG1_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T0_LEVEL_INT_MAP_APP_TG1_T0_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_T1_LEVEL_INT_MAP
	// Position of APP_TG1_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T1_LEVEL_INT_MAP_APP_TG1_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T1_LEVEL_INT_MAP_APP_TG1_T1_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_WDT_LEVEL_INT_MAP
	// Position of APP_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_WDT_LEVEL_INT_MAP_APP_TG1_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_WDT_LEVEL_INT_MAP_APP_TG1_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_LACT_LEVEL_INT_MAP
	// Position of APP_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_LACT_LEVEL_INT_MAP_APP_TG1_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_LACT_LEVEL_INT_MAP_APP_TG1_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_GPIO_INTERRUPT_MAP
	// Position of APP_GPIO_INTERRUPT_APP_MAP field.
	DPORT_APP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP_Pos = 0x0
	// Bit mask of APP_GPIO_INTERRUPT_APP_MAP field.
	DPORT_APP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP_Msk = 0x1f

	// APP_GPIO_INTERRUPT_NMI_MAP
	// Position of APP_GPIO_INTERRUPT_APP_NMI_MAP field.
	DPORT_APP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP_Pos = 0x0
	// Bit mask of APP_GPIO_INTERRUPT_APP_NMI_MAP field.
	DPORT_APP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_0_MAP
	// Position of APP_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_0_MAP_APP_CPU_INTR_FROM_CPU_0_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_0_MAP_APP_CPU_INTR_FROM_CPU_0_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_1_MAP
	// Position of APP_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_1_MAP_APP_CPU_INTR_FROM_CPU_1_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_1_MAP_APP_CPU_INTR_FROM_CPU_1_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_2_MAP
	// Position of APP_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_2_MAP_APP_CPU_INTR_FROM_CPU_2_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_2_MAP_APP_CPU_INTR_FROM_CPU_2_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_3_MAP
	// Position of APP_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_3_MAP_APP_CPU_INTR_FROM_CPU_3_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_3_MAP_APP_CPU_INTR_FROM_CPU_3_MAP_Msk = 0x1f

	// APP_SPI_INTR_0_MAP
	// Position of APP_SPI_INTR_0_MAP field.
	DPORT_APP_SPI_INTR_0_MAP_APP_SPI_INTR_0_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_0_MAP field.
	DPORT_APP_SPI_INTR_0_MAP_APP_SPI_INTR_0_MAP_Msk = 0x1f

	// APP_SPI_INTR_1_MAP
	// Position of APP_SPI_INTR_1_MAP field.
	DPORT_APP_SPI_INTR_1_MAP_APP_SPI_INTR_1_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_1_MAP field.
	DPORT_APP_SPI_INTR_1_MAP_APP_SPI_INTR_1_MAP_Msk = 0x1f

	// APP_SPI_INTR_2_MAP
	// Position of APP_SPI_INTR_2_MAP field.
	DPORT_APP_SPI_INTR_2_MAP_APP_SPI_INTR_2_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_2_MAP field.
	DPORT_APP_SPI_INTR_2_MAP_APP_SPI_INTR_2_MAP_Msk = 0x1f

	// APP_SPI_INTR_3_MAP
	// Position of APP_SPI_INTR_3_MAP field.
	DPORT_APP_SPI_INTR_3_MAP_APP_SPI_INTR_3_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_3_MAP field.
	DPORT_APP_SPI_INTR_3_MAP_APP_SPI_INTR_3_MAP_Msk = 0x1f

	// APP_I2S0_INT_MAP
	// Position of APP_I2S0_INT_MAP field.
	DPORT_APP_I2S0_INT_MAP_APP_I2S0_INT_MAP_Pos = 0x0
	// Bit mask of APP_I2S0_INT_MAP field.
	DPORT_APP_I2S0_INT_MAP_APP_I2S0_INT_MAP_Msk = 0x1f

	// APP_I2S1_INT_MAP
	// Position of APP_I2S1_INT_MAP field.
	DPORT_APP_I2S1_INT_MAP_APP_I2S1_INT_MAP_Pos = 0x0
	// Bit mask of APP_I2S1_INT_MAP field.
	DPORT_APP_I2S1_INT_MAP_APP_I2S1_INT_MAP_Msk = 0x1f

	// APP_UART_INTR_MAP
	// Position of APP_UART_INTR_MAP field.
	DPORT_APP_UART_INTR_MAP_APP_UART_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UART_INTR_MAP field.
	DPORT_APP_UART_INTR_MAP_APP_UART_INTR_MAP_Msk = 0x1f

	// APP_UART1_INTR_MAP
	// Position of APP_UART1_INTR_MAP field.
	DPORT_APP_UART1_INTR_MAP_APP_UART1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UART1_INTR_MAP field.
	DPORT_APP_UART1_INTR_MAP_APP_UART1_INTR_MAP_Msk = 0x1f

	// APP_UART2_INTR_MAP
	// Position of APP_UART2_INTR_MAP field.
	DPORT_APP_UART2_INTR_MAP_APP_UART2_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UART2_INTR_MAP field.
	DPORT_APP_UART2_INTR_MAP_APP_UART2_INTR_MAP_Msk = 0x1f

	// APP_SDIO_HOST_INTERRUPT_MAP
	// Position of APP_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_APP_SDIO_HOST_INTERRUPT_MAP_APP_SDIO_HOST_INTERRUPT_MAP_Pos = 0x0
	// Bit mask of APP_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_APP_SDIO_HOST_INTERRUPT_MAP_APP_SDIO_HOST_INTERRUPT_MAP_Msk = 0x1f

	// APP_EMAC_INT_MAP
	// Position of APP_EMAC_INT_MAP field.
	DPORT_APP_EMAC_INT_MAP_APP_EMAC_INT_MAP_Pos = 0x0
	// Bit mask of APP_EMAC_INT_MAP field.
	DPORT_APP_EMAC_INT_MAP_APP_EMAC_INT_MAP_Msk = 0x1f

	// APP_PWM0_INTR_MAP
	// Position of APP_PWM0_INTR_MAP field.
	DPORT_APP_PWM0_INTR_MAP_APP_PWM0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM0_INTR_MAP field.
	DPORT_APP_PWM0_INTR_MAP_APP_PWM0_INTR_MAP_Msk = 0x1f

	// APP_PWM1_INTR_MAP
	// Position of APP_PWM1_INTR_MAP field.
	DPORT_APP_PWM1_INTR_MAP_APP_PWM1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM1_INTR_MAP field.
	DPORT_APP_PWM1_INTR_MAP_APP_PWM1_INTR_MAP_Msk = 0x1f

	// APP_PWM2_INTR_MAP
	// Position of APP_PWM2_INTR_MAP field.
	DPORT_APP_PWM2_INTR_MAP_APP_PWM2_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM2_INTR_MAP field.
	DPORT_APP_PWM2_INTR_MAP_APP_PWM2_INTR_MAP_Msk = 0x1f

	// APP_PWM3_INTR_MAP
	// Position of APP_PWM3_INTR_MAP field.
	DPORT_APP_PWM3_INTR_MAP_APP_PWM3_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM3_INTR_MAP field.
	DPORT_APP_PWM3_INTR_MAP_APP_PWM3_INTR_MAP_Msk = 0x1f

	// APP_LEDC_INT_MAP
	// Position of APP_LEDC_INT_MAP field.
	DPORT_APP_LEDC_INT_MAP_APP_LEDC_INT_MAP_Pos = 0x0
	// Bit mask of APP_LEDC_INT_MAP field.
	DPORT_APP_LEDC_INT_MAP_APP_LEDC_INT_MAP_Msk = 0x1f

	// APP_EFUSE_INT_MAP
	// Position of APP_EFUSE_INT_MAP field.
	DPORT_APP_EFUSE_INT_MAP_APP_EFUSE_INT_MAP_Pos = 0x0
	// Bit mask of APP_EFUSE_INT_MAP field.
	DPORT_APP_EFUSE_INT_MAP_APP_EFUSE_INT_MAP_Msk = 0x1f

	// APP_CAN_INT_MAP
	// Position of APP_CAN_INT_MAP field.
	DPORT_APP_CAN_INT_MAP_APP_CAN_INT_MAP_Pos = 0x0
	// Bit mask of APP_CAN_INT_MAP field.
	DPORT_APP_CAN_INT_MAP_APP_CAN_INT_MAP_Msk = 0x1f

	// APP_RTC_CORE_INTR_MAP
	// Position of APP_RTC_CORE_INTR_MAP field.
	DPORT_APP_RTC_CORE_INTR_MAP_APP_RTC_CORE_INTR_MAP_Pos = 0x0
	// Bit mask of APP_RTC_CORE_INTR_MAP field.
	DPORT_APP_RTC_CORE_INTR_MAP_APP_RTC_CORE_INTR_MAP_Msk = 0x1f

	// APP_RMT_INTR_MAP
	// Position of APP_RMT_INTR_MAP field.
	DPORT_APP_RMT_INTR_MAP_APP_RMT_INTR_MAP_Pos = 0x0
	// Bit mask of APP_RMT_INTR_MAP field.
	DPORT_APP_RMT_INTR_MAP_APP_RMT_INTR_MAP_Msk = 0x1f

	// APP_PCNT_INTR_MAP
	// Position of APP_PCNT_INTR_MAP field.
	DPORT_APP_PCNT_INTR_MAP_APP_PCNT_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PCNT_INTR_MAP field.
	DPORT_APP_PCNT_INTR_MAP_APP_PCNT_INTR_MAP_Msk = 0x1f

	// APP_I2C_EXT0_INTR_MAP
	// Position of APP_I2C_EXT0_INTR_MAP field.
	DPORT_APP_I2C_EXT0_INTR_MAP_APP_I2C_EXT0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_I2C_EXT0_INTR_MAP field.
	DPORT_APP_I2C_EXT0_INTR_MAP_APP_I2C_EXT0_INTR_MAP_Msk = 0x1f

	// APP_I2C_EXT1_INTR_MAP
	// Position of APP_I2C_EXT1_INTR_MAP field.
	DPORT_APP_I2C_EXT1_INTR_MAP_APP_I2C_EXT1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_I2C_EXT1_INTR_MAP field.
	DPORT_APP_I2C_EXT1_INTR_MAP_APP_I2C_EXT1_INTR_MAP_Msk = 0x1f

	// APP_RSA_INTR_MAP
	// Position of APP_RSA_INTR_MAP field.
	DPORT_APP_RSA_INTR_MAP_APP_RSA_INTR_MAP_Pos = 0x0
	// Bit mask of APP_RSA_INTR_MAP field.
	DPORT_APP_RSA_INTR_MAP_APP_RSA_INTR_MAP_Msk = 0x1f

	// APP_SPI1_DMA_INT_MAP
	// Position of APP_SPI1_DMA_INT_MAP field.
	DPORT_APP_SPI1_DMA_INT_MAP_APP_SPI1_DMA_INT_MAP_Pos = 0x0
	// Bit mask of APP_SPI1_DMA_INT_MAP field.
	DPORT_APP_SPI1_DMA_INT_MAP_APP_SPI1_DMA_INT_MAP_Msk = 0x1f

	// APP_SPI2_DMA_INT_MAP
	// Position of APP_SPI2_DMA_INT_MAP field.
	DPORT_APP_SPI2_DMA_INT_MAP_APP_SPI2_DMA_INT_MAP_Pos = 0x0
	// Bit mask of APP_SPI2_DMA_INT_MAP field.
	DPORT_APP_SPI2_DMA_INT_MAP_APP_SPI2_DMA_INT_MAP_Msk = 0x1f

	// APP_SPI3_DMA_INT_MAP
	// Position of APP_SPI3_DMA_INT_MAP field.
	DPORT_APP_SPI3_DMA_INT_MAP_APP_SPI3_DMA_INT_MAP_Pos = 0x0
	// Bit mask of APP_SPI3_DMA_INT_MAP field.
	DPORT_APP_SPI3_DMA_INT_MAP_APP_SPI3_DMA_INT_MAP_Msk = 0x1f

	// APP_WDG_INT_MAP
	// Position of APP_WDG_INT_MAP field.
	DPORT_APP_WDG_INT_MAP_APP_WDG_INT_MAP_Pos = 0x0
	// Bit mask of APP_WDG_INT_MAP field.
	DPORT_APP_WDG_INT_MAP_APP_WDG_INT_MAP_Msk = 0x1f

	// APP_TIMER_INT1_MAP
	// Position of APP_TIMER_INT1_MAP field.
	DPORT_APP_TIMER_INT1_MAP_APP_TIMER_INT1_MAP_Pos = 0x0
	// Bit mask of APP_TIMER_INT1_MAP field.
	DPORT_APP_TIMER_INT1_MAP_APP_TIMER_INT1_MAP_Msk = 0x1f

	// APP_TIMER_INT2_MAP
	// Position of APP_TIMER_INT2_MAP field.
	DPORT_APP_TIMER_INT2_MAP_APP_TIMER_INT2_MAP_Pos = 0x0
	// Bit mask of APP_TIMER_INT2_MAP field.
	DPORT_APP_TIMER_INT2_MAP_APP_TIMER_INT2_MAP_Msk = 0x1f

	// APP_TG_T0_EDGE_INT_MAP
	// Position of APP_TG_T0_EDGE_INT_MAP field.
	DPORT_APP_TG_T0_EDGE_INT_MAP_APP_TG_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T0_EDGE_INT_MAP field.
	DPORT_APP_TG_T0_EDGE_INT_MAP_APP_TG_T0_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG_T1_EDGE_INT_MAP
	// Position of APP_TG_T1_EDGE_INT_MAP field.
	DPORT_APP_TG_T1_EDGE_INT_MAP_APP_TG_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T1_EDGE_INT_MAP field.
	DPORT_APP_TG_T1_EDGE_INT_MAP_APP_TG_T1_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG_WDT_EDGE_INT_MAP
	// Position of APP_TG_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG_WDT_EDGE_INT_MAP_APP_TG_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG_WDT_EDGE_INT_MAP_APP_TG_WDT_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG_LACT_EDGE_INT_MAP
	// Position of APP_TG_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG_LACT_EDGE_INT_MAP_APP_TG_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG_LACT_EDGE_INT_MAP_APP_TG_LACT_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_T0_EDGE_INT_MAP
	// Position of APP_TG1_T0_EDGE_INT_MAP field.
	DPORT_APP_TG1_T0_EDGE_INT_MAP_APP_TG1_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T0_EDGE_INT_MAP field.
	DPORT_APP_TG1_T0_EDGE_INT_MAP_APP_TG1_T0_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_T1_EDGE_INT_MAP
	// Position of APP_TG1_T1_EDGE_INT_MAP field.
	DPORT_APP_TG1_T1_EDGE_INT_MAP_APP_TG1_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T1_EDGE_INT_MAP field.
	DPORT_APP_TG1_T1_EDGE_INT_MAP_APP_TG1_T1_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_WDT_EDGE_INT_MAP
	// Position of APP_TG1_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG1_WDT_EDGE_INT_MAP_APP_TG1_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG1_WDT_EDGE_INT_MAP_APP_TG1_WDT_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_LACT_EDGE_INT_MAP
	// Position of APP_TG1_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG1_LACT_EDGE_INT_MAP_APP_TG1_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG1_LACT_EDGE_INT_MAP_APP_TG1_LACT_EDGE_INT_MAP_Msk = 0x1f

	// APP_MMU_IA_INT_MAP
	// Position of APP_MMU_IA_INT_MAP field.
	DPORT_APP_MMU_IA_INT_MAP_APP_MMU_IA_INT_MAP_Pos = 0x0
	// Bit mask of APP_MMU_IA_INT_MAP field.
	DPORT_APP_MMU_IA_INT_MAP_APP_MMU_IA_INT_MAP_Msk = 0x1f

	// APP_MPU_IA_INT_MAP
	// Position of APP_MPU_IA_INT_MAP field.
	DPORT_APP_MPU_IA_INT_MAP_APP_MPU_IA_INT_MAP_Pos = 0x0
	// Bit mask of APP_MPU_IA_INT_MAP field.
	DPORT_APP_MPU_IA_INT_MAP_APP_MPU_IA_INT_MAP_Msk = 0x1f

	// APP_CACHE_IA_INT_MAP
	// Position of APP_CACHE_IA_INT_MAP field.
	DPORT_APP_CACHE_IA_INT_MAP_APP_CACHE_IA_INT_MAP_Pos = 0x0
	// Bit mask of APP_CACHE_IA_INT_MAP field.
	DPORT_APP_CACHE_IA_INT_MAP_APP_CACHE_IA_INT_MAP_Msk = 0x1f

	// AHBLITE_MPU_TABLE_UART
	// Position of UART_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UART_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI1
	// Position of SPI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI0
	// Position of SPI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_GPIO
	// Position of GPIO_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of GPIO_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_FE2
	// Position of FE2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of FE2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_FE
	// Position of FE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of FE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_TIMER
	// Position of TIMER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of TIMER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_RTC
	// Position of RTC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of RTC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_IO_MUX
	// Position of IOMUX_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of IOMUX_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_WDG
	// Position of WDG_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of WDG_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_HINF
	// Position of HINF_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of HINF_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UHCI1
	// Position of UHCI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UHCI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_MISC
	// Position of MISC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of MISC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2C
	// Position of I2C_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2C_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2S0
	// Position of I2S0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2S0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UART1
	// Position of UART1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UART1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BT
	// Position of BT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BT_BUFFER
	// Position of BTBUFFER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BTBUFFER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2C_EXT0
	// Position of I2CEXT0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2CEXT0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UHCI0
	// Position of UHCI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UHCI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SLCHOST
	// Position of SLCHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SLCHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_RMT
	// Position of RMT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of RMT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PCNT
	// Position of PCNT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PCNT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SLC
	// Position of SLC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SLC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_LEDC
	// Position of LEDC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of LEDC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_EFUSE
	// Position of EFUSE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of EFUSE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI_ENCRYPT
	// Position of SPI_ENCRYPY_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI_ENCRYPY_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BB
	// Position of BB_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BB_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM0
	// Position of PWM0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_TIMERGROUP
	// Position of TIMERGROUP_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of TIMERGROUP_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_TIMERGROUP1
	// Position of TIMERGROUP1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of TIMERGROUP1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI2
	// Position of SPI2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI3
	// Position of SPI3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_APB_CTRL
	// Position of APBCTRL_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of APBCTRL_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2C_EXT1
	// Position of I2CEXT1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2CEXT1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SDIO_HOST
	// Position of SDIOHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SDIOHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_EMAC
	// Position of EMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of EMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_CAN
	// Position of CAN_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of CAN_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM1
	// Position of PWM1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2S1
	// Position of I2S1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2S1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UART2
	// Position of UART2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UART2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM2
	// Position of PWM2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM3
	// Position of PWM3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_RWBT
	// Position of RWBT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of RWBT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BTMAC
	// Position of BTMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BTMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_WIFIMAC
	// Position of WIFIMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of WIFIMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWR
	// Position of PWR_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWR_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// MEM_ACCESS_DBUG0
	// Position of PRO_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_MPU_AD_Pos = 0x0
	// Bit mask of PRO_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_MPU_AD_Msk = 0x1
	// Bit PRO_ROM_MPU_AD.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_MPU_AD = 0x1
	// Position of PRO_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_IA_Pos = 0x1
	// Bit mask of PRO_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_IA_Msk = 0x2
	// Bit PRO_ROM_IA.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_IA = 0x2
	// Position of APP_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_MPU_AD_Pos = 0x2
	// Bit mask of APP_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_MPU_AD_Msk = 0x4
	// Bit APP_ROM_MPU_AD.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_MPU_AD = 0x4
	// Position of APP_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_IA_Pos = 0x3
	// Bit mask of APP_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_IA_Msk = 0x8
	// Bit APP_ROM_IA.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_IA = 0x8
	// Position of SHARE_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD_Pos = 0x4
	// Bit mask of SHARE_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD_Msk = 0x30
	// Position of SHARE_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_IA_Pos = 0x6
	// Bit mask of SHARE_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_IA_Msk = 0x3c0
	// Position of INTERNAL_SRAM_MMU_AD field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD_Pos = 0xa
	// Bit mask of INTERNAL_SRAM_MMU_AD field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD_Msk = 0x3c00
	// Position of INTERNAL_SRAM_IA field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_IA_Pos = 0xe
	// Bit mask of INTERNAL_SRAM_IA field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_IA_Msk = 0x3ffc000
	// Position of INTERNAL_SRAM_MMU_MULTI_HIT field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT_Pos = 0x1a
	// Bit mask of INTERNAL_SRAM_MMU_MULTI_HIT field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT_Msk = 0x3c000000

	// MEM_ACCESS_DBUG1
	// Position of INTERNAL_SRAM_MMU_MISS field.
	DPORT_MEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS_Pos = 0x0
	// Bit mask of INTERNAL_SRAM_MMU_MISS field.
	DPORT_MEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS_Msk = 0xf
	// Position of ARB_IA field.
	DPORT_MEM_ACCESS_DBUG1_ARB_IA_Pos = 0x4
	// Bit mask of ARB_IA field.
	DPORT_MEM_ACCESS_DBUG1_ARB_IA_Msk = 0x30
	// Position of PIDGEN_IA field.
	DPORT_MEM_ACCESS_DBUG1_PIDGEN_IA_Pos = 0x6
	// Bit mask of PIDGEN_IA field.
	DPORT_MEM_ACCESS_DBUG1_PIDGEN_IA_Msk = 0xc0
	// Position of AHB_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHB_ACCESS_DENY_Pos = 0x8
	// Bit mask of AHB_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHB_ACCESS_DENY_Msk = 0x100
	// Bit AHB_ACCESS_DENY.
	DPORT_MEM_ACCESS_DBUG1_AHB_ACCESS_DENY = 0x100
	// Position of AHBLITE_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY_Pos = 0x9
	// Bit mask of AHBLITE_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY_Msk = 0x200
	// Bit AHBLITE_ACCESS_DENY.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY = 0x200
	// Position of AHBLITE_IA field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_IA_Pos = 0xa
	// Bit mask of AHBLITE_IA field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_IA_Msk = 0x400
	// Bit AHBLITE_IA.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_IA = 0x400

	// PRO_DCACHE_DBUG0
	// Position of PRO_SLAVE_WDATA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_Pos = 0x0
	// Bit mask of PRO_SLAVE_WDATA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_Msk = 0x1
	// Bit PRO_SLAVE_WDATA.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA = 0x1
	// Position of PRO_CACHE_MMU_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA_Pos = 0x0
	// Bit mask of PRO_CACHE_MMU_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA_Msk = 0x1
	// Bit PRO_CACHE_MMU_IA.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA = 0x1
	// Position of PRO_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_IA_Pos = 0x1
	// Bit mask of PRO_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_IA_Msk = 0x7e
	// Position of PRO_CACHE_STATE field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_STATE_Pos = 0x7
	// Bit mask of PRO_CACHE_STATE field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_STATE_Msk = 0x7ff80
	// Position of PRO_WR_BAK_TO_READ field.
	DPORT_PRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ_Pos = 0x13
	// Bit mask of PRO_WR_BAK_TO_READ field.
	DPORT_PRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ_Msk = 0x80000
	// Bit PRO_WR_BAK_TO_READ.
	DPORT_PRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ = 0x80000
	// Position of PRO_TX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_TX_END_Pos = 0x14
	// Bit mask of PRO_TX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_TX_END_Msk = 0x100000
	// Bit PRO_TX_END.
	DPORT_PRO_DCACHE_DBUG0_PRO_TX_END = 0x100000
	// Position of PRO_SLAVE_WR field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WR_Pos = 0x15
	// Bit mask of PRO_SLAVE_WR field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WR_Msk = 0x200000
	// Bit PRO_SLAVE_WR.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WR = 0x200000
	// Position of PRO_SLAVE_WDATA_V field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V_Pos = 0x16
	// Bit mask of PRO_SLAVE_WDATA_V field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V_Msk = 0x400000
	// Bit PRO_SLAVE_WDATA_V.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V = 0x400000
	// Position of PRO_RX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_RX_END_Pos = 0x17
	// Bit mask of PRO_RX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_RX_END_Msk = 0x800000
	// Bit PRO_RX_END.
	DPORT_PRO_DCACHE_DBUG0_PRO_RX_END = 0x800000

	// PRO_DCACHE_DBUG1
	// Position of PRO_CTAG_RAM_RDATA field.
	DPORT_PRO_DCACHE_DBUG1_PRO_CTAG_RAM_RDATA_Pos = 0x0
	// Bit mask of PRO_CTAG_RAM_RDATA field.
	DPORT_PRO_DCACHE_DBUG1_PRO_CTAG_RAM_RDATA_Msk = 0xffffffff

	// PRO_DCACHE_DBUG2
	// Position of PRO_CACHE_VADDR field.
	DPORT_PRO_DCACHE_DBUG2_PRO_CACHE_VADDR_Pos = 0x0
	// Bit mask of PRO_CACHE_VADDR field.
	DPORT_PRO_DCACHE_DBUG2_PRO_CACHE_VADDR_Msk = 0x7ffffff

	// PRO_DCACHE_DBUG3
	// Position of PRO_MMU_RDATA field.
	DPORT_PRO_DCACHE_DBUG3_PRO_MMU_RDATA_Pos = 0x0
	// Bit mask of PRO_MMU_RDATA field.
	DPORT_PRO_DCACHE_DBUG3_PRO_MMU_RDATA_Msk = 0x1ff
	// Position of PRO_CPU_DISABLED_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_Pos = 0x9
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_Msk = 0x7e00
	// Position of PRO_CPU_DISABLED_CACHE_IA_OPPOSITE field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_OPPOSITE_Pos = 0x9
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA_OPPOSITE field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_OPPOSITE_Msk = 0x200
	// Bit PRO_CPU_DISABLED_CACHE_IA_OPPOSITE.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_OPPOSITE = 0x200
	// Position of PRO_CPU_DISABLED_CACHE_IA_DRAM1 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DRAM1_Pos = 0xa
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA_DRAM1 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DRAM1_Msk = 0x400
	// Bit PRO_CPU_DISABLED_CACHE_IA_DRAM1.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DRAM1 = 0x400
	// Position of PRO_CPU_DISABLED_CACHE_IA_IROM0 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IROM0_Pos = 0xb
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA_IROM0 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IROM0_Msk = 0x800
	// Bit PRO_CPU_DISABLED_CACHE_IA_IROM0.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IROM0 = 0x800
	// Position of PRO_CPU_DISABLED_CACHE_IA_IRAM1 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM1_Pos = 0xc
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA_IRAM1 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM1_Msk = 0x1000
	// Bit PRO_CPU_DISABLED_CACHE_IA_IRAM1.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM1 = 0x1000
	// Position of PRO_CPU_DISABLED_CACHE_IA_IRAM0 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM0_Pos = 0xd
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA_IRAM0 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM0_Msk = 0x2000
	// Bit PRO_CPU_DISABLED_CACHE_IA_IRAM0.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_IRAM0 = 0x2000
	// Position of PRO_CPU_DISABLED_CACHE_IA_DROM0 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DROM0_Pos = 0xe
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA_DROM0 field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DROM0_Msk = 0x4000
	// Bit PRO_CPU_DISABLED_CACHE_IA_DROM0.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_DROM0 = 0x4000
	// Position of PRO_CACHE_IRAM0_PID_ERROR field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR_Pos = 0xf
	// Bit mask of PRO_CACHE_IRAM0_PID_ERROR field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR_Msk = 0x8000
	// Bit PRO_CACHE_IRAM0_PID_ERROR.
	DPORT_PRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR = 0x8000

	// PRO_DCACHE_DBUG4
	// Position of PRO_DRAM1ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA_Pos = 0x0
	// Bit mask of PRO_DRAM1ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG5
	// Position of PRO_DROM0ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA_Pos = 0x0
	// Bit mask of PRO_DROM0ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG6
	// Position of PRO_IRAM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA_Pos = 0x0
	// Bit mask of PRO_IRAM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG7
	// Position of PRO_IRAM1ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA_Pos = 0x0
	// Bit mask of PRO_IRAM1ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG8
	// Position of PRO_IROM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA_Pos = 0x0
	// Bit mask of PRO_IROM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG9
	// Position of PRO_OPSDRAMADDR_IA field.
	DPORT_PRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA_Pos = 0x0
	// Bit mask of PRO_OPSDRAMADDR_IA field.
	DPORT_PRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG0
	// Position of APP_SLAVE_WDATA field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_Pos = 0x0
	// Bit mask of APP_SLAVE_WDATA field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_Msk = 0x1
	// Bit APP_SLAVE_WDATA.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA = 0x1
	// Position of APP_CACHE_MMU_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_MMU_IA_Pos = 0x0
	// Bit mask of APP_CACHE_MMU_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_MMU_IA_Msk = 0x1
	// Bit APP_CACHE_MMU_IA.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_MMU_IA = 0x1
	// Position of APP_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_IA_Pos = 0x1
	// Bit mask of APP_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_IA_Msk = 0x7e
	// Position of APP_CACHE_STATE field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_STATE_Pos = 0x7
	// Bit mask of APP_CACHE_STATE field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_STATE_Msk = 0x7ff80
	// Position of APP_WR_BAK_TO_READ field.
	DPORT_APP_DCACHE_DBUG0_APP_WR_BAK_TO_READ_Pos = 0x13
	// Bit mask of APP_WR_BAK_TO_READ field.
	DPORT_APP_DCACHE_DBUG0_APP_WR_BAK_TO_READ_Msk = 0x80000
	// Bit APP_WR_BAK_TO_READ.
	DPORT_APP_DCACHE_DBUG0_APP_WR_BAK_TO_READ = 0x80000
	// Position of APP_TX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_TX_END_Pos = 0x14
	// Bit mask of APP_TX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_TX_END_Msk = 0x100000
	// Bit APP_TX_END.
	DPORT_APP_DCACHE_DBUG0_APP_TX_END = 0x100000
	// Position of APP_SLAVE_WR field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WR_Pos = 0x15
	// Bit mask of APP_SLAVE_WR field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WR_Msk = 0x200000
	// Bit APP_SLAVE_WR.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WR = 0x200000
	// Position of APP_SLAVE_WDATA_V field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_V_Pos = 0x16
	// Bit mask of APP_SLAVE_WDATA_V field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_V_Msk = 0x400000
	// Bit APP_SLAVE_WDATA_V.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_V = 0x400000
	// Position of APP_RX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_RX_END_Pos = 0x17
	// Bit mask of APP_RX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_RX_END_Msk = 0x800000
	// Bit APP_RX_END.
	DPORT_APP_DCACHE_DBUG0_APP_RX_END = 0x800000

	// APP_DCACHE_DBUG1
	// Position of APP_CTAG_RAM_RDATA field.
	DPORT_APP_DCACHE_DBUG1_APP_CTAG_RAM_RDATA_Pos = 0x0
	// Bit mask of APP_CTAG_RAM_RDATA field.
	DPORT_APP_DCACHE_DBUG1_APP_CTAG_RAM_RDATA_Msk = 0xffffffff

	// APP_DCACHE_DBUG2
	// Position of APP_CACHE_VADDR field.
	DPORT_APP_DCACHE_DBUG2_APP_CACHE_VADDR_Pos = 0x0
	// Bit mask of APP_CACHE_VADDR field.
	DPORT_APP_DCACHE_DBUG2_APP_CACHE_VADDR_Msk = 0x7ffffff

	// APP_DCACHE_DBUG3
	// Position of APP_MMU_RDATA field.
	DPORT_APP_DCACHE_DBUG3_APP_MMU_RDATA_Pos = 0x0
	// Bit mask of APP_MMU_RDATA field.
	DPORT_APP_DCACHE_DBUG3_APP_MMU_RDATA_Msk = 0x1ff
	// Position of APP_CPU_DISABLED_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_Pos = 0x9
	// Bit mask of APP_CPU_DISABLED_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_Msk = 0x7e00
	// Position of APP_CPU_DISABLED_CACHE_IA_OPPOSITE field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_OPPOSITE_Pos = 0x9
	// Bit mask of APP_CPU_DISABLED_CACHE_IA_OPPOSITE field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_OPPOSITE_Msk = 0x200
	// Bit APP_CPU_DISABLED_CACHE_IA_OPPOSITE.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_OPPOSITE = 0x200
	// Position of APP_CPU_DISABLED_CACHE_IA_DRAM1 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DRAM1_Pos = 0xa
	// Bit mask of APP_CPU_DISABLED_CACHE_IA_DRAM1 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DRAM1_Msk = 0x400
	// Bit APP_CPU_DISABLED_CACHE_IA_DRAM1.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DRAM1 = 0x400
	// Position of APP_CPU_DISABLED_CACHE_IA_IROM0 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IROM0_Pos = 0xb
	// Bit mask of APP_CPU_DISABLED_CACHE_IA_IROM0 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IROM0_Msk = 0x800
	// Bit APP_CPU_DISABLED_CACHE_IA_IROM0.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IROM0 = 0x800
	// Position of APP_CPU_DISABLED_CACHE_IA_IRAM1 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM1_Pos = 0xc
	// Bit mask of APP_CPU_DISABLED_CACHE_IA_IRAM1 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM1_Msk = 0x1000
	// Bit APP_CPU_DISABLED_CACHE_IA_IRAM1.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM1 = 0x1000
	// Position of APP_CPU_DISABLED_CACHE_IA_IRAM0 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM0_Pos = 0xd
	// Bit mask of APP_CPU_DISABLED_CACHE_IA_IRAM0 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM0_Msk = 0x2000
	// Bit APP_CPU_DISABLED_CACHE_IA_IRAM0.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_IRAM0 = 0x2000
	// Position of APP_CPU_DISABLED_CACHE_IA_DROM0 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DROM0_Pos = 0xe
	// Bit mask of APP_CPU_DISABLED_CACHE_IA_DROM0 field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DROM0_Msk = 0x4000
	// Bit APP_CPU_DISABLED_CACHE_IA_DROM0.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_DROM0 = 0x4000
	// Position of APP_CACHE_IRAM0_PID_ERROR field.
	DPORT_APP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR_Pos = 0xf
	// Bit mask of APP_CACHE_IRAM0_PID_ERROR field.
	DPORT_APP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR_Msk = 0x8000
	// Bit APP_CACHE_IRAM0_PID_ERROR.
	DPORT_APP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR = 0x8000

	// APP_DCACHE_DBUG4
	// Position of APP_DRAM1ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA_Pos = 0x0
	// Bit mask of APP_DRAM1ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG5
	// Position of APP_DROM0ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG5_APP_DROM0ADDR0_IA_Pos = 0x0
	// Bit mask of APP_DROM0ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG5_APP_DROM0ADDR0_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG6
	// Position of APP_IRAM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG6_APP_IRAM0ADDR_IA_Pos = 0x0
	// Bit mask of APP_IRAM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG6_APP_IRAM0ADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG7
	// Position of APP_IRAM1ADDR_IA field.
	DPORT_APP_DCACHE_DBUG7_APP_IRAM1ADDR_IA_Pos = 0x0
	// Bit mask of APP_IRAM1ADDR_IA field.
	DPORT_APP_DCACHE_DBUG7_APP_IRAM1ADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG8
	// Position of APP_IROM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG8_APP_IROM0ADDR_IA_Pos = 0x0
	// Bit mask of APP_IROM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG8_APP_IROM0ADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG9
	// Position of APP_OPSDRAMADDR_IA field.
	DPORT_APP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA_Pos = 0x0
	// Bit mask of APP_OPSDRAMADDR_IA field.
	DPORT_APP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA_Msk = 0xfffff

	// PRO_CPU_RECORD_CTRL
	// Position of PRO_CPU_RECORD_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE_Pos = 0x0
	// Bit mask of PRO_CPU_RECORD_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE_Msk = 0x1
	// Bit PRO_CPU_RECORD_ENABLE.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE = 0x1
	// Position of PRO_CPU_RECORD_DISABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE_Pos = 0x4
	// Bit mask of PRO_CPU_RECORD_DISABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE_Msk = 0x10
	// Bit PRO_CPU_RECORD_DISABLE.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE = 0x10
	// Position of PRO_CPU_PDEBUG_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE_Pos = 0x8
	// Bit mask of PRO_CPU_PDEBUG_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE_Msk = 0x100
	// Bit PRO_CPU_PDEBUG_ENABLE.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE = 0x100

	// PRO_CPU_RECORD_STATUS
	// Position of PRO_CPU_RECORDING field.
	DPORT_PRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING_Pos = 0x0
	// Bit mask of PRO_CPU_RECORDING field.
	DPORT_PRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING_Msk = 0x1
	// Bit PRO_CPU_RECORDING.
	DPORT_PRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING = 0x1

	// PRO_CPU_RECORD_PID
	// Position of RECORD_PRO_PID field.
	DPORT_PRO_CPU_RECORD_PID_RECORD_PRO_PID_Pos = 0x0
	// Bit mask of RECORD_PRO_PID field.
	DPORT_PRO_CPU_RECORD_PID_RECORD_PRO_PID_Msk = 0x7

	// PRO_CPU_RECORD_PDEBUGINST
	// Position of RECORD_PRO_PDEBUGINST field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PRO_PDEBUGINST_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGINST field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PRO_PDEBUGINST_Msk = 0xffffffff
	// Position of RECORD_PDEBUGINST_SZ field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_SZ_Pos = 0x0
	// Bit mask of RECORD_PDEBUGINST_SZ field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_SZ_Msk = 0xff
	// Position of RECORD_PDEBUGINST_ISRC field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_ISRC_Pos = 0xc
	// Bit mask of RECORD_PDEBUGINST_ISRC field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_ISRC_Msk = 0x7000
	// Position of RECORD_PDEBUGINST_LOOP_REP field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP_REP_Pos = 0x14
	// Bit mask of RECORD_PDEBUGINST_LOOP_REP field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP_REP_Msk = 0x100000
	// Bit RECORD_PDEBUGINST_LOOP_REP.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP_REP = 0x100000
	// Position of RECORD_PDEBUGINST_LOOP field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP_Pos = 0x15
	// Bit mask of RECORD_PDEBUGINST_LOOP field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP_Msk = 0x200000
	// Bit RECORD_PDEBUGINST_LOOP.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_LOOP = 0x200000
	// Position of RECORD_PDEBUGINST_CINTL field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_CINTL_Pos = 0x18
	// Bit mask of RECORD_PDEBUGINST_CINTL field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PDEBUGINST_CINTL_Msk = 0xf000000

	// PRO_CPU_RECORD_PDEBUGSTATUS
	// Position of RECORD_PRO_PDEBUGSTATUS field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGSTATUS field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS_Msk = 0xff
	// Position of RECORD_PDEBUGSTATUS_BBCAUSE field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_BBCAUSE_Pos = 0x0
	// Bit mask of RECORD_PDEBUGSTATUS_BBCAUSE field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_BBCAUSE_Msk = 0x3f
	// Position of RECORD_PDEBUGSTATUS_INSNTYPE field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_INSNTYPE_Pos = 0x0
	// Bit mask of RECORD_PDEBUGSTATUS_INSNTYPE field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PDEBUGSTATUS_INSNTYPE_Msk = 0x3f

	// PRO_CPU_RECORD_PDEBUGDATA
	// Position of RECORD_PRO_PDEBUGDATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PRO_PDEBUGDATA_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGDATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PRO_PDEBUGDATA_Msk = 0xffffffff
	// Position of RECORD_PDEBUGDATA_DEP_OTHER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_OTHER_Pos = 0x0
	// Bit mask of RECORD_PDEBUGDATA_DEP_OTHER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_OTHER_Msk = 0x1
	// Bit RECORD_PDEBUGDATA_DEP_OTHER.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_OTHER = 0x1
	// Position of RECORD_PDEBUGDATA_EXCVEC field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCVEC_Pos = 0x0
	// Bit mask of RECORD_PDEBUGDATA_EXCVEC field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCVEC_Msk = 0x1f
	// Position of RECORD_PDEBUGDATA_INSNTYPE_SR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_SR_Pos = 0x0
	// Bit mask of RECORD_PDEBUGDATA_INSNTYPE_SR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_SR_Msk = 0xff
	// Position of RECORD_PDEBUGDATA_INSNTYPE_RER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RER_Pos = 0x0
	// Bit mask of RECORD_PDEBUGDATA_INSNTYPE_RER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RER_Msk = 0x1
	// Bit RECORD_PDEBUGDATA_INSNTYPE_RER.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RER = 0x1
	// Position of RECORD_PDEBUGDATA_STALL_BUFF field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFF_Pos = 0x1
	// Bit mask of RECORD_PDEBUGDATA_STALL_BUFF field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFF_Msk = 0x2
	// Bit RECORD_PDEBUGDATA_STALL_BUFF.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFF = 0x2
	// Position of RECORD_PDEBUGDATA_INSNTYPE_WER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WER_Pos = 0x1
	// Bit mask of RECORD_PDEBUGDATA_INSNTYPE_WER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WER_Msk = 0x2
	// Bit RECORD_PDEBUGDATA_INSNTYPE_WER.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WER = 0x2
	// Position of RECORD_PDEBUGDATA_STALL_BUFFCONFL field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFFCONFL_Pos = 0x2
	// Bit mask of RECORD_PDEBUGDATA_STALL_BUFFCONFL field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFFCONFL_Msk = 0x4
	// Bit RECORD_PDEBUGDATA_STALL_BUFFCONFL.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BUFFCONFL = 0x4
	// Position of RECORD_PDEBUGDATA_INSNTYPE_ER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_ER_Pos = 0x2
	// Bit mask of RECORD_PDEBUGDATA_INSNTYPE_ER field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_ER_Msk = 0x3ffc
	// Position of RECORD_PDEBUGDATA_STALL_DCM field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_DCM_Pos = 0x3
	// Bit mask of RECORD_PDEBUGDATA_STALL_DCM field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_DCM_Msk = 0x8
	// Bit RECORD_PDEBUGDATA_STALL_DCM.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_DCM = 0x8
	// Position of RECORD_PDEBUGDATA_STALL_LSU field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSU_Pos = 0x4
	// Bit mask of RECORD_PDEBUGDATA_STALL_LSU field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSU_Msk = 0x10
	// Bit RECORD_PDEBUGDATA_STALL_LSU.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSU = 0x10
	// Position of RECORD_PDEBUGDATA_STALL_ICM field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ICM_Pos = 0x6
	// Bit mask of RECORD_PDEBUGDATA_STALL_ICM field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ICM_Msk = 0x40
	// Bit RECORD_PDEBUGDATA_STALL_ICM.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ICM = 0x40
	// Position of RECORD_PDEBUGDATA_STALL_IRAMBUSY field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IRAMBUSY_Pos = 0x7
	// Bit mask of RECORD_PDEBUGDATA_STALL_IRAMBUSY field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IRAMBUSY_Msk = 0x80
	// Bit RECORD_PDEBUGDATA_STALL_IRAMBUSY.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IRAMBUSY = 0x80
	// Position of RECORD_PDEBUGDATA_DEP_LSU field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_LSU_Pos = 0x8
	// Bit mask of RECORD_PDEBUGDATA_DEP_LSU field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_LSU_Msk = 0x100
	// Bit RECORD_PDEBUGDATA_DEP_LSU.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_LSU = 0x100
	// Position of RECORD_PDEBUGDATA_STALL_IPIF field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IPIF_Pos = 0x8
	// Bit mask of RECORD_PDEBUGDATA_STALL_IPIF field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IPIF_Msk = 0x100
	// Bit RECORD_PDEBUGDATA_STALL_IPIF.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_IPIF = 0x100
	// Position of RECORD_PDEBUGDATA_INSNTYPE_RSR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RSR_Pos = 0x8
	// Bit mask of RECORD_PDEBUGDATA_INSNTYPE_RSR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RSR_Msk = 0x100
	// Bit RECORD_PDEBUGDATA_INSNTYPE_RSR.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_RSR = 0x100
	// Position of RECORD_PDEBUGDATA_STALL_TIE field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_TIE_Pos = 0x9
	// Bit mask of RECORD_PDEBUGDATA_STALL_TIE field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_TIE_Msk = 0x200
	// Bit RECORD_PDEBUGDATA_STALL_TIE.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_TIE = 0x200
	// Position of RECORD_PDEBUGDATA_INSNTYPE_WSR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WSR_Pos = 0x9
	// Bit mask of RECORD_PDEBUGDATA_INSNTYPE_WSR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WSR_Msk = 0x200
	// Bit RECORD_PDEBUGDATA_INSNTYPE_WSR.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_WSR = 0x200
	// Position of RECORD_PDEBUGDATA_STALL_RUN field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_RUN_Pos = 0xa
	// Bit mask of RECORD_PDEBUGDATA_STALL_RUN field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_RUN_Msk = 0x400
	// Bit RECORD_PDEBUGDATA_STALL_RUN.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_RUN = 0x400
	// Position of RECORD_PDEBUGDATA_INSNTYPE_XSR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_XSR_Pos = 0xa
	// Bit mask of RECORD_PDEBUGDATA_INSNTYPE_XSR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_XSR_Msk = 0x400
	// Bit RECORD_PDEBUGDATA_INSNTYPE_XSR.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_INSNTYPE_XSR = 0x400
	// Position of RECORD_PDEBUGDATA_DEP_STR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_STR_Pos = 0xb
	// Bit mask of RECORD_PDEBUGDATA_DEP_STR field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_STR_Msk = 0x800
	// Bit RECORD_PDEBUGDATA_DEP_STR.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_STR = 0x800
	// Position of RECORD_PDEBUGDATA_DEP field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_Pos = 0xc
	// Bit mask of RECORD_PDEBUGDATA_DEP field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_Msk = 0x1000
	// Bit RECORD_PDEBUGDATA_DEP.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP = 0x1000
	// Position of RECORD_PDEBUGDATA_STALL_BPIFETCH field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPIFETCH_Pos = 0xc
	// Bit mask of RECORD_PDEBUGDATA_STALL_BPIFETCH field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPIFETCH_Msk = 0x1000
	// Bit RECORD_PDEBUGDATA_STALL_BPIFETCH.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPIFETCH = 0x1000
	// Position of RECORD_PDEBUGDATA_STALL_L32R field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_L32R_Pos = 0xd
	// Bit mask of RECORD_PDEBUGDATA_STALL_L32R field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_L32R_Msk = 0x2000
	// Bit RECORD_PDEBUGDATA_STALL_L32R.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_L32R = 0x2000
	// Position of RECORD_PDEBUGDATA_STALL_LSPROC field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSPROC_Pos = 0xe
	// Bit mask of RECORD_PDEBUGDATA_STALL_LSPROC field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSPROC_Msk = 0x4000
	// Bit RECORD_PDEBUGDATA_STALL_LSPROC.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_LSPROC = 0x4000
	// Position of RECORD_PDEBUGDATA_STALL_BPLOAD field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPLOAD_Pos = 0xf
	// Bit mask of RECORD_PDEBUGDATA_STALL_BPLOAD field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPLOAD_Msk = 0x8000
	// Bit RECORD_PDEBUGDATA_STALL_BPLOAD.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BPLOAD = 0x8000
	// Position of RECORD_PDEBUGDATA_DEP_MEMW field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_MEMW_Pos = 0x10
	// Bit mask of RECORD_PDEBUGDATA_DEP_MEMW field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_MEMW_Msk = 0x10000
	// Bit RECORD_PDEBUGDATA_DEP_MEMW.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_MEMW = 0x10000
	// Position of RECORD_PDEBUGDATA_EXCCAUSE field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCCAUSE_Pos = 0x10
	// Bit mask of RECORD_PDEBUGDATA_EXCCAUSE field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_EXCCAUSE_Msk = 0x3f0000
	// Position of RECORD_PDEBUGDATA_STALL_BANKCONFL field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BANKCONFL_Pos = 0x10
	// Bit mask of RECORD_PDEBUGDATA_STALL_BANKCONFL field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BANKCONFL_Msk = 0x10000
	// Bit RECORD_PDEBUGDATA_STALL_BANKCONFL.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_BANKCONFL = 0x10000
	// Position of RECORD_PDEBUGDATA_DEP_HALT field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_HALT_Pos = 0x11
	// Bit mask of RECORD_PDEBUGDATA_DEP_HALT field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_HALT_Msk = 0x20000
	// Bit RECORD_PDEBUGDATA_DEP_HALT.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_DEP_HALT = 0x20000
	// Position of RECORD_PDEBUGDATA_STALL_ITERMUL field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERMUL_Pos = 0x12
	// Bit mask of RECORD_PDEBUGDATA_STALL_ITERMUL field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERMUL_Msk = 0x40000
	// Bit RECORD_PDEBUGDATA_STALL_ITERMUL.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERMUL = 0x40000
	// Position of RECORD_PDEBUGDATA_STALL_ITERDIV field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERDIV_Pos = 0x13
	// Bit mask of RECORD_PDEBUGDATA_STALL_ITERDIV field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERDIV_Msk = 0x80000
	// Bit RECORD_PDEBUGDATA_STALL_ITERDIV.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PDEBUGDATA_STALL_ITERDIV = 0x80000

	// PRO_CPU_RECORD_PDEBUGPC
	// Position of RECORD_PRO_PDEBUGPC field.
	DPORT_PRO_CPU_RECORD_PDEBUGPC_RECORD_PRO_PDEBUGPC_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGPC field.
	DPORT_PRO_CPU_RECORD_PDEBUGPC_RECORD_PRO_PDEBUGPC_Msk = 0xffffffff

	// PRO_CPU_RECORD_PDEBUGLS0STAT
	// Position of RECORD_PRO_PDEBUGLS0STAT field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PRO_PDEBUGLS0STAT_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGLS0STAT field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PRO_PDEBUGLS0STAT_Msk = 0xffffffff
	// Position of RECORD_PDEBUGLS0STAT_TYPE field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TYPE_Pos = 0x0
	// Bit mask of RECORD_PDEBUGLS0STAT_TYPE field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TYPE_Msk = 0xf
	// Position of RECORD_PDEBUGLS0STAT_SZ field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_SZ_Pos = 0x4
	// Bit mask of RECORD_PDEBUGLS0STAT_SZ field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_SZ_Msk = 0xf0
	// Position of RECORD_PDEBUGLS0STAT_DTLBM field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DTLBM_Pos = 0x8
	// Bit mask of RECORD_PDEBUGLS0STAT_DTLBM field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DTLBM_Msk = 0x100
	// Bit RECORD_PDEBUGLS0STAT_DTLBM.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DTLBM = 0x100
	// Position of RECORD_PDEBUGLS0STAT_DCM field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCM_Pos = 0x9
	// Bit mask of RECORD_PDEBUGLS0STAT_DCM field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCM_Msk = 0x200
	// Bit RECORD_PDEBUGLS0STAT_DCM.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCM = 0x200
	// Position of RECORD_PDEBUGLS0STAT_DCH field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCH_Pos = 0xa
	// Bit mask of RECORD_PDEBUGLS0STAT_DCH field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCH_Msk = 0x400
	// Bit RECORD_PDEBUGLS0STAT_DCH.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_DCH = 0x400
	// Position of RECORD_PDEBUGLS0STAT_UC field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_UC_Pos = 0xc
	// Bit mask of RECORD_PDEBUGLS0STAT_UC field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_UC_Msk = 0x1000
	// Bit RECORD_PDEBUGLS0STAT_UC.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_UC = 0x1000
	// Position of RECORD_PDEBUGLS0STAT_WB field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_WB_Pos = 0xd
	// Bit mask of RECORD_PDEBUGLS0STAT_WB field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_WB_Msk = 0x2000
	// Bit RECORD_PDEBUGLS0STAT_WB.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_WB = 0x2000
	// Position of RECORD_PDEBUGLS0STAT_COH field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_COH_Pos = 0x10
	// Bit mask of RECORD_PDEBUGLS0STAT_COH field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_COH_Msk = 0x10000
	// Bit RECORD_PDEBUGLS0STAT_COH.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_COH = 0x10000
	// Position of RECORD_PDEBUGLS0STAT_STCOH field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_STCOH_Pos = 0x11
	// Bit mask of RECORD_PDEBUGLS0STAT_STCOH field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_STCOH_Msk = 0x60000
	// Position of RECORD_PDEBUGLS0STAT_TGT field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TGT_Pos = 0x14
	// Bit mask of RECORD_PDEBUGLS0STAT_TGT field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PDEBUGLS0STAT_TGT_Msk = 0xf00000

	// PRO_CPU_RECORD_PDEBUGLS0ADDR
	// Position of RECORD_PRO_PDEBUGLS0ADDR field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR_RECORD_PRO_PDEBUGLS0ADDR_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGLS0ADDR field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR_RECORD_PRO_PDEBUGLS0ADDR_Msk = 0xffffffff

	// PRO_CPU_RECORD_PDEBUGLS0DATA
	// Position of RECORD_PRO_PDEBUGLS0DATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0DATA_RECORD_PRO_PDEBUGLS0DATA_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGLS0DATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0DATA_RECORD_PRO_PDEBUGLS0DATA_Msk = 0xffffffff

	// APP_CPU_RECORD_CTRL
	// Position of APP_CPU_RECORD_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE_Pos = 0x0
	// Bit mask of APP_CPU_RECORD_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE_Msk = 0x1
	// Bit APP_CPU_RECORD_ENABLE.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE = 0x1
	// Position of APP_CPU_RECORD_DISABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE_Pos = 0x4
	// Bit mask of APP_CPU_RECORD_DISABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE_Msk = 0x10
	// Bit APP_CPU_RECORD_DISABLE.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE = 0x10
	// Position of APP_CPU_PDEBUG_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE_Pos = 0x8
	// Bit mask of APP_CPU_PDEBUG_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE_Msk = 0x100
	// Bit APP_CPU_PDEBUG_ENABLE.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE = 0x100

	// APP_CPU_RECORD_STATUS
	// Position of APP_CPU_RECORDING field.
	DPORT_APP_CPU_RECORD_STATUS_APP_CPU_RECORDING_Pos = 0x0
	// Bit mask of APP_CPU_RECORDING field.
	DPORT_APP_CPU_RECORD_STATUS_APP_CPU_RECORDING_Msk = 0x1
	// Bit APP_CPU_RECORDING.
	DPORT_APP_CPU_RECORD_STATUS_APP_CPU_RECORDING = 0x1

	// APP_CPU_RECORD_PID
	// Position of RECORD_APP_PID field.
	DPORT_APP_CPU_RECORD_PID_RECORD_APP_PID_Pos = 0x0
	// Bit mask of RECORD_APP_PID field.
	DPORT_APP_CPU_RECORD_PID_RECORD_APP_PID_Msk = 0x7

	// APP_CPU_RECORD_PDEBUGINST
	// Position of RECORD_APP_PDEBUGINST field.
	DPORT_APP_CPU_RECORD_PDEBUGINST_RECORD_APP_PDEBUGINST_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGINST field.
	DPORT_APP_CPU_RECORD_PDEBUGINST_RECORD_APP_PDEBUGINST_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGSTATUS
	// Position of RECORD_APP_PDEBUGSTATUS field.
	DPORT_APP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGSTATUS field.
	DPORT_APP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS_Msk = 0xff

	// APP_CPU_RECORD_PDEBUGDATA
	// Position of RECORD_APP_PDEBUGDATA field.
	DPORT_APP_CPU_RECORD_PDEBUGDATA_RECORD_APP_PDEBUGDATA_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGDATA field.
	DPORT_APP_CPU_RECORD_PDEBUGDATA_RECORD_APP_PDEBUGDATA_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGPC
	// Position of RECORD_APP_PDEBUGPC field.
	DPORT_APP_CPU_RECORD_PDEBUGPC_RECORD_APP_PDEBUGPC_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGPC field.
	DPORT_APP_CPU_RECORD_PDEBUGPC_RECORD_APP_PDEBUGPC_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGLS0STAT
	// Position of RECORD_APP_PDEBUGLS0STAT field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0STAT_RECORD_APP_PDEBUGLS0STAT_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGLS0STAT field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0STAT_RECORD_APP_PDEBUGLS0STAT_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGLS0ADDR
	// Position of RECORD_APP_PDEBUGLS0ADDR field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0ADDR_RECORD_APP_PDEBUGLS0ADDR_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGLS0ADDR field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0ADDR_RECORD_APP_PDEBUGLS0ADDR_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGLS0DATA
	// Position of RECORD_APP_PDEBUGLS0DATA field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0DATA_RECORD_APP_PDEBUGLS0DATA_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGLS0DATA field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0DATA_RECORD_APP_PDEBUGLS0DATA_Msk = 0xffffffff

	// RSA_PD_CTRL
	// Position of RSA_PD field.
	DPORT_RSA_PD_CTRL_RSA_PD_Pos = 0x0
	// Bit mask of RSA_PD field.
	DPORT_RSA_PD_CTRL_RSA_PD_Msk = 0x1
	// Bit RSA_PD.
	DPORT_RSA_PD_CTRL_RSA_PD = 0x1

	// ROM_MPU_TABLE0
	// Position of ROM_MPU_TABLE0 field.
	DPORT_ROM_MPU_TABLE0_ROM_MPU_TABLE0_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE0 field.
	DPORT_ROM_MPU_TABLE0_ROM_MPU_TABLE0_Msk = 0x3

	// ROM_MPU_TABLE1
	// Position of ROM_MPU_TABLE1 field.
	DPORT_ROM_MPU_TABLE1_ROM_MPU_TABLE1_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE1 field.
	DPORT_ROM_MPU_TABLE1_ROM_MPU_TABLE1_Msk = 0x3

	// ROM_MPU_TABLE2
	// Position of ROM_MPU_TABLE2 field.
	DPORT_ROM_MPU_TABLE2_ROM_MPU_TABLE2_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE2 field.
	DPORT_ROM_MPU_TABLE2_ROM_MPU_TABLE2_Msk = 0x3

	// ROM_MPU_TABLE3
	// Position of ROM_MPU_TABLE3 field.
	DPORT_ROM_MPU_TABLE3_ROM_MPU_TABLE3_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE3 field.
	DPORT_ROM_MPU_TABLE3_ROM_MPU_TABLE3_Msk = 0x3

	// SHROM_MPU_TABLE0
	// Position of SHROM_MPU_TABLE0 field.
	DPORT_SHROM_MPU_TABLE0_SHROM_MPU_TABLE0_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE0 field.
	DPORT_SHROM_MPU_TABLE0_SHROM_MPU_TABLE0_Msk = 0x3

	// SHROM_MPU_TABLE1
	// Position of SHROM_MPU_TABLE1 field.
	DPORT_SHROM_MPU_TABLE1_SHROM_MPU_TABLE1_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE1 field.
	DPORT_SHROM_MPU_TABLE1_SHROM_MPU_TABLE1_Msk = 0x3

	// SHROM_MPU_TABLE2
	// Position of SHROM_MPU_TABLE2 field.
	DPORT_SHROM_MPU_TABLE2_SHROM_MPU_TABLE2_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE2 field.
	DPORT_SHROM_MPU_TABLE2_SHROM_MPU_TABLE2_Msk = 0x3

	// SHROM_MPU_TABLE3
	// Position of SHROM_MPU_TABLE3 field.
	DPORT_SHROM_MPU_TABLE3_SHROM_MPU_TABLE3_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE3 field.
	DPORT_SHROM_MPU_TABLE3_SHROM_MPU_TABLE3_Msk = 0x3

	// SHROM_MPU_TABLE4
	// Position of SHROM_MPU_TABLE4 field.
	DPORT_SHROM_MPU_TABLE4_SHROM_MPU_TABLE4_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE4 field.
	DPORT_SHROM_MPU_TABLE4_SHROM_MPU_TABLE4_Msk = 0x3

	// SHROM_MPU_TABLE5
	// Position of SHROM_MPU_TABLE5 field.
	DPORT_SHROM_MPU_TABLE5_SHROM_MPU_TABLE5_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE5 field.
	DPORT_SHROM_MPU_TABLE5_SHROM_MPU_TABLE5_Msk = 0x3

	// SHROM_MPU_TABLE6
	// Position of SHROM_MPU_TABLE6 field.
	DPORT_SHROM_MPU_TABLE6_SHROM_MPU_TABLE6_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE6 field.
	DPORT_SHROM_MPU_TABLE6_SHROM_MPU_TABLE6_Msk = 0x3

	// SHROM_MPU_TABLE7
	// Position of SHROM_MPU_TABLE7 field.
	DPORT_SHROM_MPU_TABLE7_SHROM_MPU_TABLE7_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE7 field.
	DPORT_SHROM_MPU_TABLE7_SHROM_MPU_TABLE7_Msk = 0x3

	// SHROM_MPU_TABLE8
	// Position of SHROM_MPU_TABLE8 field.
	DPORT_SHROM_MPU_TABLE8_SHROM_MPU_TABLE8_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE8 field.
	DPORT_SHROM_MPU_TABLE8_SHROM_MPU_TABLE8_Msk = 0x3

	// SHROM_MPU_TABLE9
	// Position of SHROM_MPU_TABLE9 field.
	DPORT_SHROM_MPU_TABLE9_SHROM_MPU_TABLE9_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE9 field.
	DPORT_SHROM_MPU_TABLE9_SHROM_MPU_TABLE9_Msk = 0x3

	// SHROM_MPU_TABLE10
	// Position of SHROM_MPU_TABLE10 field.
	DPORT_SHROM_MPU_TABLE10_SHROM_MPU_TABLE10_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE10 field.
	DPORT_SHROM_MPU_TABLE10_SHROM_MPU_TABLE10_Msk = 0x3

	// SHROM_MPU_TABLE11
	// Position of SHROM_MPU_TABLE11 field.
	DPORT_SHROM_MPU_TABLE11_SHROM_MPU_TABLE11_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE11 field.
	DPORT_SHROM_MPU_TABLE11_SHROM_MPU_TABLE11_Msk = 0x3

	// SHROM_MPU_TABLE12
	// Position of SHROM_MPU_TABLE12 field.
	DPORT_SHROM_MPU_TABLE12_SHROM_MPU_TABLE12_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE12 field.
	DPORT_SHROM_MPU_TABLE12_SHROM_MPU_TABLE12_Msk = 0x3

	// SHROM_MPU_TABLE13
	// Position of SHROM_MPU_TABLE13 field.
	DPORT_SHROM_MPU_TABLE13_SHROM_MPU_TABLE13_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE13 field.
	DPORT_SHROM_MPU_TABLE13_SHROM_MPU_TABLE13_Msk = 0x3

	// SHROM_MPU_TABLE14
	// Position of SHROM_MPU_TABLE14 field.
	DPORT_SHROM_MPU_TABLE14_SHROM_MPU_TABLE14_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE14 field.
	DPORT_SHROM_MPU_TABLE14_SHROM_MPU_TABLE14_Msk = 0x3

	// SHROM_MPU_TABLE15
	// Position of SHROM_MPU_TABLE15 field.
	DPORT_SHROM_MPU_TABLE15_SHROM_MPU_TABLE15_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE15 field.
	DPORT_SHROM_MPU_TABLE15_SHROM_MPU_TABLE15_Msk = 0x3

	// SHROM_MPU_TABLE16
	// Position of SHROM_MPU_TABLE16 field.
	DPORT_SHROM_MPU_TABLE16_SHROM_MPU_TABLE16_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE16 field.
	DPORT_SHROM_MPU_TABLE16_SHROM_MPU_TABLE16_Msk = 0x3

	// SHROM_MPU_TABLE17
	// Position of SHROM_MPU_TABLE17 field.
	DPORT_SHROM_MPU_TABLE17_SHROM_MPU_TABLE17_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE17 field.
	DPORT_SHROM_MPU_TABLE17_SHROM_MPU_TABLE17_Msk = 0x3

	// SHROM_MPU_TABLE18
	// Position of SHROM_MPU_TABLE18 field.
	DPORT_SHROM_MPU_TABLE18_SHROM_MPU_TABLE18_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE18 field.
	DPORT_SHROM_MPU_TABLE18_SHROM_MPU_TABLE18_Msk = 0x3

	// SHROM_MPU_TABLE19
	// Position of SHROM_MPU_TABLE19 field.
	DPORT_SHROM_MPU_TABLE19_SHROM_MPU_TABLE19_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE19 field.
	DPORT_SHROM_MPU_TABLE19_SHROM_MPU_TABLE19_Msk = 0x3

	// SHROM_MPU_TABLE20
	// Position of SHROM_MPU_TABLE20 field.
	DPORT_SHROM_MPU_TABLE20_SHROM_MPU_TABLE20_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE20 field.
	DPORT_SHROM_MPU_TABLE20_SHROM_MPU_TABLE20_Msk = 0x3

	// SHROM_MPU_TABLE21
	// Position of SHROM_MPU_TABLE21 field.
	DPORT_SHROM_MPU_TABLE21_SHROM_MPU_TABLE21_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE21 field.
	DPORT_SHROM_MPU_TABLE21_SHROM_MPU_TABLE21_Msk = 0x3

	// SHROM_MPU_TABLE22
	// Position of SHROM_MPU_TABLE22 field.
	DPORT_SHROM_MPU_TABLE22_SHROM_MPU_TABLE22_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE22 field.
	DPORT_SHROM_MPU_TABLE22_SHROM_MPU_TABLE22_Msk = 0x3

	// SHROM_MPU_TABLE23
	// Position of SHROM_MPU_TABLE23 field.
	DPORT_SHROM_MPU_TABLE23_SHROM_MPU_TABLE23_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE23 field.
	DPORT_SHROM_MPU_TABLE23_SHROM_MPU_TABLE23_Msk = 0x3

	// IMMU_TABLE0
	// Position of IMMU_TABLE0 field.
	DPORT_IMMU_TABLE0_IMMU_TABLE0_Pos = 0x0
	// Bit mask of IMMU_TABLE0 field.
	DPORT_IMMU_TABLE0_IMMU_TABLE0_Msk = 0x7f

	// IMMU_TABLE1
	// Position of IMMU_TABLE1 field.
	DPORT_IMMU_TABLE1_IMMU_TABLE1_Pos = 0x0
	// Bit mask of IMMU_TABLE1 field.
	DPORT_IMMU_TABLE1_IMMU_TABLE1_Msk = 0x7f

	// IMMU_TABLE2
	// Position of IMMU_TABLE2 field.
	DPORT_IMMU_TABLE2_IMMU_TABLE2_Pos = 0x0
	// Bit mask of IMMU_TABLE2 field.
	DPORT_IMMU_TABLE2_IMMU_TABLE2_Msk = 0x7f

	// IMMU_TABLE3
	// Position of IMMU_TABLE3 field.
	DPORT_IMMU_TABLE3_IMMU_TABLE3_Pos = 0x0
	// Bit mask of IMMU_TABLE3 field.
	DPORT_IMMU_TABLE3_IMMU_TABLE3_Msk = 0x7f

	// IMMU_TABLE4
	// Position of IMMU_TABLE4 field.
	DPORT_IMMU_TABLE4_IMMU_TABLE4_Pos = 0x0
	// Bit mask of IMMU_TABLE4 field.
	DPORT_IMMU_TABLE4_IMMU_TABLE4_Msk = 0x7f

	// IMMU_TABLE5
	// Position of IMMU_TABLE5 field.
	DPORT_IMMU_TABLE5_IMMU_TABLE5_Pos = 0x0
	// Bit mask of IMMU_TABLE5 field.
	DPORT_IMMU_TABLE5_IMMU_TABLE5_Msk = 0x7f

	// IMMU_TABLE6
	// Position of IMMU_TABLE6 field.
	DPORT_IMMU_TABLE6_IMMU_TABLE6_Pos = 0x0
	// Bit mask of IMMU_TABLE6 field.
	DPORT_IMMU_TABLE6_IMMU_TABLE6_Msk = 0x7f

	// IMMU_TABLE7
	// Position of IMMU_TABLE7 field.
	DPORT_IMMU_TABLE7_IMMU_TABLE7_Pos = 0x0
	// Bit mask of IMMU_TABLE7 field.
	DPORT_IMMU_TABLE7_IMMU_TABLE7_Msk = 0x7f

	// IMMU_TABLE8
	// Position of IMMU_TABLE8 field.
	DPORT_IMMU_TABLE8_IMMU_TABLE8_Pos = 0x0
	// Bit mask of IMMU_TABLE8 field.
	DPORT_IMMU_TABLE8_IMMU_TABLE8_Msk = 0x7f

	// IMMU_TABLE9
	// Position of IMMU_TABLE9 field.
	DPORT_IMMU_TABLE9_IMMU_TABLE9_Pos = 0x0
	// Bit mask of IMMU_TABLE9 field.
	DPORT_IMMU_TABLE9_IMMU_TABLE9_Msk = 0x7f

	// IMMU_TABLE10
	// Position of IMMU_TABLE10 field.
	DPORT_IMMU_TABLE10_IMMU_TABLE10_Pos = 0x0
	// Bit mask of IMMU_TABLE10 field.
	DPORT_IMMU_TABLE10_IMMU_TABLE10_Msk = 0x7f

	// IMMU_TABLE11
	// Position of IMMU_TABLE11 field.
	DPORT_IMMU_TABLE11_IMMU_TABLE11_Pos = 0x0
	// Bit mask of IMMU_TABLE11 field.
	DPORT_IMMU_TABLE11_IMMU_TABLE11_Msk = 0x7f

	// IMMU_TABLE12
	// Position of IMMU_TABLE12 field.
	DPORT_IMMU_TABLE12_IMMU_TABLE12_Pos = 0x0
	// Bit mask of IMMU_TABLE12 field.
	DPORT_IMMU_TABLE12_IMMU_TABLE12_Msk = 0x7f

	// IMMU_TABLE13
	// Position of IMMU_TABLE13 field.
	DPORT_IMMU_TABLE13_IMMU_TABLE13_Pos = 0x0
	// Bit mask of IMMU_TABLE13 field.
	DPORT_IMMU_TABLE13_IMMU_TABLE13_Msk = 0x7f

	// IMMU_TABLE14
	// Position of IMMU_TABLE14 field.
	DPORT_IMMU_TABLE14_IMMU_TABLE14_Pos = 0x0
	// Bit mask of IMMU_TABLE14 field.
	DPORT_IMMU_TABLE14_IMMU_TABLE14_Msk = 0x7f

	// IMMU_TABLE15
	// Position of IMMU_TABLE15 field.
	DPORT_IMMU_TABLE15_IMMU_TABLE15_Pos = 0x0
	// Bit mask of IMMU_TABLE15 field.
	DPORT_IMMU_TABLE15_IMMU_TABLE15_Msk = 0x7f

	// DMMU_TABLE0
	// Position of DMMU_TABLE0 field.
	DPORT_DMMU_TABLE0_DMMU_TABLE0_Pos = 0x0
	// Bit mask of DMMU_TABLE0 field.
	DPORT_DMMU_TABLE0_DMMU_TABLE0_Msk = 0x7f

	// DMMU_TABLE1
	// Position of DMMU_TABLE1 field.
	DPORT_DMMU_TABLE1_DMMU_TABLE1_Pos = 0x0
	// Bit mask of DMMU_TABLE1 field.
	DPORT_DMMU_TABLE1_DMMU_TABLE1_Msk = 0x7f

	// DMMU_TABLE2
	// Position of DMMU_TABLE2 field.
	DPORT_DMMU_TABLE2_DMMU_TABLE2_Pos = 0x0
	// Bit mask of DMMU_TABLE2 field.
	DPORT_DMMU_TABLE2_DMMU_TABLE2_Msk = 0x7f

	// DMMU_TABLE3
	// Position of DMMU_TABLE3 field.
	DPORT_DMMU_TABLE3_DMMU_TABLE3_Pos = 0x0
	// Bit mask of DMMU_TABLE3 field.
	DPORT_DMMU_TABLE3_DMMU_TABLE3_Msk = 0x7f

	// DMMU_TABLE4
	// Position of DMMU_TABLE4 field.
	DPORT_DMMU_TABLE4_DMMU_TABLE4_Pos = 0x0
	// Bit mask of DMMU_TABLE4 field.
	DPORT_DMMU_TABLE4_DMMU_TABLE4_Msk = 0x7f

	// DMMU_TABLE5
	// Position of DMMU_TABLE5 field.
	DPORT_DMMU_TABLE5_DMMU_TABLE5_Pos = 0x0
	// Bit mask of DMMU_TABLE5 field.
	DPORT_DMMU_TABLE5_DMMU_TABLE5_Msk = 0x7f

	// DMMU_TABLE6
	// Position of DMMU_TABLE6 field.
	DPORT_DMMU_TABLE6_DMMU_TABLE6_Pos = 0x0
	// Bit mask of DMMU_TABLE6 field.
	DPORT_DMMU_TABLE6_DMMU_TABLE6_Msk = 0x7f

	// DMMU_TABLE7
	// Position of DMMU_TABLE7 field.
	DPORT_DMMU_TABLE7_DMMU_TABLE7_Pos = 0x0
	// Bit mask of DMMU_TABLE7 field.
	DPORT_DMMU_TABLE7_DMMU_TABLE7_Msk = 0x7f

	// DMMU_TABLE8
	// Position of DMMU_TABLE8 field.
	DPORT_DMMU_TABLE8_DMMU_TABLE8_Pos = 0x0
	// Bit mask of DMMU_TABLE8 field.
	DPORT_DMMU_TABLE8_DMMU_TABLE8_Msk = 0x7f

	// DMMU_TABLE9
	// Position of DMMU_TABLE9 field.
	DPORT_DMMU_TABLE9_DMMU_TABLE9_Pos = 0x0
	// Bit mask of DMMU_TABLE9 field.
	DPORT_DMMU_TABLE9_DMMU_TABLE9_Msk = 0x7f

	// DMMU_TABLE10
	// Position of DMMU_TABLE10 field.
	DPORT_DMMU_TABLE10_DMMU_TABLE10_Pos = 0x0
	// Bit mask of DMMU_TABLE10 field.
	DPORT_DMMU_TABLE10_DMMU_TABLE10_Msk = 0x7f

	// DMMU_TABLE11
	// Position of DMMU_TABLE11 field.
	DPORT_DMMU_TABLE11_DMMU_TABLE11_Pos = 0x0
	// Bit mask of DMMU_TABLE11 field.
	DPORT_DMMU_TABLE11_DMMU_TABLE11_Msk = 0x7f

	// DMMU_TABLE12
	// Position of DMMU_TABLE12 field.
	DPORT_DMMU_TABLE12_DMMU_TABLE12_Pos = 0x0
	// Bit mask of DMMU_TABLE12 field.
	DPORT_DMMU_TABLE12_DMMU_TABLE12_Msk = 0x7f

	// DMMU_TABLE13
	// Position of DMMU_TABLE13 field.
	DPORT_DMMU_TABLE13_DMMU_TABLE13_Pos = 0x0
	// Bit mask of DMMU_TABLE13 field.
	DPORT_DMMU_TABLE13_DMMU_TABLE13_Msk = 0x7f

	// DMMU_TABLE14
	// Position of DMMU_TABLE14 field.
	DPORT_DMMU_TABLE14_DMMU_TABLE14_Pos = 0x0
	// Bit mask of DMMU_TABLE14 field.
	DPORT_DMMU_TABLE14_DMMU_TABLE14_Msk = 0x7f

	// DMMU_TABLE15
	// Position of DMMU_TABLE15 field.
	DPORT_DMMU_TABLE15_DMMU_TABLE15_Pos = 0x0
	// Bit mask of DMMU_TABLE15 field.
	DPORT_DMMU_TABLE15_DMMU_TABLE15_Msk = 0x7f

	// PRO_INTRUSION_CTRL
	// Position of PRO_INTRUSION_RECORD_RESET_N field.
	DPORT_PRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N_Pos = 0x0
	// Bit mask of PRO_INTRUSION_RECORD_RESET_N field.
	DPORT_PRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N_Msk = 0x1
	// Bit PRO_INTRUSION_RECORD_RESET_N.
	DPORT_PRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N = 0x1

	// PRO_INTRUSION_STATUS
	// Position of PRO_INTRUSION_RECORD field.
	DPORT_PRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD_Pos = 0x0
	// Bit mask of PRO_INTRUSION_RECORD field.
	DPORT_PRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD_Msk = 0xf

	// APP_INTRUSION_CTRL
	// Position of APP_INTRUSION_RECORD_RESET_N field.
	DPORT_APP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N_Pos = 0x0
	// Bit mask of APP_INTRUSION_RECORD_RESET_N field.
	DPORT_APP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N_Msk = 0x1
	// Bit APP_INTRUSION_RECORD_RESET_N.
	DPORT_APP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N = 0x1

	// APP_INTRUSION_STATUS
	// Position of APP_INTRUSION_RECORD field.
	DPORT_APP_INTRUSION_STATUS_APP_INTRUSION_RECORD_Pos = 0x0
	// Bit mask of APP_INTRUSION_RECORD field.
	DPORT_APP_INTRUSION_STATUS_APP_INTRUSION_RECORD_Msk = 0xf

	// FRONT_END_MEM_PD
	// Position of AGC_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PU_Pos = 0x0
	// Bit mask of AGC_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PU_Msk = 0x1
	// Bit AGC_MEM_FORCE_PU.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PU = 0x1
	// Position of AGC_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PD_Pos = 0x1
	// Bit mask of AGC_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PD_Msk = 0x2
	// Bit AGC_MEM_FORCE_PD.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PD = 0x2
	// Position of PBUS_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PU_Pos = 0x2
	// Bit mask of PBUS_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PU_Msk = 0x4
	// Bit PBUS_MEM_FORCE_PU.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PU = 0x4
	// Position of PBUS_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PD_Pos = 0x3
	// Bit mask of PBUS_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PD_Msk = 0x8
	// Bit PBUS_MEM_FORCE_PD.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PD = 0x8

	// MMU_IA_INT_EN
	// Position of MMU_IA_INT_EN field.
	DPORT_MMU_IA_INT_EN_MMU_IA_INT_EN_Pos = 0x0
	// Bit mask of MMU_IA_INT_EN field.
	DPORT_MMU_IA_INT_EN_MMU_IA_INT_EN_Msk = 0xffffff

	// MPU_IA_INT_EN
	// Position of MPU_IA_INT_EN field.
	DPORT_MPU_IA_INT_EN_MPU_IA_INT_EN_Pos = 0x0
	// Bit mask of MPU_IA_INT_EN field.
	DPORT_MPU_IA_INT_EN_MPU_IA_INT_EN_Msk = 0x1ffff

	// CACHE_IA_INT_EN
	// Position of CACHE_IA_INT_EN field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_EN_Pos = 0x0
	// Bit mask of CACHE_IA_INT_EN field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_EN_Msk = 0xfffffff
	// Position of CACHE_IA_INT_APP_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0_Pos = 0x0
	// Bit mask of CACHE_IA_INT_APP_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0_Msk = 0x1
	// Bit CACHE_IA_INT_APP_DROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0 = 0x1
	// Position of CACHE_IA_INT_APP_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0_Pos = 0x1
	// Bit mask of CACHE_IA_INT_APP_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0_Msk = 0x2
	// Bit CACHE_IA_INT_APP_IRAM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0 = 0x2
	// Position of CACHE_IA_INT_APP_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1_Pos = 0x2
	// Bit mask of CACHE_IA_INT_APP_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1_Msk = 0x4
	// Bit CACHE_IA_INT_APP_IRAM1.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1 = 0x4
	// Position of CACHE_IA_INT_APP_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0_Pos = 0x3
	// Bit mask of CACHE_IA_INT_APP_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0_Msk = 0x8
	// Bit CACHE_IA_INT_APP_IROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0 = 0x8
	// Position of CACHE_IA_INT_APP_DRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DRAM1_Pos = 0x4
	// Bit mask of CACHE_IA_INT_APP_DRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DRAM1_Msk = 0x10
	// Bit CACHE_IA_INT_APP_DRAM1.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DRAM1 = 0x10
	// Position of CACHE_IA_INT_APP_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE_Pos = 0x5
	// Bit mask of CACHE_IA_INT_APP_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE_Msk = 0x20
	// Bit CACHE_IA_INT_APP_OPPOSITE.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE = 0x20
	// Position of CACHE_IA_INT_PRO_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0_Pos = 0xe
	// Bit mask of CACHE_IA_INT_PRO_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0_Msk = 0x4000
	// Bit CACHE_IA_INT_PRO_DROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0 = 0x4000
	// Position of CACHE_IA_INT_PRO_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0_Pos = 0xf
	// Bit mask of CACHE_IA_INT_PRO_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0_Msk = 0x8000
	// Bit CACHE_IA_INT_PRO_IRAM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0 = 0x8000
	// Position of CACHE_IA_INT_PRO_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1_Pos = 0x10
	// Bit mask of CACHE_IA_INT_PRO_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1_Msk = 0x10000
	// Bit CACHE_IA_INT_PRO_IRAM1.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1 = 0x10000
	// Position of CACHE_IA_INT_PRO_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0_Pos = 0x11
	// Bit mask of CACHE_IA_INT_PRO_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0_Msk = 0x20000
	// Bit CACHE_IA_INT_PRO_IROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0 = 0x20000
	// Position of CACHE_IA_INT_PRO_DRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1_Pos = 0x12
	// Bit mask of CACHE_IA_INT_PRO_DRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1_Msk = 0x40000
	// Bit CACHE_IA_INT_PRO_DRAM1.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1 = 0x40000
	// Position of CACHE_IA_INT_PRO_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE_Pos = 0x13
	// Bit mask of CACHE_IA_INT_PRO_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE_Msk = 0x80000
	// Bit CACHE_IA_INT_PRO_OPPOSITE.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE = 0x80000

	// SECURE_BOOT_CTRL
	// Position of SW_BOOTLOADER_SEL field.
	DPORT_SECURE_BOOT_CTRL_SW_BOOTLOADER_SEL_Pos = 0x0
	// Bit mask of SW_BOOTLOADER_SEL field.
	DPORT_SECURE_BOOT_CTRL_SW_BOOTLOADER_SEL_Msk = 0x1
	// Bit SW_BOOTLOADER_SEL.
	DPORT_SECURE_BOOT_CTRL_SW_BOOTLOADER_SEL = 0x1

	// SPI_DMA_CHAN_SEL
	// Position of SPI1_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL_Pos = 0x0
	// Bit mask of SPI1_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL_Msk = 0x3
	// Position of SPI2_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL_Pos = 0x2
	// Bit mask of SPI2_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL_Msk = 0xc
	// Position of SPI3_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL_Pos = 0x4
	// Bit mask of SPI3_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL_Msk = 0x30

	// PRO_VECBASE_CTRL
	// Position of PRO_OUT_VECBASE_SEL field.
	DPORT_PRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL_Pos = 0x0
	// Bit mask of PRO_OUT_VECBASE_SEL field.
	DPORT_PRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL_Msk = 0x3

	// PRO_VECBASE_SET
	// Position of PRO_OUT_VECBASE field.
	DPORT_PRO_VECBASE_SET_PRO_OUT_VECBASE_Pos = 0x0
	// Bit mask of PRO_OUT_VECBASE field.
	DPORT_PRO_VECBASE_SET_PRO_OUT_VECBASE_Msk = 0x3fffff

	// APP_VECBASE_CTRL
	// Position of APP_OUT_VECBASE_SEL field.
	DPORT_APP_VECBASE_CTRL_APP_OUT_VECBASE_SEL_Pos = 0x0
	// Bit mask of APP_OUT_VECBASE_SEL field.
	DPORT_APP_VECBASE_CTRL_APP_OUT_VECBASE_SEL_Msk = 0x3

	// APP_VECBASE_SET
	// Position of APP_OUT_VECBASE field.
	DPORT_APP_VECBASE_SET_APP_OUT_VECBASE_Pos = 0x0
	// Bit mask of APP_OUT_VECBASE field.
	DPORT_APP_VECBASE_SET_APP_OUT_VECBASE_Msk = 0x3fffff

	// DATE
	// Position of DATE field.
	DPORT_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	DPORT_DATE_DATE_Msk = 0xfffffff
)

// Constants for EFUSE: eFuse Controller
const (
	// BLK0_RDATA0
	// Position of RD_EFUSE_WR_DIS field.
	EFUSE_BLK0_RDATA0_RD_EFUSE_WR_DIS_Pos = 0x0
	// Bit mask of RD_EFUSE_WR_DIS field.
	EFUSE_BLK0_RDATA0_RD_EFUSE_WR_DIS_Msk = 0xffff
	// Position of RD_EFUSE_RD_DIS field.
	EFUSE_BLK0_RDATA0_RD_EFUSE_RD_DIS_Pos = 0x10
	// Bit mask of RD_EFUSE_RD_DIS field.
	EFUSE_BLK0_RDATA0_RD_EFUSE_RD_DIS_Msk = 0xf0000
	// Position of RD_FLASH_CRYPT_CNT field.
	EFUSE_BLK0_RDATA0_RD_FLASH_CRYPT_CNT_Pos = 0x14
	// Bit mask of RD_FLASH_CRYPT_CNT field.
	EFUSE_BLK0_RDATA0_RD_FLASH_CRYPT_CNT_Msk = 0x7f00000
	// Position of RD_UART_DOWNLOAD_DIS field.
	EFUSE_BLK0_RDATA0_RD_UART_DOWNLOAD_DIS_Pos = 0x1b
	// Bit mask of RD_UART_DOWNLOAD_DIS field.
	EFUSE_BLK0_RDATA0_RD_UART_DOWNLOAD_DIS_Msk = 0x8000000
	// Bit RD_UART_DOWNLOAD_DIS.
	EFUSE_BLK0_RDATA0_RD_UART_DOWNLOAD_DIS = 0x8000000
	// Position of RESERVED_0_28 field.
	EFUSE_BLK0_RDATA0_RESERVED_0_28_Pos = 0x1c
	// Bit mask of RESERVED_0_28 field.
	EFUSE_BLK0_RDATA0_RESERVED_0_28_Msk = 0xf0000000

	// BLK0_RDATA1
	// Position of RD_MAC field.
	EFUSE_BLK0_RDATA1_RD_MAC_Pos = 0x0
	// Bit mask of RD_MAC field.
	EFUSE_BLK0_RDATA1_RD_MAC_Msk = 0xffffffff

	// BLK0_RDATA2
	// Position of RD_MAC_1 field.
	EFUSE_BLK0_RDATA2_RD_MAC_1_Pos = 0x0
	// Bit mask of RD_MAC_1 field.
	EFUSE_BLK0_RDATA2_RD_MAC_1_Msk = 0xffff
	// Position of RD_MAC_CRC field.
	EFUSE_BLK0_RDATA2_RD_MAC_CRC_Pos = 0x10
	// Bit mask of RD_MAC_CRC field.
	EFUSE_BLK0_RDATA2_RD_MAC_CRC_Msk = 0xff0000
	// Position of RD_RESERVE_0_88 field.
	EFUSE_BLK0_RDATA2_RD_RESERVE_0_88_Pos = 0x18
	// Bit mask of RD_RESERVE_0_88 field.
	EFUSE_BLK0_RDATA2_RD_RESERVE_0_88_Msk = 0xff000000

	// BLK0_RDATA3
	// Position of RD_DISABLE_APP_CPU field.
	EFUSE_BLK0_RDATA3_RD_DISABLE_APP_CPU_Pos = 0x0
	// Bit mask of RD_DISABLE_APP_CPU field.
	EFUSE_BLK0_RDATA3_RD_DISABLE_APP_CPU_Msk = 0x1
	// Bit RD_DISABLE_APP_CPU.
	EFUSE_BLK0_RDATA3_RD_DISABLE_APP_CPU = 0x1
	// Position of RD_DISABLE_BT field.
	EFUSE_BLK0_RDATA3_RD_DISABLE_BT_Pos = 0x1
	// Bit mask of RD_DISABLE_BT field.
	EFUSE_BLK0_RDATA3_RD_DISABLE_BT_Msk = 0x2
	// Bit RD_DISABLE_BT.
	EFUSE_BLK0_RDATA3_RD_DISABLE_BT = 0x2
	// Position of RD_CHIP_PACKAGE_4BIT field.
	EFUSE_BLK0_RDATA3_RD_CHIP_PACKAGE_4BIT_Pos = 0x2
	// Bit mask of RD_CHIP_PACKAGE_4BIT field.
	EFUSE_BLK0_RDATA3_RD_CHIP_PACKAGE_4BIT_Msk = 0x4
	// Bit RD_CHIP_PACKAGE_4BIT.
	EFUSE_BLK0_RDATA3_RD_CHIP_PACKAGE_4BIT = 0x4
	// Position of RD_DIS_CACHE field.
	EFUSE_BLK0_RDATA3_RD_DIS_CACHE_Pos = 0x3
	// Bit mask of RD_DIS_CACHE field.
	EFUSE_BLK0_RDATA3_RD_DIS_CACHE_Msk = 0x8
	// Bit RD_DIS_CACHE.
	EFUSE_BLK0_RDATA3_RD_DIS_CACHE = 0x8
	// Position of RD_SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_RDATA3_RD_SPI_PAD_CONFIG_HD_Pos = 0x4
	// Bit mask of RD_SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_RDATA3_RD_SPI_PAD_CONFIG_HD_Msk = 0x1f0
	// Position of RD_CHIP_PACKAGE field.
	EFUSE_BLK0_RDATA3_RD_CHIP_PACKAGE_Pos = 0x9
	// Bit mask of RD_CHIP_PACKAGE field.
	EFUSE_BLK0_RDATA3_RD_CHIP_PACKAGE_Msk = 0xe00
	// Position of RD_CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW_Pos = 0xc
	// Bit mask of RD_CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW_Msk = 0x1000
	// Bit RD_CHIP_CPU_FREQ_LOW.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW = 0x1000
	// Position of RD_CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED_Pos = 0xd
	// Bit mask of RD_CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED_Msk = 0x2000
	// Bit RD_CHIP_CPU_FREQ_RATED.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED = 0x2000
	// Position of RD_BLK3_PART_RESERVE field.
	EFUSE_BLK0_RDATA3_RD_BLK3_PART_RESERVE_Pos = 0xe
	// Bit mask of RD_BLK3_PART_RESERVE field.
	EFUSE_BLK0_RDATA3_RD_BLK3_PART_RESERVE_Msk = 0x4000
	// Bit RD_BLK3_PART_RESERVE.
	EFUSE_BLK0_RDATA3_RD_BLK3_PART_RESERVE = 0x4000
	// Position of RD_CHIP_VER_REV1 field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_REV1_Pos = 0xf
	// Bit mask of RD_CHIP_VER_REV1 field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_REV1_Msk = 0x8000
	// Bit RD_CHIP_VER_REV1.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_REV1 = 0x8000
	// Position of RD_RESERVE_0_112 field.
	EFUSE_BLK0_RDATA3_RD_RESERVE_0_112_Pos = 0x10
	// Bit mask of RD_RESERVE_0_112 field.
	EFUSE_BLK0_RDATA3_RD_RESERVE_0_112_Msk = 0xffff0000

	// BLK0_RDATA4
	// Position of RD_CLK8M_FREQ field.
	EFUSE_BLK0_RDATA4_RD_CLK8M_FREQ_Pos = 0x0
	// Bit mask of RD_CLK8M_FREQ field.
	EFUSE_BLK0_RDATA4_RD_CLK8M_FREQ_Msk = 0xff
	// Position of RD_ADC_VREF field.
	EFUSE_BLK0_RDATA4_RD_ADC_VREF_Pos = 0x8
	// Bit mask of RD_ADC_VREF field.
	EFUSE_BLK0_RDATA4_RD_ADC_VREF_Msk = 0x1f00
	// Position of RD_RESERVE_0_141 field.
	EFUSE_BLK0_RDATA4_RD_RESERVE_0_141_Pos = 0xd
	// Bit mask of RD_RESERVE_0_141 field.
	EFUSE_BLK0_RDATA4_RD_RESERVE_0_141_Msk = 0x2000
	// Bit RD_RESERVE_0_141.
	EFUSE_BLK0_RDATA4_RD_RESERVE_0_141 = 0x2000
	// Position of RD_XPD_SDIO field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_Pos = 0xe
	// Bit mask of RD_XPD_SDIO field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_Msk = 0x4000
	// Bit RD_XPD_SDIO.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO = 0x4000
	// Position of RD_XPD_SDIO_TIEH field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_TIEH_Pos = 0xf
	// Bit mask of RD_XPD_SDIO_TIEH field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_TIEH_Msk = 0x8000
	// Bit RD_XPD_SDIO_TIEH.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_TIEH = 0x8000
	// Position of RD_XPD_SDIO_FORCE field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_FORCE_Pos = 0x10
	// Bit mask of RD_XPD_SDIO_FORCE field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_FORCE_Msk = 0x10000
	// Bit RD_XPD_SDIO_FORCE.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_FORCE = 0x10000
	// Position of RD_RESERVE_0_145 field.
	EFUSE_BLK0_RDATA4_RD_RESERVE_0_145_Pos = 0x11
	// Bit mask of RD_RESERVE_0_145 field.
	EFUSE_BLK0_RDATA4_RD_RESERVE_0_145_Msk = 0xfffe0000

	// BLK0_RDATA5
	// Position of RD_SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK_Pos = 0x0
	// Bit mask of RD_SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK_Msk = 0x1f
	// Position of RD_SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_Q_Pos = 0x5
	// Bit mask of RD_SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_Q_Msk = 0x3e0
	// Position of RD_SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_D_Pos = 0xa
	// Bit mask of RD_SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_D_Msk = 0x7c00
	// Position of RD_SPI_PAD_CONFIG_CS0 field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_CS0_Pos = 0xf
	// Bit mask of RD_SPI_PAD_CONFIG_CS0 field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_CS0_Msk = 0xf8000
	// Position of RD_CHIP_VER_REV2 field.
	EFUSE_BLK0_RDATA5_RD_CHIP_VER_REV2_Pos = 0x14
	// Bit mask of RD_CHIP_VER_REV2 field.
	EFUSE_BLK0_RDATA5_RD_CHIP_VER_REV2_Msk = 0x100000
	// Bit RD_CHIP_VER_REV2.
	EFUSE_BLK0_RDATA5_RD_CHIP_VER_REV2 = 0x100000
	// Position of RD_RESERVE_0_181 field.
	EFUSE_BLK0_RDATA5_RD_RESERVE_0_181_Pos = 0x15
	// Bit mask of RD_RESERVE_0_181 field.
	EFUSE_BLK0_RDATA5_RD_RESERVE_0_181_Msk = 0x200000
	// Bit RD_RESERVE_0_181.
	EFUSE_BLK0_RDATA5_RD_RESERVE_0_181 = 0x200000
	// Position of RD_VOL_LEVEL_HP_INV field.
	EFUSE_BLK0_RDATA5_RD_VOL_LEVEL_HP_INV_Pos = 0x16
	// Bit mask of RD_VOL_LEVEL_HP_INV field.
	EFUSE_BLK0_RDATA5_RD_VOL_LEVEL_HP_INV_Msk = 0xc00000
	// Position of RD_WAFER_VERSION_MINOR field.
	EFUSE_BLK0_RDATA5_RD_WAFER_VERSION_MINOR_Pos = 0x18
	// Bit mask of RD_WAFER_VERSION_MINOR field.
	EFUSE_BLK0_RDATA5_RD_WAFER_VERSION_MINOR_Msk = 0x3000000
	// Position of RD_RESERVE_0_186 field.
	EFUSE_BLK0_RDATA5_RD_RESERVE_0_186_Pos = 0x1a
	// Bit mask of RD_RESERVE_0_186 field.
	EFUSE_BLK0_RDATA5_RD_RESERVE_0_186_Msk = 0xc000000
	// Position of RD_FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_RDATA5_RD_FLASH_CRYPT_CONFIG_Pos = 0x1c
	// Bit mask of RD_FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_RDATA5_RD_FLASH_CRYPT_CONFIG_Msk = 0xf0000000

	// BLK0_RDATA6
	// Position of RD_CODING_SCHEME field.
	EFUSE_BLK0_RDATA6_RD_CODING_SCHEME_Pos = 0x0
	// Bit mask of RD_CODING_SCHEME field.
	EFUSE_BLK0_RDATA6_RD_CODING_SCHEME_Msk = 0x3
	// Position of RD_CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE_Pos = 0x2
	// Bit mask of RD_CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE_Msk = 0x4
	// Bit RD_CONSOLE_DEBUG_DISABLE.
	EFUSE_BLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE = 0x4
	// Position of RD_DISABLE_SDIO_HOST field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_SDIO_HOST_Pos = 0x3
	// Bit mask of RD_DISABLE_SDIO_HOST field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_SDIO_HOST_Msk = 0x8
	// Bit RD_DISABLE_SDIO_HOST.
	EFUSE_BLK0_RDATA6_RD_DISABLE_SDIO_HOST = 0x8
	// Position of RD_ABS_DONE_0 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_0_Pos = 0x4
	// Bit mask of RD_ABS_DONE_0 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_0_Msk = 0x10
	// Bit RD_ABS_DONE_0.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_0 = 0x10
	// Position of RD_ABS_DONE_1 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_1_Pos = 0x5
	// Bit mask of RD_ABS_DONE_1 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_1_Msk = 0x20
	// Bit RD_ABS_DONE_1.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_1 = 0x20
	// Position of RD_JTAG_DISABLE field.
	EFUSE_BLK0_RDATA6_RD_JTAG_DISABLE_Pos = 0x6
	// Bit mask of RD_JTAG_DISABLE field.
	EFUSE_BLK0_RDATA6_RD_JTAG_DISABLE_Msk = 0x40
	// Bit RD_JTAG_DISABLE.
	EFUSE_BLK0_RDATA6_RD_JTAG_DISABLE = 0x40
	// Position of RD_DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_ENCRYPT_Pos = 0x7
	// Bit mask of RD_DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_ENCRYPT_Msk = 0x80
	// Bit RD_DISABLE_DL_ENCRYPT.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_ENCRYPT = 0x80
	// Position of RD_DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_DECRYPT_Pos = 0x8
	// Bit mask of RD_DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_DECRYPT_Msk = 0x100
	// Bit RD_DISABLE_DL_DECRYPT.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_DECRYPT = 0x100
	// Position of RD_DISABLE_DL_CACHE field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_CACHE_Pos = 0x9
	// Bit mask of RD_DISABLE_DL_CACHE field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_CACHE_Msk = 0x200
	// Bit RD_DISABLE_DL_CACHE.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_CACHE = 0x200
	// Position of RD_KEY_STATUS field.
	EFUSE_BLK0_RDATA6_RD_KEY_STATUS_Pos = 0xa
	// Bit mask of RD_KEY_STATUS field.
	EFUSE_BLK0_RDATA6_RD_KEY_STATUS_Msk = 0x400
	// Bit RD_KEY_STATUS.
	EFUSE_BLK0_RDATA6_RD_KEY_STATUS = 0x400
	// Position of RD_RESERVE_0_203 field.
	EFUSE_BLK0_RDATA6_RD_RESERVE_0_203_Pos = 0xb
	// Bit mask of RD_RESERVE_0_203 field.
	EFUSE_BLK0_RDATA6_RD_RESERVE_0_203_Msk = 0xfffff800

	// BLK0_WDATA0
	// Position of WR_DIS field.
	EFUSE_BLK0_WDATA0_WR_DIS_Pos = 0x0
	// Bit mask of WR_DIS field.
	EFUSE_BLK0_WDATA0_WR_DIS_Msk = 0xffff
	// Position of RD_DIS field.
	EFUSE_BLK0_WDATA0_RD_DIS_Pos = 0x10
	// Bit mask of RD_DIS field.
	EFUSE_BLK0_WDATA0_RD_DIS_Msk = 0xf0000
	// Position of FLASH_CRYPT_CNT field.
	EFUSE_BLK0_WDATA0_FLASH_CRYPT_CNT_Pos = 0x14
	// Bit mask of FLASH_CRYPT_CNT field.
	EFUSE_BLK0_WDATA0_FLASH_CRYPT_CNT_Msk = 0x7f00000

	// BLK0_WDATA1
	// Position of WIFI_MAC_CRC_LOW field.
	EFUSE_BLK0_WDATA1_WIFI_MAC_CRC_LOW_Pos = 0x0
	// Bit mask of WIFI_MAC_CRC_LOW field.
	EFUSE_BLK0_WDATA1_WIFI_MAC_CRC_LOW_Msk = 0xffffffff

	// BLK0_WDATA2
	// Position of WIFI_MAC_CRC_HIGH field.
	EFUSE_BLK0_WDATA2_WIFI_MAC_CRC_HIGH_Pos = 0x0
	// Bit mask of WIFI_MAC_CRC_HIGH field.
	EFUSE_BLK0_WDATA2_WIFI_MAC_CRC_HIGH_Msk = 0xffffff

	// BLK0_WDATA3
	// Position of DISABLE_APP_CPU field.
	EFUSE_BLK0_WDATA3_DISABLE_APP_CPU_Pos = 0x0
	// Bit mask of DISABLE_APP_CPU field.
	EFUSE_BLK0_WDATA3_DISABLE_APP_CPU_Msk = 0x1
	// Bit DISABLE_APP_CPU.
	EFUSE_BLK0_WDATA3_DISABLE_APP_CPU = 0x1
	// Position of DISABLE_BT field.
	EFUSE_BLK0_WDATA3_DISABLE_BT_Pos = 0x1
	// Bit mask of DISABLE_BT field.
	EFUSE_BLK0_WDATA3_DISABLE_BT_Msk = 0x2
	// Bit DISABLE_BT.
	EFUSE_BLK0_WDATA3_DISABLE_BT = 0x2
	// Position of CHIP_PACKAGE_4BIT field.
	EFUSE_BLK0_WDATA3_CHIP_PACKAGE_4BIT_Pos = 0x2
	// Bit mask of CHIP_PACKAGE_4BIT field.
	EFUSE_BLK0_WDATA3_CHIP_PACKAGE_4BIT_Msk = 0x4
	// Bit CHIP_PACKAGE_4BIT.
	EFUSE_BLK0_WDATA3_CHIP_PACKAGE_4BIT = 0x4
	// Position of DIS_CACHE field.
	EFUSE_BLK0_WDATA3_DIS_CACHE_Pos = 0x3
	// Bit mask of DIS_CACHE field.
	EFUSE_BLK0_WDATA3_DIS_CACHE_Msk = 0x8
	// Bit DIS_CACHE.
	EFUSE_BLK0_WDATA3_DIS_CACHE = 0x8
	// Position of SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_WDATA3_SPI_PAD_CONFIG_HD_Pos = 0x4
	// Bit mask of SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_WDATA3_SPI_PAD_CONFIG_HD_Msk = 0x1f0
	// Position of CHIP_PACKAGE field.
	EFUSE_BLK0_WDATA3_CHIP_PACKAGE_Pos = 0x9
	// Bit mask of CHIP_PACKAGE field.
	EFUSE_BLK0_WDATA3_CHIP_PACKAGE_Msk = 0xe00
	// Position of CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_LOW_Pos = 0xc
	// Bit mask of CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_LOW_Msk = 0x1000
	// Bit CHIP_CPU_FREQ_LOW.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_LOW = 0x1000
	// Position of CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_RATED_Pos = 0xd
	// Bit mask of CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_RATED_Msk = 0x2000
	// Bit CHIP_CPU_FREQ_RATED.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_RATED = 0x2000
	// Position of BLK3_PART_RESERVE field.
	EFUSE_BLK0_WDATA3_BLK3_PART_RESERVE_Pos = 0xe
	// Bit mask of BLK3_PART_RESERVE field.
	EFUSE_BLK0_WDATA3_BLK3_PART_RESERVE_Msk = 0x4000
	// Bit BLK3_PART_RESERVE.
	EFUSE_BLK0_WDATA3_BLK3_PART_RESERVE = 0x4000
	// Position of CHIP_VER_REV1 field.
	EFUSE_BLK0_WDATA3_CHIP_VER_REV1_Pos = 0xf
	// Bit mask of CHIP_VER_REV1 field.
	EFUSE_BLK0_WDATA3_CHIP_VER_REV1_Msk = 0x8000
	// Bit CHIP_VER_REV1.
	EFUSE_BLK0_WDATA3_CHIP_VER_REV1 = 0x8000
	// Position of RESERVE_0_112 field.
	EFUSE_BLK0_WDATA3_RESERVE_0_112_Pos = 0x10
	// Bit mask of RESERVE_0_112 field.
	EFUSE_BLK0_WDATA3_RESERVE_0_112_Msk = 0xffff0000

	// BLK0_WDATA4
	// Position of CLK8M_FREQ field.
	EFUSE_BLK0_WDATA4_CLK8M_FREQ_Pos = 0x0
	// Bit mask of CLK8M_FREQ field.
	EFUSE_BLK0_WDATA4_CLK8M_FREQ_Msk = 0xff
	// Position of ADC_VREF field.
	EFUSE_BLK0_WDATA4_ADC_VREF_Pos = 0x8
	// Bit mask of ADC_VREF field.
	EFUSE_BLK0_WDATA4_ADC_VREF_Msk = 0x1f00
	// Position of RESERVE_0_141 field.
	EFUSE_BLK0_WDATA4_RESERVE_0_141_Pos = 0xd
	// Bit mask of RESERVE_0_141 field.
	EFUSE_BLK0_WDATA4_RESERVE_0_141_Msk = 0x2000
	// Bit RESERVE_0_141.
	EFUSE_BLK0_WDATA4_RESERVE_0_141 = 0x2000
	// Position of XPD_SDIO field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_Pos = 0xe
	// Bit mask of XPD_SDIO field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_Msk = 0x4000
	// Bit XPD_SDIO.
	EFUSE_BLK0_WDATA4_XPD_SDIO = 0x4000
	// Position of XPD_SDIO_TIEH field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_TIEH_Pos = 0xf
	// Bit mask of XPD_SDIO_TIEH field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_TIEH_Msk = 0x8000
	// Bit XPD_SDIO_TIEH.
	EFUSE_BLK0_WDATA4_XPD_SDIO_TIEH = 0x8000
	// Position of XPD_SDIO_FORCE field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_FORCE_Pos = 0x10
	// Bit mask of XPD_SDIO_FORCE field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_FORCE_Msk = 0x10000
	// Bit XPD_SDIO_FORCE.
	EFUSE_BLK0_WDATA4_XPD_SDIO_FORCE = 0x10000
	// Position of RESERVE_0_145 field.
	EFUSE_BLK0_WDATA4_RESERVE_0_145_Pos = 0x11
	// Bit mask of RESERVE_0_145 field.
	EFUSE_BLK0_WDATA4_RESERVE_0_145_Msk = 0xfffe0000

	// BLK0_WDATA5
	// Position of SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_CLK_Pos = 0x0
	// Bit mask of SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_CLK_Msk = 0x1f
	// Position of SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_Q_Pos = 0x5
	// Bit mask of SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_Q_Msk = 0x3e0
	// Position of SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_D_Pos = 0xa
	// Bit mask of SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_D_Msk = 0x7c00
	// Position of SPI_PAD_CONFIG_CS0 field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_CS0_Pos = 0xf
	// Bit mask of SPI_PAD_CONFIG_CS0 field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_CS0_Msk = 0xf8000
	// Position of CHIP_VER_REV2 field.
	EFUSE_BLK0_WDATA5_CHIP_VER_REV2_Pos = 0x14
	// Bit mask of CHIP_VER_REV2 field.
	EFUSE_BLK0_WDATA5_CHIP_VER_REV2_Msk = 0x100000
	// Bit CHIP_VER_REV2.
	EFUSE_BLK0_WDATA5_CHIP_VER_REV2 = 0x100000
	// Position of RESERVE_0_181 field.
	EFUSE_BLK0_WDATA5_RESERVE_0_181_Pos = 0x15
	// Bit mask of RESERVE_0_181 field.
	EFUSE_BLK0_WDATA5_RESERVE_0_181_Msk = 0x200000
	// Bit RESERVE_0_181.
	EFUSE_BLK0_WDATA5_RESERVE_0_181 = 0x200000
	// Position of VOL_LEVEL_HP_INV field.
	EFUSE_BLK0_WDATA5_VOL_LEVEL_HP_INV_Pos = 0x16
	// Bit mask of VOL_LEVEL_HP_INV field.
	EFUSE_BLK0_WDATA5_VOL_LEVEL_HP_INV_Msk = 0xc00000
	// Position of WAFER_VERSION_MINOR field.
	EFUSE_BLK0_WDATA5_WAFER_VERSION_MINOR_Pos = 0x18
	// Bit mask of WAFER_VERSION_MINOR field.
	EFUSE_BLK0_WDATA5_WAFER_VERSION_MINOR_Msk = 0x3000000
	// Position of RESERVE_0_186 field.
	EFUSE_BLK0_WDATA5_RESERVE_0_186_Pos = 0x1a
	// Bit mask of RESERVE_0_186 field.
	EFUSE_BLK0_WDATA5_RESERVE_0_186_Msk = 0xc000000
	// Position of FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_WDATA5_FLASH_CRYPT_CONFIG_Pos = 0x1c
	// Bit mask of FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_WDATA5_FLASH_CRYPT_CONFIG_Msk = 0xf0000000

	// BLK0_WDATA6
	// Position of CODING_SCHEME field.
	EFUSE_BLK0_WDATA6_CODING_SCHEME_Pos = 0x0
	// Bit mask of CODING_SCHEME field.
	EFUSE_BLK0_WDATA6_CODING_SCHEME_Msk = 0x3
	// Position of CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_WDATA6_CONSOLE_DEBUG_DISABLE_Pos = 0x2
	// Bit mask of CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_WDATA6_CONSOLE_DEBUG_DISABLE_Msk = 0x4
	// Bit CONSOLE_DEBUG_DISABLE.
	EFUSE_BLK0_WDATA6_CONSOLE_DEBUG_DISABLE = 0x4
	// Position of DISABLE_SDIO_HOST field.
	EFUSE_BLK0_WDATA6_DISABLE_SDIO_HOST_Pos = 0x3
	// Bit mask of DISABLE_SDIO_HOST field.
	EFUSE_BLK0_WDATA6_DISABLE_SDIO_HOST_Msk = 0x8
	// Bit DISABLE_SDIO_HOST.
	EFUSE_BLK0_WDATA6_DISABLE_SDIO_HOST = 0x8
	// Position of ABS_DONE_0 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_0_Pos = 0x4
	// Bit mask of ABS_DONE_0 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_0_Msk = 0x10
	// Bit ABS_DONE_0.
	EFUSE_BLK0_WDATA6_ABS_DONE_0 = 0x10
	// Position of ABS_DONE_1 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_1_Pos = 0x5
	// Bit mask of ABS_DONE_1 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_1_Msk = 0x20
	// Bit ABS_DONE_1.
	EFUSE_BLK0_WDATA6_ABS_DONE_1 = 0x20
	// Position of DISABLE_JTAG field.
	EFUSE_BLK0_WDATA6_DISABLE_JTAG_Pos = 0x6
	// Bit mask of DISABLE_JTAG field.
	EFUSE_BLK0_WDATA6_DISABLE_JTAG_Msk = 0x40
	// Bit DISABLE_JTAG.
	EFUSE_BLK0_WDATA6_DISABLE_JTAG = 0x40
	// Position of DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_ENCRYPT_Pos = 0x7
	// Bit mask of DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_ENCRYPT_Msk = 0x80
	// Bit DISABLE_DL_ENCRYPT.
	EFUSE_BLK0_WDATA6_DISABLE_DL_ENCRYPT = 0x80
	// Position of DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_DECRYPT_Pos = 0x8
	// Bit mask of DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_DECRYPT_Msk = 0x100
	// Bit DISABLE_DL_DECRYPT.
	EFUSE_BLK0_WDATA6_DISABLE_DL_DECRYPT = 0x100
	// Position of DISABLE_DL_CACHE field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_CACHE_Pos = 0x9
	// Bit mask of DISABLE_DL_CACHE field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_CACHE_Msk = 0x200
	// Bit DISABLE_DL_CACHE.
	EFUSE_BLK0_WDATA6_DISABLE_DL_CACHE = 0x200
	// Position of KEY_STATUS field.
	EFUSE_BLK0_WDATA6_KEY_STATUS_Pos = 0xa
	// Bit mask of KEY_STATUS field.
	EFUSE_BLK0_WDATA6_KEY_STATUS_Msk = 0x400
	// Bit KEY_STATUS.
	EFUSE_BLK0_WDATA6_KEY_STATUS = 0x400

	// BLK1_RDATA0
	// Position of RD_BLOCK1 field.
	EFUSE_BLK1_RDATA0_RD_BLOCK1_Pos = 0x0
	// Bit mask of RD_BLOCK1 field.
	EFUSE_BLK1_RDATA0_RD_BLOCK1_Msk = 0xffffffff

	// BLK1_RDATA1
	// Position of RD_BLOCK1_1 field.
	EFUSE_BLK1_RDATA1_RD_BLOCK1_1_Pos = 0x0
	// Bit mask of RD_BLOCK1_1 field.
	EFUSE_BLK1_RDATA1_RD_BLOCK1_1_Msk = 0xffffffff

	// BLK1_RDATA2
	// Position of RD_BLOCK1_2 field.
	EFUSE_BLK1_RDATA2_RD_BLOCK1_2_Pos = 0x0
	// Bit mask of RD_BLOCK1_2 field.
	EFUSE_BLK1_RDATA2_RD_BLOCK1_2_Msk = 0xffffffff

	// BLK1_RDATA3
	// Position of RD_BLOCK1_3 field.
	EFUSE_BLK1_RDATA3_RD_BLOCK1_3_Pos = 0x0
	// Bit mask of RD_BLOCK1_3 field.
	EFUSE_BLK1_RDATA3_RD_BLOCK1_3_Msk = 0xffffffff

	// BLK1_RDATA4
	// Position of RD_BLOCK1_4 field.
	EFUSE_BLK1_RDATA4_RD_BLOCK1_4_Pos = 0x0
	// Bit mask of RD_BLOCK1_4 field.
	EFUSE_BLK1_RDATA4_RD_BLOCK1_4_Msk = 0xffffffff

	// BLK1_RDATA5
	// Position of RD_BLOCK1_5 field.
	EFUSE_BLK1_RDATA5_RD_BLOCK1_5_Pos = 0x0
	// Bit mask of RD_BLOCK1_5 field.
	EFUSE_BLK1_RDATA5_RD_BLOCK1_5_Msk = 0xffffffff

	// BLK1_RDATA6
	// Position of RD_BLOCK1_6 field.
	EFUSE_BLK1_RDATA6_RD_BLOCK1_6_Pos = 0x0
	// Bit mask of RD_BLOCK1_6 field.
	EFUSE_BLK1_RDATA6_RD_BLOCK1_6_Msk = 0xffffffff

	// BLK1_RDATA7
	// Position of RD_BLOCK1_7 field.
	EFUSE_BLK1_RDATA7_RD_BLOCK1_7_Pos = 0x0
	// Bit mask of RD_BLOCK1_7 field.
	EFUSE_BLK1_RDATA7_RD_BLOCK1_7_Msk = 0xffffffff

	// BLK2_RDATA0
	// Position of RD_BLOCK2 field.
	EFUSE_BLK2_RDATA0_RD_BLOCK2_Pos = 0x0
	// Bit mask of RD_BLOCK2 field.
	EFUSE_BLK2_RDATA0_RD_BLOCK2_Msk = 0xffffffff

	// BLK2_RDATA1
	// Position of RD_BLOCK2_1 field.
	EFUSE_BLK2_RDATA1_RD_BLOCK2_1_Pos = 0x0
	// Bit mask of RD_BLOCK2_1 field.
	EFUSE_BLK2_RDATA1_RD_BLOCK2_1_Msk = 0xffffffff

	// BLK2_RDATA2
	// Position of RD_BLOCK2_2 field.
	EFUSE_BLK2_RDATA2_RD_BLOCK2_2_Pos = 0x0
	// Bit mask of RD_BLOCK2_2 field.
	EFUSE_BLK2_RDATA2_RD_BLOCK2_2_Msk = 0xffffffff

	// BLK2_RDATA3
	// Position of RD_BLOCK2_3 field.
	EFUSE_BLK2_RDATA3_RD_BLOCK2_3_Pos = 0x0
	// Bit mask of RD_BLOCK2_3 field.
	EFUSE_BLK2_RDATA3_RD_BLOCK2_3_Msk = 0xffffffff

	// BLK2_RDATA4
	// Position of RD_BLOCK2_4 field.
	EFUSE_BLK2_RDATA4_RD_BLOCK2_4_Pos = 0x0
	// Bit mask of RD_BLOCK2_4 field.
	EFUSE_BLK2_RDATA4_RD_BLOCK2_4_Msk = 0xffffffff

	// BLK2_RDATA5
	// Position of RD_BLOCK2_5 field.
	EFUSE_BLK2_RDATA5_RD_BLOCK2_5_Pos = 0x0
	// Bit mask of RD_BLOCK2_5 field.
	EFUSE_BLK2_RDATA5_RD_BLOCK2_5_Msk = 0xffffffff

	// BLK2_RDATA6
	// Position of RD_BLOCK2_6 field.
	EFUSE_BLK2_RDATA6_RD_BLOCK2_6_Pos = 0x0
	// Bit mask of RD_BLOCK2_6 field.
	EFUSE_BLK2_RDATA6_RD_BLOCK2_6_Msk = 0xffffffff

	// BLK2_RDATA7
	// Position of RD_BLOCK2_7 field.
	EFUSE_BLK2_RDATA7_RD_BLOCK2_7_Pos = 0x0
	// Bit mask of RD_BLOCK2_7 field.
	EFUSE_BLK2_RDATA7_RD_BLOCK2_7_Msk = 0xffffffff

	// BLK3_RDATA0
	// Position of RD_CUSTOM_MAC_CRC field.
	EFUSE_BLK3_RDATA0_RD_CUSTOM_MAC_CRC_Pos = 0x0
	// Bit mask of RD_CUSTOM_MAC_CRC field.
	EFUSE_BLK3_RDATA0_RD_CUSTOM_MAC_CRC_Msk = 0xff
	// Position of RD_CUSTOM_MAC field.
	EFUSE_BLK3_RDATA0_RD_CUSTOM_MAC_Pos = 0x8
	// Bit mask of RD_CUSTOM_MAC field.
	EFUSE_BLK3_RDATA0_RD_CUSTOM_MAC_Msk = 0xffffff00

	// BLK3_RDATA1
	// Position of RD_CUSTOM_MAC_1 field.
	EFUSE_BLK3_RDATA1_RD_CUSTOM_MAC_1_Pos = 0x0
	// Bit mask of RD_CUSTOM_MAC_1 field.
	EFUSE_BLK3_RDATA1_RD_CUSTOM_MAC_1_Msk = 0xffffff
	// Position of RESERVED_3_56 field.
	EFUSE_BLK3_RDATA1_RESERVED_3_56_Pos = 0x18
	// Bit mask of RESERVED_3_56 field.
	EFUSE_BLK3_RDATA1_RESERVED_3_56_Msk = 0xff000000

	// BLK3_RDATA2
	// Position of RD_BLK3_RESERVED_2 field.
	EFUSE_BLK3_RDATA2_RD_BLK3_RESERVED_2_Pos = 0x0
	// Bit mask of RD_BLK3_RESERVED_2 field.
	EFUSE_BLK3_RDATA2_RD_BLK3_RESERVED_2_Msk = 0xffffffff

	// BLK3_RDATA3
	// Position of RD_ADC1_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_LOW_Pos = 0x0
	// Bit mask of RD_ADC1_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_LOW_Msk = 0x7f
	// Position of RD_ADC1_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_HIGH_Pos = 0x7
	// Bit mask of RD_ADC1_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_HIGH_Msk = 0xff80
	// Position of RD_ADC2_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_LOW_Pos = 0x10
	// Bit mask of RD_ADC2_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_LOW_Msk = 0x7f0000
	// Position of RD_ADC2_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_HIGH_Pos = 0x17
	// Bit mask of RD_ADC2_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_HIGH_Msk = 0xff800000

	// BLK3_RDATA4
	// Position of RD_SECURE_VERSION field.
	EFUSE_BLK3_RDATA4_RD_SECURE_VERSION_Pos = 0x0
	// Bit mask of RD_SECURE_VERSION field.
	EFUSE_BLK3_RDATA4_RD_SECURE_VERSION_Msk = 0xffffffff

	// BLK3_RDATA5
	// Position of RESERVED_3_160 field.
	EFUSE_BLK3_RDATA5_RESERVED_3_160_Pos = 0x0
	// Bit mask of RESERVED_3_160 field.
	EFUSE_BLK3_RDATA5_RESERVED_3_160_Msk = 0xffffff
	// Position of RD_MAC_VERSION field.
	EFUSE_BLK3_RDATA5_RD_MAC_VERSION_Pos = 0x18
	// Bit mask of RD_MAC_VERSION field.
	EFUSE_BLK3_RDATA5_RD_MAC_VERSION_Msk = 0xff000000

	// BLK3_RDATA6
	// Position of RD_BLK3_RESERVED_6 field.
	EFUSE_BLK3_RDATA6_RD_BLK3_RESERVED_6_Pos = 0x0
	// Bit mask of RD_BLK3_RESERVED_6 field.
	EFUSE_BLK3_RDATA6_RD_BLK3_RESERVED_6_Msk = 0xffffffff

	// BLK3_RDATA7
	// Position of RD_BLK3_RESERVED_7 field.
	EFUSE_BLK3_RDATA7_RD_BLK3_RESERVED_7_Pos = 0x0
	// Bit mask of RD_BLK3_RESERVED_7 field.
	EFUSE_BLK3_RDATA7_RD_BLK3_RESERVED_7_Msk = 0xffffffff

	// BLK1_WDATA0
	// Position of BLK1_DIN0 field.
	EFUSE_BLK1_WDATA0_BLK1_DIN0_Pos = 0x0
	// Bit mask of BLK1_DIN0 field.
	EFUSE_BLK1_WDATA0_BLK1_DIN0_Msk = 0xffffffff

	// BLK1_WDATA1
	// Position of BLK1_DIN1 field.
	EFUSE_BLK1_WDATA1_BLK1_DIN1_Pos = 0x0
	// Bit mask of BLK1_DIN1 field.
	EFUSE_BLK1_WDATA1_BLK1_DIN1_Msk = 0xffffffff

	// BLK1_WDATA2
	// Position of BLK1_DIN2 field.
	EFUSE_BLK1_WDATA2_BLK1_DIN2_Pos = 0x0
	// Bit mask of BLK1_DIN2 field.
	EFUSE_BLK1_WDATA2_BLK1_DIN2_Msk = 0xffffffff

	// BLK1_WDATA3
	// Position of BLK1_DIN3 field.
	EFUSE_BLK1_WDATA3_BLK1_DIN3_Pos = 0x0
	// Bit mask of BLK1_DIN3 field.
	EFUSE_BLK1_WDATA3_BLK1_DIN3_Msk = 0xffffffff

	// BLK1_WDATA4
	// Position of BLK1_DIN4 field.
	EFUSE_BLK1_WDATA4_BLK1_DIN4_Pos = 0x0
	// Bit mask of BLK1_DIN4 field.
	EFUSE_BLK1_WDATA4_BLK1_DIN4_Msk = 0xffffffff

	// BLK1_WDATA5
	// Position of BLK1_DIN5 field.
	EFUSE_BLK1_WDATA5_BLK1_DIN5_Pos = 0x0
	// Bit mask of BLK1_DIN5 field.
	EFUSE_BLK1_WDATA5_BLK1_DIN5_Msk = 0xffffffff

	// BLK1_WDATA6
	// Position of BLK1_DIN6 field.
	EFUSE_BLK1_WDATA6_BLK1_DIN6_Pos = 0x0
	// Bit mask of BLK1_DIN6 field.
	EFUSE_BLK1_WDATA6_BLK1_DIN6_Msk = 0xffffffff

	// BLK1_WDATA7
	// Position of BLK1_DIN7 field.
	EFUSE_BLK1_WDATA7_BLK1_DIN7_Pos = 0x0
	// Bit mask of BLK1_DIN7 field.
	EFUSE_BLK1_WDATA7_BLK1_DIN7_Msk = 0xffffffff

	// BLK2_WDATA0
	// Position of BLK2_DIN0 field.
	EFUSE_BLK2_WDATA0_BLK2_DIN0_Pos = 0x0
	// Bit mask of BLK2_DIN0 field.
	EFUSE_BLK2_WDATA0_BLK2_DIN0_Msk = 0xffffffff

	// BLK2_WDATA1
	// Position of BLK2_DIN1 field.
	EFUSE_BLK2_WDATA1_BLK2_DIN1_Pos = 0x0
	// Bit mask of BLK2_DIN1 field.
	EFUSE_BLK2_WDATA1_BLK2_DIN1_Msk = 0xffffffff

	// BLK2_WDATA2
	// Position of BLK2_DIN2 field.
	EFUSE_BLK2_WDATA2_BLK2_DIN2_Pos = 0x0
	// Bit mask of BLK2_DIN2 field.
	EFUSE_BLK2_WDATA2_BLK2_DIN2_Msk = 0xffffffff

	// BLK2_WDATA3
	// Position of BLK2_DIN3 field.
	EFUSE_BLK2_WDATA3_BLK2_DIN3_Pos = 0x0
	// Bit mask of BLK2_DIN3 field.
	EFUSE_BLK2_WDATA3_BLK2_DIN3_Msk = 0xffffffff

	// BLK2_WDATA4
	// Position of BLK2_DIN4 field.
	EFUSE_BLK2_WDATA4_BLK2_DIN4_Pos = 0x0
	// Bit mask of BLK2_DIN4 field.
	EFUSE_BLK2_WDATA4_BLK2_DIN4_Msk = 0xffffffff

	// BLK2_WDATA5
	// Position of BLK2_DIN5 field.
	EFUSE_BLK2_WDATA5_BLK2_DIN5_Pos = 0x0
	// Bit mask of BLK2_DIN5 field.
	EFUSE_BLK2_WDATA5_BLK2_DIN5_Msk = 0xffffffff

	// BLK2_WDATA6
	// Position of BLK2_DIN6 field.
	EFUSE_BLK2_WDATA6_BLK2_DIN6_Pos = 0x0
	// Bit mask of BLK2_DIN6 field.
	EFUSE_BLK2_WDATA6_BLK2_DIN6_Msk = 0xffffffff

	// BLK2_WDATA7
	// Position of BLK2_DIN7 field.
	EFUSE_BLK2_WDATA7_BLK2_DIN7_Pos = 0x0
	// Bit mask of BLK2_DIN7 field.
	EFUSE_BLK2_WDATA7_BLK2_DIN7_Msk = 0xffffffff

	// BLK3_WDATA0
	// Position of BLK3_DIN0 field.
	EFUSE_BLK3_WDATA0_BLK3_DIN0_Pos = 0x0
	// Bit mask of BLK3_DIN0 field.
	EFUSE_BLK3_WDATA0_BLK3_DIN0_Msk = 0xffffffff

	// BLK3_WDATA1
	// Position of BLK3_DIN1 field.
	EFUSE_BLK3_WDATA1_BLK3_DIN1_Pos = 0x0
	// Bit mask of BLK3_DIN1 field.
	EFUSE_BLK3_WDATA1_BLK3_DIN1_Msk = 0xffffffff

	// BLK3_WDATA2
	// Position of BLK3_DIN2 field.
	EFUSE_BLK3_WDATA2_BLK3_DIN2_Pos = 0x0
	// Bit mask of BLK3_DIN2 field.
	EFUSE_BLK3_WDATA2_BLK3_DIN2_Msk = 0xffffffff

	// BLK3_WDATA3
	// Position of ADC1_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC1_TP_LOW_Pos = 0x0
	// Bit mask of ADC1_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC1_TP_LOW_Msk = 0x7f
	// Position of ADC1_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC1_TP_HIGH_Pos = 0x7
	// Bit mask of ADC1_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC1_TP_HIGH_Msk = 0xff80
	// Position of ADC2_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC2_TP_LOW_Pos = 0x10
	// Bit mask of ADC2_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC2_TP_LOW_Msk = 0x7f0000
	// Position of ADC2_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC2_TP_HIGH_Pos = 0x17
	// Bit mask of ADC2_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC2_TP_HIGH_Msk = 0xff800000

	// BLK3_WDATA4
	// Position of SECURE_VERSION field.
	EFUSE_BLK3_WDATA4_SECURE_VERSION_Pos = 0x0
	// Bit mask of SECURE_VERSION field.
	EFUSE_BLK3_WDATA4_SECURE_VERSION_Msk = 0xffffffff

	// BLK3_WDATA5
	// Position of BLK3_DIN5 field.
	EFUSE_BLK3_WDATA5_BLK3_DIN5_Pos = 0x0
	// Bit mask of BLK3_DIN5 field.
	EFUSE_BLK3_WDATA5_BLK3_DIN5_Msk = 0xffffffff

	// BLK3_WDATA6
	// Position of BLK3_DIN6 field.
	EFUSE_BLK3_WDATA6_BLK3_DIN6_Pos = 0x0
	// Bit mask of BLK3_DIN6 field.
	EFUSE_BLK3_WDATA6_BLK3_DIN6_Msk = 0xffffffff

	// BLK3_WDATA7
	// Position of BLK3_DIN7 field.
	EFUSE_BLK3_WDATA7_BLK3_DIN7_Pos = 0x0
	// Bit mask of BLK3_DIN7 field.
	EFUSE_BLK3_WDATA7_BLK3_DIN7_Msk = 0xffffffff

	// CLK
	// Position of SEL0 field.
	EFUSE_CLK_SEL0_Pos = 0x0
	// Bit mask of SEL0 field.
	EFUSE_CLK_SEL0_Msk = 0xff
	// Position of SEL1 field.
	EFUSE_CLK_SEL1_Pos = 0x8
	// Bit mask of SEL1 field.
	EFUSE_CLK_SEL1_Msk = 0xff00
	// Position of EN field.
	EFUSE_CLK_EN_Pos = 0x10
	// Bit mask of EN field.
	EFUSE_CLK_EN_Msk = 0x10000
	// Bit EN.
	EFUSE_CLK_EN = 0x10000

	// CONF
	// Position of OP_CODE field.
	EFUSE_CONF_OP_CODE_Pos = 0x0
	// Bit mask of OP_CODE field.
	EFUSE_CONF_OP_CODE_Msk = 0xffff
	// Position of FORCE_NO_WR_RD_DIS field.
	EFUSE_CONF_FORCE_NO_WR_RD_DIS_Pos = 0x10
	// Bit mask of FORCE_NO_WR_RD_DIS field.
	EFUSE_CONF_FORCE_NO_WR_RD_DIS_Msk = 0x10000
	// Bit FORCE_NO_WR_RD_DIS.
	EFUSE_CONF_FORCE_NO_WR_RD_DIS = 0x10000

	// STATUS
	// Position of DEBUG field.
	EFUSE_STATUS_DEBUG_Pos = 0x0
	// Bit mask of DEBUG field.
	EFUSE_STATUS_DEBUG_Msk = 0xffffffff

	// CMD
	// Position of READ_CMD field.
	EFUSE_CMD_READ_CMD_Pos = 0x0
	// Bit mask of READ_CMD field.
	EFUSE_CMD_READ_CMD_Msk = 0x1
	// Bit READ_CMD.
	EFUSE_CMD_READ_CMD = 0x1
	// Position of PGM_CMD field.
	EFUSE_CMD_PGM_CMD_Pos = 0x1
	// Bit mask of PGM_CMD field.
	EFUSE_CMD_PGM_CMD_Msk = 0x2
	// Bit PGM_CMD.
	EFUSE_CMD_PGM_CMD = 0x2

	// INT_RAW
	// Position of READ_DONE_INT_RAW field.
	EFUSE_INT_RAW_READ_DONE_INT_RAW_Pos = 0x0
	// Bit mask of READ_DONE_INT_RAW field.
	EFUSE_INT_RAW_READ_DONE_INT_RAW_Msk = 0x1
	// Bit READ_DONE_INT_RAW.
	EFUSE_INT_RAW_READ_DONE_INT_RAW = 0x1
	// Position of PGM_DONE_INT_RAW field.
	EFUSE_INT_RAW_PGM_DONE_INT_RAW_Pos = 0x1
	// Bit mask of PGM_DONE_INT_RAW field.
	EFUSE_INT_RAW_PGM_DONE_INT_RAW_Msk = 0x2
	// Bit PGM_DONE_INT_RAW.
	EFUSE_INT_RAW_PGM_DONE_INT_RAW = 0x2

	// INT_ST
	// Position of READ_DONE_INT_ST field.
	EFUSE_INT_ST_READ_DONE_INT_ST_Pos = 0x0
	// Bit mask of READ_DONE_INT_ST field.
	EFUSE_INT_ST_READ_DONE_INT_ST_Msk = 0x1
	// Bit READ_DONE_INT_ST.
	EFUSE_INT_ST_READ_DONE_INT_ST = 0x1
	// Position of PGM_DONE_INT_ST field.
	EFUSE_INT_ST_PGM_DONE_INT_ST_Pos = 0x1
	// Bit mask of PGM_DONE_INT_ST field.
	EFUSE_INT_ST_PGM_DONE_INT_ST_Msk = 0x2
	// Bit PGM_DONE_INT_ST.
	EFUSE_INT_ST_PGM_DONE_INT_ST = 0x2

	// INT_ENA
	// Position of READ_DONE_INT_ENA field.
	EFUSE_INT_ENA_READ_DONE_INT_ENA_Pos = 0x0
	// Bit mask of READ_DONE_INT_ENA field.
	EFUSE_INT_ENA_READ_DONE_INT_ENA_Msk = 0x1
	// Bit READ_DONE_INT_ENA.
	EFUSE_INT_ENA_READ_DONE_INT_ENA = 0x1
	// Position of PGM_DONE_INT_ENA field.
	EFUSE_INT_ENA_PGM_DONE_INT_ENA_Pos = 0x1
	// Bit mask of PGM_DONE_INT_ENA field.
	EFUSE_INT_ENA_PGM_DONE_INT_ENA_Msk = 0x2
	// Bit PGM_DONE_INT_ENA.
	EFUSE_INT_ENA_PGM_DONE_INT_ENA = 0x2

	// INT_CLR
	// Position of READ_DONE_INT_CLR field.
	EFUSE_INT_CLR_READ_DONE_INT_CLR_Pos = 0x0
	// Bit mask of READ_DONE_INT_CLR field.
	EFUSE_INT_CLR_READ_DONE_INT_CLR_Msk = 0x1
	// Bit READ_DONE_INT_CLR.
	EFUSE_INT_CLR_READ_DONE_INT_CLR = 0x1
	// Position of PGM_DONE_INT_CLR field.
	EFUSE_INT_CLR_PGM_DONE_INT_CLR_Pos = 0x1
	// Bit mask of PGM_DONE_INT_CLR field.
	EFUSE_INT_CLR_PGM_DONE_INT_CLR_Msk = 0x2
	// Bit PGM_DONE_INT_CLR.
	EFUSE_INT_CLR_PGM_DONE_INT_CLR = 0x2

	// DAC_CONF
	// Position of DAC_CLK_DIV field.
	EFUSE_DAC_CONF_DAC_CLK_DIV_Pos = 0x0
	// Bit mask of DAC_CLK_DIV field.
	EFUSE_DAC_CONF_DAC_CLK_DIV_Msk = 0xff
	// Position of DAC_CLK_PAD_SEL field.
	EFUSE_DAC_CONF_DAC_CLK_PAD_SEL_Pos = 0x8
	// Bit mask of DAC_CLK_PAD_SEL field.
	EFUSE_DAC_CONF_DAC_CLK_PAD_SEL_Msk = 0x100
	// Bit DAC_CLK_PAD_SEL.
	EFUSE_DAC_CONF_DAC_CLK_PAD_SEL = 0x100

	// DEC_STATUS
	// Position of DEC_WARNINGS field.
	EFUSE_DEC_STATUS_DEC_WARNINGS_Pos = 0x0
	// Bit mask of DEC_WARNINGS field.
	EFUSE_DEC_STATUS_DEC_WARNINGS_Msk = 0xfff

	// DATE
	// Position of DATE field.
	EFUSE_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	EFUSE_DATE_DATE_Msk = 0xffffffff
)

// Constants for EMAC_DMA: Ethernet DMA configuration and control registers
const (
	// DMABUSMODE: Bus mode configuration
	// Position of SW_RST field.
	EMAC_DMA_DMABUSMODE_SW_RST_Pos = 0x0
	// Bit mask of SW_RST field.
	EMAC_DMA_DMABUSMODE_SW_RST_Msk = 0x1
	// Bit SW_RST.
	EMAC_DMA_DMABUSMODE_SW_RST = 0x1
	// Position of DMA_ARB_SCH field.
	EMAC_DMA_DMABUSMODE_DMA_ARB_SCH_Pos = 0x1
	// Bit mask of DMA_ARB_SCH field.
	EMAC_DMA_DMABUSMODE_DMA_ARB_SCH_Msk = 0x2
	// Bit DMA_ARB_SCH.
	EMAC_DMA_DMABUSMODE_DMA_ARB_SCH = 0x2
	// Position of DESC_SKIP_LEN field.
	EMAC_DMA_DMABUSMODE_DESC_SKIP_LEN_Pos = 0x2
	// Bit mask of DESC_SKIP_LEN field.
	EMAC_DMA_DMABUSMODE_DESC_SKIP_LEN_Msk = 0x7c
	// Position of ALT_DESC_SIZE field.
	EMAC_DMA_DMABUSMODE_ALT_DESC_SIZE_Pos = 0x7
	// Bit mask of ALT_DESC_SIZE field.
	EMAC_DMA_DMABUSMODE_ALT_DESC_SIZE_Msk = 0x80
	// Bit ALT_DESC_SIZE.
	EMAC_DMA_DMABUSMODE_ALT_DESC_SIZE = 0x80
	// Position of PROG_BURST_LEN field.
	EMAC_DMA_DMABUSMODE_PROG_BURST_LEN_Pos = 0x8
	// Bit mask of PROG_BURST_LEN field.
	EMAC_DMA_DMABUSMODE_PROG_BURST_LEN_Msk = 0x3f00
	// Position of PRI_RATIO field.
	EMAC_DMA_DMABUSMODE_PRI_RATIO_Pos = 0xe
	// Bit mask of PRI_RATIO field.
	EMAC_DMA_DMABUSMODE_PRI_RATIO_Msk = 0xc000
	// Position of FIXED_BURST field.
	EMAC_DMA_DMABUSMODE_FIXED_BURST_Pos = 0x10
	// Bit mask of FIXED_BURST field.
	EMAC_DMA_DMABUSMODE_FIXED_BURST_Msk = 0x10000
	// Bit FIXED_BURST.
	EMAC_DMA_DMABUSMODE_FIXED_BURST = 0x10000
	// Position of RX_DMA_PBL field.
	EMAC_DMA_DMABUSMODE_RX_DMA_PBL_Pos = 0x11
	// Bit mask of RX_DMA_PBL field.
	EMAC_DMA_DMABUSMODE_RX_DMA_PBL_Msk = 0x7e0000
	// Position of USE_SEP_PBL field.
	EMAC_DMA_DMABUSMODE_USE_SEP_PBL_Pos = 0x17
	// Bit mask of USE_SEP_PBL field.
	EMAC_DMA_DMABUSMODE_USE_SEP_PBL_Msk = 0x800000
	// Bit USE_SEP_PBL.
	EMAC_DMA_DMABUSMODE_USE_SEP_PBL = 0x800000
	// Position of PBLX8_MODE field.
	EMAC_DMA_DMABUSMODE_PBLX8_MODE_Pos = 0x18
	// Bit mask of PBLX8_MODE field.
	EMAC_DMA_DMABUSMODE_PBLX8_MODE_Msk = 0x1000000
	// Bit PBLX8_MODE.
	EMAC_DMA_DMABUSMODE_PBLX8_MODE = 0x1000000
	// Position of DMAADDRALIBEA field.
	EMAC_DMA_DMABUSMODE_DMAADDRALIBEA_Pos = 0x19
	// Bit mask of DMAADDRALIBEA field.
	EMAC_DMA_DMABUSMODE_DMAADDRALIBEA_Msk = 0x2000000
	// Bit DMAADDRALIBEA.
	EMAC_DMA_DMABUSMODE_DMAADDRALIBEA = 0x2000000
	// Position of DMAMIXEDBURST field.
	EMAC_DMA_DMABUSMODE_DMAMIXEDBURST_Pos = 0x1a
	// Bit mask of DMAMIXEDBURST field.
	EMAC_DMA_DMABUSMODE_DMAMIXEDBURST_Msk = 0x4000000
	// Bit DMAMIXEDBURST.
	EMAC_DMA_DMABUSMODE_DMAMIXEDBURST = 0x4000000

	// DMASTATUS: State of interrupts, errors and other events
	// Position of TRANS_INT field.
	EMAC_DMA_DMASTATUS_TRANS_INT_Pos = 0x0
	// Bit mask of TRANS_INT field.
	EMAC_DMA_DMASTATUS_TRANS_INT_Msk = 0x1
	// Bit TRANS_INT.
	EMAC_DMA_DMASTATUS_TRANS_INT = 0x1
	// Position of TRANS_PROC_STOP field.
	EMAC_DMA_DMASTATUS_TRANS_PROC_STOP_Pos = 0x1
	// Bit mask of TRANS_PROC_STOP field.
	EMAC_DMA_DMASTATUS_TRANS_PROC_STOP_Msk = 0x2
	// Bit TRANS_PROC_STOP.
	EMAC_DMA_DMASTATUS_TRANS_PROC_STOP = 0x2
	// Position of TRANS_BUF_UNAVAIL field.
	EMAC_DMA_DMASTATUS_TRANS_BUF_UNAVAIL_Pos = 0x2
	// Bit mask of TRANS_BUF_UNAVAIL field.
	EMAC_DMA_DMASTATUS_TRANS_BUF_UNAVAIL_Msk = 0x4
	// Bit TRANS_BUF_UNAVAIL.
	EMAC_DMA_DMASTATUS_TRANS_BUF_UNAVAIL = 0x4
	// Position of TRANS_JABBER_TO field.
	EMAC_DMA_DMASTATUS_TRANS_JABBER_TO_Pos = 0x3
	// Bit mask of TRANS_JABBER_TO field.
	EMAC_DMA_DMASTATUS_TRANS_JABBER_TO_Msk = 0x8
	// Bit TRANS_JABBER_TO.
	EMAC_DMA_DMASTATUS_TRANS_JABBER_TO = 0x8
	// Position of RECV_OVFLOW field.
	EMAC_DMA_DMASTATUS_RECV_OVFLOW_Pos = 0x4
	// Bit mask of RECV_OVFLOW field.
	EMAC_DMA_DMASTATUS_RECV_OVFLOW_Msk = 0x10
	// Bit RECV_OVFLOW.
	EMAC_DMA_DMASTATUS_RECV_OVFLOW = 0x10
	// Position of TRANS_UNDFLOW field.
	EMAC_DMA_DMASTATUS_TRANS_UNDFLOW_Pos = 0x5
	// Bit mask of TRANS_UNDFLOW field.
	EMAC_DMA_DMASTATUS_TRANS_UNDFLOW_Msk = 0x20
	// Bit TRANS_UNDFLOW.
	EMAC_DMA_DMASTATUS_TRANS_UNDFLOW = 0x20
	// Position of RECV_INT field.
	EMAC_DMA_DMASTATUS_RECV_INT_Pos = 0x6
	// Bit mask of RECV_INT field.
	EMAC_DMA_DMASTATUS_RECV_INT_Msk = 0x40
	// Bit RECV_INT.
	EMAC_DMA_DMASTATUS_RECV_INT = 0x40
	// Position of RECV_BUF_UNAVAIL field.
	EMAC_DMA_DMASTATUS_RECV_BUF_UNAVAIL_Pos = 0x7
	// Bit mask of RECV_BUF_UNAVAIL field.
	EMAC_DMA_DMASTATUS_RECV_BUF_UNAVAIL_Msk = 0x80
	// Bit RECV_BUF_UNAVAIL.
	EMAC_DMA_DMASTATUS_RECV_BUF_UNAVAIL = 0x80
	// Position of RECV_PROC_STOP field.
	EMAC_DMA_DMASTATUS_RECV_PROC_STOP_Pos = 0x8
	// Bit mask of RECV_PROC_STOP field.
	EMAC_DMA_DMASTATUS_RECV_PROC_STOP_Msk = 0x100
	// Bit RECV_PROC_STOP.
	EMAC_DMA_DMASTATUS_RECV_PROC_STOP = 0x100
	// Position of RECV_WDT_TO field.
	EMAC_DMA_DMASTATUS_RECV_WDT_TO_Pos = 0x9
	// Bit mask of RECV_WDT_TO field.
	EMAC_DMA_DMASTATUS_RECV_WDT_TO_Msk = 0x200
	// Bit RECV_WDT_TO.
	EMAC_DMA_DMASTATUS_RECV_WDT_TO = 0x200
	// Position of EARLY_TRANS_INT field.
	EMAC_DMA_DMASTATUS_EARLY_TRANS_INT_Pos = 0xa
	// Bit mask of EARLY_TRANS_INT field.
	EMAC_DMA_DMASTATUS_EARLY_TRANS_INT_Msk = 0x400
	// Bit EARLY_TRANS_INT.
	EMAC_DMA_DMASTATUS_EARLY_TRANS_INT = 0x400
	// Position of FATAL_BUS_ERR_INT field.
	EMAC_DMA_DMASTATUS_FATAL_BUS_ERR_INT_Pos = 0xd
	// Bit mask of FATAL_BUS_ERR_INT field.
	EMAC_DMA_DMASTATUS_FATAL_BUS_ERR_INT_Msk = 0x2000
	// Bit FATAL_BUS_ERR_INT.
	EMAC_DMA_DMASTATUS_FATAL_BUS_ERR_INT = 0x2000
	// Position of EARLY_RECV_INT field.
	EMAC_DMA_DMASTATUS_EARLY_RECV_INT_Pos = 0xe
	// Bit mask of EARLY_RECV_INT field.
	EMAC_DMA_DMASTATUS_EARLY_RECV_INT_Msk = 0x4000
	// Bit EARLY_RECV_INT.
	EMAC_DMA_DMASTATUS_EARLY_RECV_INT = 0x4000
	// Position of ABN_INT_SUMM field.
	EMAC_DMA_DMASTATUS_ABN_INT_SUMM_Pos = 0xf
	// Bit mask of ABN_INT_SUMM field.
	EMAC_DMA_DMASTATUS_ABN_INT_SUMM_Msk = 0x8000
	// Bit ABN_INT_SUMM.
	EMAC_DMA_DMASTATUS_ABN_INT_SUMM = 0x8000
	// Position of NORM_INT_SUMM field.
	EMAC_DMA_DMASTATUS_NORM_INT_SUMM_Pos = 0x10
	// Bit mask of NORM_INT_SUMM field.
	EMAC_DMA_DMASTATUS_NORM_INT_SUMM_Msk = 0x10000
	// Bit NORM_INT_SUMM.
	EMAC_DMA_DMASTATUS_NORM_INT_SUMM = 0x10000
	// Position of RECV_PROC_STATE field.
	EMAC_DMA_DMASTATUS_RECV_PROC_STATE_Pos = 0x11
	// Bit mask of RECV_PROC_STATE field.
	EMAC_DMA_DMASTATUS_RECV_PROC_STATE_Msk = 0xe0000
	// Position of TRANS_PROC_STATE field.
	EMAC_DMA_DMASTATUS_TRANS_PROC_STATE_Pos = 0x14
	// Bit mask of TRANS_PROC_STATE field.
	EMAC_DMA_DMASTATUS_TRANS_PROC_STATE_Msk = 0x700000
	// Position of ERROR_BITS field.
	EMAC_DMA_DMASTATUS_ERROR_BITS_Pos = 0x17
	// Bit mask of ERROR_BITS field.
	EMAC_DMA_DMASTATUS_ERROR_BITS_Msk = 0x3800000
	// Position of PMT_INT field.
	EMAC_DMA_DMASTATUS_PMT_INT_Pos = 0x1c
	// Bit mask of PMT_INT field.
	EMAC_DMA_DMASTATUS_PMT_INT_Msk = 0x10000000
	// Bit PMT_INT.
	EMAC_DMA_DMASTATUS_PMT_INT = 0x10000000
	// Position of TS_TRI_INT field.
	EMAC_DMA_DMASTATUS_TS_TRI_INT_Pos = 0x1d
	// Bit mask of TS_TRI_INT field.
	EMAC_DMA_DMASTATUS_TS_TRI_INT_Msk = 0x20000000
	// Bit TS_TRI_INT.
	EMAC_DMA_DMASTATUS_TS_TRI_INT = 0x20000000

	// DMAOPERATION_MODE: Receive and Transmit operating modes and command
	// Position of START_STOP_RX field.
	EMAC_DMA_DMAOPERATION_MODE_START_STOP_RX_Pos = 0x1
	// Bit mask of START_STOP_RX field.
	EMAC_DMA_DMAOPERATION_MODE_START_STOP_RX_Msk = 0x2
	// Bit START_STOP_RX.
	EMAC_DMA_DMAOPERATION_MODE_START_STOP_RX = 0x2
	// Position of OPT_SECOND_FRAME field.
	EMAC_DMA_DMAOPERATION_MODE_OPT_SECOND_FRAME_Pos = 0x2
	// Bit mask of OPT_SECOND_FRAME field.
	EMAC_DMA_DMAOPERATION_MODE_OPT_SECOND_FRAME_Msk = 0x4
	// Bit OPT_SECOND_FRAME.
	EMAC_DMA_DMAOPERATION_MODE_OPT_SECOND_FRAME = 0x4
	// Position of RX_THRESH_CTRL field.
	EMAC_DMA_DMAOPERATION_MODE_RX_THRESH_CTRL_Pos = 0x3
	// Bit mask of RX_THRESH_CTRL field.
	EMAC_DMA_DMAOPERATION_MODE_RX_THRESH_CTRL_Msk = 0x18
	// Position of DROP_GFRM field.
	EMAC_DMA_DMAOPERATION_MODE_DROP_GFRM_Pos = 0x5
	// Bit mask of DROP_GFRM field.
	EMAC_DMA_DMAOPERATION_MODE_DROP_GFRM_Msk = 0x20
	// Bit DROP_GFRM.
	EMAC_DMA_DMAOPERATION_MODE_DROP_GFRM = 0x20
	// Position of FWD_UNDER_GF field.
	EMAC_DMA_DMAOPERATION_MODE_FWD_UNDER_GF_Pos = 0x6
	// Bit mask of FWD_UNDER_GF field.
	EMAC_DMA_DMAOPERATION_MODE_FWD_UNDER_GF_Msk = 0x40
	// Bit FWD_UNDER_GF.
	EMAC_DMA_DMAOPERATION_MODE_FWD_UNDER_GF = 0x40
	// Position of FWD_ERR_FRAME field.
	EMAC_DMA_DMAOPERATION_MODE_FWD_ERR_FRAME_Pos = 0x7
	// Bit mask of FWD_ERR_FRAME field.
	EMAC_DMA_DMAOPERATION_MODE_FWD_ERR_FRAME_Msk = 0x80
	// Bit FWD_ERR_FRAME.
	EMAC_DMA_DMAOPERATION_MODE_FWD_ERR_FRAME = 0x80
	// Position of START_STOP_TRANSMISSION_COMMAND field.
	EMAC_DMA_DMAOPERATION_MODE_START_STOP_TRANSMISSION_COMMAND_Pos = 0xd
	// Bit mask of START_STOP_TRANSMISSION_COMMAND field.
	EMAC_DMA_DMAOPERATION_MODE_START_STOP_TRANSMISSION_COMMAND_Msk = 0x2000
	// Bit START_STOP_TRANSMISSION_COMMAND.
	EMAC_DMA_DMAOPERATION_MODE_START_STOP_TRANSMISSION_COMMAND = 0x2000
	// Position of TX_THRESH_CTRL field.
	EMAC_DMA_DMAOPERATION_MODE_TX_THRESH_CTRL_Pos = 0xe
	// Bit mask of TX_THRESH_CTRL field.
	EMAC_DMA_DMAOPERATION_MODE_TX_THRESH_CTRL_Msk = 0x1c000
	// Position of FLUSH_TX_FIFO field.
	EMAC_DMA_DMAOPERATION_MODE_FLUSH_TX_FIFO_Pos = 0x14
	// Bit mask of FLUSH_TX_FIFO field.
	EMAC_DMA_DMAOPERATION_MODE_FLUSH_TX_FIFO_Msk = 0x100000
	// Bit FLUSH_TX_FIFO.
	EMAC_DMA_DMAOPERATION_MODE_FLUSH_TX_FIFO = 0x100000
	// Position of TX_STR_FWD field.
	EMAC_DMA_DMAOPERATION_MODE_TX_STR_FWD_Pos = 0x15
	// Bit mask of TX_STR_FWD field.
	EMAC_DMA_DMAOPERATION_MODE_TX_STR_FWD_Msk = 0x200000
	// Bit TX_STR_FWD.
	EMAC_DMA_DMAOPERATION_MODE_TX_STR_FWD = 0x200000
	// Position of DIS_FLUSH_RECV_FRAMES field.
	EMAC_DMA_DMAOPERATION_MODE_DIS_FLUSH_RECV_FRAMES_Pos = 0x18
	// Bit mask of DIS_FLUSH_RECV_FRAMES field.
	EMAC_DMA_DMAOPERATION_MODE_DIS_FLUSH_RECV_FRAMES_Msk = 0x1000000
	// Bit DIS_FLUSH_RECV_FRAMES.
	EMAC_DMA_DMAOPERATION_MODE_DIS_FLUSH_RECV_FRAMES = 0x1000000
	// Position of RX_STORE_FORWARD field.
	EMAC_DMA_DMAOPERATION_MODE_RX_STORE_FORWARD_Pos = 0x19
	// Bit mask of RX_STORE_FORWARD field.
	EMAC_DMA_DMAOPERATION_MODE_RX_STORE_FORWARD_Msk = 0x2000000
	// Bit RX_STORE_FORWARD.
	EMAC_DMA_DMAOPERATION_MODE_RX_STORE_FORWARD = 0x2000000
	// Position of DIS_DROP_TCPIP_ERR_FRAM field.
	EMAC_DMA_DMAOPERATION_MODE_DIS_DROP_TCPIP_ERR_FRAM_Pos = 0x1a
	// Bit mask of DIS_DROP_TCPIP_ERR_FRAM field.
	EMAC_DMA_DMAOPERATION_MODE_DIS_DROP_TCPIP_ERR_FRAM_Msk = 0x4000000
	// Bit DIS_DROP_TCPIP_ERR_FRAM.
	EMAC_DMA_DMAOPERATION_MODE_DIS_DROP_TCPIP_ERR_FRAM = 0x4000000

	// DMAIN_EN
	// Position of DMAIN_TIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TIE_Pos = 0x0
	// Bit mask of DMAIN_TIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TIE_Msk = 0x1
	// Bit DMAIN_TIE.
	EMAC_DMA_DMAIN_EN_DMAIN_TIE = 0x1
	// Position of DMAIN_TSE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TSE_Pos = 0x1
	// Bit mask of DMAIN_TSE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TSE_Msk = 0x2
	// Bit DMAIN_TSE.
	EMAC_DMA_DMAIN_EN_DMAIN_TSE = 0x2
	// Position of DMAIN_TBUE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TBUE_Pos = 0x2
	// Bit mask of DMAIN_TBUE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TBUE_Msk = 0x4
	// Bit DMAIN_TBUE.
	EMAC_DMA_DMAIN_EN_DMAIN_TBUE = 0x4
	// Position of DMAIN_TJTE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TJTE_Pos = 0x3
	// Bit mask of DMAIN_TJTE field.
	EMAC_DMA_DMAIN_EN_DMAIN_TJTE_Msk = 0x8
	// Bit DMAIN_TJTE.
	EMAC_DMA_DMAIN_EN_DMAIN_TJTE = 0x8
	// Position of DMAIN_OIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_OIE_Pos = 0x4
	// Bit mask of DMAIN_OIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_OIE_Msk = 0x10
	// Bit DMAIN_OIE.
	EMAC_DMA_DMAIN_EN_DMAIN_OIE = 0x10
	// Position of DMAIN_UIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_UIE_Pos = 0x5
	// Bit mask of DMAIN_UIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_UIE_Msk = 0x20
	// Bit DMAIN_UIE.
	EMAC_DMA_DMAIN_EN_DMAIN_UIE = 0x20
	// Position of DMAIN_RIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RIE_Pos = 0x6
	// Bit mask of DMAIN_RIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RIE_Msk = 0x40
	// Bit DMAIN_RIE.
	EMAC_DMA_DMAIN_EN_DMAIN_RIE = 0x40
	// Position of DMAIN_RBUE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RBUE_Pos = 0x7
	// Bit mask of DMAIN_RBUE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RBUE_Msk = 0x80
	// Bit DMAIN_RBUE.
	EMAC_DMA_DMAIN_EN_DMAIN_RBUE = 0x80
	// Position of DMAIN_RSE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RSE_Pos = 0x8
	// Bit mask of DMAIN_RSE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RSE_Msk = 0x100
	// Bit DMAIN_RSE.
	EMAC_DMA_DMAIN_EN_DMAIN_RSE = 0x100
	// Position of DMAIN_RWTE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RWTE_Pos = 0x9
	// Bit mask of DMAIN_RWTE field.
	EMAC_DMA_DMAIN_EN_DMAIN_RWTE_Msk = 0x200
	// Bit DMAIN_RWTE.
	EMAC_DMA_DMAIN_EN_DMAIN_RWTE = 0x200
	// Position of DMAIN_ETIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_ETIE_Pos = 0xa
	// Bit mask of DMAIN_ETIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_ETIE_Msk = 0x400
	// Bit DMAIN_ETIE.
	EMAC_DMA_DMAIN_EN_DMAIN_ETIE = 0x400
	// Position of DMAIN_FBEE field.
	EMAC_DMA_DMAIN_EN_DMAIN_FBEE_Pos = 0xd
	// Bit mask of DMAIN_FBEE field.
	EMAC_DMA_DMAIN_EN_DMAIN_FBEE_Msk = 0x2000
	// Bit DMAIN_FBEE.
	EMAC_DMA_DMAIN_EN_DMAIN_FBEE = 0x2000
	// Position of DMAIN_ERIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_ERIE_Pos = 0xe
	// Bit mask of DMAIN_ERIE field.
	EMAC_DMA_DMAIN_EN_DMAIN_ERIE_Msk = 0x4000
	// Bit DMAIN_ERIE.
	EMAC_DMA_DMAIN_EN_DMAIN_ERIE = 0x4000
	// Position of DMAIN_AISE field.
	EMAC_DMA_DMAIN_EN_DMAIN_AISE_Pos = 0xf
	// Bit mask of DMAIN_AISE field.
	EMAC_DMA_DMAIN_EN_DMAIN_AISE_Msk = 0x8000
	// Bit DMAIN_AISE.
	EMAC_DMA_DMAIN_EN_DMAIN_AISE = 0x8000
	// Position of DMAIN_NISE field.
	EMAC_DMA_DMAIN_EN_DMAIN_NISE_Pos = 0x10
	// Bit mask of DMAIN_NISE field.
	EMAC_DMA_DMAIN_EN_DMAIN_NISE_Msk = 0x10000
	// Bit DMAIN_NISE.
	EMAC_DMA_DMAIN_EN_DMAIN_NISE = 0x10000

	// DMAMISSEDFR: Missed Frame and Buffer Overflow Counter Register
	// Position of MISSED_FC field.
	EMAC_DMA_DMAMISSEDFR_MISSED_FC_Pos = 0x0
	// Bit mask of MISSED_FC field.
	EMAC_DMA_DMAMISSEDFR_MISSED_FC_Msk = 0xffff
	// Position of OVERFLOW_BMFC field.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_BMFC_Pos = 0x10
	// Bit mask of OVERFLOW_BMFC field.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_BMFC_Msk = 0x10000
	// Bit OVERFLOW_BMFC.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_BMFC = 0x10000
	// Position of OVERFLOW_FC field.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_FC_Pos = 0x11
	// Bit mask of OVERFLOW_FC field.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_FC_Msk = 0xffe0000
	// Position of OVERFLOW_BFOC field.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_BFOC_Pos = 0x1c
	// Bit mask of OVERFLOW_BFOC field.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_BFOC_Msk = 0x10000000
	// Bit OVERFLOW_BFOC.
	EMAC_DMA_DMAMISSEDFR_OVERFLOW_BFOC = 0x10000000

	// DMARINTWDTIMER: Watchdog timer count on receive
	// Position of RIWTC field.
	EMAC_DMA_DMARINTWDTIMER_RIWTC_Pos = 0x0
	// Bit mask of RIWTC field.
	EMAC_DMA_DMARINTWDTIMER_RIWTC_Msk = 0xff
)

// Constants for EMAC_EXT: Ethernet Clock, PHY type, and SRAM configuration registers
const (
	// EX_CLKOUT_CONF: RMII clock divider setting
	// Position of DIV_NUM field.
	EMAC_EXT_EX_CLKOUT_CONF_DIV_NUM_Pos = 0x0
	// Bit mask of DIV_NUM field.
	EMAC_EXT_EX_CLKOUT_CONF_DIV_NUM_Msk = 0xf
	// Position of H_DIV_NUM field.
	EMAC_EXT_EX_CLKOUT_CONF_H_DIV_NUM_Pos = 0x4
	// Bit mask of H_DIV_NUM field.
	EMAC_EXT_EX_CLKOUT_CONF_H_DIV_NUM_Msk = 0xf0
	// Position of DLY_NUM field.
	EMAC_EXT_EX_CLKOUT_CONF_DLY_NUM_Pos = 0x8
	// Bit mask of DLY_NUM field.
	EMAC_EXT_EX_CLKOUT_CONF_DLY_NUM_Msk = 0x300

	// EX_OSCCLK_CONF: RMII clock half and whole divider settings
	// Position of DIV_NUM_10M field.
	EMAC_EXT_EX_OSCCLK_CONF_DIV_NUM_10M_Pos = 0x0
	// Bit mask of DIV_NUM_10M field.
	EMAC_EXT_EX_OSCCLK_CONF_DIV_NUM_10M_Msk = 0x3f
	// Position of H_DIV_NUM_10M field.
	EMAC_EXT_EX_OSCCLK_CONF_H_DIV_NUM_10M_Pos = 0x6
	// Bit mask of H_DIV_NUM_10M field.
	EMAC_EXT_EX_OSCCLK_CONF_H_DIV_NUM_10M_Msk = 0xfc0
	// Position of DIV_NUM_100M field.
	EMAC_EXT_EX_OSCCLK_CONF_DIV_NUM_100M_Pos = 0xc
	// Bit mask of DIV_NUM_100M field.
	EMAC_EXT_EX_OSCCLK_CONF_DIV_NUM_100M_Msk = 0x3f000
	// Position of H_DIV_NUM_100M field.
	EMAC_EXT_EX_OSCCLK_CONF_H_DIV_NUM_100M_Pos = 0x12
	// Bit mask of H_DIV_NUM_100M field.
	EMAC_EXT_EX_OSCCLK_CONF_H_DIV_NUM_100M_Msk = 0xfc0000
	// Position of CLK_SEL field.
	EMAC_EXT_EX_OSCCLK_CONF_CLK_SEL_Pos = 0x18
	// Bit mask of CLK_SEL field.
	EMAC_EXT_EX_OSCCLK_CONF_CLK_SEL_Msk = 0x1000000
	// Bit CLK_SEL.
	EMAC_EXT_EX_OSCCLK_CONF_CLK_SEL = 0x1000000

	// EX_CLK_CTRL: Clock enable and external/internal clock selection
	// Position of EXT_EN field.
	EMAC_EXT_EX_CLK_CTRL_EXT_EN_Pos = 0x0
	// Bit mask of EXT_EN field.
	EMAC_EXT_EX_CLK_CTRL_EXT_EN_Msk = 0x1
	// Bit EXT_EN.
	EMAC_EXT_EX_CLK_CTRL_EXT_EN = 0x1
	// Position of INT_EN field.
	EMAC_EXT_EX_CLK_CTRL_INT_EN_Pos = 0x1
	// Bit mask of INT_EN field.
	EMAC_EXT_EX_CLK_CTRL_INT_EN_Msk = 0x2
	// Bit INT_EN.
	EMAC_EXT_EX_CLK_CTRL_INT_EN = 0x2
	// Position of RX_125_CLK_EN field.
	EMAC_EXT_EX_CLK_CTRL_RX_125_CLK_EN_Pos = 0x2
	// Bit mask of RX_125_CLK_EN field.
	EMAC_EXT_EX_CLK_CTRL_RX_125_CLK_EN_Msk = 0x4
	// Bit RX_125_CLK_EN.
	EMAC_EXT_EX_CLK_CTRL_RX_125_CLK_EN = 0x4
	// Position of MII_CLK_TX_EN field.
	EMAC_EXT_EX_CLK_CTRL_MII_CLK_TX_EN_Pos = 0x3
	// Bit mask of MII_CLK_TX_EN field.
	EMAC_EXT_EX_CLK_CTRL_MII_CLK_TX_EN_Msk = 0x8
	// Bit MII_CLK_TX_EN.
	EMAC_EXT_EX_CLK_CTRL_MII_CLK_TX_EN = 0x8
	// Position of MII_CLK_RX_EN field.
	EMAC_EXT_EX_CLK_CTRL_MII_CLK_RX_EN_Pos = 0x4
	// Bit mask of MII_CLK_RX_EN field.
	EMAC_EXT_EX_CLK_CTRL_MII_CLK_RX_EN_Msk = 0x10
	// Bit MII_CLK_RX_EN.
	EMAC_EXT_EX_CLK_CTRL_MII_CLK_RX_EN = 0x10
	// Position of CLK_EN field.
	EMAC_EXT_EX_CLK_CTRL_CLK_EN_Pos = 0x5
	// Bit mask of CLK_EN field.
	EMAC_EXT_EX_CLK_CTRL_CLK_EN_Msk = 0x20
	// Bit CLK_EN.
	EMAC_EXT_EX_CLK_CTRL_CLK_EN = 0x20

	// EX_PHYINF_CONF: Selection of MII/RMII phy
	// Position of INT_REVMII_RX_CLK_SEL field.
	EMAC_EXT_EX_PHYINF_CONF_INT_REVMII_RX_CLK_SEL_Pos = 0x0
	// Bit mask of INT_REVMII_RX_CLK_SEL field.
	EMAC_EXT_EX_PHYINF_CONF_INT_REVMII_RX_CLK_SEL_Msk = 0x1
	// Bit INT_REVMII_RX_CLK_SEL.
	EMAC_EXT_EX_PHYINF_CONF_INT_REVMII_RX_CLK_SEL = 0x1
	// Position of EXT_REVMII_RX_CLK_SEL field.
	EMAC_EXT_EX_PHYINF_CONF_EXT_REVMII_RX_CLK_SEL_Pos = 0x1
	// Bit mask of EXT_REVMII_RX_CLK_SEL field.
	EMAC_EXT_EX_PHYINF_CONF_EXT_REVMII_RX_CLK_SEL_Msk = 0x2
	// Bit EXT_REVMII_RX_CLK_SEL.
	EMAC_EXT_EX_PHYINF_CONF_EXT_REVMII_RX_CLK_SEL = 0x2
	// Position of SBD_FLOWCTRL field.
	EMAC_EXT_EX_PHYINF_CONF_SBD_FLOWCTRL_Pos = 0x2
	// Bit mask of SBD_FLOWCTRL field.
	EMAC_EXT_EX_PHYINF_CONF_SBD_FLOWCTRL_Msk = 0x4
	// Bit SBD_FLOWCTRL.
	EMAC_EXT_EX_PHYINF_CONF_SBD_FLOWCTRL = 0x4
	// Position of CORE_PHY_ADDR field.
	EMAC_EXT_EX_PHYINF_CONF_CORE_PHY_ADDR_Pos = 0x3
	// Bit mask of CORE_PHY_ADDR field.
	EMAC_EXT_EX_PHYINF_CONF_CORE_PHY_ADDR_Msk = 0xf8
	// Position of REVMII_PHY_ADDR field.
	EMAC_EXT_EX_PHYINF_CONF_REVMII_PHY_ADDR_Pos = 0x8
	// Bit mask of REVMII_PHY_ADDR field.
	EMAC_EXT_EX_PHYINF_CONF_REVMII_PHY_ADDR_Msk = 0x1f00
	// Position of PHY_INTF_SEL field.
	EMAC_EXT_EX_PHYINF_CONF_PHY_INTF_SEL_Pos = 0xd
	// Bit mask of PHY_INTF_SEL field.
	EMAC_EXT_EX_PHYINF_CONF_PHY_INTF_SEL_Msk = 0xe000
	// Position of SS_MODE field.
	EMAC_EXT_EX_PHYINF_CONF_SS_MODE_Pos = 0x10
	// Bit mask of SS_MODE field.
	EMAC_EXT_EX_PHYINF_CONF_SS_MODE_Msk = 0x10000
	// Bit SS_MODE.
	EMAC_EXT_EX_PHYINF_CONF_SS_MODE = 0x10000
	// Position of SBD_CLK_GATING_EN field.
	EMAC_EXT_EX_PHYINF_CONF_SBD_CLK_GATING_EN_Pos = 0x11
	// Bit mask of SBD_CLK_GATING_EN field.
	EMAC_EXT_EX_PHYINF_CONF_SBD_CLK_GATING_EN_Msk = 0x20000
	// Bit SBD_CLK_GATING_EN.
	EMAC_EXT_EX_PHYINF_CONF_SBD_CLK_GATING_EN = 0x20000
	// Position of PMT_CTRL_EN field.
	EMAC_EXT_EX_PHYINF_CONF_PMT_CTRL_EN_Pos = 0x12
	// Bit mask of PMT_CTRL_EN field.
	EMAC_EXT_EX_PHYINF_CONF_PMT_CTRL_EN_Msk = 0x40000
	// Bit PMT_CTRL_EN.
	EMAC_EXT_EX_PHYINF_CONF_PMT_CTRL_EN = 0x40000
	// Position of SCR_SMI_DLY_RX_SYNC field.
	EMAC_EXT_EX_PHYINF_CONF_SCR_SMI_DLY_RX_SYNC_Pos = 0x13
	// Bit mask of SCR_SMI_DLY_RX_SYNC field.
	EMAC_EXT_EX_PHYINF_CONF_SCR_SMI_DLY_RX_SYNC_Msk = 0x80000
	// Bit SCR_SMI_DLY_RX_SYNC.
	EMAC_EXT_EX_PHYINF_CONF_SCR_SMI_DLY_RX_SYNC = 0x80000
	// Position of TX_ERR_OUT_EN field.
	EMAC_EXT_EX_PHYINF_CONF_TX_ERR_OUT_EN_Pos = 0x14
	// Bit mask of TX_ERR_OUT_EN field.
	EMAC_EXT_EX_PHYINF_CONF_TX_ERR_OUT_EN_Msk = 0x100000
	// Bit TX_ERR_OUT_EN.
	EMAC_EXT_EX_PHYINF_CONF_TX_ERR_OUT_EN = 0x100000

	// PD_SEL: Ethernet RAM power-down enable
	// Position of RAM_PD_EN field.
	EMAC_EXT_PD_SEL_RAM_PD_EN_Pos = 0x0
	// Bit mask of RAM_PD_EN field.
	EMAC_EXT_PD_SEL_RAM_PD_EN_Msk = 0x3
)

// Constants for EMAC_MAC: Ethernet MAC configuration and control registers
const (
	// EMACCONFIG: MAC configuration
	// Position of PLTF field.
	EMAC_MAC_EMACCONFIG_PLTF_Pos = 0x0
	// Bit mask of PLTF field.
	EMAC_MAC_EMACCONFIG_PLTF_Msk = 0x3
	// Position of RX field.
	EMAC_MAC_EMACCONFIG_RX_Pos = 0x2
	// Bit mask of RX field.
	EMAC_MAC_EMACCONFIG_RX_Msk = 0x4
	// Bit RX.
	EMAC_MAC_EMACCONFIG_RX = 0x4
	// Position of TX field.
	EMAC_MAC_EMACCONFIG_TX_Pos = 0x3
	// Bit mask of TX field.
	EMAC_MAC_EMACCONFIG_TX_Msk = 0x8
	// Bit TX.
	EMAC_MAC_EMACCONFIG_TX = 0x8
	// Position of DEFERRALCHECK field.
	EMAC_MAC_EMACCONFIG_DEFERRALCHECK_Pos = 0x4
	// Bit mask of DEFERRALCHECK field.
	EMAC_MAC_EMACCONFIG_DEFERRALCHECK_Msk = 0x10
	// Bit DEFERRALCHECK.
	EMAC_MAC_EMACCONFIG_DEFERRALCHECK = 0x10
	// Position of BACKOFFLIMIT field.
	EMAC_MAC_EMACCONFIG_BACKOFFLIMIT_Pos = 0x5
	// Bit mask of BACKOFFLIMIT field.
	EMAC_MAC_EMACCONFIG_BACKOFFLIMIT_Msk = 0x60
	// Position of PADCRCSTRIP field.
	EMAC_MAC_EMACCONFIG_PADCRCSTRIP_Pos = 0x7
	// Bit mask of PADCRCSTRIP field.
	EMAC_MAC_EMACCONFIG_PADCRCSTRIP_Msk = 0x80
	// Bit PADCRCSTRIP.
	EMAC_MAC_EMACCONFIG_PADCRCSTRIP = 0x80
	// Position of RETRY field.
	EMAC_MAC_EMACCONFIG_RETRY_Pos = 0x9
	// Bit mask of RETRY field.
	EMAC_MAC_EMACCONFIG_RETRY_Msk = 0x200
	// Bit RETRY.
	EMAC_MAC_EMACCONFIG_RETRY = 0x200
	// Position of RXIPCOFFLOAD field.
	EMAC_MAC_EMACCONFIG_RXIPCOFFLOAD_Pos = 0xa
	// Bit mask of RXIPCOFFLOAD field.
	EMAC_MAC_EMACCONFIG_RXIPCOFFLOAD_Msk = 0x400
	// Bit RXIPCOFFLOAD.
	EMAC_MAC_EMACCONFIG_RXIPCOFFLOAD = 0x400
	// Position of DUPLEX field.
	EMAC_MAC_EMACCONFIG_DUPLEX_Pos = 0xb
	// Bit mask of DUPLEX field.
	EMAC_MAC_EMACCONFIG_DUPLEX_Msk = 0x800
	// Bit DUPLEX.
	EMAC_MAC_EMACCONFIG_DUPLEX = 0x800
	// Position of LOOPBACK field.
	EMAC_MAC_EMACCONFIG_LOOPBACK_Pos = 0xc
	// Bit mask of LOOPBACK field.
	EMAC_MAC_EMACCONFIG_LOOPBACK_Msk = 0x1000
	// Bit LOOPBACK.
	EMAC_MAC_EMACCONFIG_LOOPBACK = 0x1000
	// Position of RXOWN field.
	EMAC_MAC_EMACCONFIG_RXOWN_Pos = 0xd
	// Bit mask of RXOWN field.
	EMAC_MAC_EMACCONFIG_RXOWN_Msk = 0x2000
	// Bit RXOWN.
	EMAC_MAC_EMACCONFIG_RXOWN = 0x2000
	// Position of FESPEED field.
	EMAC_MAC_EMACCONFIG_FESPEED_Pos = 0xe
	// Bit mask of FESPEED field.
	EMAC_MAC_EMACCONFIG_FESPEED_Msk = 0x4000
	// Bit FESPEED.
	EMAC_MAC_EMACCONFIG_FESPEED = 0x4000
	// Position of MII field.
	EMAC_MAC_EMACCONFIG_MII_Pos = 0xf
	// Bit mask of MII field.
	EMAC_MAC_EMACCONFIG_MII_Msk = 0x8000
	// Bit MII.
	EMAC_MAC_EMACCONFIG_MII = 0x8000
	// Position of DISABLECRS field.
	EMAC_MAC_EMACCONFIG_DISABLECRS_Pos = 0x10
	// Bit mask of DISABLECRS field.
	EMAC_MAC_EMACCONFIG_DISABLECRS_Msk = 0x10000
	// Bit DISABLECRS.
	EMAC_MAC_EMACCONFIG_DISABLECRS = 0x10000
	// Position of INTERFRAMEGAP field.
	EMAC_MAC_EMACCONFIG_INTERFRAMEGAP_Pos = 0x11
	// Bit mask of INTERFRAMEGAP field.
	EMAC_MAC_EMACCONFIG_INTERFRAMEGAP_Msk = 0xe0000
	// Position of JUMBOFRAME field.
	EMAC_MAC_EMACCONFIG_JUMBOFRAME_Pos = 0x14
	// Bit mask of JUMBOFRAME field.
	EMAC_MAC_EMACCONFIG_JUMBOFRAME_Msk = 0x100000
	// Bit JUMBOFRAME.
	EMAC_MAC_EMACCONFIG_JUMBOFRAME = 0x100000
	// Position of JABBER field.
	EMAC_MAC_EMACCONFIG_JABBER_Pos = 0x16
	// Bit mask of JABBER field.
	EMAC_MAC_EMACCONFIG_JABBER_Msk = 0x400000
	// Bit JABBER.
	EMAC_MAC_EMACCONFIG_JABBER = 0x400000
	// Position of WATCHDOG field.
	EMAC_MAC_EMACCONFIG_WATCHDOG_Pos = 0x17
	// Bit mask of WATCHDOG field.
	EMAC_MAC_EMACCONFIG_WATCHDOG_Msk = 0x800000
	// Bit WATCHDOG.
	EMAC_MAC_EMACCONFIG_WATCHDOG = 0x800000
	// Position of ASS2KP field.
	EMAC_MAC_EMACCONFIG_ASS2KP_Pos = 0x1b
	// Bit mask of ASS2KP field.
	EMAC_MAC_EMACCONFIG_ASS2KP_Msk = 0x8000000
	// Bit ASS2KP.
	EMAC_MAC_EMACCONFIG_ASS2KP = 0x8000000
	// Position of SAIRC field.
	EMAC_MAC_EMACCONFIG_SAIRC_Pos = 0x1c
	// Bit mask of SAIRC field.
	EMAC_MAC_EMACCONFIG_SAIRC_Msk = 0x70000000

	// EMACFF: Frame filter settings
	// Position of PMODE field.
	EMAC_MAC_EMACFF_PMODE_Pos = 0x0
	// Bit mask of PMODE field.
	EMAC_MAC_EMACFF_PMODE_Msk = 0x1
	// Bit PMODE.
	EMAC_MAC_EMACFF_PMODE = 0x1
	// Position of DAIF field.
	EMAC_MAC_EMACFF_DAIF_Pos = 0x3
	// Bit mask of DAIF field.
	EMAC_MAC_EMACFF_DAIF_Msk = 0x8
	// Bit DAIF.
	EMAC_MAC_EMACFF_DAIF = 0x8
	// Position of PAM field.
	EMAC_MAC_EMACFF_PAM_Pos = 0x4
	// Bit mask of PAM field.
	EMAC_MAC_EMACFF_PAM_Msk = 0x10
	// Bit PAM.
	EMAC_MAC_EMACFF_PAM = 0x10
	// Position of DBF field.
	EMAC_MAC_EMACFF_DBF_Pos = 0x5
	// Bit mask of DBF field.
	EMAC_MAC_EMACFF_DBF_Msk = 0x20
	// Bit DBF.
	EMAC_MAC_EMACFF_DBF = 0x20
	// Position of PCF field.
	EMAC_MAC_EMACFF_PCF_Pos = 0x6
	// Bit mask of PCF field.
	EMAC_MAC_EMACFF_PCF_Msk = 0xc0
	// Position of SAIF field.
	EMAC_MAC_EMACFF_SAIF_Pos = 0x8
	// Bit mask of SAIF field.
	EMAC_MAC_EMACFF_SAIF_Msk = 0x100
	// Bit SAIF.
	EMAC_MAC_EMACFF_SAIF = 0x100
	// Position of SAFE field.
	EMAC_MAC_EMACFF_SAFE_Pos = 0x9
	// Bit mask of SAFE field.
	EMAC_MAC_EMACFF_SAFE_Msk = 0x200
	// Bit SAFE.
	EMAC_MAC_EMACFF_SAFE = 0x200
	// Position of RECEIVE_ALL field.
	EMAC_MAC_EMACFF_RECEIVE_ALL_Pos = 0x1f
	// Bit mask of RECEIVE_ALL field.
	EMAC_MAC_EMACFF_RECEIVE_ALL_Msk = 0x80000000
	// Bit RECEIVE_ALL.
	EMAC_MAC_EMACFF_RECEIVE_ALL = 0x80000000

	// EMACGMIIADDR: PHY configuration access
	// Position of MIIBUSY field.
	EMAC_MAC_EMACGMIIADDR_MIIBUSY_Pos = 0x0
	// Bit mask of MIIBUSY field.
	EMAC_MAC_EMACGMIIADDR_MIIBUSY_Msk = 0x1
	// Bit MIIBUSY.
	EMAC_MAC_EMACGMIIADDR_MIIBUSY = 0x1
	// Position of MIIWRITE field.
	EMAC_MAC_EMACGMIIADDR_MIIWRITE_Pos = 0x1
	// Bit mask of MIIWRITE field.
	EMAC_MAC_EMACGMIIADDR_MIIWRITE_Msk = 0x2
	// Bit MIIWRITE.
	EMAC_MAC_EMACGMIIADDR_MIIWRITE = 0x2
	// Position of MIICSRCLK field.
	EMAC_MAC_EMACGMIIADDR_MIICSRCLK_Pos = 0x2
	// Bit mask of MIICSRCLK field.
	EMAC_MAC_EMACGMIIADDR_MIICSRCLK_Msk = 0x3c
	// Position of MIIREG field.
	EMAC_MAC_EMACGMIIADDR_MIIREG_Pos = 0x6
	// Bit mask of MIIREG field.
	EMAC_MAC_EMACGMIIADDR_MIIREG_Msk = 0x7c0
	// Position of MIIDEV field.
	EMAC_MAC_EMACGMIIADDR_MIIDEV_Pos = 0xb
	// Bit mask of MIIDEV field.
	EMAC_MAC_EMACGMIIADDR_MIIDEV_Msk = 0xf800

	// EMACMIIDATA: PHY data read write
	// Position of MII_DATA field.
	EMAC_MAC_EMACMIIDATA_MII_DATA_Pos = 0x0
	// Bit mask of MII_DATA field.
	EMAC_MAC_EMACMIIDATA_MII_DATA_Msk = 0xffff

	// EMACFC: Frame flow control
	// Position of FCBBA field.
	EMAC_MAC_EMACFC_FCBBA_Pos = 0x0
	// Bit mask of FCBBA field.
	EMAC_MAC_EMACFC_FCBBA_Msk = 0x1
	// Bit FCBBA.
	EMAC_MAC_EMACFC_FCBBA = 0x1
	// Position of TFCE field.
	EMAC_MAC_EMACFC_TFCE_Pos = 0x1
	// Bit mask of TFCE field.
	EMAC_MAC_EMACFC_TFCE_Msk = 0x2
	// Bit TFCE.
	EMAC_MAC_EMACFC_TFCE = 0x2
	// Position of RFCE field.
	EMAC_MAC_EMACFC_RFCE_Pos = 0x2
	// Bit mask of RFCE field.
	EMAC_MAC_EMACFC_RFCE_Msk = 0x4
	// Bit RFCE.
	EMAC_MAC_EMACFC_RFCE = 0x4
	// Position of UPFD field.
	EMAC_MAC_EMACFC_UPFD_Pos = 0x3
	// Bit mask of UPFD field.
	EMAC_MAC_EMACFC_UPFD_Msk = 0x8
	// Bit UPFD.
	EMAC_MAC_EMACFC_UPFD = 0x8
	// Position of PLT field.
	EMAC_MAC_EMACFC_PLT_Pos = 0x4
	// Bit mask of PLT field.
	EMAC_MAC_EMACFC_PLT_Msk = 0x30
	// Position of DZPQ field.
	EMAC_MAC_EMACFC_DZPQ_Pos = 0x7
	// Bit mask of DZPQ field.
	EMAC_MAC_EMACFC_DZPQ_Msk = 0x80
	// Bit DZPQ.
	EMAC_MAC_EMACFC_DZPQ = 0x80
	// Position of PAUSE_TIME field.
	EMAC_MAC_EMACFC_PAUSE_TIME_Pos = 0x10
	// Bit mask of PAUSE_TIME field.
	EMAC_MAC_EMACFC_PAUSE_TIME_Msk = 0xffff0000

	// EMACDEBUG: Status debugging bits
	// Position of MACRPES field.
	EMAC_MAC_EMACDEBUG_MACRPES_Pos = 0x0
	// Bit mask of MACRPES field.
	EMAC_MAC_EMACDEBUG_MACRPES_Msk = 0x1
	// Bit MACRPES.
	EMAC_MAC_EMACDEBUG_MACRPES = 0x1
	// Position of MACRFFCS field.
	EMAC_MAC_EMACDEBUG_MACRFFCS_Pos = 0x1
	// Bit mask of MACRFFCS field.
	EMAC_MAC_EMACDEBUG_MACRFFCS_Msk = 0x6
	// Position of MTLRFWCAS field.
	EMAC_MAC_EMACDEBUG_MTLRFWCAS_Pos = 0x4
	// Bit mask of MTLRFWCAS field.
	EMAC_MAC_EMACDEBUG_MTLRFWCAS_Msk = 0x10
	// Bit MTLRFWCAS.
	EMAC_MAC_EMACDEBUG_MTLRFWCAS = 0x10
	// Position of MTLRFRCS field.
	EMAC_MAC_EMACDEBUG_MTLRFRCS_Pos = 0x5
	// Bit mask of MTLRFRCS field.
	EMAC_MAC_EMACDEBUG_MTLRFRCS_Msk = 0x60
	// Position of MTLRFFLS field.
	EMAC_MAC_EMACDEBUG_MTLRFFLS_Pos = 0x8
	// Bit mask of MTLRFFLS field.
	EMAC_MAC_EMACDEBUG_MTLRFFLS_Msk = 0x300
	// Position of MACTPES field.
	EMAC_MAC_EMACDEBUG_MACTPES_Pos = 0x10
	// Bit mask of MACTPES field.
	EMAC_MAC_EMACDEBUG_MACTPES_Msk = 0x10000
	// Bit MACTPES.
	EMAC_MAC_EMACDEBUG_MACTPES = 0x10000
	// Position of MACTFCS field.
	EMAC_MAC_EMACDEBUG_MACTFCS_Pos = 0x11
	// Bit mask of MACTFCS field.
	EMAC_MAC_EMACDEBUG_MACTFCS_Msk = 0x60000
	// Position of MACTP field.
	EMAC_MAC_EMACDEBUG_MACTP_Pos = 0x13
	// Bit mask of MACTP field.
	EMAC_MAC_EMACDEBUG_MACTP_Msk = 0x80000
	// Bit MACTP.
	EMAC_MAC_EMACDEBUG_MACTP = 0x80000
	// Position of MTLTFRCS field.
	EMAC_MAC_EMACDEBUG_MTLTFRCS_Pos = 0x14
	// Bit mask of MTLTFRCS field.
	EMAC_MAC_EMACDEBUG_MTLTFRCS_Msk = 0x300000
	// Position of MTLTFWCS field.
	EMAC_MAC_EMACDEBUG_MTLTFWCS_Pos = 0x16
	// Bit mask of MTLTFWCS field.
	EMAC_MAC_EMACDEBUG_MTLTFWCS_Msk = 0x400000
	// Bit MTLTFWCS.
	EMAC_MAC_EMACDEBUG_MTLTFWCS = 0x400000
	// Position of MTLTFNES field.
	EMAC_MAC_EMACDEBUG_MTLTFNES_Pos = 0x18
	// Bit mask of MTLTFNES field.
	EMAC_MAC_EMACDEBUG_MTLTFNES_Msk = 0x1000000
	// Bit MTLTFNES.
	EMAC_MAC_EMACDEBUG_MTLTFNES = 0x1000000
	// Position of MTLTSFFS field.
	EMAC_MAC_EMACDEBUG_MTLTSFFS_Pos = 0x19
	// Bit mask of MTLTSFFS field.
	EMAC_MAC_EMACDEBUG_MTLTSFFS_Msk = 0x2000000
	// Bit MTLTSFFS.
	EMAC_MAC_EMACDEBUG_MTLTSFFS = 0x2000000

	// PMT_CSR: PMT Control and Status
	// Position of PWRDWN field.
	EMAC_MAC_PMT_CSR_PWRDWN_Pos = 0x0
	// Bit mask of PWRDWN field.
	EMAC_MAC_PMT_CSR_PWRDWN_Msk = 0x1
	// Bit PWRDWN.
	EMAC_MAC_PMT_CSR_PWRDWN = 0x1
	// Position of MGKPKTEN field.
	EMAC_MAC_PMT_CSR_MGKPKTEN_Pos = 0x1
	// Bit mask of MGKPKTEN field.
	EMAC_MAC_PMT_CSR_MGKPKTEN_Msk = 0x2
	// Bit MGKPKTEN.
	EMAC_MAC_PMT_CSR_MGKPKTEN = 0x2
	// Position of RWKPKTEN field.
	EMAC_MAC_PMT_CSR_RWKPKTEN_Pos = 0x2
	// Bit mask of RWKPKTEN field.
	EMAC_MAC_PMT_CSR_RWKPKTEN_Msk = 0x4
	// Bit RWKPKTEN.
	EMAC_MAC_PMT_CSR_RWKPKTEN = 0x4
	// Position of MGKPRCVD field.
	EMAC_MAC_PMT_CSR_MGKPRCVD_Pos = 0x5
	// Bit mask of MGKPRCVD field.
	EMAC_MAC_PMT_CSR_MGKPRCVD_Msk = 0x20
	// Bit MGKPRCVD.
	EMAC_MAC_PMT_CSR_MGKPRCVD = 0x20
	// Position of RWKPRCVD field.
	EMAC_MAC_PMT_CSR_RWKPRCVD_Pos = 0x6
	// Bit mask of RWKPRCVD field.
	EMAC_MAC_PMT_CSR_RWKPRCVD_Msk = 0x40
	// Bit RWKPRCVD.
	EMAC_MAC_PMT_CSR_RWKPRCVD = 0x40
	// Position of GLBLUCAST field.
	EMAC_MAC_PMT_CSR_GLBLUCAST_Pos = 0x9
	// Bit mask of GLBLUCAST field.
	EMAC_MAC_PMT_CSR_GLBLUCAST_Msk = 0x200
	// Bit GLBLUCAST.
	EMAC_MAC_PMT_CSR_GLBLUCAST = 0x200
	// Position of RWKPTR field.
	EMAC_MAC_PMT_CSR_RWKPTR_Pos = 0x18
	// Bit mask of RWKPTR field.
	EMAC_MAC_PMT_CSR_RWKPTR_Msk = 0x1f000000
	// Position of RWKFILTRST field.
	EMAC_MAC_PMT_CSR_RWKFILTRST_Pos = 0x1f
	// Bit mask of RWKFILTRST field.
	EMAC_MAC_PMT_CSR_RWKFILTRST_Msk = 0x80000000
	// Bit RWKFILTRST.
	EMAC_MAC_PMT_CSR_RWKFILTRST = 0x80000000

	// EMACLPI_CRS: LPI Control and Status
	// Position of TLPIEN field.
	EMAC_MAC_EMACLPI_CRS_TLPIEN_Pos = 0x0
	// Bit mask of TLPIEN field.
	EMAC_MAC_EMACLPI_CRS_TLPIEN_Msk = 0x1
	// Bit TLPIEN.
	EMAC_MAC_EMACLPI_CRS_TLPIEN = 0x1
	// Position of TLPIEX field.
	EMAC_MAC_EMACLPI_CRS_TLPIEX_Pos = 0x1
	// Bit mask of TLPIEX field.
	EMAC_MAC_EMACLPI_CRS_TLPIEX_Msk = 0x2
	// Bit TLPIEX.
	EMAC_MAC_EMACLPI_CRS_TLPIEX = 0x2
	// Position of RLPIEN field.
	EMAC_MAC_EMACLPI_CRS_RLPIEN_Pos = 0x2
	// Bit mask of RLPIEN field.
	EMAC_MAC_EMACLPI_CRS_RLPIEN_Msk = 0x4
	// Bit RLPIEN.
	EMAC_MAC_EMACLPI_CRS_RLPIEN = 0x4
	// Position of RLPIEX field.
	EMAC_MAC_EMACLPI_CRS_RLPIEX_Pos = 0x3
	// Bit mask of RLPIEX field.
	EMAC_MAC_EMACLPI_CRS_RLPIEX_Msk = 0x8
	// Bit RLPIEX.
	EMAC_MAC_EMACLPI_CRS_RLPIEX = 0x8
	// Position of TLPIST field.
	EMAC_MAC_EMACLPI_CRS_TLPIST_Pos = 0x8
	// Bit mask of TLPIST field.
	EMAC_MAC_EMACLPI_CRS_TLPIST_Msk = 0x100
	// Bit TLPIST.
	EMAC_MAC_EMACLPI_CRS_TLPIST = 0x100
	// Position of RLPIST field.
	EMAC_MAC_EMACLPI_CRS_RLPIST_Pos = 0x9
	// Bit mask of RLPIST field.
	EMAC_MAC_EMACLPI_CRS_RLPIST_Msk = 0x200
	// Bit RLPIST.
	EMAC_MAC_EMACLPI_CRS_RLPIST = 0x200
	// Position of LPIEN field.
	EMAC_MAC_EMACLPI_CRS_LPIEN_Pos = 0x10
	// Bit mask of LPIEN field.
	EMAC_MAC_EMACLPI_CRS_LPIEN_Msk = 0x10000
	// Bit LPIEN.
	EMAC_MAC_EMACLPI_CRS_LPIEN = 0x10000
	// Position of PLS field.
	EMAC_MAC_EMACLPI_CRS_PLS_Pos = 0x11
	// Bit mask of PLS field.
	EMAC_MAC_EMACLPI_CRS_PLS_Msk = 0x20000
	// Bit PLS.
	EMAC_MAC_EMACLPI_CRS_PLS = 0x20000
	// Position of LPITXA field.
	EMAC_MAC_EMACLPI_CRS_LPITXA_Pos = 0x13
	// Bit mask of LPITXA field.
	EMAC_MAC_EMACLPI_CRS_LPITXA_Msk = 0x80000
	// Bit LPITXA.
	EMAC_MAC_EMACLPI_CRS_LPITXA = 0x80000

	// EMACLPITIMERSCONTROL: LPI Timers Control
	// Position of LPI_TW_TIMER field.
	EMAC_MAC_EMACLPITIMERSCONTROL_LPI_TW_TIMER_Pos = 0x0
	// Bit mask of LPI_TW_TIMER field.
	EMAC_MAC_EMACLPITIMERSCONTROL_LPI_TW_TIMER_Msk = 0xffff
	// Position of LPI_LS_TIMER field.
	EMAC_MAC_EMACLPITIMERSCONTROL_LPI_LS_TIMER_Pos = 0x10
	// Bit mask of LPI_LS_TIMER field.
	EMAC_MAC_EMACLPITIMERSCONTROL_LPI_LS_TIMER_Msk = 0x3ff0000

	// EMACINTS: Interrupt status
	// Position of PMTINTS field.
	EMAC_MAC_EMACINTS_PMTINTS_Pos = 0x3
	// Bit mask of PMTINTS field.
	EMAC_MAC_EMACINTS_PMTINTS_Msk = 0x8
	// Bit PMTINTS.
	EMAC_MAC_EMACINTS_PMTINTS = 0x8
	// Position of LPIIS field.
	EMAC_MAC_EMACINTS_LPIIS_Pos = 0xa
	// Bit mask of LPIIS field.
	EMAC_MAC_EMACINTS_LPIIS_Msk = 0x400
	// Bit LPIIS.
	EMAC_MAC_EMACINTS_LPIIS = 0x400

	// EMACINTMASK: Interrupt mask
	// Position of PMTINTMASK field.
	EMAC_MAC_EMACINTMASK_PMTINTMASK_Pos = 0x3
	// Bit mask of PMTINTMASK field.
	EMAC_MAC_EMACINTMASK_PMTINTMASK_Msk = 0x8
	// Bit PMTINTMASK.
	EMAC_MAC_EMACINTMASK_PMTINTMASK = 0x8
	// Position of LPIINTMASK field.
	EMAC_MAC_EMACINTMASK_LPIINTMASK_Pos = 0xa
	// Bit mask of LPIINTMASK field.
	EMAC_MAC_EMACINTMASK_LPIINTMASK_Msk = 0x400
	// Bit LPIINTMASK.
	EMAC_MAC_EMACINTMASK_LPIINTMASK = 0x400

	// EMACADDR0HIGH: Upper 16 bits of the first 6-byte MAC address
	// Position of ADDRESS0_HI field.
	EMAC_MAC_EMACADDR0HIGH_ADDRESS0_HI_Pos = 0x0
	// Bit mask of ADDRESS0_HI field.
	EMAC_MAC_EMACADDR0HIGH_ADDRESS0_HI_Msk = 0xffff
	// Position of ADDRESS_ENABLE0 field.
	EMAC_MAC_EMACADDR0HIGH_ADDRESS_ENABLE0_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE0 field.
	EMAC_MAC_EMACADDR0HIGH_ADDRESS_ENABLE0_Msk = 0x80000000
	// Bit ADDRESS_ENABLE0.
	EMAC_MAC_EMACADDR0HIGH_ADDRESS_ENABLE0 = 0x80000000

	// EMACADDR1HIGH: Upper 16 bits of the second 6-byte MAC address
	// Position of MAC_ADDRESS1_HI field.
	EMAC_MAC_EMACADDR1HIGH_MAC_ADDRESS1_HI_Pos = 0x0
	// Bit mask of MAC_ADDRESS1_HI field.
	EMAC_MAC_EMACADDR1HIGH_MAC_ADDRESS1_HI_Msk = 0xffff
	// Position of MASK_BYTE_CONTROL field.
	EMAC_MAC_EMACADDR1HIGH_MASK_BYTE_CONTROL_Pos = 0x18
	// Bit mask of MASK_BYTE_CONTROL field.
	EMAC_MAC_EMACADDR1HIGH_MASK_BYTE_CONTROL_Msk = 0x3f000000
	// Position of SOURCE_ADDRESS field.
	EMAC_MAC_EMACADDR1HIGH_SOURCE_ADDRESS_Pos = 0x1e
	// Bit mask of SOURCE_ADDRESS field.
	EMAC_MAC_EMACADDR1HIGH_SOURCE_ADDRESS_Msk = 0x40000000
	// Bit SOURCE_ADDRESS.
	EMAC_MAC_EMACADDR1HIGH_SOURCE_ADDRESS = 0x40000000
	// Position of ADDRESS_ENABLE1 field.
	EMAC_MAC_EMACADDR1HIGH_ADDRESS_ENABLE1_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE1 field.
	EMAC_MAC_EMACADDR1HIGH_ADDRESS_ENABLE1_Msk = 0x80000000
	// Bit ADDRESS_ENABLE1.
	EMAC_MAC_EMACADDR1HIGH_ADDRESS_ENABLE1 = 0x80000000

	// EMACADDR2HIGH: Upper 16 bits of the third 6-byte MAC address
	// Position of MAC_ADDRESS2_HI field.
	EMAC_MAC_EMACADDR2HIGH_MAC_ADDRESS2_HI_Pos = 0x0
	// Bit mask of MAC_ADDRESS2_HI field.
	EMAC_MAC_EMACADDR2HIGH_MAC_ADDRESS2_HI_Msk = 0xffff
	// Position of MASK_BYTE_CONTROL2 field.
	EMAC_MAC_EMACADDR2HIGH_MASK_BYTE_CONTROL2_Pos = 0x18
	// Bit mask of MASK_BYTE_CONTROL2 field.
	EMAC_MAC_EMACADDR2HIGH_MASK_BYTE_CONTROL2_Msk = 0x3f000000
	// Position of SOURCE_ADDRESS2 field.
	EMAC_MAC_EMACADDR2HIGH_SOURCE_ADDRESS2_Pos = 0x1e
	// Bit mask of SOURCE_ADDRESS2 field.
	EMAC_MAC_EMACADDR2HIGH_SOURCE_ADDRESS2_Msk = 0x40000000
	// Bit SOURCE_ADDRESS2.
	EMAC_MAC_EMACADDR2HIGH_SOURCE_ADDRESS2 = 0x40000000
	// Position of ADDRESS_ENABLE2 field.
	EMAC_MAC_EMACADDR2HIGH_ADDRESS_ENABLE2_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE2 field.
	EMAC_MAC_EMACADDR2HIGH_ADDRESS_ENABLE2_Msk = 0x80000000
	// Bit ADDRESS_ENABLE2.
	EMAC_MAC_EMACADDR2HIGH_ADDRESS_ENABLE2 = 0x80000000

	// EMACADDR3HIGH: Upper 16 bits of the fourth 6-byte MAC address
	// Position of MAC_ADDRESS3_HI field.
	EMAC_MAC_EMACADDR3HIGH_MAC_ADDRESS3_HI_Pos = 0x0
	// Bit mask of MAC_ADDRESS3_HI field.
	EMAC_MAC_EMACADDR3HIGH_MAC_ADDRESS3_HI_Msk = 0xffff
	// Position of MASK_BYTE_CONTROL3 field.
	EMAC_MAC_EMACADDR3HIGH_MASK_BYTE_CONTROL3_Pos = 0x18
	// Bit mask of MASK_BYTE_CONTROL3 field.
	EMAC_MAC_EMACADDR3HIGH_MASK_BYTE_CONTROL3_Msk = 0x3f000000
	// Position of SOURCE_ADDRESS3 field.
	EMAC_MAC_EMACADDR3HIGH_SOURCE_ADDRESS3_Pos = 0x1e
	// Bit mask of SOURCE_ADDRESS3 field.
	EMAC_MAC_EMACADDR3HIGH_SOURCE_ADDRESS3_Msk = 0x40000000
	// Bit SOURCE_ADDRESS3.
	EMAC_MAC_EMACADDR3HIGH_SOURCE_ADDRESS3 = 0x40000000
	// Position of ADDRESS_ENABLE3 field.
	EMAC_MAC_EMACADDR3HIGH_ADDRESS_ENABLE3_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE3 field.
	EMAC_MAC_EMACADDR3HIGH_ADDRESS_ENABLE3_Msk = 0x80000000
	// Bit ADDRESS_ENABLE3.
	EMAC_MAC_EMACADDR3HIGH_ADDRESS_ENABLE3 = 0x80000000

	// EMACADDR4HIGH: Upper 16 bits of the fifth 6-byte MAC address
	// Position of MAC_ADDRESS4_HI field.
	EMAC_MAC_EMACADDR4HIGH_MAC_ADDRESS4_HI_Pos = 0x0
	// Bit mask of MAC_ADDRESS4_HI field.
	EMAC_MAC_EMACADDR4HIGH_MAC_ADDRESS4_HI_Msk = 0xffff
	// Position of MASK_BYTE_CONTROL4 field.
	EMAC_MAC_EMACADDR4HIGH_MASK_BYTE_CONTROL4_Pos = 0x18
	// Bit mask of MASK_BYTE_CONTROL4 field.
	EMAC_MAC_EMACADDR4HIGH_MASK_BYTE_CONTROL4_Msk = 0x3f000000
	// Position of SOURCE_ADDRESS4 field.
	EMAC_MAC_EMACADDR4HIGH_SOURCE_ADDRESS4_Pos = 0x1e
	// Bit mask of SOURCE_ADDRESS4 field.
	EMAC_MAC_EMACADDR4HIGH_SOURCE_ADDRESS4_Msk = 0x40000000
	// Bit SOURCE_ADDRESS4.
	EMAC_MAC_EMACADDR4HIGH_SOURCE_ADDRESS4 = 0x40000000
	// Position of ADDRESS_ENABLE4 field.
	EMAC_MAC_EMACADDR4HIGH_ADDRESS_ENABLE4_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE4 field.
	EMAC_MAC_EMACADDR4HIGH_ADDRESS_ENABLE4_Msk = 0x80000000
	// Bit ADDRESS_ENABLE4.
	EMAC_MAC_EMACADDR4HIGH_ADDRESS_ENABLE4 = 0x80000000

	// EMACADDR5HIGH: Upper 16 bits of the sixth 6-byte MAC address
	// Position of MAC_ADDRESS5_HI field.
	EMAC_MAC_EMACADDR5HIGH_MAC_ADDRESS5_HI_Pos = 0x0
	// Bit mask of MAC_ADDRESS5_HI field.
	EMAC_MAC_EMACADDR5HIGH_MAC_ADDRESS5_HI_Msk = 0xffff
	// Position of MASK_BYTE_CONTROL5 field.
	EMAC_MAC_EMACADDR5HIGH_MASK_BYTE_CONTROL5_Pos = 0x18
	// Bit mask of MASK_BYTE_CONTROL5 field.
	EMAC_MAC_EMACADDR5HIGH_MASK_BYTE_CONTROL5_Msk = 0x3f000000
	// Position of SOURCE_ADDRESS5 field.
	EMAC_MAC_EMACADDR5HIGH_SOURCE_ADDRESS5_Pos = 0x1e
	// Bit mask of SOURCE_ADDRESS5 field.
	EMAC_MAC_EMACADDR5HIGH_SOURCE_ADDRESS5_Msk = 0x40000000
	// Bit SOURCE_ADDRESS5.
	EMAC_MAC_EMACADDR5HIGH_SOURCE_ADDRESS5 = 0x40000000
	// Position of ADDRESS_ENABLE5 field.
	EMAC_MAC_EMACADDR5HIGH_ADDRESS_ENABLE5_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE5 field.
	EMAC_MAC_EMACADDR5HIGH_ADDRESS_ENABLE5_Msk = 0x80000000
	// Bit ADDRESS_ENABLE5.
	EMAC_MAC_EMACADDR5HIGH_ADDRESS_ENABLE5 = 0x80000000

	// EMACADDR6HIGH: Upper 16 bits of the seventh 6-byte MAC address
	// Position of MAC_ADDRESS6_HI field.
	EMAC_MAC_EMACADDR6HIGH_MAC_ADDRESS6_HI_Pos = 0x0
	// Bit mask of MAC_ADDRESS6_HI field.
	EMAC_MAC_EMACADDR6HIGH_MAC_ADDRESS6_HI_Msk = 0xffff
	// Position of MASK_BYTE_CONTROL6 field.
	EMAC_MAC_EMACADDR6HIGH_MASK_BYTE_CONTROL6_Pos = 0x18
	// Bit mask of MASK_BYTE_CONTROL6 field.
	EMAC_MAC_EMACADDR6HIGH_MASK_BYTE_CONTROL6_Msk = 0x3f000000
	// Position of SOURCE_ADDRESS6 field.
	EMAC_MAC_EMACADDR6HIGH_SOURCE_ADDRESS6_Pos = 0x1e
	// Bit mask of SOURCE_ADDRESS6 field.
	EMAC_MAC_EMACADDR6HIGH_SOURCE_ADDRESS6_Msk = 0x40000000
	// Bit SOURCE_ADDRESS6.
	EMAC_MAC_EMACADDR6HIGH_SOURCE_ADDRESS6 = 0x40000000
	// Position of ADDRESS_ENABLE6 field.
	EMAC_MAC_EMACADDR6HIGH_ADDRESS_ENABLE6_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE6 field.
	EMAC_MAC_EMACADDR6HIGH_ADDRESS_ENABLE6_Msk = 0x80000000
	// Bit ADDRESS_ENABLE6.
	EMAC_MAC_EMACADDR6HIGH_ADDRESS_ENABLE6 = 0x80000000

	// EMACADDR7HIGH: Upper 16 bits of the eighth 6-byte MAC address
	// Position of MAC_ADDRESS7_HI field.
	EMAC_MAC_EMACADDR7HIGH_MAC_ADDRESS7_HI_Pos = 0x0
	// Bit mask of MAC_ADDRESS7_HI field.
	EMAC_MAC_EMACADDR7HIGH_MAC_ADDRESS7_HI_Msk = 0xffff
	// Position of MASK_BYTE_CONTROL7 field.
	EMAC_MAC_EMACADDR7HIGH_MASK_BYTE_CONTROL7_Pos = 0x18
	// Bit mask of MASK_BYTE_CONTROL7 field.
	EMAC_MAC_EMACADDR7HIGH_MASK_BYTE_CONTROL7_Msk = 0x3f000000
	// Position of SOURCE_ADDRESS7 field.
	EMAC_MAC_EMACADDR7HIGH_SOURCE_ADDRESS7_Pos = 0x1e
	// Bit mask of SOURCE_ADDRESS7 field.
	EMAC_MAC_EMACADDR7HIGH_SOURCE_ADDRESS7_Msk = 0x40000000
	// Bit SOURCE_ADDRESS7.
	EMAC_MAC_EMACADDR7HIGH_SOURCE_ADDRESS7 = 0x40000000
	// Position of ADDRESS_ENABLE7 field.
	EMAC_MAC_EMACADDR7HIGH_ADDRESS_ENABLE7_Pos = 0x1f
	// Bit mask of ADDRESS_ENABLE7 field.
	EMAC_MAC_EMACADDR7HIGH_ADDRESS_ENABLE7_Msk = 0x80000000
	// Bit ADDRESS_ENABLE7.
	EMAC_MAC_EMACADDR7HIGH_ADDRESS_ENABLE7 = 0x80000000

	// EMACCSTATUS: Link communication status
	// Position of LINK_MODE field.
	EMAC_MAC_EMACCSTATUS_LINK_MODE_Pos = 0x0
	// Bit mask of LINK_MODE field.
	EMAC_MAC_EMACCSTATUS_LINK_MODE_Msk = 0x1
	// Bit LINK_MODE.
	EMAC_MAC_EMACCSTATUS_LINK_MODE = 0x1
	// Position of LINK_SPEED field.
	EMAC_MAC_EMACCSTATUS_LINK_SPEED_Pos = 0x1
	// Bit mask of LINK_SPEED field.
	EMAC_MAC_EMACCSTATUS_LINK_SPEED_Msk = 0x6
	// Position of JABBER_TIMEOUT field.
	EMAC_MAC_EMACCSTATUS_JABBER_TIMEOUT_Pos = 0x4
	// Bit mask of JABBER_TIMEOUT field.
	EMAC_MAC_EMACCSTATUS_JABBER_TIMEOUT_Msk = 0x10
	// Bit JABBER_TIMEOUT.
	EMAC_MAC_EMACCSTATUS_JABBER_TIMEOUT = 0x10

	// EMACWDOGTO: Watchdog timeout control
	// Position of WDOGTO field.
	EMAC_MAC_EMACWDOGTO_WDOGTO_Pos = 0x0
	// Bit mask of WDOGTO field.
	EMAC_MAC_EMACWDOGTO_WDOGTO_Msk = 0x3fff
	// Position of PWDOGEN field.
	EMAC_MAC_EMACWDOGTO_PWDOGEN_Pos = 0x10
	// Bit mask of PWDOGEN field.
	EMAC_MAC_EMACWDOGTO_PWDOGEN_Msk = 0x10000
	// Bit PWDOGEN.
	EMAC_MAC_EMACWDOGTO_PWDOGEN = 0x10000
)

// Constants for FLASH_ENCRYPTION: FLASH_ENCRYPTION Peripheral
const (
	// BUFFER_0
	// Position of BUFFER field.
	FLASH_ENCRYPTION_BUFFER_BUFFER_Pos = 0x0
	// Bit mask of BUFFER field.
	FLASH_ENCRYPTION_BUFFER_BUFFER_Msk = 0xff

	// START
	// Position of FLASH_START field.
	FLASH_ENCRYPTION_START_FLASH_START_Pos = 0x0
	// Bit mask of FLASH_START field.
	FLASH_ENCRYPTION_START_FLASH_START_Msk = 0xff

	// ADDRESS
	// Position of ADDRESS field.
	FLASH_ENCRYPTION_ADDRESS_ADDRESS_Pos = 0x0
	// Bit mask of ADDRESS field.
	FLASH_ENCRYPTION_ADDRESS_ADDRESS_Msk = 0xff

	// DONE
	// Position of FLASH_DONE field.
	FLASH_ENCRYPTION_DONE_FLASH_DONE_Pos = 0x0
	// Bit mask of FLASH_DONE field.
	FLASH_ENCRYPTION_DONE_FLASH_DONE_Msk = 0x1
	// Bit FLASH_DONE.
	FLASH_ENCRYPTION_DONE_FLASH_DONE = 0x1
)

// Constants for FRC_TIMER: FRC_TIMER Peripheral
const (
	// TIMER_LOAD
	// Position of VALUE field.
	FRC_TIMER_LOAD_VALUE_Pos = 0x0
	// Bit mask of VALUE field.
	FRC_TIMER_LOAD_VALUE_Msk = 0xff

	// TIMER_COUNT
	// Position of TIMER_COUNT field.
	FRC_TIMER_COUNT_TIMER_COUNT_Pos = 0x0
	// Bit mask of TIMER_COUNT field.
	FRC_TIMER_COUNT_TIMER_COUNT_Msk = 0xff

	// TIMER_CTRL
	// Position of TIMER_PRESCALER field.
	FRC_TIMER_CTRL_TIMER_PRESCALER_Pos = 0x1
	// Bit mask of TIMER_PRESCALER field.
	FRC_TIMER_CTRL_TIMER_PRESCALER_Msk = 0x1fe

	// TIMER_INT
	// Position of CLR field.
	FRC_TIMER_INT_CLR_Pos = 0x0
	// Bit mask of CLR field.
	FRC_TIMER_INT_CLR_Msk = 0x1
	// Bit CLR.
	FRC_TIMER_INT_CLR = 0x1

	// TIMER_ALARM
	// Position of TIMER_ALARM field.
	FRC_TIMER_ALARM_TIMER_ALARM_Pos = 0x0
	// Bit mask of TIMER_ALARM field.
	FRC_TIMER_ALARM_TIMER_ALARM_Msk = 0xff
)

// Constants for GPIO: General Purpose Input/Output
const (
	// BT_SELECT
	// Position of BT_SEL field.
	GPIO_BT_SELECT_BT_SEL_Pos = 0x0
	// Bit mask of BT_SEL field.
	GPIO_BT_SELECT_BT_SEL_Msk = 0xffffffff

	// OUT
	// Position of DATA field.
	GPIO_OUT_DATA_Pos = 0x0
	// Bit mask of DATA field.
	GPIO_OUT_DATA_Msk = 0xffffffff

	// OUT_W1TS
	// Position of OUT_DATA_W1TS field.
	GPIO_OUT_W1TS_OUT_DATA_W1TS_Pos = 0x0
	// Bit mask of OUT_DATA_W1TS field.
	GPIO_OUT_W1TS_OUT_DATA_W1TS_Msk = 0xffffffff

	// OUT_W1TC
	// Position of OUT_DATA_W1TC field.
	GPIO_OUT_W1TC_OUT_DATA_W1TC_Pos = 0x0
	// Bit mask of OUT_DATA_W1TC field.
	GPIO_OUT_W1TC_OUT_DATA_W1TC_Msk = 0xffffffff

	// OUT1
	// Position of DATA field.
	GPIO_OUT1_DATA_Pos = 0x0
	// Bit mask of DATA field.
	GPIO_OUT1_DATA_Msk = 0xff

	// OUT1_W1TS
	// Position of OUT1_DATA_W1TS field.
	GPIO_OUT1_W1TS_OUT1_DATA_W1TS_Pos = 0x0
	// Bit mask of OUT1_DATA_W1TS field.
	GPIO_OUT1_W1TS_OUT1_DATA_W1TS_Msk = 0xff

	// OUT1_W1TC
	// Position of OUT1_DATA_W1TC field.
	GPIO_OUT1_W1TC_OUT1_DATA_W1TC_Pos = 0x0
	// Bit mask of OUT1_DATA_W1TC field.
	GPIO_OUT1_W1TC_OUT1_DATA_W1TC_Msk = 0xff

	// SDIO_SELECT
	// Position of SDIO_SEL field.
	GPIO_SDIO_SELECT_SDIO_SEL_Pos = 0x0
	// Bit mask of SDIO_SEL field.
	GPIO_SDIO_SELECT_SDIO_SEL_Msk = 0xff

	// ENABLE
	// Position of DATA field.
	GPIO_ENABLE_DATA_Pos = 0x0
	// Bit mask of DATA field.
	GPIO_ENABLE_DATA_Msk = 0xffffffff

	// ENABLE_W1TS
	// Position of ENABLE_DATA_W1TS field.
	GPIO_ENABLE_W1TS_ENABLE_DATA_W1TS_Pos = 0x0
	// Bit mask of ENABLE_DATA_W1TS field.
	GPIO_ENABLE_W1TS_ENABLE_DATA_W1TS_Msk = 0xffffffff

	// ENABLE_W1TC
	// Position of ENABLE_DATA_W1TC field.
	GPIO_ENABLE_W1TC_ENABLE_DATA_W1TC_Pos = 0x0
	// Bit mask of ENABLE_DATA_W1TC field.
	GPIO_ENABLE_W1TC_ENABLE_DATA_W1TC_Msk = 0xffffffff

	// ENABLE1
	// Position of DATA field.
	GPIO_ENABLE1_DATA_Pos = 0x0
	// Bit mask of DATA field.
	GPIO_ENABLE1_DATA_Msk = 0xff

	// ENABLE1_W1TS
	// Position of ENABLE1_DATA_W1TS field.
	GPIO_ENABLE1_W1TS_ENABLE1_DATA_W1TS_Pos = 0x0
	// Bit mask of ENABLE1_DATA_W1TS field.
	GPIO_ENABLE1_W1TS_ENABLE1_DATA_W1TS_Msk = 0xff

	// ENABLE1_W1TC
	// Position of ENABLE1_DATA_W1TC field.
	GPIO_ENABLE1_W1TC_ENABLE1_DATA_W1TC_Pos = 0x0
	// Bit mask of ENABLE1_DATA_W1TC field.
	GPIO_ENABLE1_W1TC_ENABLE1_DATA_W1TC_Msk = 0xff

	// STRAP
	// Position of STRAPPING field.
	GPIO_STRAP_STRAPPING_Pos = 0x0
	// Bit mask of STRAPPING field.
	GPIO_STRAP_STRAPPING_Msk = 0xffff

	// IN
	// Position of DATA_NEXT field.
	GPIO_IN_DATA_NEXT_Pos = 0x0
	// Bit mask of DATA_NEXT field.
	GPIO_IN_DATA_NEXT_Msk = 0xffffffff

	// IN1
	// Position of DATA_NEXT field.
	GPIO_IN1_DATA_NEXT_Pos = 0x0
	// Bit mask of DATA_NEXT field.
	GPIO_IN1_DATA_NEXT_Msk = 0xff

	// STATUS
	// Position of INT field.
	GPIO_STATUS_INT_Pos = 0x0
	// Bit mask of INT field.
	GPIO_STATUS_INT_Msk = 0xffffffff

	// STATUS_W1TS
	// Position of STATUS_INT_W1TS field.
	GPIO_STATUS_W1TS_STATUS_INT_W1TS_Pos = 0x0
	// Bit mask of STATUS_INT_W1TS field.
	GPIO_STATUS_W1TS_STATUS_INT_W1TS_Msk = 0xffffffff

	// STATUS_W1TC
	// Position of STATUS_INT_W1TC field.
	GPIO_STATUS_W1TC_STATUS_INT_W1TC_Pos = 0x0
	// Bit mask of STATUS_INT_W1TC field.
	GPIO_STATUS_W1TC_STATUS_INT_W1TC_Msk = 0xffffffff

	// STATUS1
	// Position of INT field.
	GPIO_STATUS1_INT_Pos = 0x0
	// Bit mask of INT field.
	GPIO_STATUS1_INT_Msk = 0xff

	// STATUS1_W1TS
	// Position of STATUS1_INT_W1TS field.
	GPIO_STATUS1_W1TS_STATUS1_INT_W1TS_Pos = 0x0
	// Bit mask of STATUS1_INT_W1TS field.
	GPIO_STATUS1_W1TS_STATUS1_INT_W1TS_Msk = 0xff

	// STATUS1_W1TC
	// Position of STATUS1_INT_W1TC field.
	GPIO_STATUS1_W1TC_STATUS1_INT_W1TC_Pos = 0x0
	// Bit mask of STATUS1_INT_W1TC field.
	GPIO_STATUS1_W1TC_STATUS1_INT_W1TC_Msk = 0xff

	// ACPU_INT
	// Position of APPCPU_INT field.
	GPIO_ACPU_INT_APPCPU_INT_Pos = 0x0
	// Bit mask of APPCPU_INT field.
	GPIO_ACPU_INT_APPCPU_INT_Msk = 0xffffffff

	// ACPU_NMI_INT
	// Position of APPCPU_NMI_INT field.
	GPIO_ACPU_NMI_INT_APPCPU_NMI_INT_Pos = 0x0
	// Bit mask of APPCPU_NMI_INT field.
	GPIO_ACPU_NMI_INT_APPCPU_NMI_INT_Msk = 0xffffffff

	// PCPU_INT
	// Position of PROCPU_INT field.
	GPIO_PCPU_INT_PROCPU_INT_Pos = 0x0
	// Bit mask of PROCPU_INT field.
	GPIO_PCPU_INT_PROCPU_INT_Msk = 0xffffffff

	// PCPU_NMI_INT
	// Position of PROCPU_NMI_INT field.
	GPIO_PCPU_NMI_INT_PROCPU_NMI_INT_Pos = 0x0
	// Bit mask of PROCPU_NMI_INT field.
	GPIO_PCPU_NMI_INT_PROCPU_NMI_INT_Msk = 0xffffffff

	// CPUSDIO_INT
	// Position of SDIO_INT field.
	GPIO_CPUSDIO_INT_SDIO_INT_Pos = 0x0
	// Bit mask of SDIO_INT field.
	GPIO_CPUSDIO_INT_SDIO_INT_Msk = 0xffffffff

	// ACPU_INT1
	// Position of APPCPU_INT_H field.
	GPIO_ACPU_INT1_APPCPU_INT_H_Pos = 0x0
	// Bit mask of APPCPU_INT_H field.
	GPIO_ACPU_INT1_APPCPU_INT_H_Msk = 0xff

	// ACPU_NMI_INT1
	// Position of APPCPU_NMI_INT_H field.
	GPIO_ACPU_NMI_INT1_APPCPU_NMI_INT_H_Pos = 0x0
	// Bit mask of APPCPU_NMI_INT_H field.
	GPIO_ACPU_NMI_INT1_APPCPU_NMI_INT_H_Msk = 0xff

	// PCPU_INT1
	// Position of PROCPU_INT_H field.
	GPIO_PCPU_INT1_PROCPU_INT_H_Pos = 0x0
	// Bit mask of PROCPU_INT_H field.
	GPIO_PCPU_INT1_PROCPU_INT_H_Msk = 0xff

	// PCPU_NMI_INT1
	// Position of PROCPU_NMI_INT_H field.
	GPIO_PCPU_NMI_INT1_PROCPU_NMI_INT_H_Pos = 0x0
	// Bit mask of PROCPU_NMI_INT_H field.
	GPIO_PCPU_NMI_INT1_PROCPU_NMI_INT_H_Msk = 0xff

	// CPUSDIO_INT1
	// Position of SDIO_INT_H field.
	GPIO_CPUSDIO_INT1_SDIO_INT_H_Pos = 0x0
	// Bit mask of SDIO_INT_H field.
	GPIO_CPUSDIO_INT1_SDIO_INT_H_Msk = 0xff
	// Position of PIN_PAD_DRIVER field.
	GPIO_CPUSDIO_INT1_PIN_PAD_DRIVER_Pos = 0x2
	// Bit mask of PIN_PAD_DRIVER field.
	GPIO_CPUSDIO_INT1_PIN_PAD_DRIVER_Msk = 0x4
	// Bit PIN_PAD_DRIVER.
	GPIO_CPUSDIO_INT1_PIN_PAD_DRIVER = 0x4
	// Position of PIN_INT_TYPE field.
	GPIO_CPUSDIO_INT1_PIN_INT_TYPE_Pos = 0x7
	// Bit mask of PIN_INT_TYPE field.
	GPIO_CPUSDIO_INT1_PIN_INT_TYPE_Msk = 0x380
	// Position of PIN_WAKEUP_ENABLE field.
	GPIO_CPUSDIO_INT1_PIN_WAKEUP_ENABLE_Pos = 0xa
	// Bit mask of PIN_WAKEUP_ENABLE field.
	GPIO_CPUSDIO_INT1_PIN_WAKEUP_ENABLE_Msk = 0x400
	// Bit PIN_WAKEUP_ENABLE.
	GPIO_CPUSDIO_INT1_PIN_WAKEUP_ENABLE = 0x400
	// Position of PIN_CONFIG field.
	GPIO_CPUSDIO_INT1_PIN_CONFIG_Pos = 0xb
	// Bit mask of PIN_CONFIG field.
	GPIO_CPUSDIO_INT1_PIN_CONFIG_Msk = 0x1800
	// Position of PIN_INT_ENA field.
	GPIO_CPUSDIO_INT1_PIN_INT_ENA_Pos = 0xd
	// Bit mask of PIN_INT_ENA field.
	GPIO_CPUSDIO_INT1_PIN_INT_ENA_Msk = 0x3e000

	// PIN0
	// Position of PAD_DRIVER field.
	GPIO_PIN_PAD_DRIVER_Pos = 0x2
	// Bit mask of PAD_DRIVER field.
	GPIO_PIN_PAD_DRIVER_Msk = 0x4
	// Bit PAD_DRIVER.
	GPIO_PIN_PAD_DRIVER = 0x4
	// Position of INT_TYPE field.
	GPIO_PIN_INT_TYPE_Pos = 0x7
	// Bit mask of INT_TYPE field.
	GPIO_PIN_INT_TYPE_Msk = 0x380
	// Position of WAKEUP_ENABLE field.
	GPIO_PIN_WAKEUP_ENABLE_Pos = 0xa
	// Bit mask of WAKEUP_ENABLE field.
	GPIO_PIN_WAKEUP_ENABLE_Msk = 0x400
	// Bit WAKEUP_ENABLE.
	GPIO_PIN_WAKEUP_ENABLE = 0x400
	// Position of CONFIG field.
	GPIO_PIN_CONFIG_Pos = 0xb
	// Bit mask of CONFIG field.
	GPIO_PIN_CONFIG_Msk = 0x1800
	// Position of INT_ENA field.
	GPIO_PIN_INT_ENA_Pos = 0xd
	// Bit mask of INT_ENA field.
	GPIO_PIN_INT_ENA_Msk = 0x3e000

	// CALI_CONF
	// Position of CALI_RTC_MAX field.
	GPIO_CALI_CONF_CALI_RTC_MAX_Pos = 0x0
	// Bit mask of CALI_RTC_MAX field.
	GPIO_CALI_CONF_CALI_RTC_MAX_Msk = 0x3ff
	// Position of CALI_START field.
	GPIO_CALI_CONF_CALI_START_Pos = 0x1f
	// Bit mask of CALI_START field.
	GPIO_CALI_CONF_CALI_START_Msk = 0x80000000
	// Bit CALI_START.
	GPIO_CALI_CONF_CALI_START = 0x80000000

	// CALI_DATA
	// Position of CALI_VALUE_SYNC2 field.
	GPIO_CALI_DATA_CALI_VALUE_SYNC2_Pos = 0x0
	// Bit mask of CALI_VALUE_SYNC2 field.
	GPIO_CALI_DATA_CALI_VALUE_SYNC2_Msk = 0xfffff
	// Position of CALI_RDY_REAL field.
	GPIO_CALI_DATA_CALI_RDY_REAL_Pos = 0x1e
	// Bit mask of CALI_RDY_REAL field.
	GPIO_CALI_DATA_CALI_RDY_REAL_Msk = 0x40000000
	// Bit CALI_RDY_REAL.
	GPIO_CALI_DATA_CALI_RDY_REAL = 0x40000000
	// Position of CALI_RDY_SYNC2 field.
	GPIO_CALI_DATA_CALI_RDY_SYNC2_Pos = 0x1f
	// Bit mask of CALI_RDY_SYNC2 field.
	GPIO_CALI_DATA_CALI_RDY_SYNC2_Msk = 0x80000000
	// Bit CALI_RDY_SYNC2.
	GPIO_CALI_DATA_CALI_RDY_SYNC2 = 0x80000000

	// FUNC0_IN_SEL_CFG
	// Position of IN_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_SEL_Pos = 0x0
	// Bit mask of IN_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_SEL_Msk = 0x3f
	// Position of IN_INV_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_INV_SEL_Pos = 0x6
	// Bit mask of IN_INV_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_INV_SEL_Msk = 0x40
	// Bit IN_INV_SEL.
	GPIO_FUNC_IN_SEL_CFG_IN_INV_SEL = 0x40
	// Position of SEL field.
	GPIO_FUNC_IN_SEL_CFG_SEL_Pos = 0x7
	// Bit mask of SEL field.
	GPIO_FUNC_IN_SEL_CFG_SEL_Msk = 0x80
	// Bit SEL.
	GPIO_FUNC_IN_SEL_CFG_SEL = 0x80

	// FUNC0_OUT_SEL_CFG
	// Position of OUT_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OUT_SEL_Pos = 0x0
	// Bit mask of OUT_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OUT_SEL_Msk = 0x1ff
	// Position of INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_INV_SEL_Pos = 0x9
	// Bit mask of INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_INV_SEL_Msk = 0x200
	// Bit INV_SEL.
	GPIO_FUNC_OUT_SEL_CFG_INV_SEL = 0x200
	// Position of OEN_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_SEL_Pos = 0xa
	// Bit mask of OEN_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_SEL_Msk = 0x400
	// Bit OEN_SEL.
	GPIO_FUNC_OUT_SEL_CFG_OEN_SEL = 0x400
	// Position of OEN_INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_INV_SEL_Pos = 0xb
	// Bit mask of OEN_INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_INV_SEL_Msk = 0x800
	// Bit OEN_INV_SEL.
	GPIO_FUNC_OUT_SEL_CFG_OEN_INV_SEL = 0x800
)

// Constants for GPIO_SD: Sigma-Delta Modulation
const (
	// SIGMADELTA0
	// Position of SD0_IN field.
	GPIO_SIGMADELTA_SIGMADELTA_SD0_IN_Pos = 0x0
	// Bit mask of SD0_IN field.
	GPIO_SIGMADELTA_SIGMADELTA_SD0_IN_Msk = 0xff
	// Position of SD0_PRESCALE field.
	GPIO_SIGMADELTA_SIGMADELTA_SD0_PRESCALE_Pos = 0x8
	// Bit mask of SD0_PRESCALE field.
	GPIO_SIGMADELTA_SIGMADELTA_SD0_PRESCALE_Msk = 0xff00

	// CG
	// Position of SD_CLK_EN field.
	GPIO_SIGMADELTA_CG_SD_CLK_EN_Pos = 0x1f
	// Bit mask of SD_CLK_EN field.
	GPIO_SIGMADELTA_CG_SD_CLK_EN_Msk = 0x80000000
	// Bit SD_CLK_EN.
	GPIO_SIGMADELTA_CG_SD_CLK_EN = 0x80000000

	// MISC
	// Position of SPI_SWAP field.
	GPIO_SIGMADELTA_MISC_SPI_SWAP_Pos = 0x1f
	// Bit mask of SPI_SWAP field.
	GPIO_SIGMADELTA_MISC_SPI_SWAP_Msk = 0x80000000
	// Bit SPI_SWAP.
	GPIO_SIGMADELTA_MISC_SPI_SWAP = 0x80000000

	// VERSION
	// Position of SD_DATE field.
	GPIO_SIGMADELTA_VERSION_SD_DATE_Pos = 0x0
	// Bit mask of SD_DATE field.
	GPIO_SIGMADELTA_VERSION_SD_DATE_Msk = 0xfffffff
)

// Constants for HINF: HINF Peripheral
const (
	// CFG_DATA0
	// Position of USER_ID_FN1 field.
	HINF_CFG_DATA0_USER_ID_FN1_Pos = 0x0
	// Bit mask of USER_ID_FN1 field.
	HINF_CFG_DATA0_USER_ID_FN1_Msk = 0xffff
	// Position of DEVICE_ID_FN1 field.
	HINF_CFG_DATA0_DEVICE_ID_FN1_Pos = 0x10
	// Bit mask of DEVICE_ID_FN1 field.
	HINF_CFG_DATA0_DEVICE_ID_FN1_Msk = 0xffff0000

	// CFG_DATA1
	// Position of SDIO_ENABLE field.
	HINF_CFG_DATA1_SDIO_ENABLE_Pos = 0x0
	// Bit mask of SDIO_ENABLE field.
	HINF_CFG_DATA1_SDIO_ENABLE_Msk = 0x1
	// Bit SDIO_ENABLE.
	HINF_CFG_DATA1_SDIO_ENABLE = 0x1
	// Position of SDIO_IOREADY1 field.
	HINF_CFG_DATA1_SDIO_IOREADY1_Pos = 0x1
	// Bit mask of SDIO_IOREADY1 field.
	HINF_CFG_DATA1_SDIO_IOREADY1_Msk = 0x2
	// Bit SDIO_IOREADY1.
	HINF_CFG_DATA1_SDIO_IOREADY1 = 0x2
	// Position of HIGHSPEED_ENABLE field.
	HINF_CFG_DATA1_HIGHSPEED_ENABLE_Pos = 0x2
	// Bit mask of HIGHSPEED_ENABLE field.
	HINF_CFG_DATA1_HIGHSPEED_ENABLE_Msk = 0x4
	// Bit HIGHSPEED_ENABLE.
	HINF_CFG_DATA1_HIGHSPEED_ENABLE = 0x4
	// Position of HIGHSPEED_MODE field.
	HINF_CFG_DATA1_HIGHSPEED_MODE_Pos = 0x3
	// Bit mask of HIGHSPEED_MODE field.
	HINF_CFG_DATA1_HIGHSPEED_MODE_Msk = 0x8
	// Bit HIGHSPEED_MODE.
	HINF_CFG_DATA1_HIGHSPEED_MODE = 0x8
	// Position of SDIO_CD_ENABLE field.
	HINF_CFG_DATA1_SDIO_CD_ENABLE_Pos = 0x4
	// Bit mask of SDIO_CD_ENABLE field.
	HINF_CFG_DATA1_SDIO_CD_ENABLE_Msk = 0x10
	// Bit SDIO_CD_ENABLE.
	HINF_CFG_DATA1_SDIO_CD_ENABLE = 0x10
	// Position of SDIO_IOREADY2 field.
	HINF_CFG_DATA1_SDIO_IOREADY2_Pos = 0x5
	// Bit mask of SDIO_IOREADY2 field.
	HINF_CFG_DATA1_SDIO_IOREADY2_Msk = 0x20
	// Bit SDIO_IOREADY2.
	HINF_CFG_DATA1_SDIO_IOREADY2 = 0x20
	// Position of SDIO_INT_MASK field.
	HINF_CFG_DATA1_SDIO_INT_MASK_Pos = 0x6
	// Bit mask of SDIO_INT_MASK field.
	HINF_CFG_DATA1_SDIO_INT_MASK_Msk = 0x40
	// Bit SDIO_INT_MASK.
	HINF_CFG_DATA1_SDIO_INT_MASK = 0x40
	// Position of IOENABLE2 field.
	HINF_CFG_DATA1_IOENABLE2_Pos = 0x7
	// Bit mask of IOENABLE2 field.
	HINF_CFG_DATA1_IOENABLE2_Msk = 0x80
	// Bit IOENABLE2.
	HINF_CFG_DATA1_IOENABLE2 = 0x80
	// Position of CD_DISABLE field.
	HINF_CFG_DATA1_CD_DISABLE_Pos = 0x8
	// Bit mask of CD_DISABLE field.
	HINF_CFG_DATA1_CD_DISABLE_Msk = 0x100
	// Bit CD_DISABLE.
	HINF_CFG_DATA1_CD_DISABLE = 0x100
	// Position of FUNC1_EPS field.
	HINF_CFG_DATA1_FUNC1_EPS_Pos = 0x9
	// Bit mask of FUNC1_EPS field.
	HINF_CFG_DATA1_FUNC1_EPS_Msk = 0x200
	// Bit FUNC1_EPS.
	HINF_CFG_DATA1_FUNC1_EPS = 0x200
	// Position of EMP field.
	HINF_CFG_DATA1_EMP_Pos = 0xa
	// Bit mask of EMP field.
	HINF_CFG_DATA1_EMP_Msk = 0x400
	// Bit EMP.
	HINF_CFG_DATA1_EMP = 0x400
	// Position of IOENABLE1 field.
	HINF_CFG_DATA1_IOENABLE1_Pos = 0xb
	// Bit mask of IOENABLE1 field.
	HINF_CFG_DATA1_IOENABLE1_Msk = 0x800
	// Bit IOENABLE1.
	HINF_CFG_DATA1_IOENABLE1 = 0x800
	// Position of SDIO20_CONF0 field.
	HINF_CFG_DATA1_SDIO20_CONF0_Pos = 0xc
	// Bit mask of SDIO20_CONF0 field.
	HINF_CFG_DATA1_SDIO20_CONF0_Msk = 0xf000
	// Position of SDIO_VER field.
	HINF_CFG_DATA1_SDIO_VER_Pos = 0x10
	// Bit mask of SDIO_VER field.
	HINF_CFG_DATA1_SDIO_VER_Msk = 0xfff0000
	// Position of FUNC2_EPS field.
	HINF_CFG_DATA1_FUNC2_EPS_Pos = 0x1c
	// Bit mask of FUNC2_EPS field.
	HINF_CFG_DATA1_FUNC2_EPS_Msk = 0x10000000
	// Bit FUNC2_EPS.
	HINF_CFG_DATA1_FUNC2_EPS = 0x10000000
	// Position of SDIO20_CONF1 field.
	HINF_CFG_DATA1_SDIO20_CONF1_Pos = 0x1d
	// Bit mask of SDIO20_CONF1 field.
	HINF_CFG_DATA1_SDIO20_CONF1_Msk = 0xe0000000

	// CFG_DATA7
	// Position of PIN_STATE field.
	HINF_CFG_DATA7_PIN_STATE_Pos = 0x0
	// Bit mask of PIN_STATE field.
	HINF_CFG_DATA7_PIN_STATE_Msk = 0xff
	// Position of CHIP_STATE field.
	HINF_CFG_DATA7_CHIP_STATE_Pos = 0x8
	// Bit mask of CHIP_STATE field.
	HINF_CFG_DATA7_CHIP_STATE_Msk = 0xff00
	// Position of SDIO_RST field.
	HINF_CFG_DATA7_SDIO_RST_Pos = 0x10
	// Bit mask of SDIO_RST field.
	HINF_CFG_DATA7_SDIO_RST_Msk = 0x10000
	// Bit SDIO_RST.
	HINF_CFG_DATA7_SDIO_RST = 0x10000
	// Position of SDIO_IOREADY0 field.
	HINF_CFG_DATA7_SDIO_IOREADY0_Pos = 0x11
	// Bit mask of SDIO_IOREADY0 field.
	HINF_CFG_DATA7_SDIO_IOREADY0_Msk = 0x20000
	// Bit SDIO_IOREADY0.
	HINF_CFG_DATA7_SDIO_IOREADY0 = 0x20000

	// CIS_CONF0
	// Position of CIS_CONF_W0 field.
	HINF_CIS_CONF0_CIS_CONF_W0_Pos = 0x0
	// Bit mask of CIS_CONF_W0 field.
	HINF_CIS_CONF0_CIS_CONF_W0_Msk = 0xffffffff

	// CIS_CONF1
	// Position of CIS_CONF_W1 field.
	HINF_CIS_CONF1_CIS_CONF_W1_Pos = 0x0
	// Bit mask of CIS_CONF_W1 field.
	HINF_CIS_CONF1_CIS_CONF_W1_Msk = 0xffffffff

	// CIS_CONF2
	// Position of CIS_CONF_W2 field.
	HINF_CIS_CONF2_CIS_CONF_W2_Pos = 0x0
	// Bit mask of CIS_CONF_W2 field.
	HINF_CIS_CONF2_CIS_CONF_W2_Msk = 0xffffffff

	// CIS_CONF3
	// Position of CIS_CONF_W3 field.
	HINF_CIS_CONF3_CIS_CONF_W3_Pos = 0x0
	// Bit mask of CIS_CONF_W3 field.
	HINF_CIS_CONF3_CIS_CONF_W3_Msk = 0xffffffff

	// CIS_CONF4
	// Position of CIS_CONF_W4 field.
	HINF_CIS_CONF4_CIS_CONF_W4_Pos = 0x0
	// Bit mask of CIS_CONF_W4 field.
	HINF_CIS_CONF4_CIS_CONF_W4_Msk = 0xffffffff

	// CIS_CONF5
	// Position of CIS_CONF_W5 field.
	HINF_CIS_CONF5_CIS_CONF_W5_Pos = 0x0
	// Bit mask of CIS_CONF_W5 field.
	HINF_CIS_CONF5_CIS_CONF_W5_Msk = 0xffffffff

	// CIS_CONF6
	// Position of CIS_CONF_W6 field.
	HINF_CIS_CONF6_CIS_CONF_W6_Pos = 0x0
	// Bit mask of CIS_CONF_W6 field.
	HINF_CIS_CONF6_CIS_CONF_W6_Msk = 0xffffffff

	// CIS_CONF7
	// Position of CIS_CONF_W7 field.
	HINF_CIS_CONF7_CIS_CONF_W7_Pos = 0x0
	// Bit mask of CIS_CONF_W7 field.
	HINF_CIS_CONF7_CIS_CONF_W7_Msk = 0xffffffff

	// CFG_DATA16
	// Position of USER_ID_FN2 field.
	HINF_CFG_DATA16_USER_ID_FN2_Pos = 0x0
	// Bit mask of USER_ID_FN2 field.
	HINF_CFG_DATA16_USER_ID_FN2_Msk = 0xffff
	// Position of DEVICE_ID_FN2 field.
	HINF_CFG_DATA16_DEVICE_ID_FN2_Pos = 0x10
	// Bit mask of DEVICE_ID_FN2 field.
	HINF_CFG_DATA16_DEVICE_ID_FN2_Msk = 0xffff0000

	// DATE
	// Position of SDIO_DATE field.
	HINF_DATE_SDIO_DATE_Pos = 0x0
	// Bit mask of SDIO_DATE field.
	HINF_DATE_SDIO_DATE_Msk = 0xffffffff
)

// Constants for I2C0: I2C (Inter-Integrated Circuit) Controller 0
const (
	// SCL_LOW_PERIOD
	// Position of SCL_LOW_PERIOD field.
	I2C_SCL_LOW_PERIOD_SCL_LOW_PERIOD_Pos = 0x0
	// Bit mask of SCL_LOW_PERIOD field.
	I2C_SCL_LOW_PERIOD_SCL_LOW_PERIOD_Msk = 0x3fff

	// CTR
	// Position of SDA_FORCE_OUT field.
	I2C_CTR_SDA_FORCE_OUT_Pos = 0x0
	// Bit mask of SDA_FORCE_OUT field.
	I2C_CTR_SDA_FORCE_OUT_Msk = 0x1
	// Bit SDA_FORCE_OUT.
	I2C_CTR_SDA_FORCE_OUT = 0x1
	// Position of SCL_FORCE_OUT field.
	I2C_CTR_SCL_FORCE_OUT_Pos = 0x1
	// Bit mask of SCL_FORCE_OUT field.
	I2C_CTR_SCL_FORCE_OUT_Msk = 0x2
	// Bit SCL_FORCE_OUT.
	I2C_CTR_SCL_FORCE_OUT = 0x2
	// Position of SAMPLE_SCL_LEVEL field.
	I2C_CTR_SAMPLE_SCL_LEVEL_Pos = 0x2
	// Bit mask of SAMPLE_SCL_LEVEL field.
	I2C_CTR_SAMPLE_SCL_LEVEL_Msk = 0x4
	// Bit SAMPLE_SCL_LEVEL.
	I2C_CTR_SAMPLE_SCL_LEVEL = 0x4
	// Position of MS_MODE field.
	I2C_CTR_MS_MODE_Pos = 0x4
	// Bit mask of MS_MODE field.
	I2C_CTR_MS_MODE_Msk = 0x10
	// Bit MS_MODE.
	I2C_CTR_MS_MODE = 0x10
	// Position of TRANS_START field.
	I2C_CTR_TRANS_START_Pos = 0x5
	// Bit mask of TRANS_START field.
	I2C_CTR_TRANS_START_Msk = 0x20
	// Bit TRANS_START.
	I2C_CTR_TRANS_START = 0x20
	// Position of TX_LSB_FIRST field.
	I2C_CTR_TX_LSB_FIRST_Pos = 0x6
	// Bit mask of TX_LSB_FIRST field.
	I2C_CTR_TX_LSB_FIRST_Msk = 0x40
	// Bit TX_LSB_FIRST.
	I2C_CTR_TX_LSB_FIRST = 0x40
	// Position of RX_LSB_FIRST field.
	I2C_CTR_RX_LSB_FIRST_Pos = 0x7
	// Bit mask of RX_LSB_FIRST field.
	I2C_CTR_RX_LSB_FIRST_Msk = 0x80
	// Bit RX_LSB_FIRST.
	I2C_CTR_RX_LSB_FIRST = 0x80
	// Position of CLK_EN field.
	I2C_CTR_CLK_EN_Pos = 0x8
	// Bit mask of CLK_EN field.
	I2C_CTR_CLK_EN_Msk = 0x100
	// Bit CLK_EN.
	I2C_CTR_CLK_EN = 0x100

	// SR
	// Position of ACK_REC field.
	I2C_SR_ACK_REC_Pos = 0x0
	// Bit mask of ACK_REC field.
	I2C_SR_ACK_REC_Msk = 0x1
	// Bit ACK_REC.
	I2C_SR_ACK_REC = 0x1
	// Position of SLAVE_RW field.
	I2C_SR_SLAVE_RW_Pos = 0x1
	// Bit mask of SLAVE_RW field.
	I2C_SR_SLAVE_RW_Msk = 0x2
	// Bit SLAVE_RW.
	I2C_SR_SLAVE_RW = 0x2
	// Position of TIME_OUT field.
	I2C_SR_TIME_OUT_Pos = 0x2
	// Bit mask of TIME_OUT field.
	I2C_SR_TIME_OUT_Msk = 0x4
	// Bit TIME_OUT.
	I2C_SR_TIME_OUT = 0x4
	// Position of ARB_LOST field.
	I2C_SR_ARB_LOST_Pos = 0x3
	// Bit mask of ARB_LOST field.
	I2C_SR_ARB_LOST_Msk = 0x8
	// Bit ARB_LOST.
	I2C_SR_ARB_LOST = 0x8
	// Position of BUS_BUSY field.
	I2C_SR_BUS_BUSY_Pos = 0x4
	// Bit mask of BUS_BUSY field.
	I2C_SR_BUS_BUSY_Msk = 0x10
	// Bit BUS_BUSY.
	I2C_SR_BUS_BUSY = 0x10
	// Position of SLAVE_ADDRESSED field.
	I2C_SR_SLAVE_ADDRESSED_Pos = 0x5
	// Bit mask of SLAVE_ADDRESSED field.
	I2C_SR_SLAVE_ADDRESSED_Msk = 0x20
	// Bit SLAVE_ADDRESSED.
	I2C_SR_SLAVE_ADDRESSED = 0x20
	// Position of BYTE_TRANS field.
	I2C_SR_BYTE_TRANS_Pos = 0x6
	// Bit mask of BYTE_TRANS field.
	I2C_SR_BYTE_TRANS_Msk = 0x40
	// Bit BYTE_TRANS.
	I2C_SR_BYTE_TRANS = 0x40
	// Position of RXFIFO_CNT field.
	I2C_SR_RXFIFO_CNT_Pos = 0x8
	// Bit mask of RXFIFO_CNT field.
	I2C_SR_RXFIFO_CNT_Msk = 0x3f00
	// Position of TXFIFO_CNT field.
	I2C_SR_TXFIFO_CNT_Pos = 0x12
	// Bit mask of TXFIFO_CNT field.
	I2C_SR_TXFIFO_CNT_Msk = 0xfc0000
	// Position of SCL_MAIN_STATE_LAST field.
	I2C_SR_SCL_MAIN_STATE_LAST_Pos = 0x18
	// Bit mask of SCL_MAIN_STATE_LAST field.
	I2C_SR_SCL_MAIN_STATE_LAST_Msk = 0x7000000
	// Position of SCL_STATE_LAST field.
	I2C_SR_SCL_STATE_LAST_Pos = 0x1c
	// Bit mask of SCL_STATE_LAST field.
	I2C_SR_SCL_STATE_LAST_Msk = 0x70000000

	// TO
	// Position of TIME_OUT field.
	I2C_TO_TIME_OUT_Pos = 0x0
	// Bit mask of TIME_OUT field.
	I2C_TO_TIME_OUT_Msk = 0xfffff

	// SLAVE_ADDR
	// Position of SLAVE_ADDR field.
	I2C_SLAVE_ADDR_SLAVE_ADDR_Pos = 0x0
	// Bit mask of SLAVE_ADDR field.
	I2C_SLAVE_ADDR_SLAVE_ADDR_Msk = 0x7fff
	// Position of ADDR_10BIT_EN field.
	I2C_SLAVE_ADDR_ADDR_10BIT_EN_Pos = 0x1f
	// Bit mask of ADDR_10BIT_EN field.
	I2C_SLAVE_ADDR_ADDR_10BIT_EN_Msk = 0x80000000
	// Bit ADDR_10BIT_EN.
	I2C_SLAVE_ADDR_ADDR_10BIT_EN = 0x80000000

	// RXFIFO_ST
	// Position of RXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_START_ADDR_Pos = 0x0
	// Bit mask of RXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_START_ADDR_Msk = 0x1f
	// Position of RXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_END_ADDR_Pos = 0x5
	// Bit mask of RXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_END_ADDR_Msk = 0x3e0
	// Position of TXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_START_ADDR_Pos = 0xa
	// Bit mask of TXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_START_ADDR_Msk = 0x7c00
	// Position of TXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_END_ADDR_Pos = 0xf
	// Bit mask of TXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_END_ADDR_Msk = 0xf8000

	// FIFO_CONF
	// Position of RXFIFO_FULL_THRHD field.
	I2C_FIFO_CONF_RXFIFO_FULL_THRHD_Pos = 0x0
	// Bit mask of RXFIFO_FULL_THRHD field.
	I2C_FIFO_CONF_RXFIFO_FULL_THRHD_Msk = 0x1f
	// Position of TXFIFO_EMPTY_THRHD field.
	I2C_FIFO_CONF_TXFIFO_EMPTY_THRHD_Pos = 0x5
	// Bit mask of TXFIFO_EMPTY_THRHD field.
	I2C_FIFO_CONF_TXFIFO_EMPTY_THRHD_Msk = 0x3e0
	// Position of NONFIFO_EN field.
	I2C_FIFO_CONF_NONFIFO_EN_Pos = 0xa
	// Bit mask of NONFIFO_EN field.
	I2C_FIFO_CONF_NONFIFO_EN_Msk = 0x400
	// Bit NONFIFO_EN.
	I2C_FIFO_CONF_NONFIFO_EN = 0x400
	// Position of FIFO_ADDR_CFG_EN field.
	I2C_FIFO_CONF_FIFO_ADDR_CFG_EN_Pos = 0xb
	// Bit mask of FIFO_ADDR_CFG_EN field.
	I2C_FIFO_CONF_FIFO_ADDR_CFG_EN_Msk = 0x800
	// Bit FIFO_ADDR_CFG_EN.
	I2C_FIFO_CONF_FIFO_ADDR_CFG_EN = 0x800
	// Position of RX_FIFO_RST field.
	I2C_FIFO_CONF_RX_FIFO_RST_Pos = 0xc
	// Bit mask of RX_FIFO_RST field.
	I2C_FIFO_CONF_RX_FIFO_RST_Msk = 0x1000
	// Bit RX_FIFO_RST.
	I2C_FIFO_CONF_RX_FIFO_RST = 0x1000
	// Position of TX_FIFO_RST field.
	I2C_FIFO_CONF_TX_FIFO_RST_Pos = 0xd
	// Bit mask of TX_FIFO_RST field.
	I2C_FIFO_CONF_TX_FIFO_RST_Msk = 0x2000
	// Bit TX_FIFO_RST.
	I2C_FIFO_CONF_TX_FIFO_RST = 0x2000
	// Position of NONFIFO_RX_THRES field.
	I2C_FIFO_CONF_NONFIFO_RX_THRES_Pos = 0xe
	// Bit mask of NONFIFO_RX_THRES field.
	I2C_FIFO_CONF_NONFIFO_RX_THRES_Msk = 0xfc000
	// Position of NONFIFO_TX_THRES field.
	I2C_FIFO_CONF_NONFIFO_TX_THRES_Pos = 0x14
	// Bit mask of NONFIFO_TX_THRES field.
	I2C_FIFO_CONF_NONFIFO_TX_THRES_Msk = 0x3f00000

	// DATA
	// Position of FIFO_RDATA field.
	I2C_DATA_FIFO_RDATA_Pos = 0x0
	// Bit mask of FIFO_RDATA field.
	I2C_DATA_FIFO_RDATA_Msk = 0xff

	// INT_RAW
	// Position of RXFIFO_FULL_INT_RAW field.
	I2C_INT_RAW_RXFIFO_FULL_INT_RAW_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_RAW field.
	I2C_INT_RAW_RXFIFO_FULL_INT_RAW_Msk = 0x1
	// Bit RXFIFO_FULL_INT_RAW.
	I2C_INT_RAW_RXFIFO_FULL_INT_RAW = 0x1
	// Position of TXFIFO_EMPTY_INT_RAW field.
	I2C_INT_RAW_TXFIFO_EMPTY_INT_RAW_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_RAW field.
	I2C_INT_RAW_TXFIFO_EMPTY_INT_RAW_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_RAW.
	I2C_INT_RAW_TXFIFO_EMPTY_INT_RAW = 0x2
	// Position of RXFIFO_OVF_INT_RAW field.
	I2C_INT_RAW_RXFIFO_OVF_INT_RAW_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_RAW field.
	I2C_INT_RAW_RXFIFO_OVF_INT_RAW_Msk = 0x4
	// Bit RXFIFO_OVF_INT_RAW.
	I2C_INT_RAW_RXFIFO_OVF_INT_RAW = 0x4
	// Position of END_DETECT_INT_RAW field.
	I2C_INT_RAW_END_DETECT_INT_RAW_Pos = 0x3
	// Bit mask of END_DETECT_INT_RAW field.
	I2C_INT_RAW_END_DETECT_INT_RAW_Msk = 0x8
	// Bit END_DETECT_INT_RAW.
	I2C_INT_RAW_END_DETECT_INT_RAW = 0x8
	// Position of SLAVE_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_SLAVE_TRAN_COMP_INT_RAW_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_SLAVE_TRAN_COMP_INT_RAW_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_RAW.
	I2C_INT_RAW_SLAVE_TRAN_COMP_INT_RAW = 0x10
	// Position of ARBITRATION_LOST_INT_RAW field.
	I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_RAW field.
	I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_RAW.
	I2C_INT_RAW_ARBITRATION_LOST_INT_RAW = 0x20
	// Position of MASTER_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_MASTER_TRAN_COMP_INT_RAW_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_MASTER_TRAN_COMP_INT_RAW_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_RAW.
	I2C_INT_RAW_MASTER_TRAN_COMP_INT_RAW = 0x40
	// Position of TRANS_COMPLETE_INT_RAW field.
	I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_RAW field.
	I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_RAW.
	I2C_INT_RAW_TRANS_COMPLETE_INT_RAW = 0x80
	// Position of TIME_OUT_INT_RAW field.
	I2C_INT_RAW_TIME_OUT_INT_RAW_Pos = 0x8
	// Bit mask of TIME_OUT_INT_RAW field.
	I2C_INT_RAW_TIME_OUT_INT_RAW_Msk = 0x100
	// Bit TIME_OUT_INT_RAW.
	I2C_INT_RAW_TIME_OUT_INT_RAW = 0x100
	// Position of TRANS_START_INT_RAW field.
	I2C_INT_RAW_TRANS_START_INT_RAW_Pos = 0x9
	// Bit mask of TRANS_START_INT_RAW field.
	I2C_INT_RAW_TRANS_START_INT_RAW_Msk = 0x200
	// Bit TRANS_START_INT_RAW.
	I2C_INT_RAW_TRANS_START_INT_RAW = 0x200
	// Position of ACK_ERR_INT_RAW field.
	I2C_INT_RAW_ACK_ERR_INT_RAW_Pos = 0xa
	// Bit mask of ACK_ERR_INT_RAW field.
	I2C_INT_RAW_ACK_ERR_INT_RAW_Msk = 0x400
	// Bit ACK_ERR_INT_RAW.
	I2C_INT_RAW_ACK_ERR_INT_RAW = 0x400
	// Position of RX_REC_FULL_INT_RAW field.
	I2C_INT_RAW_RX_REC_FULL_INT_RAW_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_RAW field.
	I2C_INT_RAW_RX_REC_FULL_INT_RAW_Msk = 0x800
	// Bit RX_REC_FULL_INT_RAW.
	I2C_INT_RAW_RX_REC_FULL_INT_RAW = 0x800
	// Position of TX_SEND_EMPTY_INT_RAW field.
	I2C_INT_RAW_TX_SEND_EMPTY_INT_RAW_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_RAW field.
	I2C_INT_RAW_TX_SEND_EMPTY_INT_RAW_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_RAW.
	I2C_INT_RAW_TX_SEND_EMPTY_INT_RAW = 0x1000

	// INT_CLR
	// Position of RXFIFO_FULL_INT_CLR field.
	I2C_INT_CLR_RXFIFO_FULL_INT_CLR_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_CLR field.
	I2C_INT_CLR_RXFIFO_FULL_INT_CLR_Msk = 0x1
	// Bit RXFIFO_FULL_INT_CLR.
	I2C_INT_CLR_RXFIFO_FULL_INT_CLR = 0x1
	// Position of TXFIFO_EMPTY_INT_CLR field.
	I2C_INT_CLR_TXFIFO_EMPTY_INT_CLR_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_CLR field.
	I2C_INT_CLR_TXFIFO_EMPTY_INT_CLR_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_CLR.
	I2C_INT_CLR_TXFIFO_EMPTY_INT_CLR = 0x2
	// Position of RXFIFO_OVF_INT_CLR field.
	I2C_INT_CLR_RXFIFO_OVF_INT_CLR_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_CLR field.
	I2C_INT_CLR_RXFIFO_OVF_INT_CLR_Msk = 0x4
	// Bit RXFIFO_OVF_INT_CLR.
	I2C_INT_CLR_RXFIFO_OVF_INT_CLR = 0x4
	// Position of END_DETECT_INT_CLR field.
	I2C_INT_CLR_END_DETECT_INT_CLR_Pos = 0x3
	// Bit mask of END_DETECT_INT_CLR field.
	I2C_INT_CLR_END_DETECT_INT_CLR_Msk = 0x8
	// Bit END_DETECT_INT_CLR.
	I2C_INT_CLR_END_DETECT_INT_CLR = 0x8
	// Position of SLAVE_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_SLAVE_TRAN_COMP_INT_CLR_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_SLAVE_TRAN_COMP_INT_CLR_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_CLR.
	I2C_INT_CLR_SLAVE_TRAN_COMP_INT_CLR = 0x10
	// Position of ARBITRATION_LOST_INT_CLR field.
	I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_CLR field.
	I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_CLR.
	I2C_INT_CLR_ARBITRATION_LOST_INT_CLR = 0x20
	// Position of MASTER_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_MASTER_TRAN_COMP_INT_CLR_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_MASTER_TRAN_COMP_INT_CLR_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_CLR.
	I2C_INT_CLR_MASTER_TRAN_COMP_INT_CLR = 0x40
	// Position of TRANS_COMPLETE_INT_CLR field.
	I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_CLR field.
	I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_CLR.
	I2C_INT_CLR_TRANS_COMPLETE_INT_CLR = 0x80
	// Position of TIME_OUT_INT_CLR field.
	I2C_INT_CLR_TIME_OUT_INT_CLR_Pos = 0x8
	// Bit mask of TIME_OUT_INT_CLR field.
	I2C_INT_CLR_TIME_OUT_INT_CLR_Msk = 0x100
	// Bit TIME_OUT_INT_CLR.
	I2C_INT_CLR_TIME_OUT_INT_CLR = 0x100
	// Position of TRANS_START_INT_CLR field.
	I2C_INT_CLR_TRANS_START_INT_CLR_Pos = 0x9
	// Bit mask of TRANS_START_INT_CLR field.
	I2C_INT_CLR_TRANS_START_INT_CLR_Msk = 0x200
	// Bit TRANS_START_INT_CLR.
	I2C_INT_CLR_TRANS_START_INT_CLR = 0x200
	// Position of ACK_ERR_INT_CLR field.
	I2C_INT_CLR_ACK_ERR_INT_CLR_Pos = 0xa
	// Bit mask of ACK_ERR_INT_CLR field.
	I2C_INT_CLR_ACK_ERR_INT_CLR_Msk = 0x400
	// Bit ACK_ERR_INT_CLR.
	I2C_INT_CLR_ACK_ERR_INT_CLR = 0x400
	// Position of RX_REC_FULL_INT_CLR field.
	I2C_INT_CLR_RX_REC_FULL_INT_CLR_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_CLR field.
	I2C_INT_CLR_RX_REC_FULL_INT_CLR_Msk = 0x800
	// Bit RX_REC_FULL_INT_CLR.
	I2C_INT_CLR_RX_REC_FULL_INT_CLR = 0x800
	// Position of TX_SEND_EMPTY_INT_CLR field.
	I2C_INT_CLR_TX_SEND_EMPTY_INT_CLR_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_CLR field.
	I2C_INT_CLR_TX_SEND_EMPTY_INT_CLR_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_CLR.
	I2C_INT_CLR_TX_SEND_EMPTY_INT_CLR = 0x1000

	// INT_ENA
	// Position of RXFIFO_FULL_INT_ENA field.
	I2C_INT_ENA_RXFIFO_FULL_INT_ENA_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ENA field.
	I2C_INT_ENA_RXFIFO_FULL_INT_ENA_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ENA.
	I2C_INT_ENA_RXFIFO_FULL_INT_ENA = 0x1
	// Position of TXFIFO_EMPTY_INT_ENA field.
	I2C_INT_ENA_TXFIFO_EMPTY_INT_ENA_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ENA field.
	I2C_INT_ENA_TXFIFO_EMPTY_INT_ENA_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ENA.
	I2C_INT_ENA_TXFIFO_EMPTY_INT_ENA = 0x2
	// Position of RXFIFO_OVF_INT_ENA field.
	I2C_INT_ENA_RXFIFO_OVF_INT_ENA_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_ENA field.
	I2C_INT_ENA_RXFIFO_OVF_INT_ENA_Msk = 0x4
	// Bit RXFIFO_OVF_INT_ENA.
	I2C_INT_ENA_RXFIFO_OVF_INT_ENA = 0x4
	// Position of END_DETECT_INT_ENA field.
	I2C_INT_ENA_END_DETECT_INT_ENA_Pos = 0x3
	// Bit mask of END_DETECT_INT_ENA field.
	I2C_INT_ENA_END_DETECT_INT_ENA_Msk = 0x8
	// Bit END_DETECT_INT_ENA.
	I2C_INT_ENA_END_DETECT_INT_ENA = 0x8
	// Position of SLAVE_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_SLAVE_TRAN_COMP_INT_ENA_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_SLAVE_TRAN_COMP_INT_ENA_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_ENA.
	I2C_INT_ENA_SLAVE_TRAN_COMP_INT_ENA = 0x10
	// Position of ARBITRATION_LOST_INT_ENA field.
	I2C_INT_ENA_ARBITRATION_LOST_INT_ENA_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_ENA field.
	I2C_INT_ENA_ARBITRATION_LOST_INT_ENA_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_ENA.
	I2C_INT_ENA_ARBITRATION_LOST_INT_ENA = 0x20
	// Position of MASTER_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_MASTER_TRAN_COMP_INT_ENA_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_MASTER_TRAN_COMP_INT_ENA_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_ENA.
	I2C_INT_ENA_MASTER_TRAN_COMP_INT_ENA = 0x40
	// Position of TRANS_COMPLETE_INT_ENA field.
	I2C_INT_ENA_TRANS_COMPLETE_INT_ENA_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_ENA field.
	I2C_INT_ENA_TRANS_COMPLETE_INT_ENA_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_ENA.
	I2C_INT_ENA_TRANS_COMPLETE_INT_ENA = 0x80
	// Position of TIME_OUT_INT_ENA field.
	I2C_INT_ENA_TIME_OUT_INT_ENA_Pos = 0x8
	// Bit mask of TIME_OUT_INT_ENA field.
	I2C_INT_ENA_TIME_OUT_INT_ENA_Msk = 0x100
	// Bit TIME_OUT_INT_ENA.
	I2C_INT_ENA_TIME_OUT_INT_ENA = 0x100
	// Position of TRANS_START_INT_ENA field.
	I2C_INT_ENA_TRANS_START_INT_ENA_Pos = 0x9
	// Bit mask of TRANS_START_INT_ENA field.
	I2C_INT_ENA_TRANS_START_INT_ENA_Msk = 0x200
	// Bit TRANS_START_INT_ENA.
	I2C_INT_ENA_TRANS_START_INT_ENA = 0x200
	// Position of ACK_ERR_INT_ENA field.
	I2C_INT_ENA_ACK_ERR_INT_ENA_Pos = 0xa
	// Bit mask of ACK_ERR_INT_ENA field.
	I2C_INT_ENA_ACK_ERR_INT_ENA_Msk = 0x400
	// Bit ACK_ERR_INT_ENA.
	I2C_INT_ENA_ACK_ERR_INT_ENA = 0x400
	// Position of RX_REC_FULL_INT_ENA field.
	I2C_INT_ENA_RX_REC_FULL_INT_ENA_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_ENA field.
	I2C_INT_ENA_RX_REC_FULL_INT_ENA_Msk = 0x800
	// Bit RX_REC_FULL_INT_ENA.
	I2C_INT_ENA_RX_REC_FULL_INT_ENA = 0x800
	// Position of TX_SEND_EMPTY_INT_ENA field.
	I2C_INT_ENA_TX_SEND_EMPTY_INT_ENA_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_ENA field.
	I2C_INT_ENA_TX_SEND_EMPTY_INT_ENA_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_ENA.
	I2C_INT_ENA_TX_SEND_EMPTY_INT_ENA = 0x1000

	// INT_STATUS
	// Position of RXFIFO_FULL_INT_ST field.
	I2C_INT_STATUS_RXFIFO_FULL_INT_ST_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ST field.
	I2C_INT_STATUS_RXFIFO_FULL_INT_ST_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ST.
	I2C_INT_STATUS_RXFIFO_FULL_INT_ST = 0x1
	// Position of TXFIFO_EMPTY_INT_ST field.
	I2C_INT_STATUS_TXFIFO_EMPTY_INT_ST_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ST field.
	I2C_INT_STATUS_TXFIFO_EMPTY_INT_ST_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ST.
	I2C_INT_STATUS_TXFIFO_EMPTY_INT_ST = 0x2
	// Position of RXFIFO_OVF_INT_ST field.
	I2C_INT_STATUS_RXFIFO_OVF_INT_ST_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_ST field.
	I2C_INT_STATUS_RXFIFO_OVF_INT_ST_Msk = 0x4
	// Bit RXFIFO_OVF_INT_ST.
	I2C_INT_STATUS_RXFIFO_OVF_INT_ST = 0x4
	// Position of END_DETECT_INT_ST field.
	I2C_INT_STATUS_END_DETECT_INT_ST_Pos = 0x3
	// Bit mask of END_DETECT_INT_ST field.
	I2C_INT_STATUS_END_DETECT_INT_ST_Msk = 0x8
	// Bit END_DETECT_INT_ST.
	I2C_INT_STATUS_END_DETECT_INT_ST = 0x8
	// Position of SLAVE_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_SLAVE_TRAN_COMP_INT_ST_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_SLAVE_TRAN_COMP_INT_ST_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_ST.
	I2C_INT_STATUS_SLAVE_TRAN_COMP_INT_ST = 0x10
	// Position of ARBITRATION_LOST_INT_ST field.
	I2C_INT_STATUS_ARBITRATION_LOST_INT_ST_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_ST field.
	I2C_INT_STATUS_ARBITRATION_LOST_INT_ST_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_ST.
	I2C_INT_STATUS_ARBITRATION_LOST_INT_ST = 0x20
	// Position of MASTER_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_MASTER_TRAN_COMP_INT_ST_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_MASTER_TRAN_COMP_INT_ST_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_ST.
	I2C_INT_STATUS_MASTER_TRAN_COMP_INT_ST = 0x40
	// Position of TRANS_COMPLETE_INT_ST field.
	I2C_INT_STATUS_TRANS_COMPLETE_INT_ST_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_ST field.
	I2C_INT_STATUS_TRANS_COMPLETE_INT_ST_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_ST.
	I2C_INT_STATUS_TRANS_COMPLETE_INT_ST = 0x80
	// Position of TIME_OUT_INT_ST field.
	I2C_INT_STATUS_TIME_OUT_INT_ST_Pos = 0x8
	// Bit mask of TIME_OUT_INT_ST field.
	I2C_INT_STATUS_TIME_OUT_INT_ST_Msk = 0x100
	// Bit TIME_OUT_INT_ST.
	I2C_INT_STATUS_TIME_OUT_INT_ST = 0x100
	// Position of TRANS_START_INT_ST field.
	I2C_INT_STATUS_TRANS_START_INT_ST_Pos = 0x9
	// Bit mask of TRANS_START_INT_ST field.
	I2C_INT_STATUS_TRANS_START_INT_ST_Msk = 0x200
	// Bit TRANS_START_INT_ST.
	I2C_INT_STATUS_TRANS_START_INT_ST = 0x200
	// Position of ACK_ERR_INT_ST field.
	I2C_INT_STATUS_ACK_ERR_INT_ST_Pos = 0xa
	// Bit mask of ACK_ERR_INT_ST field.
	I2C_INT_STATUS_ACK_ERR_INT_ST_Msk = 0x400
	// Bit ACK_ERR_INT_ST.
	I2C_INT_STATUS_ACK_ERR_INT_ST = 0x400
	// Position of RX_REC_FULL_INT_ST field.
	I2C_INT_STATUS_RX_REC_FULL_INT_ST_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_ST field.
	I2C_INT_STATUS_RX_REC_FULL_INT_ST_Msk = 0x800
	// Bit RX_REC_FULL_INT_ST.
	I2C_INT_STATUS_RX_REC_FULL_INT_ST = 0x800
	// Position of TX_SEND_EMPTY_INT_ST field.
	I2C_INT_STATUS_TX_SEND_EMPTY_INT_ST_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_ST field.
	I2C_INT_STATUS_TX_SEND_EMPTY_INT_ST_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_ST.
	I2C_INT_STATUS_TX_SEND_EMPTY_INT_ST = 0x1000

	// SDA_HOLD
	// Position of TIME field.
	I2C_SDA_HOLD_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SDA_HOLD_TIME_Msk = 0x3ff

	// SDA_SAMPLE
	// Position of TIME field.
	I2C_SDA_SAMPLE_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SDA_SAMPLE_TIME_Msk = 0x3ff

	// SCL_HIGH_PERIOD
	// Position of SCL_HIGH_PERIOD field.
	I2C_SCL_HIGH_PERIOD_SCL_HIGH_PERIOD_Pos = 0x0
	// Bit mask of SCL_HIGH_PERIOD field.
	I2C_SCL_HIGH_PERIOD_SCL_HIGH_PERIOD_Msk = 0x3fff

	// SCL_START_HOLD
	// Position of TIME field.
	I2C_SCL_START_HOLD_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_START_HOLD_TIME_Msk = 0x3ff

	// SCL_RSTART_SETUP
	// Position of TIME field.
	I2C_SCL_RSTART_SETUP_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_RSTART_SETUP_TIME_Msk = 0x3ff

	// SCL_STOP_HOLD
	// Position of TIME field.
	I2C_SCL_STOP_HOLD_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_STOP_HOLD_TIME_Msk = 0x3fff

	// SCL_STOP_SETUP
	// Position of TIME field.
	I2C_SCL_STOP_SETUP_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_STOP_SETUP_TIME_Msk = 0x3ff

	// SCL_FILTER_CFG
	// Position of SCL_FILTER_THRES field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_THRES_Pos = 0x0
	// Bit mask of SCL_FILTER_THRES field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_THRES_Msk = 0x7
	// Position of SCL_FILTER_EN field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_EN_Pos = 0x3
	// Bit mask of SCL_FILTER_EN field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_EN_Msk = 0x8
	// Bit SCL_FILTER_EN.
	I2C_SCL_FILTER_CFG_SCL_FILTER_EN = 0x8

	// SDA_FILTER_CFG
	// Position of SDA_FILTER_THRES field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_THRES_Pos = 0x0
	// Bit mask of SDA_FILTER_THRES field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_THRES_Msk = 0x7
	// Position of SDA_FILTER_EN field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_EN_Pos = 0x3
	// Bit mask of SDA_FILTER_EN field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_EN_Msk = 0x8
	// Bit SDA_FILTER_EN.
	I2C_SDA_FILTER_CFG_SDA_FILTER_EN = 0x8

	// COMD0
	// Position of COMMAND field.
	I2C_COMD_COMMAND_Pos = 0x0
	// Bit mask of COMMAND field.
	I2C_COMD_COMMAND_Msk = 0x3fff
	// Position of COMMAND_DONE field.
	I2C_COMD_COMMAND_DONE_Pos = 0x1f
	// Bit mask of COMMAND_DONE field.
	I2C_COMD_COMMAND_DONE_Msk = 0x80000000
	// Bit COMMAND_DONE.
	I2C_COMD_COMMAND_DONE = 0x80000000

	// DATE
	// Position of DATE field.
	I2C_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	I2C_DATE_DATE_Msk = 0xffffffff
)

// Constants for I2S0: I2S (Inter-IC Sound) Controller 0
const (
	// CONF
	// Position of TX_RESET field.
	I2S_CONF_TX_RESET_Pos = 0x0
	// Bit mask of TX_RESET field.
	I2S_CONF_TX_RESET_Msk = 0x1
	// Bit TX_RESET.
	I2S_CONF_TX_RESET = 0x1
	// Position of RX_RESET field.
	I2S_CONF_RX_RESET_Pos = 0x1
	// Bit mask of RX_RESET field.
	I2S_CONF_RX_RESET_Msk = 0x2
	// Bit RX_RESET.
	I2S_CONF_RX_RESET = 0x2
	// Position of TX_FIFO_RESET field.
	I2S_CONF_TX_FIFO_RESET_Pos = 0x2
	// Bit mask of TX_FIFO_RESET field.
	I2S_CONF_TX_FIFO_RESET_Msk = 0x4
	// Bit TX_FIFO_RESET.
	I2S_CONF_TX_FIFO_RESET = 0x4
	// Position of RX_FIFO_RESET field.
	I2S_CONF_RX_FIFO_RESET_Pos = 0x3
	// Bit mask of RX_FIFO_RESET field.
	I2S_CONF_RX_FIFO_RESET_Msk = 0x8
	// Bit RX_FIFO_RESET.
	I2S_CONF_RX_FIFO_RESET = 0x8
	// Position of TX_START field.
	I2S_CONF_TX_START_Pos = 0x4
	// Bit mask of TX_START field.
	I2S_CONF_TX_START_Msk = 0x10
	// Bit TX_START.
	I2S_CONF_TX_START = 0x10
	// Position of RX_START field.
	I2S_CONF_RX_START_Pos = 0x5
	// Bit mask of RX_START field.
	I2S_CONF_RX_START_Msk = 0x20
	// Bit RX_START.
	I2S_CONF_RX_START = 0x20
	// Position of TX_SLAVE_MOD field.
	I2S_CONF_TX_SLAVE_MOD_Pos = 0x6
	// Bit mask of TX_SLAVE_MOD field.
	I2S_CONF_TX_SLAVE_MOD_Msk = 0x40
	// Bit TX_SLAVE_MOD.
	I2S_CONF_TX_SLAVE_MOD = 0x40
	// Position of RX_SLAVE_MOD field.
	I2S_CONF_RX_SLAVE_MOD_Pos = 0x7
	// Bit mask of RX_SLAVE_MOD field.
	I2S_CONF_RX_SLAVE_MOD_Msk = 0x80
	// Bit RX_SLAVE_MOD.
	I2S_CONF_RX_SLAVE_MOD = 0x80
	// Position of TX_RIGHT_FIRST field.
	I2S_CONF_TX_RIGHT_FIRST_Pos = 0x8
	// Bit mask of TX_RIGHT_FIRST field.
	I2S_CONF_TX_RIGHT_FIRST_Msk = 0x100
	// Bit TX_RIGHT_FIRST.
	I2S_CONF_TX_RIGHT_FIRST = 0x100
	// Position of RX_RIGHT_FIRST field.
	I2S_CONF_RX_RIGHT_FIRST_Pos = 0x9
	// Bit mask of RX_RIGHT_FIRST field.
	I2S_CONF_RX_RIGHT_FIRST_Msk = 0x200
	// Bit RX_RIGHT_FIRST.
	I2S_CONF_RX_RIGHT_FIRST = 0x200
	// Position of TX_MSB_SHIFT field.
	I2S_CONF_TX_MSB_SHIFT_Pos = 0xa
	// Bit mask of TX_MSB_SHIFT field.
	I2S_CONF_TX_MSB_SHIFT_Msk = 0x400
	// Bit TX_MSB_SHIFT.
	I2S_CONF_TX_MSB_SHIFT = 0x400
	// Position of RX_MSB_SHIFT field.
	I2S_CONF_RX_MSB_SHIFT_Pos = 0xb
	// Bit mask of RX_MSB_SHIFT field.
	I2S_CONF_RX_MSB_SHIFT_Msk = 0x800
	// Bit RX_MSB_SHIFT.
	I2S_CONF_RX_MSB_SHIFT = 0x800
	// Position of TX_SHORT_SYNC field.
	I2S_CONF_TX_SHORT_SYNC_Pos = 0xc
	// Bit mask of TX_SHORT_SYNC field.
	I2S_CONF_TX_SHORT_SYNC_Msk = 0x1000
	// Bit TX_SHORT_SYNC.
	I2S_CONF_TX_SHORT_SYNC = 0x1000
	// Position of RX_SHORT_SYNC field.
	I2S_CONF_RX_SHORT_SYNC_Pos = 0xd
	// Bit mask of RX_SHORT_SYNC field.
	I2S_CONF_RX_SHORT_SYNC_Msk = 0x2000
	// Bit RX_SHORT_SYNC.
	I2S_CONF_RX_SHORT_SYNC = 0x2000
	// Position of TX_MONO field.
	I2S_CONF_TX_MONO_Pos = 0xe
	// Bit mask of TX_MONO field.
	I2S_CONF_TX_MONO_Msk = 0x4000
	// Bit TX_MONO.
	I2S_CONF_TX_MONO = 0x4000
	// Position of RX_MONO field.
	I2S_CONF_RX_MONO_Pos = 0xf
	// Bit mask of RX_MONO field.
	I2S_CONF_RX_MONO_Msk = 0x8000
	// Bit RX_MONO.
	I2S_CONF_RX_MONO = 0x8000
	// Position of TX_MSB_RIGHT field.
	I2S_CONF_TX_MSB_RIGHT_Pos = 0x10
	// Bit mask of TX_MSB_RIGHT field.
	I2S_CONF_TX_MSB_RIGHT_Msk = 0x10000
	// Bit TX_MSB_RIGHT.
	I2S_CONF_TX_MSB_RIGHT = 0x10000
	// Position of RX_MSB_RIGHT field.
	I2S_CONF_RX_MSB_RIGHT_Pos = 0x11
	// Bit mask of RX_MSB_RIGHT field.
	I2S_CONF_RX_MSB_RIGHT_Msk = 0x20000
	// Bit RX_MSB_RIGHT.
	I2S_CONF_RX_MSB_RIGHT = 0x20000
	// Position of SIG_LOOPBACK field.
	I2S_CONF_SIG_LOOPBACK_Pos = 0x12
	// Bit mask of SIG_LOOPBACK field.
	I2S_CONF_SIG_LOOPBACK_Msk = 0x40000
	// Bit SIG_LOOPBACK.
	I2S_CONF_SIG_LOOPBACK = 0x40000

	// INT_RAW
	// Position of RX_TAKE_DATA_INT_RAW field.
	I2S_INT_RAW_RX_TAKE_DATA_INT_RAW_Pos = 0x0
	// Bit mask of RX_TAKE_DATA_INT_RAW field.
	I2S_INT_RAW_RX_TAKE_DATA_INT_RAW_Msk = 0x1
	// Bit RX_TAKE_DATA_INT_RAW.
	I2S_INT_RAW_RX_TAKE_DATA_INT_RAW = 0x1
	// Position of TX_PUT_DATA_INT_RAW field.
	I2S_INT_RAW_TX_PUT_DATA_INT_RAW_Pos = 0x1
	// Bit mask of TX_PUT_DATA_INT_RAW field.
	I2S_INT_RAW_TX_PUT_DATA_INT_RAW_Msk = 0x2
	// Bit TX_PUT_DATA_INT_RAW.
	I2S_INT_RAW_TX_PUT_DATA_INT_RAW = 0x2
	// Position of RX_WFULL_INT_RAW field.
	I2S_INT_RAW_RX_WFULL_INT_RAW_Pos = 0x2
	// Bit mask of RX_WFULL_INT_RAW field.
	I2S_INT_RAW_RX_WFULL_INT_RAW_Msk = 0x4
	// Bit RX_WFULL_INT_RAW.
	I2S_INT_RAW_RX_WFULL_INT_RAW = 0x4
	// Position of RX_REMPTY_INT_RAW field.
	I2S_INT_RAW_RX_REMPTY_INT_RAW_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_RAW field.
	I2S_INT_RAW_RX_REMPTY_INT_RAW_Msk = 0x8
	// Bit RX_REMPTY_INT_RAW.
	I2S_INT_RAW_RX_REMPTY_INT_RAW = 0x8
	// Position of TX_WFULL_INT_RAW field.
	I2S_INT_RAW_TX_WFULL_INT_RAW_Pos = 0x4
	// Bit mask of TX_WFULL_INT_RAW field.
	I2S_INT_RAW_TX_WFULL_INT_RAW_Msk = 0x10
	// Bit TX_WFULL_INT_RAW.
	I2S_INT_RAW_TX_WFULL_INT_RAW = 0x10
	// Position of TX_REMPTY_INT_RAW field.
	I2S_INT_RAW_TX_REMPTY_INT_RAW_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_RAW field.
	I2S_INT_RAW_TX_REMPTY_INT_RAW_Msk = 0x20
	// Bit TX_REMPTY_INT_RAW.
	I2S_INT_RAW_TX_REMPTY_INT_RAW = 0x20
	// Position of RX_HUNG_INT_RAW field.
	I2S_INT_RAW_RX_HUNG_INT_RAW_Pos = 0x6
	// Bit mask of RX_HUNG_INT_RAW field.
	I2S_INT_RAW_RX_HUNG_INT_RAW_Msk = 0x40
	// Bit RX_HUNG_INT_RAW.
	I2S_INT_RAW_RX_HUNG_INT_RAW = 0x40
	// Position of TX_HUNG_INT_RAW field.
	I2S_INT_RAW_TX_HUNG_INT_RAW_Pos = 0x7
	// Bit mask of TX_HUNG_INT_RAW field.
	I2S_INT_RAW_TX_HUNG_INT_RAW_Msk = 0x80
	// Bit TX_HUNG_INT_RAW.
	I2S_INT_RAW_TX_HUNG_INT_RAW = 0x80
	// Position of IN_DONE_INT_RAW field.
	I2S_INT_RAW_IN_DONE_INT_RAW_Pos = 0x8
	// Bit mask of IN_DONE_INT_RAW field.
	I2S_INT_RAW_IN_DONE_INT_RAW_Msk = 0x100
	// Bit IN_DONE_INT_RAW.
	I2S_INT_RAW_IN_DONE_INT_RAW = 0x100
	// Position of IN_SUC_EOF_INT_RAW field.
	I2S_INT_RAW_IN_SUC_EOF_INT_RAW_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_RAW field.
	I2S_INT_RAW_IN_SUC_EOF_INT_RAW_Msk = 0x200
	// Bit IN_SUC_EOF_INT_RAW.
	I2S_INT_RAW_IN_SUC_EOF_INT_RAW = 0x200
	// Position of IN_ERR_EOF_INT_RAW field.
	I2S_INT_RAW_IN_ERR_EOF_INT_RAW_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_RAW field.
	I2S_INT_RAW_IN_ERR_EOF_INT_RAW_Msk = 0x400
	// Bit IN_ERR_EOF_INT_RAW.
	I2S_INT_RAW_IN_ERR_EOF_INT_RAW = 0x400
	// Position of OUT_DONE_INT_RAW field.
	I2S_INT_RAW_OUT_DONE_INT_RAW_Pos = 0xb
	// Bit mask of OUT_DONE_INT_RAW field.
	I2S_INT_RAW_OUT_DONE_INT_RAW_Msk = 0x800
	// Bit OUT_DONE_INT_RAW.
	I2S_INT_RAW_OUT_DONE_INT_RAW = 0x800
	// Position of OUT_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_EOF_INT_RAW_Pos = 0xc
	// Bit mask of OUT_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_EOF_INT_RAW_Msk = 0x1000
	// Bit OUT_EOF_INT_RAW.
	I2S_INT_RAW_OUT_EOF_INT_RAW = 0x1000
	// Position of IN_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_ERR_INT_RAW_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_ERR_INT_RAW_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_RAW.
	I2S_INT_RAW_IN_DSCR_ERR_INT_RAW = 0x2000
	// Position of OUT_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_OUT_DSCR_ERR_INT_RAW_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_OUT_DSCR_ERR_INT_RAW_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_RAW.
	I2S_INT_RAW_OUT_DSCR_ERR_INT_RAW = 0x4000
	// Position of IN_DSCR_EMPTY_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_RAW.
	I2S_INT_RAW_IN_DSCR_EMPTY_INT_RAW = 0x8000
	// Position of OUT_TOTAL_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_RAW.
	I2S_INT_RAW_OUT_TOTAL_EOF_INT_RAW = 0x10000

	// INT_ST
	// Position of RX_TAKE_DATA_INT_ST field.
	I2S_INT_ST_RX_TAKE_DATA_INT_ST_Pos = 0x0
	// Bit mask of RX_TAKE_DATA_INT_ST field.
	I2S_INT_ST_RX_TAKE_DATA_INT_ST_Msk = 0x1
	// Bit RX_TAKE_DATA_INT_ST.
	I2S_INT_ST_RX_TAKE_DATA_INT_ST = 0x1
	// Position of TX_PUT_DATA_INT_ST field.
	I2S_INT_ST_TX_PUT_DATA_INT_ST_Pos = 0x1
	// Bit mask of TX_PUT_DATA_INT_ST field.
	I2S_INT_ST_TX_PUT_DATA_INT_ST_Msk = 0x2
	// Bit TX_PUT_DATA_INT_ST.
	I2S_INT_ST_TX_PUT_DATA_INT_ST = 0x2
	// Position of RX_WFULL_INT_ST field.
	I2S_INT_ST_RX_WFULL_INT_ST_Pos = 0x2
	// Bit mask of RX_WFULL_INT_ST field.
	I2S_INT_ST_RX_WFULL_INT_ST_Msk = 0x4
	// Bit RX_WFULL_INT_ST.
	I2S_INT_ST_RX_WFULL_INT_ST = 0x4
	// Position of RX_REMPTY_INT_ST field.
	I2S_INT_ST_RX_REMPTY_INT_ST_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_ST field.
	I2S_INT_ST_RX_REMPTY_INT_ST_Msk = 0x8
	// Bit RX_REMPTY_INT_ST.
	I2S_INT_ST_RX_REMPTY_INT_ST = 0x8
	// Position of TX_WFULL_INT_ST field.
	I2S_INT_ST_TX_WFULL_INT_ST_Pos = 0x4
	// Bit mask of TX_WFULL_INT_ST field.
	I2S_INT_ST_TX_WFULL_INT_ST_Msk = 0x10
	// Bit TX_WFULL_INT_ST.
	I2S_INT_ST_TX_WFULL_INT_ST = 0x10
	// Position of TX_REMPTY_INT_ST field.
	I2S_INT_ST_TX_REMPTY_INT_ST_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_ST field.
	I2S_INT_ST_TX_REMPTY_INT_ST_Msk = 0x20
	// Bit TX_REMPTY_INT_ST.
	I2S_INT_ST_TX_REMPTY_INT_ST = 0x20
	// Position of RX_HUNG_INT_ST field.
	I2S_INT_ST_RX_HUNG_INT_ST_Pos = 0x6
	// Bit mask of RX_HUNG_INT_ST field.
	I2S_INT_ST_RX_HUNG_INT_ST_Msk = 0x40
	// Bit RX_HUNG_INT_ST.
	I2S_INT_ST_RX_HUNG_INT_ST = 0x40
	// Position of TX_HUNG_INT_ST field.
	I2S_INT_ST_TX_HUNG_INT_ST_Pos = 0x7
	// Bit mask of TX_HUNG_INT_ST field.
	I2S_INT_ST_TX_HUNG_INT_ST_Msk = 0x80
	// Bit TX_HUNG_INT_ST.
	I2S_INT_ST_TX_HUNG_INT_ST = 0x80
	// Position of IN_DONE_INT_ST field.
	I2S_INT_ST_IN_DONE_INT_ST_Pos = 0x8
	// Bit mask of IN_DONE_INT_ST field.
	I2S_INT_ST_IN_DONE_INT_ST_Msk = 0x100
	// Bit IN_DONE_INT_ST.
	I2S_INT_ST_IN_DONE_INT_ST = 0x100
	// Position of IN_SUC_EOF_INT_ST field.
	I2S_INT_ST_IN_SUC_EOF_INT_ST_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_ST field.
	I2S_INT_ST_IN_SUC_EOF_INT_ST_Msk = 0x200
	// Bit IN_SUC_EOF_INT_ST.
	I2S_INT_ST_IN_SUC_EOF_INT_ST = 0x200
	// Position of IN_ERR_EOF_INT_ST field.
	I2S_INT_ST_IN_ERR_EOF_INT_ST_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_ST field.
	I2S_INT_ST_IN_ERR_EOF_INT_ST_Msk = 0x400
	// Bit IN_ERR_EOF_INT_ST.
	I2S_INT_ST_IN_ERR_EOF_INT_ST = 0x400
	// Position of OUT_DONE_INT_ST field.
	I2S_INT_ST_OUT_DONE_INT_ST_Pos = 0xb
	// Bit mask of OUT_DONE_INT_ST field.
	I2S_INT_ST_OUT_DONE_INT_ST_Msk = 0x800
	// Bit OUT_DONE_INT_ST.
	I2S_INT_ST_OUT_DONE_INT_ST = 0x800
	// Position of OUT_EOF_INT_ST field.
	I2S_INT_ST_OUT_EOF_INT_ST_Pos = 0xc
	// Bit mask of OUT_EOF_INT_ST field.
	I2S_INT_ST_OUT_EOF_INT_ST_Msk = 0x1000
	// Bit OUT_EOF_INT_ST.
	I2S_INT_ST_OUT_EOF_INT_ST = 0x1000
	// Position of IN_DSCR_ERR_INT_ST field.
	I2S_INT_ST_IN_DSCR_ERR_INT_ST_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_ST field.
	I2S_INT_ST_IN_DSCR_ERR_INT_ST_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_ST.
	I2S_INT_ST_IN_DSCR_ERR_INT_ST = 0x2000
	// Position of OUT_DSCR_ERR_INT_ST field.
	I2S_INT_ST_OUT_DSCR_ERR_INT_ST_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_ST field.
	I2S_INT_ST_OUT_DSCR_ERR_INT_ST_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_ST.
	I2S_INT_ST_OUT_DSCR_ERR_INT_ST = 0x4000
	// Position of IN_DSCR_EMPTY_INT_ST field.
	I2S_INT_ST_IN_DSCR_EMPTY_INT_ST_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_ST field.
	I2S_INT_ST_IN_DSCR_EMPTY_INT_ST_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_ST.
	I2S_INT_ST_IN_DSCR_EMPTY_INT_ST = 0x8000
	// Position of OUT_TOTAL_EOF_INT_ST field.
	I2S_INT_ST_OUT_TOTAL_EOF_INT_ST_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_ST field.
	I2S_INT_ST_OUT_TOTAL_EOF_INT_ST_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_ST.
	I2S_INT_ST_OUT_TOTAL_EOF_INT_ST = 0x10000

	// INT_ENA
	// Position of RX_TAKE_DATA_INT_ENA field.
	I2S_INT_ENA_RX_TAKE_DATA_INT_ENA_Pos = 0x0
	// Bit mask of RX_TAKE_DATA_INT_ENA field.
	I2S_INT_ENA_RX_TAKE_DATA_INT_ENA_Msk = 0x1
	// Bit RX_TAKE_DATA_INT_ENA.
	I2S_INT_ENA_RX_TAKE_DATA_INT_ENA = 0x1
	// Position of TX_PUT_DATA_INT_ENA field.
	I2S_INT_ENA_TX_PUT_DATA_INT_ENA_Pos = 0x1
	// Bit mask of TX_PUT_DATA_INT_ENA field.
	I2S_INT_ENA_TX_PUT_DATA_INT_ENA_Msk = 0x2
	// Bit TX_PUT_DATA_INT_ENA.
	I2S_INT_ENA_TX_PUT_DATA_INT_ENA = 0x2
	// Position of RX_WFULL_INT_ENA field.
	I2S_INT_ENA_RX_WFULL_INT_ENA_Pos = 0x2
	// Bit mask of RX_WFULL_INT_ENA field.
	I2S_INT_ENA_RX_WFULL_INT_ENA_Msk = 0x4
	// Bit RX_WFULL_INT_ENA.
	I2S_INT_ENA_RX_WFULL_INT_ENA = 0x4
	// Position of RX_REMPTY_INT_ENA field.
	I2S_INT_ENA_RX_REMPTY_INT_ENA_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_ENA field.
	I2S_INT_ENA_RX_REMPTY_INT_ENA_Msk = 0x8
	// Bit RX_REMPTY_INT_ENA.
	I2S_INT_ENA_RX_REMPTY_INT_ENA = 0x8
	// Position of TX_WFULL_INT_ENA field.
	I2S_INT_ENA_TX_WFULL_INT_ENA_Pos = 0x4
	// Bit mask of TX_WFULL_INT_ENA field.
	I2S_INT_ENA_TX_WFULL_INT_ENA_Msk = 0x10
	// Bit TX_WFULL_INT_ENA.
	I2S_INT_ENA_TX_WFULL_INT_ENA = 0x10
	// Position of TX_REMPTY_INT_ENA field.
	I2S_INT_ENA_TX_REMPTY_INT_ENA_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_ENA field.
	I2S_INT_ENA_TX_REMPTY_INT_ENA_Msk = 0x20
	// Bit TX_REMPTY_INT_ENA.
	I2S_INT_ENA_TX_REMPTY_INT_ENA = 0x20
	// Position of RX_HUNG_INT_ENA field.
	I2S_INT_ENA_RX_HUNG_INT_ENA_Pos = 0x6
	// Bit mask of RX_HUNG_INT_ENA field.
	I2S_INT_ENA_RX_HUNG_INT_ENA_Msk = 0x40
	// Bit RX_HUNG_INT_ENA.
	I2S_INT_ENA_RX_HUNG_INT_ENA = 0x40
	// Position of TX_HUNG_INT_ENA field.
	I2S_INT_ENA_TX_HUNG_INT_ENA_Pos = 0x7
	// Bit mask of TX_HUNG_INT_ENA field.
	I2S_INT_ENA_TX_HUNG_INT_ENA_Msk = 0x80
	// Bit TX_HUNG_INT_ENA.
	I2S_INT_ENA_TX_HUNG_INT_ENA = 0x80
	// Position of IN_DONE_INT_ENA field.
	I2S_INT_ENA_IN_DONE_INT_ENA_Pos = 0x8
	// Bit mask of IN_DONE_INT_ENA field.
	I2S_INT_ENA_IN_DONE_INT_ENA_Msk = 0x100
	// Bit IN_DONE_INT_ENA.
	I2S_INT_ENA_IN_DONE_INT_ENA = 0x100
	// Position of IN_SUC_EOF_INT_ENA field.
	I2S_INT_ENA_IN_SUC_EOF_INT_ENA_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_ENA field.
	I2S_INT_ENA_IN_SUC_EOF_INT_ENA_Msk = 0x200
	// Bit IN_SUC_EOF_INT_ENA.
	I2S_INT_ENA_IN_SUC_EOF_INT_ENA = 0x200
	// Position of IN_ERR_EOF_INT_ENA field.
	I2S_INT_ENA_IN_ERR_EOF_INT_ENA_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_ENA field.
	I2S_INT_ENA_IN_ERR_EOF_INT_ENA_Msk = 0x400
	// Bit IN_ERR_EOF_INT_ENA.
	I2S_INT_ENA_IN_ERR_EOF_INT_ENA = 0x400
	// Position of OUT_DONE_INT_ENA field.
	I2S_INT_ENA_OUT_DONE_INT_ENA_Pos = 0xb
	// Bit mask of OUT_DONE_INT_ENA field.
	I2S_INT_ENA_OUT_DONE_INT_ENA_Msk = 0x800
	// Bit OUT_DONE_INT_ENA.
	I2S_INT_ENA_OUT_DONE_INT_ENA = 0x800
	// Position of OUT_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_EOF_INT_ENA_Pos = 0xc
	// Bit mask of OUT_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_EOF_INT_ENA_Msk = 0x1000
	// Bit OUT_EOF_INT_ENA.
	I2S_INT_ENA_OUT_EOF_INT_ENA = 0x1000
	// Position of IN_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_ERR_INT_ENA_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_ERR_INT_ENA_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_ENA.
	I2S_INT_ENA_IN_DSCR_ERR_INT_ENA = 0x2000
	// Position of OUT_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_OUT_DSCR_ERR_INT_ENA_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_OUT_DSCR_ERR_INT_ENA_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_ENA.
	I2S_INT_ENA_OUT_DSCR_ERR_INT_ENA = 0x4000
	// Position of IN_DSCR_EMPTY_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_ENA.
	I2S_INT_ENA_IN_DSCR_EMPTY_INT_ENA = 0x8000
	// Position of OUT_TOTAL_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_ENA.
	I2S_INT_ENA_OUT_TOTAL_EOF_INT_ENA = 0x10000

	// INT_CLR
	// Position of TAKE_DATA_INT_CLR field.
	I2S_INT_CLR_TAKE_DATA_INT_CLR_Pos = 0x0
	// Bit mask of TAKE_DATA_INT_CLR field.
	I2S_INT_CLR_TAKE_DATA_INT_CLR_Msk = 0x1
	// Bit TAKE_DATA_INT_CLR.
	I2S_INT_CLR_TAKE_DATA_INT_CLR = 0x1
	// Position of PUT_DATA_INT_CLR field.
	I2S_INT_CLR_PUT_DATA_INT_CLR_Pos = 0x1
	// Bit mask of PUT_DATA_INT_CLR field.
	I2S_INT_CLR_PUT_DATA_INT_CLR_Msk = 0x2
	// Bit PUT_DATA_INT_CLR.
	I2S_INT_CLR_PUT_DATA_INT_CLR = 0x2
	// Position of RX_WFULL_INT_CLR field.
	I2S_INT_CLR_RX_WFULL_INT_CLR_Pos = 0x2
	// Bit mask of RX_WFULL_INT_CLR field.
	I2S_INT_CLR_RX_WFULL_INT_CLR_Msk = 0x4
	// Bit RX_WFULL_INT_CLR.
	I2S_INT_CLR_RX_WFULL_INT_CLR = 0x4
	// Position of RX_REMPTY_INT_CLR field.
	I2S_INT_CLR_RX_REMPTY_INT_CLR_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_CLR field.
	I2S_INT_CLR_RX_REMPTY_INT_CLR_Msk = 0x8
	// Bit RX_REMPTY_INT_CLR.
	I2S_INT_CLR_RX_REMPTY_INT_CLR = 0x8
	// Position of TX_WFULL_INT_CLR field.
	I2S_INT_CLR_TX_WFULL_INT_CLR_Pos = 0x4
	// Bit mask of TX_WFULL_INT_CLR field.
	I2S_INT_CLR_TX_WFULL_INT_CLR_Msk = 0x10
	// Bit TX_WFULL_INT_CLR.
	I2S_INT_CLR_TX_WFULL_INT_CLR = 0x10
	// Position of TX_REMPTY_INT_CLR field.
	I2S_INT_CLR_TX_REMPTY_INT_CLR_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_CLR field.
	I2S_INT_CLR_TX_REMPTY_INT_CLR_Msk = 0x20
	// Bit TX_REMPTY_INT_CLR.
	I2S_INT_CLR_TX_REMPTY_INT_CLR = 0x20
	// Position of RX_HUNG_INT_CLR field.
	I2S_INT_CLR_RX_HUNG_INT_CLR_Pos = 0x6
	// Bit mask of RX_HUNG_INT_CLR field.
	I2S_INT_CLR_RX_HUNG_INT_CLR_Msk = 0x40
	// Bit RX_HUNG_INT_CLR.
	I2S_INT_CLR_RX_HUNG_INT_CLR = 0x40
	// Position of TX_HUNG_INT_CLR field.
	I2S_INT_CLR_TX_HUNG_INT_CLR_Pos = 0x7
	// Bit mask of TX_HUNG_INT_CLR field.
	I2S_INT_CLR_TX_HUNG_INT_CLR_Msk = 0x80
	// Bit TX_HUNG_INT_CLR.
	I2S_INT_CLR_TX_HUNG_INT_CLR = 0x80
	// Position of IN_DONE_INT_CLR field.
	I2S_INT_CLR_IN_DONE_INT_CLR_Pos = 0x8
	// Bit mask of IN_DONE_INT_CLR field.
	I2S_INT_CLR_IN_DONE_INT_CLR_Msk = 0x100
	// Bit IN_DONE_INT_CLR.
	I2S_INT_CLR_IN_DONE_INT_CLR = 0x100
	// Position of IN_SUC_EOF_INT_CLR field.
	I2S_INT_CLR_IN_SUC_EOF_INT_CLR_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_CLR field.
	I2S_INT_CLR_IN_SUC_EOF_INT_CLR_Msk = 0x200
	// Bit IN_SUC_EOF_INT_CLR.
	I2S_INT_CLR_IN_SUC_EOF_INT_CLR = 0x200
	// Position of IN_ERR_EOF_INT_CLR field.
	I2S_INT_CLR_IN_ERR_EOF_INT_CLR_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_CLR field.
	I2S_INT_CLR_IN_ERR_EOF_INT_CLR_Msk = 0x400
	// Bit IN_ERR_EOF_INT_CLR.
	I2S_INT_CLR_IN_ERR_EOF_INT_CLR = 0x400
	// Position of OUT_DONE_INT_CLR field.
	I2S_INT_CLR_OUT_DONE_INT_CLR_Pos = 0xb
	// Bit mask of OUT_DONE_INT_CLR field.
	I2S_INT_CLR_OUT_DONE_INT_CLR_Msk = 0x800
	// Bit OUT_DONE_INT_CLR.
	I2S_INT_CLR_OUT_DONE_INT_CLR = 0x800
	// Position of OUT_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_EOF_INT_CLR_Pos = 0xc
	// Bit mask of OUT_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_EOF_INT_CLR_Msk = 0x1000
	// Bit OUT_EOF_INT_CLR.
	I2S_INT_CLR_OUT_EOF_INT_CLR = 0x1000
	// Position of IN_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_ERR_INT_CLR_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_ERR_INT_CLR_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_CLR.
	I2S_INT_CLR_IN_DSCR_ERR_INT_CLR = 0x2000
	// Position of OUT_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_OUT_DSCR_ERR_INT_CLR_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_OUT_DSCR_ERR_INT_CLR_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_CLR.
	I2S_INT_CLR_OUT_DSCR_ERR_INT_CLR = 0x4000
	// Position of IN_DSCR_EMPTY_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_CLR.
	I2S_INT_CLR_IN_DSCR_EMPTY_INT_CLR = 0x8000
	// Position of OUT_TOTAL_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_CLR.
	I2S_INT_CLR_OUT_TOTAL_EOF_INT_CLR = 0x10000

	// TIMING
	// Position of TX_BCK_IN_DELAY field.
	I2S_TIMING_TX_BCK_IN_DELAY_Pos = 0x0
	// Bit mask of TX_BCK_IN_DELAY field.
	I2S_TIMING_TX_BCK_IN_DELAY_Msk = 0x3
	// Position of TX_WS_IN_DELAY field.
	I2S_TIMING_TX_WS_IN_DELAY_Pos = 0x2
	// Bit mask of TX_WS_IN_DELAY field.
	I2S_TIMING_TX_WS_IN_DELAY_Msk = 0xc
	// Position of RX_BCK_IN_DELAY field.
	I2S_TIMING_RX_BCK_IN_DELAY_Pos = 0x4
	// Bit mask of RX_BCK_IN_DELAY field.
	I2S_TIMING_RX_BCK_IN_DELAY_Msk = 0x30
	// Position of RX_WS_IN_DELAY field.
	I2S_TIMING_RX_WS_IN_DELAY_Pos = 0x6
	// Bit mask of RX_WS_IN_DELAY field.
	I2S_TIMING_RX_WS_IN_DELAY_Msk = 0xc0
	// Position of RX_SD_IN_DELAY field.
	I2S_TIMING_RX_SD_IN_DELAY_Pos = 0x8
	// Bit mask of RX_SD_IN_DELAY field.
	I2S_TIMING_RX_SD_IN_DELAY_Msk = 0x300
	// Position of TX_BCK_OUT_DELAY field.
	I2S_TIMING_TX_BCK_OUT_DELAY_Pos = 0xa
	// Bit mask of TX_BCK_OUT_DELAY field.
	I2S_TIMING_TX_BCK_OUT_DELAY_Msk = 0xc00
	// Position of TX_WS_OUT_DELAY field.
	I2S_TIMING_TX_WS_OUT_DELAY_Pos = 0xc
	// Bit mask of TX_WS_OUT_DELAY field.
	I2S_TIMING_TX_WS_OUT_DELAY_Msk = 0x3000
	// Position of TX_SD_OUT_DELAY field.
	I2S_TIMING_TX_SD_OUT_DELAY_Pos = 0xe
	// Bit mask of TX_SD_OUT_DELAY field.
	I2S_TIMING_TX_SD_OUT_DELAY_Msk = 0xc000
	// Position of RX_WS_OUT_DELAY field.
	I2S_TIMING_RX_WS_OUT_DELAY_Pos = 0x10
	// Bit mask of RX_WS_OUT_DELAY field.
	I2S_TIMING_RX_WS_OUT_DELAY_Msk = 0x30000
	// Position of RX_BCK_OUT_DELAY field.
	I2S_TIMING_RX_BCK_OUT_DELAY_Pos = 0x12
	// Bit mask of RX_BCK_OUT_DELAY field.
	I2S_TIMING_RX_BCK_OUT_DELAY_Msk = 0xc0000
	// Position of TX_DSYNC_SW field.
	I2S_TIMING_TX_DSYNC_SW_Pos = 0x14
	// Bit mask of TX_DSYNC_SW field.
	I2S_TIMING_TX_DSYNC_SW_Msk = 0x100000
	// Bit TX_DSYNC_SW.
	I2S_TIMING_TX_DSYNC_SW = 0x100000
	// Position of RX_DSYNC_SW field.
	I2S_TIMING_RX_DSYNC_SW_Pos = 0x15
	// Bit mask of RX_DSYNC_SW field.
	I2S_TIMING_RX_DSYNC_SW_Msk = 0x200000
	// Bit RX_DSYNC_SW.
	I2S_TIMING_RX_DSYNC_SW = 0x200000
	// Position of DATA_ENABLE_DELAY field.
	I2S_TIMING_DATA_ENABLE_DELAY_Pos = 0x16
	// Bit mask of DATA_ENABLE_DELAY field.
	I2S_TIMING_DATA_ENABLE_DELAY_Msk = 0xc00000
	// Position of TX_BCK_IN_INV field.
	I2S_TIMING_TX_BCK_IN_INV_Pos = 0x18
	// Bit mask of TX_BCK_IN_INV field.
	I2S_TIMING_TX_BCK_IN_INV_Msk = 0x1000000
	// Bit TX_BCK_IN_INV.
	I2S_TIMING_TX_BCK_IN_INV = 0x1000000

	// FIFO_CONF
	// Position of RX_DATA_NUM field.
	I2S_FIFO_CONF_RX_DATA_NUM_Pos = 0x0
	// Bit mask of RX_DATA_NUM field.
	I2S_FIFO_CONF_RX_DATA_NUM_Msk = 0x3f
	// Position of TX_DATA_NUM field.
	I2S_FIFO_CONF_TX_DATA_NUM_Pos = 0x6
	// Bit mask of TX_DATA_NUM field.
	I2S_FIFO_CONF_TX_DATA_NUM_Msk = 0xfc0
	// Position of DSCR_EN field.
	I2S_FIFO_CONF_DSCR_EN_Pos = 0xc
	// Bit mask of DSCR_EN field.
	I2S_FIFO_CONF_DSCR_EN_Msk = 0x1000
	// Bit DSCR_EN.
	I2S_FIFO_CONF_DSCR_EN = 0x1000
	// Position of TX_FIFO_MOD field.
	I2S_FIFO_CONF_TX_FIFO_MOD_Pos = 0xd
	// Bit mask of TX_FIFO_MOD field.
	I2S_FIFO_CONF_TX_FIFO_MOD_Msk = 0xe000
	// Position of RX_FIFO_MOD field.
	I2S_FIFO_CONF_RX_FIFO_MOD_Pos = 0x10
	// Bit mask of RX_FIFO_MOD field.
	I2S_FIFO_CONF_RX_FIFO_MOD_Msk = 0x70000
	// Position of TX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_TX_FIFO_MOD_FORCE_EN_Pos = 0x13
	// Bit mask of TX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_TX_FIFO_MOD_FORCE_EN_Msk = 0x80000
	// Bit TX_FIFO_MOD_FORCE_EN.
	I2S_FIFO_CONF_TX_FIFO_MOD_FORCE_EN = 0x80000
	// Position of RX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_RX_FIFO_MOD_FORCE_EN_Pos = 0x14
	// Bit mask of RX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_RX_FIFO_MOD_FORCE_EN_Msk = 0x100000
	// Bit RX_FIFO_MOD_FORCE_EN.
	I2S_FIFO_CONF_RX_FIFO_MOD_FORCE_EN = 0x100000

	// RXEOF_NUM
	// Position of RX_EOF_NUM field.
	I2S_RXEOF_NUM_RX_EOF_NUM_Pos = 0x0
	// Bit mask of RX_EOF_NUM field.
	I2S_RXEOF_NUM_RX_EOF_NUM_Msk = 0xffffffff

	// CONF_SIGLE_DATA
	// Position of SIGLE_DATA field.
	I2S_CONF_SIGLE_DATA_SIGLE_DATA_Pos = 0x0
	// Bit mask of SIGLE_DATA field.
	I2S_CONF_SIGLE_DATA_SIGLE_DATA_Msk = 0xffffffff

	// CONF_CHAN
	// Position of TX_CHAN_MOD field.
	I2S_CONF_CHAN_TX_CHAN_MOD_Pos = 0x0
	// Bit mask of TX_CHAN_MOD field.
	I2S_CONF_CHAN_TX_CHAN_MOD_Msk = 0x7
	// Position of RX_CHAN_MOD field.
	I2S_CONF_CHAN_RX_CHAN_MOD_Pos = 0x3
	// Bit mask of RX_CHAN_MOD field.
	I2S_CONF_CHAN_RX_CHAN_MOD_Msk = 0x18

	// OUT_LINK
	// Position of OUTLINK_ADDR field.
	I2S_OUT_LINK_OUTLINK_ADDR_Pos = 0x0
	// Bit mask of OUTLINK_ADDR field.
	I2S_OUT_LINK_OUTLINK_ADDR_Msk = 0xfffff
	// Position of OUTLINK_STOP field.
	I2S_OUT_LINK_OUTLINK_STOP_Pos = 0x1c
	// Bit mask of OUTLINK_STOP field.
	I2S_OUT_LINK_OUTLINK_STOP_Msk = 0x10000000
	// Bit OUTLINK_STOP.
	I2S_OUT_LINK_OUTLINK_STOP = 0x10000000
	// Position of OUTLINK_START field.
	I2S_OUT_LINK_OUTLINK_START_Pos = 0x1d
	// Bit mask of OUTLINK_START field.
	I2S_OUT_LINK_OUTLINK_START_Msk = 0x20000000
	// Bit OUTLINK_START.
	I2S_OUT_LINK_OUTLINK_START = 0x20000000
	// Position of OUTLINK_RESTART field.
	I2S_OUT_LINK_OUTLINK_RESTART_Pos = 0x1e
	// Bit mask of OUTLINK_RESTART field.
	I2S_OUT_LINK_OUTLINK_RESTART_Msk = 0x40000000
	// Bit OUTLINK_RESTART.
	I2S_OUT_LINK_OUTLINK_RESTART = 0x40000000
	// Position of OUTLINK_PARK field.
	I2S_OUT_LINK_OUTLINK_PARK_Pos = 0x1f
	// Bit mask of OUTLINK_PARK field.
	I2S_OUT_LINK_OUTLINK_PARK_Msk = 0x80000000
	// Bit OUTLINK_PARK.
	I2S_OUT_LINK_OUTLINK_PARK = 0x80000000

	// IN_LINK
	// Position of INLINK_ADDR field.
	I2S_IN_LINK_INLINK_ADDR_Pos = 0x0
	// Bit mask of INLINK_ADDR field.
	I2S_IN_LINK_INLINK_ADDR_Msk = 0xfffff
	// Position of INLINK_STOP field.
	I2S_IN_LINK_INLINK_STOP_Pos = 0x1c
	// Bit mask of INLINK_STOP field.
	I2S_IN_LINK_INLINK_STOP_Msk = 0x10000000
	// Bit INLINK_STOP.
	I2S_IN_LINK_INLINK_STOP = 0x10000000
	// Position of INLINK_START field.
	I2S_IN_LINK_INLINK_START_Pos = 0x1d
	// Bit mask of INLINK_START field.
	I2S_IN_LINK_INLINK_START_Msk = 0x20000000
	// Bit INLINK_START.
	I2S_IN_LINK_INLINK_START = 0x20000000
	// Position of INLINK_RESTART field.
	I2S_IN_LINK_INLINK_RESTART_Pos = 0x1e
	// Bit mask of INLINK_RESTART field.
	I2S_IN_LINK_INLINK_RESTART_Msk = 0x40000000
	// Bit INLINK_RESTART.
	I2S_IN_LINK_INLINK_RESTART = 0x40000000
	// Position of INLINK_PARK field.
	I2S_IN_LINK_INLINK_PARK_Pos = 0x1f
	// Bit mask of INLINK_PARK field.
	I2S_IN_LINK_INLINK_PARK_Msk = 0x80000000
	// Bit INLINK_PARK.
	I2S_IN_LINK_INLINK_PARK = 0x80000000

	// OUT_EOF_DES_ADDR
	// Position of OUT_EOF_DES_ADDR field.
	I2S_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_DES_ADDR field.
	I2S_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Msk = 0xffffffff

	// IN_EOF_DES_ADDR
	// Position of IN_SUC_EOF_DES_ADDR field.
	I2S_IN_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of IN_SUC_EOF_DES_ADDR field.
	I2S_IN_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// OUT_EOF_BFR_DES_ADDR
	// Position of OUT_EOF_BFR_DES_ADDR field.
	I2S_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_BFR_DES_ADDR field.
	I2S_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// AHB_TEST
	// Position of AHB_TESTMODE field.
	I2S_AHB_TEST_AHB_TESTMODE_Pos = 0x0
	// Bit mask of AHB_TESTMODE field.
	I2S_AHB_TEST_AHB_TESTMODE_Msk = 0x7
	// Position of AHB_TESTADDR field.
	I2S_AHB_TEST_AHB_TESTADDR_Pos = 0x4
	// Bit mask of AHB_TESTADDR field.
	I2S_AHB_TEST_AHB_TESTADDR_Msk = 0x30

	// INLINK_DSCR
	// Position of INLINK_DSCR field.
	I2S_INLINK_DSCR_INLINK_DSCR_Pos = 0x0
	// Bit mask of INLINK_DSCR field.
	I2S_INLINK_DSCR_INLINK_DSCR_Msk = 0xffffffff

	// INLINK_DSCR_BF0
	// Position of INLINK_DSCR_BF0 field.
	I2S_INLINK_DSCR_BF0_INLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF0 field.
	I2S_INLINK_DSCR_BF0_INLINK_DSCR_BF0_Msk = 0xffffffff

	// INLINK_DSCR_BF1
	// Position of INLINK_DSCR_BF1 field.
	I2S_INLINK_DSCR_BF1_INLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF1 field.
	I2S_INLINK_DSCR_BF1_INLINK_DSCR_BF1_Msk = 0xffffffff

	// OUTLINK_DSCR
	// Position of OUTLINK_DSCR field.
	I2S_OUTLINK_DSCR_OUTLINK_DSCR_Pos = 0x0
	// Bit mask of OUTLINK_DSCR field.
	I2S_OUTLINK_DSCR_OUTLINK_DSCR_Msk = 0xffffffff

	// OUTLINK_DSCR_BF0
	// Position of OUTLINK_DSCR_BF0 field.
	I2S_OUTLINK_DSCR_BF0_OUTLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF0 field.
	I2S_OUTLINK_DSCR_BF0_OUTLINK_DSCR_BF0_Msk = 0xffffffff

	// OUTLINK_DSCR_BF1
	// Position of OUTLINK_DSCR_BF1 field.
	I2S_OUTLINK_DSCR_BF1_OUTLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF1 field.
	I2S_OUTLINK_DSCR_BF1_OUTLINK_DSCR_BF1_Msk = 0xffffffff

	// LC_CONF
	// Position of IN_RST field.
	I2S_LC_CONF_IN_RST_Pos = 0x0
	// Bit mask of IN_RST field.
	I2S_LC_CONF_IN_RST_Msk = 0x1
	// Bit IN_RST.
	I2S_LC_CONF_IN_RST = 0x1
	// Position of OUT_RST field.
	I2S_LC_CONF_OUT_RST_Pos = 0x1
	// Bit mask of OUT_RST field.
	I2S_LC_CONF_OUT_RST_Msk = 0x2
	// Bit OUT_RST.
	I2S_LC_CONF_OUT_RST = 0x2
	// Position of AHBM_FIFO_RST field.
	I2S_LC_CONF_AHBM_FIFO_RST_Pos = 0x2
	// Bit mask of AHBM_FIFO_RST field.
	I2S_LC_CONF_AHBM_FIFO_RST_Msk = 0x4
	// Bit AHBM_FIFO_RST.
	I2S_LC_CONF_AHBM_FIFO_RST = 0x4
	// Position of AHBM_RST field.
	I2S_LC_CONF_AHBM_RST_Pos = 0x3
	// Bit mask of AHBM_RST field.
	I2S_LC_CONF_AHBM_RST_Msk = 0x8
	// Bit AHBM_RST.
	I2S_LC_CONF_AHBM_RST = 0x8
	// Position of OUT_LOOP_TEST field.
	I2S_LC_CONF_OUT_LOOP_TEST_Pos = 0x4
	// Bit mask of OUT_LOOP_TEST field.
	I2S_LC_CONF_OUT_LOOP_TEST_Msk = 0x10
	// Bit OUT_LOOP_TEST.
	I2S_LC_CONF_OUT_LOOP_TEST = 0x10
	// Position of IN_LOOP_TEST field.
	I2S_LC_CONF_IN_LOOP_TEST_Pos = 0x5
	// Bit mask of IN_LOOP_TEST field.
	I2S_LC_CONF_IN_LOOP_TEST_Msk = 0x20
	// Bit IN_LOOP_TEST.
	I2S_LC_CONF_IN_LOOP_TEST = 0x20
	// Position of OUT_AUTO_WRBACK field.
	I2S_LC_CONF_OUT_AUTO_WRBACK_Pos = 0x6
	// Bit mask of OUT_AUTO_WRBACK field.
	I2S_LC_CONF_OUT_AUTO_WRBACK_Msk = 0x40
	// Bit OUT_AUTO_WRBACK.
	I2S_LC_CONF_OUT_AUTO_WRBACK = 0x40
	// Position of OUT_NO_RESTART_CLR field.
	I2S_LC_CONF_OUT_NO_RESTART_CLR_Pos = 0x7
	// Bit mask of OUT_NO_RESTART_CLR field.
	I2S_LC_CONF_OUT_NO_RESTART_CLR_Msk = 0x80
	// Bit OUT_NO_RESTART_CLR.
	I2S_LC_CONF_OUT_NO_RESTART_CLR = 0x80
	// Position of OUT_EOF_MODE field.
	I2S_LC_CONF_OUT_EOF_MODE_Pos = 0x8
	// Bit mask of OUT_EOF_MODE field.
	I2S_LC_CONF_OUT_EOF_MODE_Msk = 0x100
	// Bit OUT_EOF_MODE.
	I2S_LC_CONF_OUT_EOF_MODE = 0x100
	// Position of OUTDSCR_BURST_EN field.
	I2S_LC_CONF_OUTDSCR_BURST_EN_Pos = 0x9
	// Bit mask of OUTDSCR_BURST_EN field.
	I2S_LC_CONF_OUTDSCR_BURST_EN_Msk = 0x200
	// Bit OUTDSCR_BURST_EN.
	I2S_LC_CONF_OUTDSCR_BURST_EN = 0x200
	// Position of INDSCR_BURST_EN field.
	I2S_LC_CONF_INDSCR_BURST_EN_Pos = 0xa
	// Bit mask of INDSCR_BURST_EN field.
	I2S_LC_CONF_INDSCR_BURST_EN_Msk = 0x400
	// Bit INDSCR_BURST_EN.
	I2S_LC_CONF_INDSCR_BURST_EN = 0x400
	// Position of OUT_DATA_BURST_EN field.
	I2S_LC_CONF_OUT_DATA_BURST_EN_Pos = 0xb
	// Bit mask of OUT_DATA_BURST_EN field.
	I2S_LC_CONF_OUT_DATA_BURST_EN_Msk = 0x800
	// Bit OUT_DATA_BURST_EN.
	I2S_LC_CONF_OUT_DATA_BURST_EN = 0x800
	// Position of CHECK_OWNER field.
	I2S_LC_CONF_CHECK_OWNER_Pos = 0xc
	// Bit mask of CHECK_OWNER field.
	I2S_LC_CONF_CHECK_OWNER_Msk = 0x1000
	// Bit CHECK_OWNER.
	I2S_LC_CONF_CHECK_OWNER = 0x1000
	// Position of MEM_TRANS_EN field.
	I2S_LC_CONF_MEM_TRANS_EN_Pos = 0xd
	// Bit mask of MEM_TRANS_EN field.
	I2S_LC_CONF_MEM_TRANS_EN_Msk = 0x2000
	// Bit MEM_TRANS_EN.
	I2S_LC_CONF_MEM_TRANS_EN = 0x2000

	// OUTFIFO_PUSH
	// Position of OUTFIFO_WDATA field.
	I2S_OUTFIFO_PUSH_OUTFIFO_WDATA_Pos = 0x0
	// Bit mask of OUTFIFO_WDATA field.
	I2S_OUTFIFO_PUSH_OUTFIFO_WDATA_Msk = 0x1ff
	// Position of OUTFIFO_PUSH field.
	I2S_OUTFIFO_PUSH_OUTFIFO_PUSH_Pos = 0x10
	// Bit mask of OUTFIFO_PUSH field.
	I2S_OUTFIFO_PUSH_OUTFIFO_PUSH_Msk = 0x10000
	// Bit OUTFIFO_PUSH.
	I2S_OUTFIFO_PUSH_OUTFIFO_PUSH = 0x10000

	// INFIFO_POP
	// Position of INFIFO_RDATA field.
	I2S_INFIFO_POP_INFIFO_RDATA_Pos = 0x0
	// Bit mask of INFIFO_RDATA field.
	I2S_INFIFO_POP_INFIFO_RDATA_Msk = 0xfff
	// Position of INFIFO_POP field.
	I2S_INFIFO_POP_INFIFO_POP_Pos = 0x10
	// Bit mask of INFIFO_POP field.
	I2S_INFIFO_POP_INFIFO_POP_Msk = 0x10000
	// Bit INFIFO_POP.
	I2S_INFIFO_POP_INFIFO_POP = 0x10000

	// LC_STATE0
	// Position of LC_STATE0 field.
	I2S_LC_STATE0_LC_STATE0_Pos = 0x0
	// Bit mask of LC_STATE0 field.
	I2S_LC_STATE0_LC_STATE0_Msk = 0xffffffff

	// LC_STATE1
	// Position of LC_STATE1 field.
	I2S_LC_STATE1_LC_STATE1_Pos = 0x0
	// Bit mask of LC_STATE1 field.
	I2S_LC_STATE1_LC_STATE1_Msk = 0xffffffff

	// LC_HUNG_CONF
	// Position of LC_FIFO_TIMEOUT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_Pos = 0x0
	// Bit mask of LC_FIFO_TIMEOUT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_Msk = 0xff
	// Position of LC_FIFO_TIMEOUT_SHIFT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT_Pos = 0x8
	// Bit mask of LC_FIFO_TIMEOUT_SHIFT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT_Msk = 0x700
	// Position of LC_FIFO_TIMEOUT_ENA field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA_Pos = 0xb
	// Bit mask of LC_FIFO_TIMEOUT_ENA field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA_Msk = 0x800
	// Bit LC_FIFO_TIMEOUT_ENA.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA = 0x800

	// CVSD_CONF0
	// Position of CVSD_Y_MAX field.
	I2S_CVSD_CONF0_CVSD_Y_MAX_Pos = 0x0
	// Bit mask of CVSD_Y_MAX field.
	I2S_CVSD_CONF0_CVSD_Y_MAX_Msk = 0xffff
	// Position of CVSD_Y_MIN field.
	I2S_CVSD_CONF0_CVSD_Y_MIN_Pos = 0x10
	// Bit mask of CVSD_Y_MIN field.
	I2S_CVSD_CONF0_CVSD_Y_MIN_Msk = 0xffff0000

	// CVSD_CONF1
	// Position of CVSD_SIGMA_MAX field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MAX_Pos = 0x0
	// Bit mask of CVSD_SIGMA_MAX field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MAX_Msk = 0xffff
	// Position of CVSD_SIGMA_MIN field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MIN_Pos = 0x10
	// Bit mask of CVSD_SIGMA_MIN field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MIN_Msk = 0xffff0000

	// CVSD_CONF2
	// Position of CVSD_K field.
	I2S_CVSD_CONF2_CVSD_K_Pos = 0x0
	// Bit mask of CVSD_K field.
	I2S_CVSD_CONF2_CVSD_K_Msk = 0x7
	// Position of CVSD_J field.
	I2S_CVSD_CONF2_CVSD_J_Pos = 0x3
	// Bit mask of CVSD_J field.
	I2S_CVSD_CONF2_CVSD_J_Msk = 0x38
	// Position of CVSD_BETA field.
	I2S_CVSD_CONF2_CVSD_BETA_Pos = 0x6
	// Bit mask of CVSD_BETA field.
	I2S_CVSD_CONF2_CVSD_BETA_Msk = 0xffc0
	// Position of CVSD_H field.
	I2S_CVSD_CONF2_CVSD_H_Pos = 0x10
	// Bit mask of CVSD_H field.
	I2S_CVSD_CONF2_CVSD_H_Msk = 0x70000

	// PLC_CONF0
	// Position of GOOD_PACK_MAX field.
	I2S_PLC_CONF0_GOOD_PACK_MAX_Pos = 0x0
	// Bit mask of GOOD_PACK_MAX field.
	I2S_PLC_CONF0_GOOD_PACK_MAX_Msk = 0x3f
	// Position of N_ERR_SEG field.
	I2S_PLC_CONF0_N_ERR_SEG_Pos = 0x6
	// Bit mask of N_ERR_SEG field.
	I2S_PLC_CONF0_N_ERR_SEG_Msk = 0x1c0
	// Position of SHIFT_RATE field.
	I2S_PLC_CONF0_SHIFT_RATE_Pos = 0x9
	// Bit mask of SHIFT_RATE field.
	I2S_PLC_CONF0_SHIFT_RATE_Msk = 0xe00
	// Position of MAX_SLIDE_SAMPLE field.
	I2S_PLC_CONF0_MAX_SLIDE_SAMPLE_Pos = 0xc
	// Bit mask of MAX_SLIDE_SAMPLE field.
	I2S_PLC_CONF0_MAX_SLIDE_SAMPLE_Msk = 0xff000
	// Position of PACK_LEN_8K field.
	I2S_PLC_CONF0_PACK_LEN_8K_Pos = 0x14
	// Bit mask of PACK_LEN_8K field.
	I2S_PLC_CONF0_PACK_LEN_8K_Msk = 0x1f00000
	// Position of N_MIN_ERR field.
	I2S_PLC_CONF0_N_MIN_ERR_Pos = 0x19
	// Bit mask of N_MIN_ERR field.
	I2S_PLC_CONF0_N_MIN_ERR_Msk = 0xe000000

	// PLC_CONF1
	// Position of BAD_CEF_ATTEN_PARA field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_Pos = 0x0
	// Bit mask of BAD_CEF_ATTEN_PARA field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_Msk = 0xff
	// Position of BAD_CEF_ATTEN_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT_Pos = 0x8
	// Bit mask of BAD_CEF_ATTEN_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT_Msk = 0xf00
	// Position of BAD_OLA_WIN2_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT_Pos = 0xc
	// Bit mask of BAD_OLA_WIN2_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT_Msk = 0xf000
	// Position of BAD_OLA_WIN2_PARA field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_Pos = 0x10
	// Bit mask of BAD_OLA_WIN2_PARA field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_Msk = 0xff0000
	// Position of SLIDE_WIN_LEN field.
	I2S_PLC_CONF1_SLIDE_WIN_LEN_Pos = 0x18
	// Bit mask of SLIDE_WIN_LEN field.
	I2S_PLC_CONF1_SLIDE_WIN_LEN_Msk = 0xff000000

	// PLC_CONF2
	// Position of CVSD_SEG_MOD field.
	I2S_PLC_CONF2_CVSD_SEG_MOD_Pos = 0x0
	// Bit mask of CVSD_SEG_MOD field.
	I2S_PLC_CONF2_CVSD_SEG_MOD_Msk = 0x3
	// Position of MIN_PERIOD field.
	I2S_PLC_CONF2_MIN_PERIOD_Pos = 0x2
	// Bit mask of MIN_PERIOD field.
	I2S_PLC_CONF2_MIN_PERIOD_Msk = 0x7c

	// ESCO_CONF0
	// Position of ESCO_EN field.
	I2S_ESCO_CONF0_ESCO_EN_Pos = 0x0
	// Bit mask of ESCO_EN field.
	I2S_ESCO_CONF0_ESCO_EN_Msk = 0x1
	// Bit ESCO_EN.
	I2S_ESCO_CONF0_ESCO_EN = 0x1
	// Position of ESCO_CHAN_MOD field.
	I2S_ESCO_CONF0_ESCO_CHAN_MOD_Pos = 0x1
	// Bit mask of ESCO_CHAN_MOD field.
	I2S_ESCO_CONF0_ESCO_CHAN_MOD_Msk = 0x2
	// Bit ESCO_CHAN_MOD.
	I2S_ESCO_CONF0_ESCO_CHAN_MOD = 0x2
	// Position of ESCO_CVSD_DEC_PACK_ERR field.
	I2S_ESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR_Pos = 0x2
	// Bit mask of ESCO_CVSD_DEC_PACK_ERR field.
	I2S_ESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR_Msk = 0x4
	// Bit ESCO_CVSD_DEC_PACK_ERR.
	I2S_ESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR = 0x4
	// Position of ESCO_CVSD_PACK_LEN_8K field.
	I2S_ESCO_CONF0_ESCO_CVSD_PACK_LEN_8K_Pos = 0x3
	// Bit mask of ESCO_CVSD_PACK_LEN_8K field.
	I2S_ESCO_CONF0_ESCO_CVSD_PACK_LEN_8K_Msk = 0xf8
	// Position of ESCO_CVSD_INF_EN field.
	I2S_ESCO_CONF0_ESCO_CVSD_INF_EN_Pos = 0x8
	// Bit mask of ESCO_CVSD_INF_EN field.
	I2S_ESCO_CONF0_ESCO_CVSD_INF_EN_Msk = 0x100
	// Bit ESCO_CVSD_INF_EN.
	I2S_ESCO_CONF0_ESCO_CVSD_INF_EN = 0x100
	// Position of CVSD_DEC_START field.
	I2S_ESCO_CONF0_CVSD_DEC_START_Pos = 0x9
	// Bit mask of CVSD_DEC_START field.
	I2S_ESCO_CONF0_CVSD_DEC_START_Msk = 0x200
	// Bit CVSD_DEC_START.
	I2S_ESCO_CONF0_CVSD_DEC_START = 0x200
	// Position of CVSD_DEC_RESET field.
	I2S_ESCO_CONF0_CVSD_DEC_RESET_Pos = 0xa
	// Bit mask of CVSD_DEC_RESET field.
	I2S_ESCO_CONF0_CVSD_DEC_RESET_Msk = 0x400
	// Bit CVSD_DEC_RESET.
	I2S_ESCO_CONF0_CVSD_DEC_RESET = 0x400
	// Position of PLC_EN field.
	I2S_ESCO_CONF0_PLC_EN_Pos = 0xb
	// Bit mask of PLC_EN field.
	I2S_ESCO_CONF0_PLC_EN_Msk = 0x800
	// Bit PLC_EN.
	I2S_ESCO_CONF0_PLC_EN = 0x800
	// Position of PLC2DMA_EN field.
	I2S_ESCO_CONF0_PLC2DMA_EN_Pos = 0xc
	// Bit mask of PLC2DMA_EN field.
	I2S_ESCO_CONF0_PLC2DMA_EN_Msk = 0x1000
	// Bit PLC2DMA_EN.
	I2S_ESCO_CONF0_PLC2DMA_EN = 0x1000

	// SCO_CONF0
	// Position of SCO_WITH_I2S_EN field.
	I2S_SCO_CONF0_SCO_WITH_I2S_EN_Pos = 0x0
	// Bit mask of SCO_WITH_I2S_EN field.
	I2S_SCO_CONF0_SCO_WITH_I2S_EN_Msk = 0x1
	// Bit SCO_WITH_I2S_EN.
	I2S_SCO_CONF0_SCO_WITH_I2S_EN = 0x1
	// Position of SCO_NO_I2S_EN field.
	I2S_SCO_CONF0_SCO_NO_I2S_EN_Pos = 0x1
	// Bit mask of SCO_NO_I2S_EN field.
	I2S_SCO_CONF0_SCO_NO_I2S_EN_Msk = 0x2
	// Bit SCO_NO_I2S_EN.
	I2S_SCO_CONF0_SCO_NO_I2S_EN = 0x2
	// Position of CVSD_ENC_START field.
	I2S_SCO_CONF0_CVSD_ENC_START_Pos = 0x2
	// Bit mask of CVSD_ENC_START field.
	I2S_SCO_CONF0_CVSD_ENC_START_Msk = 0x4
	// Bit CVSD_ENC_START.
	I2S_SCO_CONF0_CVSD_ENC_START = 0x4
	// Position of CVSD_ENC_RESET field.
	I2S_SCO_CONF0_CVSD_ENC_RESET_Pos = 0x3
	// Bit mask of CVSD_ENC_RESET field.
	I2S_SCO_CONF0_CVSD_ENC_RESET_Msk = 0x8
	// Bit CVSD_ENC_RESET.
	I2S_SCO_CONF0_CVSD_ENC_RESET = 0x8

	// CONF1
	// Position of TX_PCM_CONF field.
	I2S_CONF1_TX_PCM_CONF_Pos = 0x0
	// Bit mask of TX_PCM_CONF field.
	I2S_CONF1_TX_PCM_CONF_Msk = 0x7
	// Position of TX_PCM_BYPASS field.
	I2S_CONF1_TX_PCM_BYPASS_Pos = 0x3
	// Bit mask of TX_PCM_BYPASS field.
	I2S_CONF1_TX_PCM_BYPASS_Msk = 0x8
	// Bit TX_PCM_BYPASS.
	I2S_CONF1_TX_PCM_BYPASS = 0x8
	// Position of RX_PCM_CONF field.
	I2S_CONF1_RX_PCM_CONF_Pos = 0x4
	// Bit mask of RX_PCM_CONF field.
	I2S_CONF1_RX_PCM_CONF_Msk = 0x70
	// Position of RX_PCM_BYPASS field.
	I2S_CONF1_RX_PCM_BYPASS_Pos = 0x7
	// Bit mask of RX_PCM_BYPASS field.
	I2S_CONF1_RX_PCM_BYPASS_Msk = 0x80
	// Bit RX_PCM_BYPASS.
	I2S_CONF1_RX_PCM_BYPASS = 0x80
	// Position of TX_STOP_EN field.
	I2S_CONF1_TX_STOP_EN_Pos = 0x8
	// Bit mask of TX_STOP_EN field.
	I2S_CONF1_TX_STOP_EN_Msk = 0x100
	// Bit TX_STOP_EN.
	I2S_CONF1_TX_STOP_EN = 0x100
	// Position of TX_ZEROS_RM_EN field.
	I2S_CONF1_TX_ZEROS_RM_EN_Pos = 0x9
	// Bit mask of TX_ZEROS_RM_EN field.
	I2S_CONF1_TX_ZEROS_RM_EN_Msk = 0x200
	// Bit TX_ZEROS_RM_EN.
	I2S_CONF1_TX_ZEROS_RM_EN = 0x200

	// PD_CONF
	// Position of FIFO_FORCE_PD field.
	I2S_PD_CONF_FIFO_FORCE_PD_Pos = 0x0
	// Bit mask of FIFO_FORCE_PD field.
	I2S_PD_CONF_FIFO_FORCE_PD_Msk = 0x1
	// Bit FIFO_FORCE_PD.
	I2S_PD_CONF_FIFO_FORCE_PD = 0x1
	// Position of FIFO_FORCE_PU field.
	I2S_PD_CONF_FIFO_FORCE_PU_Pos = 0x1
	// Bit mask of FIFO_FORCE_PU field.
	I2S_PD_CONF_FIFO_FORCE_PU_Msk = 0x2
	// Bit FIFO_FORCE_PU.
	I2S_PD_CONF_FIFO_FORCE_PU = 0x2
	// Position of PLC_MEM_FORCE_PD field.
	I2S_PD_CONF_PLC_MEM_FORCE_PD_Pos = 0x2
	// Bit mask of PLC_MEM_FORCE_PD field.
	I2S_PD_CONF_PLC_MEM_FORCE_PD_Msk = 0x4
	// Bit PLC_MEM_FORCE_PD.
	I2S_PD_CONF_PLC_MEM_FORCE_PD = 0x4
	// Position of PLC_MEM_FORCE_PU field.
	I2S_PD_CONF_PLC_MEM_FORCE_PU_Pos = 0x3
	// Bit mask of PLC_MEM_FORCE_PU field.
	I2S_PD_CONF_PLC_MEM_FORCE_PU_Msk = 0x8
	// Bit PLC_MEM_FORCE_PU.
	I2S_PD_CONF_PLC_MEM_FORCE_PU = 0x8

	// CONF2
	// Position of CAMERA_EN field.
	I2S_CONF2_CAMERA_EN_Pos = 0x0
	// Bit mask of CAMERA_EN field.
	I2S_CONF2_CAMERA_EN_Msk = 0x1
	// Bit CAMERA_EN.
	I2S_CONF2_CAMERA_EN = 0x1
	// Position of LCD_TX_WRX2_EN field.
	I2S_CONF2_LCD_TX_WRX2_EN_Pos = 0x1
	// Bit mask of LCD_TX_WRX2_EN field.
	I2S_CONF2_LCD_TX_WRX2_EN_Msk = 0x2
	// Bit LCD_TX_WRX2_EN.
	I2S_CONF2_LCD_TX_WRX2_EN = 0x2
	// Position of LCD_TX_SDX2_EN field.
	I2S_CONF2_LCD_TX_SDX2_EN_Pos = 0x2
	// Bit mask of LCD_TX_SDX2_EN field.
	I2S_CONF2_LCD_TX_SDX2_EN_Msk = 0x4
	// Bit LCD_TX_SDX2_EN.
	I2S_CONF2_LCD_TX_SDX2_EN = 0x4
	// Position of DATA_ENABLE_TEST_EN field.
	I2S_CONF2_DATA_ENABLE_TEST_EN_Pos = 0x3
	// Bit mask of DATA_ENABLE_TEST_EN field.
	I2S_CONF2_DATA_ENABLE_TEST_EN_Msk = 0x8
	// Bit DATA_ENABLE_TEST_EN.
	I2S_CONF2_DATA_ENABLE_TEST_EN = 0x8
	// Position of DATA_ENABLE field.
	I2S_CONF2_DATA_ENABLE_Pos = 0x4
	// Bit mask of DATA_ENABLE field.
	I2S_CONF2_DATA_ENABLE_Msk = 0x10
	// Bit DATA_ENABLE.
	I2S_CONF2_DATA_ENABLE = 0x10
	// Position of LCD_EN field.
	I2S_CONF2_LCD_EN_Pos = 0x5
	// Bit mask of LCD_EN field.
	I2S_CONF2_LCD_EN_Msk = 0x20
	// Bit LCD_EN.
	I2S_CONF2_LCD_EN = 0x20
	// Position of EXT_ADC_START_EN field.
	I2S_CONF2_EXT_ADC_START_EN_Pos = 0x6
	// Bit mask of EXT_ADC_START_EN field.
	I2S_CONF2_EXT_ADC_START_EN_Msk = 0x40
	// Bit EXT_ADC_START_EN.
	I2S_CONF2_EXT_ADC_START_EN = 0x40
	// Position of INTER_VALID_EN field.
	I2S_CONF2_INTER_VALID_EN_Pos = 0x7
	// Bit mask of INTER_VALID_EN field.
	I2S_CONF2_INTER_VALID_EN_Msk = 0x80
	// Bit INTER_VALID_EN.
	I2S_CONF2_INTER_VALID_EN = 0x80

	// CLKM_CONF
	// Position of CLKM_DIV_NUM field.
	I2S_CLKM_CONF_CLKM_DIV_NUM_Pos = 0x0
	// Bit mask of CLKM_DIV_NUM field.
	I2S_CLKM_CONF_CLKM_DIV_NUM_Msk = 0xff
	// Position of CLKM_DIV_B field.
	I2S_CLKM_CONF_CLKM_DIV_B_Pos = 0x8
	// Bit mask of CLKM_DIV_B field.
	I2S_CLKM_CONF_CLKM_DIV_B_Msk = 0x3f00
	// Position of CLKM_DIV_A field.
	I2S_CLKM_CONF_CLKM_DIV_A_Pos = 0xe
	// Bit mask of CLKM_DIV_A field.
	I2S_CLKM_CONF_CLKM_DIV_A_Msk = 0xfc000
	// Position of CLK_EN field.
	I2S_CLKM_CONF_CLK_EN_Pos = 0x14
	// Bit mask of CLK_EN field.
	I2S_CLKM_CONF_CLK_EN_Msk = 0x100000
	// Bit CLK_EN.
	I2S_CLKM_CONF_CLK_EN = 0x100000
	// Position of CLKA_ENA field.
	I2S_CLKM_CONF_CLKA_ENA_Pos = 0x15
	// Bit mask of CLKA_ENA field.
	I2S_CLKM_CONF_CLKA_ENA_Msk = 0x200000
	// Bit CLKA_ENA.
	I2S_CLKM_CONF_CLKA_ENA = 0x200000

	// SAMPLE_RATE_CONF
	// Position of TX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_TX_BCK_DIV_NUM_Pos = 0x0
	// Bit mask of TX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_TX_BCK_DIV_NUM_Msk = 0x3f
	// Position of RX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_RX_BCK_DIV_NUM_Pos = 0x6
	// Bit mask of RX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_RX_BCK_DIV_NUM_Msk = 0xfc0
	// Position of TX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_TX_BITS_MOD_Pos = 0xc
	// Bit mask of TX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_TX_BITS_MOD_Msk = 0x3f000
	// Position of RX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_RX_BITS_MOD_Pos = 0x12
	// Bit mask of RX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_RX_BITS_MOD_Msk = 0xfc0000

	// PDM_CONF
	// Position of TX_PDM_EN field.
	I2S_PDM_CONF_TX_PDM_EN_Pos = 0x0
	// Bit mask of TX_PDM_EN field.
	I2S_PDM_CONF_TX_PDM_EN_Msk = 0x1
	// Bit TX_PDM_EN.
	I2S_PDM_CONF_TX_PDM_EN = 0x1
	// Position of RX_PDM_EN field.
	I2S_PDM_CONF_RX_PDM_EN_Pos = 0x1
	// Bit mask of RX_PDM_EN field.
	I2S_PDM_CONF_RX_PDM_EN_Msk = 0x2
	// Bit RX_PDM_EN.
	I2S_PDM_CONF_RX_PDM_EN = 0x2
	// Position of PCM2PDM_CONV_EN field.
	I2S_PDM_CONF_PCM2PDM_CONV_EN_Pos = 0x2
	// Bit mask of PCM2PDM_CONV_EN field.
	I2S_PDM_CONF_PCM2PDM_CONV_EN_Msk = 0x4
	// Bit PCM2PDM_CONV_EN.
	I2S_PDM_CONF_PCM2PDM_CONV_EN = 0x4
	// Position of PDM2PCM_CONV_EN field.
	I2S_PDM_CONF_PDM2PCM_CONV_EN_Pos = 0x3
	// Bit mask of PDM2PCM_CONV_EN field.
	I2S_PDM_CONF_PDM2PCM_CONV_EN_Msk = 0x8
	// Bit PDM2PCM_CONV_EN.
	I2S_PDM_CONF_PDM2PCM_CONV_EN = 0x8
	// Position of TX_PDM_SINC_OSR2 field.
	I2S_PDM_CONF_TX_PDM_SINC_OSR2_Pos = 0x4
	// Bit mask of TX_PDM_SINC_OSR2 field.
	I2S_PDM_CONF_TX_PDM_SINC_OSR2_Msk = 0xf0
	// Position of TX_PDM_PRESCALE field.
	I2S_PDM_CONF_TX_PDM_PRESCALE_Pos = 0x8
	// Bit mask of TX_PDM_PRESCALE field.
	I2S_PDM_CONF_TX_PDM_PRESCALE_Msk = 0xff00
	// Position of TX_PDM_HP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_HP_IN_SHIFT_Pos = 0x10
	// Bit mask of TX_PDM_HP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_HP_IN_SHIFT_Msk = 0x30000
	// Position of TX_PDM_LP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_LP_IN_SHIFT_Pos = 0x12
	// Bit mask of TX_PDM_LP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_LP_IN_SHIFT_Msk = 0xc0000
	// Position of TX_PDM_SINC_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SINC_IN_SHIFT_Pos = 0x14
	// Bit mask of TX_PDM_SINC_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SINC_IN_SHIFT_Msk = 0x300000
	// Position of TX_PDM_SIGMADELTA_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT_Pos = 0x16
	// Bit mask of TX_PDM_SIGMADELTA_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT_Msk = 0xc00000
	// Position of RX_PDM_SINC_DSR_16_EN field.
	I2S_PDM_CONF_RX_PDM_SINC_DSR_16_EN_Pos = 0x18
	// Bit mask of RX_PDM_SINC_DSR_16_EN field.
	I2S_PDM_CONF_RX_PDM_SINC_DSR_16_EN_Msk = 0x1000000
	// Bit RX_PDM_SINC_DSR_16_EN.
	I2S_PDM_CONF_RX_PDM_SINC_DSR_16_EN = 0x1000000
	// Position of TX_PDM_HP_BYPASS field.
	I2S_PDM_CONF_TX_PDM_HP_BYPASS_Pos = 0x19
	// Bit mask of TX_PDM_HP_BYPASS field.
	I2S_PDM_CONF_TX_PDM_HP_BYPASS_Msk = 0x2000000
	// Bit TX_PDM_HP_BYPASS.
	I2S_PDM_CONF_TX_PDM_HP_BYPASS = 0x2000000

	// PDM_FREQ_CONF
	// Position of TX_PDM_FS field.
	I2S_PDM_FREQ_CONF_TX_PDM_FS_Pos = 0x0
	// Bit mask of TX_PDM_FS field.
	I2S_PDM_FREQ_CONF_TX_PDM_FS_Msk = 0x3ff
	// Position of TX_PDM_FP field.
	I2S_PDM_FREQ_CONF_TX_PDM_FP_Pos = 0xa
	// Bit mask of TX_PDM_FP field.
	I2S_PDM_FREQ_CONF_TX_PDM_FP_Msk = 0xffc00

	// STATE
	// Position of TX_IDLE field.
	I2S_STATE_TX_IDLE_Pos = 0x0
	// Bit mask of TX_IDLE field.
	I2S_STATE_TX_IDLE_Msk = 0x1
	// Bit TX_IDLE.
	I2S_STATE_TX_IDLE = 0x1
	// Position of TX_FIFO_RESET_BACK field.
	I2S_STATE_TX_FIFO_RESET_BACK_Pos = 0x1
	// Bit mask of TX_FIFO_RESET_BACK field.
	I2S_STATE_TX_FIFO_RESET_BACK_Msk = 0x2
	// Bit TX_FIFO_RESET_BACK.
	I2S_STATE_TX_FIFO_RESET_BACK = 0x2
	// Position of RX_FIFO_RESET_BACK field.
	I2S_STATE_RX_FIFO_RESET_BACK_Pos = 0x2
	// Bit mask of RX_FIFO_RESET_BACK field.
	I2S_STATE_RX_FIFO_RESET_BACK_Msk = 0x4
	// Bit RX_FIFO_RESET_BACK.
	I2S_STATE_RX_FIFO_RESET_BACK = 0x4

	// DATE
	// Position of I2SDATE field.
	I2S_DATE_I2SDATE_Pos = 0x0
	// Bit mask of I2SDATE field.
	I2S_DATE_I2SDATE_Msk = 0xffffffff
)

// Constants for IO_MUX: Input/Output Multiplexer
const (
	// PIN_CTRL
	// Position of CLK1 field.
	IO_MUX_PIN_CTRL_CLK1_Pos = 0x0
	// Bit mask of CLK1 field.
	IO_MUX_PIN_CTRL_CLK1_Msk = 0xf
	// Position of CLK2 field.
	IO_MUX_PIN_CTRL_CLK2_Pos = 0x4
	// Bit mask of CLK2 field.
	IO_MUX_PIN_CTRL_CLK2_Msk = 0xf0
	// Position of CLK3 field.
	IO_MUX_PIN_CTRL_CLK3_Pos = 0x8
	// Bit mask of CLK3 field.
	IO_MUX_PIN_CTRL_CLK3_Msk = 0xf00

	// GPIO36
	// Position of MCU_OE field.
	IO_MUX_GPIO36_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO36_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO36_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO36_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO36_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO36_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO36_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO36_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO36_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO36_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO36_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO36_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO36_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO36_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO36_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO36_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO36_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO36_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO36_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO36_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO36_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO36_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO36_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO36_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO36_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO36_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO36_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO36_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO36_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO36_MCU_SEL_Msk = 0x7000

	// GPIO37
	// Position of MCU_OE field.
	IO_MUX_GPIO37_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO37_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO37_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO37_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO37_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO37_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO37_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO37_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO37_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO37_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO37_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO37_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO37_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO37_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO37_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO37_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO37_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO37_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO37_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO37_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO37_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO37_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO37_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO37_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO37_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO37_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO37_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO37_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO37_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO37_MCU_SEL_Msk = 0x7000

	// GPIO38
	// Position of MCU_OE field.
	IO_MUX_GPIO38_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO38_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO38_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO38_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO38_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO38_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO38_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO38_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO38_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO38_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO38_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO38_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO38_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO38_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO38_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO38_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO38_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO38_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO38_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO38_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO38_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO38_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO38_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO38_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO38_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO38_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO38_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO38_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO38_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO38_MCU_SEL_Msk = 0x7000

	// GPIO39
	// Position of MCU_OE field.
	IO_MUX_GPIO39_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO39_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO39_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO39_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO39_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO39_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO39_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO39_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO39_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO39_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO39_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO39_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO39_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO39_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO39_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO39_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO39_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO39_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO39_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO39_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO39_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO39_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO39_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO39_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO39_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO39_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO39_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO39_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO39_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO39_MCU_SEL_Msk = 0x7000

	// GPIO34
	// Position of MCU_OE field.
	IO_MUX_GPIO34_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO34_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO34_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO34_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO34_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO34_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO34_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO34_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO34_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO34_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO34_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO34_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO34_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO34_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO34_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO34_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO34_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO34_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO34_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO34_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO34_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO34_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO34_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO34_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO34_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO34_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO34_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO34_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO34_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO34_MCU_SEL_Msk = 0x7000

	// GPIO35
	// Position of MCU_OE field.
	IO_MUX_GPIO35_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO35_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO35_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO35_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO35_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO35_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO35_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO35_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO35_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO35_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO35_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO35_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO35_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO35_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO35_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO35_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO35_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO35_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO35_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO35_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO35_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO35_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO35_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO35_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO35_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO35_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO35_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO35_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO35_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO35_MCU_SEL_Msk = 0x7000

	// GPIO32
	// Position of MCU_OE field.
	IO_MUX_GPIO32_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO32_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO32_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO32_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO32_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO32_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO32_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO32_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO32_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO32_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO32_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO32_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO32_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO32_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO32_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO32_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO32_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO32_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO32_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO32_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO32_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO32_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO32_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO32_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO32_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO32_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO32_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO32_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO32_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO32_MCU_SEL_Msk = 0x7000

	// GPIO33
	// Position of MCU_OE field.
	IO_MUX_GPIO33_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO33_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO33_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO33_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO33_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO33_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO33_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO33_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO33_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO33_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO33_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO33_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO33_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO33_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO33_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO33_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO33_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO33_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO33_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO33_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO33_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO33_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO33_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO33_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO33_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO33_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO33_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO33_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO33_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO33_MCU_SEL_Msk = 0x7000

	// GPIO25
	// Position of MCU_OE field.
	IO_MUX_GPIO25_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO25_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO25_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO25_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO25_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO25_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO25_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO25_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO25_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO25_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO25_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO25_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO25_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO25_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO25_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO25_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO25_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO25_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO25_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO25_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO25_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO25_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO25_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO25_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO25_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO25_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO25_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO25_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO25_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO25_MCU_SEL_Msk = 0x7000

	// GPIO26
	// Position of MCU_OE field.
	IO_MUX_GPIO26_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO26_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO26_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO26_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO26_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO26_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO26_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO26_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO26_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO26_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO26_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO26_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO26_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO26_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO26_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO26_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO26_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO26_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO26_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO26_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO26_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO26_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO26_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO26_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO26_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO26_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO26_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO26_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO26_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO26_MCU_SEL_Msk = 0x7000

	// GPIO27
	// Position of MCU_OE field.
	IO_MUX_GPIO27_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO27_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO27_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO27_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO27_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO27_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO27_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO27_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO27_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO27_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO27_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO27_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO27_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO27_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO27_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO27_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO27_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO27_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO27_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO27_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO27_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO27_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO27_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO27_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO27_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO27_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO27_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO27_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO27_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO27_MCU_SEL_Msk = 0x7000

	// GPIO14
	// Position of MCU_OE field.
	IO_MUX_GPIO14_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO14_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO14_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO14_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO14_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO14_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO14_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO14_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO14_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO14_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO14_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO14_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO14_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO14_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO14_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO14_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO14_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO14_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO14_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO14_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO14_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO14_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO14_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO14_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO14_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO14_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO14_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO14_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO14_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO14_MCU_SEL_Msk = 0x7000

	// GPIO12
	// Position of MCU_OE field.
	IO_MUX_GPIO12_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO12_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO12_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO12_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO12_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO12_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO12_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO12_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO12_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO12_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO12_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO12_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO12_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO12_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO12_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO12_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO12_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO12_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO12_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO12_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO12_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO12_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO12_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO12_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO12_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO12_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO12_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO12_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO12_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO12_MCU_SEL_Msk = 0x7000

	// GPIO13
	// Position of MCU_OE field.
	IO_MUX_GPIO13_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO13_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO13_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO13_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO13_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO13_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO13_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO13_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO13_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO13_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO13_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO13_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO13_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO13_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO13_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO13_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO13_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO13_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO13_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO13_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO13_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO13_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO13_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO13_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO13_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO13_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO13_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO13_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO13_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO13_MCU_SEL_Msk = 0x7000

	// GPIO15
	// Position of MCU_OE field.
	IO_MUX_GPIO15_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO15_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO15_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO15_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO15_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO15_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO15_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO15_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO15_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO15_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO15_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO15_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO15_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO15_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO15_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO15_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO15_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO15_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO15_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO15_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO15_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO15_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO15_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO15_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO15_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO15_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO15_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO15_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO15_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO15_MCU_SEL_Msk = 0x7000

	// GPIO2
	// Position of MCU_OE field.
	IO_MUX_GPIO2_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO2_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO2_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO2_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO2_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO2_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO2_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO2_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO2_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO2_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO2_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO2_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO2_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO2_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO2_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO2_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO2_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO2_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO2_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO2_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO2_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO2_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO2_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO2_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO2_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO2_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO2_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO2_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO2_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO2_MCU_SEL_Msk = 0x7000

	// GPIO0
	// Position of MCU_OE field.
	IO_MUX_GPIO0_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO0_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO0_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO0_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO0_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO0_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO0_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO0_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO0_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO0_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO0_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO0_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO0_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO0_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO0_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO0_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO0_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO0_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO0_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO0_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO0_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO0_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO0_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO0_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO0_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO0_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO0_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO0_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO0_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO0_MCU_SEL_Msk = 0x7000

	// GPIO4
	// Position of MCU_OE field.
	IO_MUX_GPIO4_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO4_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO4_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO4_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO4_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO4_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO4_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO4_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO4_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO4_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO4_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO4_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO4_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO4_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO4_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO4_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO4_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO4_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO4_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO4_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO4_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO4_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO4_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO4_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO4_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO4_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO4_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO4_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO4_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO4_MCU_SEL_Msk = 0x7000

	// GPIO16
	// Position of MCU_OE field.
	IO_MUX_GPIO16_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO16_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO16_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO16_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO16_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO16_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO16_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO16_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO16_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO16_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO16_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO16_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO16_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO16_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO16_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO16_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO16_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO16_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO16_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO16_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO16_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO16_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO16_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO16_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO16_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO16_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO16_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO16_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO16_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO16_MCU_SEL_Msk = 0x7000

	// GPIO17
	// Position of MCU_OE field.
	IO_MUX_GPIO17_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO17_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO17_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO17_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO17_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO17_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO17_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO17_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO17_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO17_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO17_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO17_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO17_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO17_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO17_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO17_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO17_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO17_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO17_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO17_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO17_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO17_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO17_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO17_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO17_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO17_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO17_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO17_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO17_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO17_MCU_SEL_Msk = 0x7000

	// GPIO9
	// Position of MCU_OE field.
	IO_MUX_GPIO9_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO9_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO9_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO9_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO9_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO9_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO9_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO9_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO9_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO9_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO9_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO9_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO9_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO9_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO9_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO9_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO9_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO9_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO9_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO9_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO9_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO9_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO9_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO9_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO9_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO9_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO9_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO9_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO9_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO9_MCU_SEL_Msk = 0x7000

	// GPIO10
	// Position of MCU_OE field.
	IO_MUX_GPIO10_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO10_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO10_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO10_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO10_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO10_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO10_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO10_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO10_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO10_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO10_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO10_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO10_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO10_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO10_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO10_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO10_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO10_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO10_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO10_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO10_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO10_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO10_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO10_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO10_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO10_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO10_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO10_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO10_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO10_MCU_SEL_Msk = 0x7000

	// GPIO11
	// Position of MCU_OE field.
	IO_MUX_GPIO11_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO11_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO11_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO11_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO11_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO11_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO11_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO11_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO11_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO11_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO11_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO11_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO11_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO11_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO11_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO11_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO11_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO11_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO11_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO11_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO11_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO11_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO11_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO11_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO11_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO11_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO11_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO11_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO11_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO11_MCU_SEL_Msk = 0x7000

	// GPIO6
	// Position of MCU_OE field.
	IO_MUX_GPIO6_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO6_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO6_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO6_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO6_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO6_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO6_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO6_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO6_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO6_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO6_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO6_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO6_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO6_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO6_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO6_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO6_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO6_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO6_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO6_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO6_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO6_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO6_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO6_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO6_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO6_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO6_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO6_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO6_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO6_MCU_SEL_Msk = 0x7000

	// GPIO7
	// Position of MCU_OE field.
	IO_MUX_GPIO7_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO7_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO7_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO7_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO7_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO7_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO7_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO7_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO7_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO7_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO7_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO7_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO7_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO7_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO7_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO7_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO7_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO7_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO7_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO7_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO7_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO7_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO7_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO7_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO7_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO7_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO7_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO7_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO7_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO7_MCU_SEL_Msk = 0x7000

	// GPIO8
	// Position of MCU_OE field.
	IO_MUX_GPIO8_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO8_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO8_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO8_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO8_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO8_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO8_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO8_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO8_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO8_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO8_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO8_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO8_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO8_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO8_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO8_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO8_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO8_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO8_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO8_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO8_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO8_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO8_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO8_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO8_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO8_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO8_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO8_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO8_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO8_MCU_SEL_Msk = 0x7000

	// GPIO5
	// Position of MCU_OE field.
	IO_MUX_GPIO5_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO5_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO5_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO5_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO5_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO5_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO5_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO5_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO5_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO5_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO5_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO5_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO5_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO5_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO5_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO5_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO5_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO5_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO5_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO5_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO5_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO5_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO5_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO5_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO5_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO5_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO5_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO5_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO5_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO5_MCU_SEL_Msk = 0x7000

	// GPIO18
	// Position of MCU_OE field.
	IO_MUX_GPIO18_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO18_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO18_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO18_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO18_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO18_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO18_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO18_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO18_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO18_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO18_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO18_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO18_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO18_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO18_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO18_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO18_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO18_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO18_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO18_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO18_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO18_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO18_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO18_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO18_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO18_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO18_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO18_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO18_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO18_MCU_SEL_Msk = 0x7000

	// GPIO19
	// Position of MCU_OE field.
	IO_MUX_GPIO19_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO19_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO19_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO19_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO19_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO19_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO19_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO19_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO19_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO19_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO19_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO19_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO19_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO19_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO19_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO19_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO19_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO19_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO19_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO19_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO19_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO19_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO19_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO19_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO19_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO19_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO19_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO19_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO19_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO19_MCU_SEL_Msk = 0x7000

	// GPIO20
	// Position of MCU_OE field.
	IO_MUX_GPIO20_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO20_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO20_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO20_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO20_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO20_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO20_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO20_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO20_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO20_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO20_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO20_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO20_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO20_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO20_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO20_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO20_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO20_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO20_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO20_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO20_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO20_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO20_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO20_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO20_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO20_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO20_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO20_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO20_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO20_MCU_SEL_Msk = 0x7000

	// GPIO21
	// Position of MCU_OE field.
	IO_MUX_GPIO21_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO21_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO21_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO21_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO21_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO21_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO21_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO21_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO21_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO21_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO21_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO21_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO21_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO21_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO21_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO21_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO21_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO21_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO21_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO21_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO21_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO21_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO21_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO21_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO21_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO21_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO21_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO21_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO21_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO21_MCU_SEL_Msk = 0x7000

	// GPIO22
	// Position of MCU_OE field.
	IO_MUX_GPIO22_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO22_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO22_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO22_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO22_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO22_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO22_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO22_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO22_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO22_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO22_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO22_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO22_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO22_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO22_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO22_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO22_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO22_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO22_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO22_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO22_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO22_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO22_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO22_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO22_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO22_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO22_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO22_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO22_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO22_MCU_SEL_Msk = 0x7000

	// GPIO3
	// Position of MCU_OE field.
	IO_MUX_GPIO3_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO3_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO3_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO3_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO3_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO3_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO3_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO3_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO3_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO3_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO3_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO3_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO3_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO3_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO3_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO3_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO3_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO3_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO3_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO3_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO3_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO3_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO3_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO3_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO3_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO3_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO3_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO3_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO3_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO3_MCU_SEL_Msk = 0x7000

	// GPIO1
	// Position of MCU_OE field.
	IO_MUX_GPIO1_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO1_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO1_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO1_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO1_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO1_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO1_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO1_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO1_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO1_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO1_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO1_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO1_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO1_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO1_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO1_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO1_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO1_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO1_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO1_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO1_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO1_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO1_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO1_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO1_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO1_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO1_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO1_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO1_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO1_MCU_SEL_Msk = 0x7000

	// GPIO23
	// Position of MCU_OE field.
	IO_MUX_GPIO23_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO23_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO23_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO23_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO23_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO23_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO23_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO23_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO23_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO23_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO23_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO23_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO23_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO23_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO23_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO23_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO23_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO23_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO23_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO23_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO23_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO23_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO23_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO23_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO23_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO23_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO23_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO23_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO23_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO23_MCU_SEL_Msk = 0x7000

	// GPIO24
	// Position of MCU_OE field.
	IO_MUX_GPIO24_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO24_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO24_MCU_OE = 0x1
	// Position of SLP_SEL field.
	IO_MUX_GPIO24_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO24_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO24_SLP_SEL = 0x2
	// Position of MCU_WPD field.
	IO_MUX_GPIO24_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO24_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO24_MCU_WPD = 0x4
	// Position of MCU_WPU field.
	IO_MUX_GPIO24_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO24_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO24_MCU_WPU = 0x8
	// Position of MCU_IE field.
	IO_MUX_GPIO24_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO24_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO24_MCU_IE = 0x10
	// Position of MCU_DRV field.
	IO_MUX_GPIO24_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO24_MCU_DRV_Msk = 0x60
	// Position of FUN_WPD field.
	IO_MUX_GPIO24_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO24_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO24_FUN_WPD = 0x80
	// Position of FUN_WPU field.
	IO_MUX_GPIO24_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO24_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO24_FUN_WPU = 0x100
	// Position of FUN_IE field.
	IO_MUX_GPIO24_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO24_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO24_FUN_IE = 0x200
	// Position of FUN_DRV field.
	IO_MUX_GPIO24_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO24_FUN_DRV_Msk = 0xc00
	// Position of MCU_SEL field.
	IO_MUX_GPIO24_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO24_MCU_SEL_Msk = 0x7000
)

// Constants for LEDC: LED Control PWM (Pulse Width Modulation)
const (
	// HSCH0_CONF0
	// Position of TIMER_SEL field.
	LEDC_HSCH_CONF0_TIMER_SEL_Pos = 0x0
	// Bit mask of TIMER_SEL field.
	LEDC_HSCH_CONF0_TIMER_SEL_Msk = 0x3
	// Position of SIG_OUT_EN field.
	LEDC_HSCH_CONF0_SIG_OUT_EN_Pos = 0x2
	// Bit mask of SIG_OUT_EN field.
	LEDC_HSCH_CONF0_SIG_OUT_EN_Msk = 0x4
	// Bit SIG_OUT_EN.
	LEDC_HSCH_CONF0_SIG_OUT_EN = 0x4
	// Position of IDLE_LV field.
	LEDC_HSCH_CONF0_IDLE_LV_Pos = 0x3
	// Bit mask of IDLE_LV field.
	LEDC_HSCH_CONF0_IDLE_LV_Msk = 0x8
	// Bit IDLE_LV.
	LEDC_HSCH_CONF0_IDLE_LV = 0x8

	// HSCH0_HPOINT
	// Position of HPOINT field.
	LEDC_HSCH_HPOINT_HPOINT_Pos = 0x0
	// Bit mask of HPOINT field.
	LEDC_HSCH_HPOINT_HPOINT_Msk = 0xfffff

	// HSCH0_DUTY
	// Position of DUTY field.
	LEDC_HSCH_DUTY_DUTY_Pos = 0x0
	// Bit mask of DUTY field.
	LEDC_HSCH_DUTY_DUTY_Msk = 0x1ffffff

	// HSCH0_CONF1
	// Position of DUTY_SCALE field.
	LEDC_HSCH_CONF1_DUTY_SCALE_Pos = 0x0
	// Bit mask of DUTY_SCALE field.
	LEDC_HSCH_CONF1_DUTY_SCALE_Msk = 0x3ff
	// Position of DUTY_CYCLE field.
	LEDC_HSCH_CONF1_DUTY_CYCLE_Pos = 0xa
	// Bit mask of DUTY_CYCLE field.
	LEDC_HSCH_CONF1_DUTY_CYCLE_Msk = 0xffc00
	// Position of DUTY_NUM field.
	LEDC_HSCH_CONF1_DUTY_NUM_Pos = 0x14
	// Bit mask of DUTY_NUM field.
	LEDC_HSCH_CONF1_DUTY_NUM_Msk = 0x3ff00000
	// Position of DUTY_INC field.
	LEDC_HSCH_CONF1_DUTY_INC_Pos = 0x1e
	// Bit mask of DUTY_INC field.
	LEDC_HSCH_CONF1_DUTY_INC_Msk = 0x40000000
	// Bit DUTY_INC.
	LEDC_HSCH_CONF1_DUTY_INC = 0x40000000
	// Position of DUTY_START field.
	LEDC_HSCH_CONF1_DUTY_START_Pos = 0x1f
	// Bit mask of DUTY_START field.
	LEDC_HSCH_CONF1_DUTY_START_Msk = 0x80000000
	// Bit DUTY_START.
	LEDC_HSCH_CONF1_DUTY_START = 0x80000000

	// HSCH0_DUTY_R
	// Position of DUTY_R field.
	LEDC_HSCH_DUTY_R_DUTY_R_Pos = 0x0
	// Bit mask of DUTY_R field.
	LEDC_HSCH_DUTY_R_DUTY_R_Msk = 0x1ffffff

	// LSCH0_CONF0
	// Position of TIMER_SEL field.
	LEDC_LSCH_CONF0_TIMER_SEL_Pos = 0x0
	// Bit mask of TIMER_SEL field.
	LEDC_LSCH_CONF0_TIMER_SEL_Msk = 0x3
	// Position of SIG_OUT_EN field.
	LEDC_LSCH_CONF0_SIG_OUT_EN_Pos = 0x2
	// Bit mask of SIG_OUT_EN field.
	LEDC_LSCH_CONF0_SIG_OUT_EN_Msk = 0x4
	// Bit SIG_OUT_EN.
	LEDC_LSCH_CONF0_SIG_OUT_EN = 0x4
	// Position of IDLE_LV field.
	LEDC_LSCH_CONF0_IDLE_LV_Pos = 0x3
	// Bit mask of IDLE_LV field.
	LEDC_LSCH_CONF0_IDLE_LV_Msk = 0x8
	// Bit IDLE_LV.
	LEDC_LSCH_CONF0_IDLE_LV = 0x8
	// Position of PARA_UP field.
	LEDC_LSCH_CONF0_PARA_UP_Pos = 0x4
	// Bit mask of PARA_UP field.
	LEDC_LSCH_CONF0_PARA_UP_Msk = 0x10
	// Bit PARA_UP.
	LEDC_LSCH_CONF0_PARA_UP = 0x10

	// LSCH0_HPOINT
	// Position of HPOINT field.
	LEDC_LSCH_HPOINT_HPOINT_Pos = 0x0
	// Bit mask of HPOINT field.
	LEDC_LSCH_HPOINT_HPOINT_Msk = 0xfffff

	// LSCH0_DUTY
	// Position of DUTY field.
	LEDC_LSCH_DUTY_DUTY_Pos = 0x0
	// Bit mask of DUTY field.
	LEDC_LSCH_DUTY_DUTY_Msk = 0x1ffffff

	// LSCH0_CONF1
	// Position of DUTY_SCALE field.
	LEDC_LSCH_CONF1_DUTY_SCALE_Pos = 0x0
	// Bit mask of DUTY_SCALE field.
	LEDC_LSCH_CONF1_DUTY_SCALE_Msk = 0x3ff
	// Position of DUTY_CYCLE field.
	LEDC_LSCH_CONF1_DUTY_CYCLE_Pos = 0xa
	// Bit mask of DUTY_CYCLE field.
	LEDC_LSCH_CONF1_DUTY_CYCLE_Msk = 0xffc00
	// Position of DUTY_NUM field.
	LEDC_LSCH_CONF1_DUTY_NUM_Pos = 0x14
	// Bit mask of DUTY_NUM field.
	LEDC_LSCH_CONF1_DUTY_NUM_Msk = 0x3ff00000
	// Position of DUTY_INC field.
	LEDC_LSCH_CONF1_DUTY_INC_Pos = 0x1e
	// Bit mask of DUTY_INC field.
	LEDC_LSCH_CONF1_DUTY_INC_Msk = 0x40000000
	// Bit DUTY_INC.
	LEDC_LSCH_CONF1_DUTY_INC = 0x40000000
	// Position of DUTY_START field.
	LEDC_LSCH_CONF1_DUTY_START_Pos = 0x1f
	// Bit mask of DUTY_START field.
	LEDC_LSCH_CONF1_DUTY_START_Msk = 0x80000000
	// Bit DUTY_START.
	LEDC_LSCH_CONF1_DUTY_START = 0x80000000

	// LSCH0_DUTY_R
	// Position of DUTY_R field.
	LEDC_LSCH_DUTY_R_DUTY_R_Pos = 0x0
	// Bit mask of DUTY_R field.
	LEDC_LSCH_DUTY_R_DUTY_R_Msk = 0x1ffffff

	// HSTIMER0_CONF
	// Position of DUTY_RES field.
	LEDC_HSTIMER_CONF_DUTY_RES_Pos = 0x0
	// Bit mask of DUTY_RES field.
	LEDC_HSTIMER_CONF_DUTY_RES_Msk = 0x1f
	// Position of DIV_NUM field.
	LEDC_HSTIMER_CONF_DIV_NUM_Pos = 0x5
	// Bit mask of DIV_NUM field.
	LEDC_HSTIMER_CONF_DIV_NUM_Msk = 0x7fffe0
	// Position of PAUSE field.
	LEDC_HSTIMER_CONF_PAUSE_Pos = 0x17
	// Bit mask of PAUSE field.
	LEDC_HSTIMER_CONF_PAUSE_Msk = 0x800000
	// Bit PAUSE.
	LEDC_HSTIMER_CONF_PAUSE = 0x800000
	// Position of RST field.
	LEDC_HSTIMER_CONF_RST_Pos = 0x18
	// Bit mask of RST field.
	LEDC_HSTIMER_CONF_RST_Msk = 0x1000000
	// Bit RST.
	LEDC_HSTIMER_CONF_RST = 0x1000000
	// Position of TICK_SEL field.
	LEDC_HSTIMER_CONF_TICK_SEL_Pos = 0x19
	// Bit mask of TICK_SEL field.
	LEDC_HSTIMER_CONF_TICK_SEL_Msk = 0x2000000
	// Bit TICK_SEL.
	LEDC_HSTIMER_CONF_TICK_SEL = 0x2000000

	// HSTIMER0_VALUE
	// Position of CNT field.
	LEDC_HSTIMER_VALUE_CNT_Pos = 0x0
	// Bit mask of CNT field.
	LEDC_HSTIMER_VALUE_CNT_Msk = 0xfffff

	// LSTIMER0_CONF
	// Position of DUTY_RES field.
	LEDC_LSTIMER_CONF_DUTY_RES_Pos = 0x0
	// Bit mask of DUTY_RES field.
	LEDC_LSTIMER_CONF_DUTY_RES_Msk = 0x1f
	// Position of DIV_NUM field.
	LEDC_LSTIMER_CONF_DIV_NUM_Pos = 0x5
	// Bit mask of DIV_NUM field.
	LEDC_LSTIMER_CONF_DIV_NUM_Msk = 0x7fffe0
	// Position of PAUSE field.
	LEDC_LSTIMER_CONF_PAUSE_Pos = 0x17
	// Bit mask of PAUSE field.
	LEDC_LSTIMER_CONF_PAUSE_Msk = 0x800000
	// Bit PAUSE.
	LEDC_LSTIMER_CONF_PAUSE = 0x800000
	// Position of RST field.
	LEDC_LSTIMER_CONF_RST_Pos = 0x18
	// Bit mask of RST field.
	LEDC_LSTIMER_CONF_RST_Msk = 0x1000000
	// Bit RST.
	LEDC_LSTIMER_CONF_RST = 0x1000000
	// Position of TICK_SEL field.
	LEDC_LSTIMER_CONF_TICK_SEL_Pos = 0x19
	// Bit mask of TICK_SEL field.
	LEDC_LSTIMER_CONF_TICK_SEL_Msk = 0x2000000
	// Bit TICK_SEL.
	LEDC_LSTIMER_CONF_TICK_SEL = 0x2000000
	// Position of PARA_UP field.
	LEDC_LSTIMER_CONF_PARA_UP_Pos = 0x1a
	// Bit mask of PARA_UP field.
	LEDC_LSTIMER_CONF_PARA_UP_Msk = 0x4000000
	// Bit PARA_UP.
	LEDC_LSTIMER_CONF_PARA_UP = 0x4000000

	// LSTIMER0_VALUE
	// Position of CNT field.
	LEDC_LSTIMER_VALUE_CNT_Pos = 0x0
	// Bit mask of CNT field.
	LEDC_LSTIMER_VALUE_CNT_Msk = 0xfffff

	// INT_RAW
	// Position of HSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER0_OVF_INT_RAW_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER0_OVF_INT_RAW_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER0_OVF_INT_RAW = 0x1
	// Position of HSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER1_OVF_INT_RAW_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER1_OVF_INT_RAW_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER1_OVF_INT_RAW = 0x2
	// Position of HSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER2_OVF_INT_RAW_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER2_OVF_INT_RAW_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER2_OVF_INT_RAW = 0x4
	// Position of HSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER3_OVF_INT_RAW_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER3_OVF_INT_RAW_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER3_OVF_INT_RAW = 0x8
	// Position of LSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER0_OVF_INT_RAW_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER0_OVF_INT_RAW_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER0_OVF_INT_RAW = 0x10
	// Position of LSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER1_OVF_INT_RAW_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER1_OVF_INT_RAW_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER1_OVF_INT_RAW = 0x20
	// Position of LSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER2_OVF_INT_RAW_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER2_OVF_INT_RAW_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER2_OVF_INT_RAW = 0x40
	// Position of LSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER3_OVF_INT_RAW_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER3_OVF_INT_RAW_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER3_OVF_INT_RAW = 0x80
	// Position of DUTY_CHNG_END_HSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW = 0x100
	// Position of DUTY_CHNG_END_HSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW = 0x200
	// Position of DUTY_CHNG_END_HSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW = 0x400
	// Position of DUTY_CHNG_END_HSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW = 0x800
	// Position of DUTY_CHNG_END_HSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW = 0x1000
	// Position of DUTY_CHNG_END_HSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW = 0x2000
	// Position of DUTY_CHNG_END_HSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW = 0x4000
	// Position of DUTY_CHNG_END_HSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW = 0x8000
	// Position of DUTY_CHNG_END_LSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW = 0x10000
	// Position of DUTY_CHNG_END_LSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW = 0x20000
	// Position of DUTY_CHNG_END_LSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW = 0x40000
	// Position of DUTY_CHNG_END_LSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW = 0x80000
	// Position of DUTY_CHNG_END_LSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW = 0x100000
	// Position of DUTY_CHNG_END_LSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW = 0x200000
	// Position of DUTY_CHNG_END_LSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW = 0x400000
	// Position of DUTY_CHNG_END_LSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW = 0x800000

	// INT_ST
	// Position of HSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER0_OVF_INT_ST_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER0_OVF_INT_ST_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER0_OVF_INT_ST = 0x1
	// Position of HSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER1_OVF_INT_ST_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER1_OVF_INT_ST_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER1_OVF_INT_ST = 0x2
	// Position of HSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER2_OVF_INT_ST_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER2_OVF_INT_ST_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER2_OVF_INT_ST = 0x4
	// Position of HSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER3_OVF_INT_ST_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER3_OVF_INT_ST_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER3_OVF_INT_ST = 0x8
	// Position of LSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER0_OVF_INT_ST_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER0_OVF_INT_ST_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER0_OVF_INT_ST = 0x10
	// Position of LSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER1_OVF_INT_ST_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER1_OVF_INT_ST_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER1_OVF_INT_ST = 0x20
	// Position of LSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER2_OVF_INT_ST_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER2_OVF_INT_ST_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER2_OVF_INT_ST = 0x40
	// Position of LSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER3_OVF_INT_ST_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER3_OVF_INT_ST_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER3_OVF_INT_ST = 0x80
	// Position of DUTY_CHNG_END_HSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH0_INT_ST_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH0_INT_ST_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH0_INT_ST = 0x100
	// Position of DUTY_CHNG_END_HSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH1_INT_ST_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH1_INT_ST_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH1_INT_ST = 0x200
	// Position of DUTY_CHNG_END_HSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH2_INT_ST_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH2_INT_ST_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH2_INT_ST = 0x400
	// Position of DUTY_CHNG_END_HSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH3_INT_ST_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH3_INT_ST_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH3_INT_ST = 0x800
	// Position of DUTY_CHNG_END_HSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH4_INT_ST_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH4_INT_ST_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH4_INT_ST = 0x1000
	// Position of DUTY_CHNG_END_HSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH5_INT_ST_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH5_INT_ST_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH5_INT_ST = 0x2000
	// Position of DUTY_CHNG_END_HSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH6_INT_ST_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH6_INT_ST_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH6_INT_ST = 0x4000
	// Position of DUTY_CHNG_END_HSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH7_INT_ST_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH7_INT_ST_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH7_INT_ST = 0x8000
	// Position of DUTY_CHNG_END_LSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH0_INT_ST_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH0_INT_ST_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH0_INT_ST = 0x10000
	// Position of DUTY_CHNG_END_LSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH1_INT_ST_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH1_INT_ST_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH1_INT_ST = 0x20000
	// Position of DUTY_CHNG_END_LSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH2_INT_ST_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH2_INT_ST_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH2_INT_ST = 0x40000
	// Position of DUTY_CHNG_END_LSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH3_INT_ST_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH3_INT_ST_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH3_INT_ST = 0x80000
	// Position of DUTY_CHNG_END_LSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH4_INT_ST_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH4_INT_ST_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH4_INT_ST = 0x100000
	// Position of DUTY_CHNG_END_LSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH5_INT_ST_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH5_INT_ST_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH5_INT_ST = 0x200000
	// Position of DUTY_CHNG_END_LSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH6_INT_ST_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH6_INT_ST_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH6_INT_ST = 0x400000
	// Position of DUTY_CHNG_END_LSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH7_INT_ST_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH7_INT_ST_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH7_INT_ST = 0x800000

	// INT_ENA
	// Position of HSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER0_OVF_INT_ENA_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER0_OVF_INT_ENA_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER0_OVF_INT_ENA = 0x1
	// Position of HSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER1_OVF_INT_ENA_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER1_OVF_INT_ENA_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER1_OVF_INT_ENA = 0x2
	// Position of HSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER2_OVF_INT_ENA_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER2_OVF_INT_ENA_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER2_OVF_INT_ENA = 0x4
	// Position of HSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER3_OVF_INT_ENA_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER3_OVF_INT_ENA_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER3_OVF_INT_ENA = 0x8
	// Position of LSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER0_OVF_INT_ENA_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER0_OVF_INT_ENA_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER0_OVF_INT_ENA = 0x10
	// Position of LSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER1_OVF_INT_ENA_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER1_OVF_INT_ENA_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER1_OVF_INT_ENA = 0x20
	// Position of LSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER2_OVF_INT_ENA_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER2_OVF_INT_ENA_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER2_OVF_INT_ENA = 0x40
	// Position of LSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER3_OVF_INT_ENA_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER3_OVF_INT_ENA_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER3_OVF_INT_ENA = 0x80
	// Position of DUTY_CHNG_END_HSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA = 0x100
	// Position of DUTY_CHNG_END_HSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA = 0x200
	// Position of DUTY_CHNG_END_HSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA = 0x400
	// Position of DUTY_CHNG_END_HSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA = 0x800
	// Position of DUTY_CHNG_END_HSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA = 0x1000
	// Position of DUTY_CHNG_END_HSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA = 0x2000
	// Position of DUTY_CHNG_END_HSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA = 0x4000
	// Position of DUTY_CHNG_END_HSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA = 0x8000
	// Position of DUTY_CHNG_END_LSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA = 0x10000
	// Position of DUTY_CHNG_END_LSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA = 0x20000
	// Position of DUTY_CHNG_END_LSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA = 0x40000
	// Position of DUTY_CHNG_END_LSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA = 0x80000
	// Position of DUTY_CHNG_END_LSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA = 0x100000
	// Position of DUTY_CHNG_END_LSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA = 0x200000
	// Position of DUTY_CHNG_END_LSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA = 0x400000
	// Position of DUTY_CHNG_END_LSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA = 0x800000

	// INT_CLR
	// Position of HSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER0_OVF_INT_CLR_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER0_OVF_INT_CLR_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER0_OVF_INT_CLR = 0x1
	// Position of HSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER1_OVF_INT_CLR_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER1_OVF_INT_CLR_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER1_OVF_INT_CLR = 0x2
	// Position of HSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER2_OVF_INT_CLR_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER2_OVF_INT_CLR_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER2_OVF_INT_CLR = 0x4
	// Position of HSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER3_OVF_INT_CLR_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER3_OVF_INT_CLR_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER3_OVF_INT_CLR = 0x8
	// Position of LSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER0_OVF_INT_CLR_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER0_OVF_INT_CLR_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER0_OVF_INT_CLR = 0x10
	// Position of LSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER1_OVF_INT_CLR_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER1_OVF_INT_CLR_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER1_OVF_INT_CLR = 0x20
	// Position of LSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER2_OVF_INT_CLR_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER2_OVF_INT_CLR_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER2_OVF_INT_CLR = 0x40
	// Position of LSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER3_OVF_INT_CLR_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER3_OVF_INT_CLR_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER3_OVF_INT_CLR = 0x80
	// Position of DUTY_CHNG_END_HSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR = 0x100
	// Position of DUTY_CHNG_END_HSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR = 0x200
	// Position of DUTY_CHNG_END_HSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR = 0x400
	// Position of DUTY_CHNG_END_HSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR = 0x800
	// Position of DUTY_CHNG_END_HSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR = 0x1000
	// Position of DUTY_CHNG_END_HSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR = 0x2000
	// Position of DUTY_CHNG_END_HSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR = 0x4000
	// Position of DUTY_CHNG_END_HSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR = 0x8000
	// Position of DUTY_CHNG_END_LSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR = 0x10000
	// Position of DUTY_CHNG_END_LSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR = 0x20000
	// Position of DUTY_CHNG_END_LSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR = 0x40000
	// Position of DUTY_CHNG_END_LSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR = 0x80000
	// Position of DUTY_CHNG_END_LSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR = 0x100000
	// Position of DUTY_CHNG_END_LSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR = 0x200000
	// Position of DUTY_CHNG_END_LSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR = 0x400000
	// Position of DUTY_CHNG_END_LSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR = 0x800000

	// CONF
	// Position of APB_CLK_SEL field.
	LEDC_CONF_APB_CLK_SEL_Pos = 0x0
	// Bit mask of APB_CLK_SEL field.
	LEDC_CONF_APB_CLK_SEL_Msk = 0x1
	// Bit APB_CLK_SEL.
	LEDC_CONF_APB_CLK_SEL = 0x1

	// DATE
	// Position of DATE field.
	LEDC_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	LEDC_DATE_DATE_Msk = 0xffffffff
)

// Constants for MCPWM0: Motor Control Pulse-Width Modulation 0
const (
	// CLK_CFG
	// Position of CLK_PRESCALE field.
	MCPWM_CLK_CFG_CLK_PRESCALE_Pos = 0x0
	// Bit mask of CLK_PRESCALE field.
	MCPWM_CLK_CFG_CLK_PRESCALE_Msk = 0xff

	// TIMER0_CFG0
	// Position of TIMER0_PRESCALE field.
	MCPWM_TIMER0_CFG0_TIMER0_PRESCALE_Pos = 0x0
	// Bit mask of TIMER0_PRESCALE field.
	MCPWM_TIMER0_CFG0_TIMER0_PRESCALE_Msk = 0xff
	// Position of TIMER0_PERIOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_Pos = 0x8
	// Bit mask of TIMER0_PERIOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_Msk = 0xffff00
	// Position of TIMER0_PERIOD_UPMETHOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_UPMETHOD_Pos = 0x18
	// Bit mask of TIMER0_PERIOD_UPMETHOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_UPMETHOD_Msk = 0x3000000

	// TIMER0_CFG1
	// Position of TIMER0_START field.
	MCPWM_TIMER0_CFG1_TIMER0_START_Pos = 0x0
	// Bit mask of TIMER0_START field.
	MCPWM_TIMER0_CFG1_TIMER0_START_Msk = 0x7
	// Position of TIMER0_MOD field.
	MCPWM_TIMER0_CFG1_TIMER0_MOD_Pos = 0x3
	// Bit mask of TIMER0_MOD field.
	MCPWM_TIMER0_CFG1_TIMER0_MOD_Msk = 0x18

	// TIMER0_SYNC
	// Position of TIMER0_SYNCI_EN field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCI_EN_Pos = 0x0
	// Bit mask of TIMER0_SYNCI_EN field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCI_EN_Msk = 0x1
	// Bit TIMER0_SYNCI_EN.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCI_EN = 0x1
	// Position of SW field.
	MCPWM_TIMER0_SYNC_SW_Pos = 0x1
	// Bit mask of SW field.
	MCPWM_TIMER0_SYNC_SW_Msk = 0x2
	// Bit SW.
	MCPWM_TIMER0_SYNC_SW = 0x2
	// Position of TIMER0_SYNCO_SEL field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCO_SEL_Pos = 0x2
	// Bit mask of TIMER0_SYNCO_SEL field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCO_SEL_Msk = 0xc
	// Position of TIMER0_PHASE field.
	MCPWM_TIMER0_SYNC_TIMER0_PHASE_Pos = 0x4
	// Bit mask of TIMER0_PHASE field.
	MCPWM_TIMER0_SYNC_TIMER0_PHASE_Msk = 0xffff0
	// Position of TIMER0_PHASE_DIRECTION field.
	MCPWM_TIMER0_SYNC_TIMER0_PHASE_DIRECTION_Pos = 0x14
	// Bit mask of TIMER0_PHASE_DIRECTION field.
	MCPWM_TIMER0_SYNC_TIMER0_PHASE_DIRECTION_Msk = 0x100000
	// Bit TIMER0_PHASE_DIRECTION.
	MCPWM_TIMER0_SYNC_TIMER0_PHASE_DIRECTION = 0x100000

	// TIMER0_STATUS
	// Position of TIMER0_VALUE field.
	MCPWM_TIMER0_STATUS_TIMER0_VALUE_Pos = 0x0
	// Bit mask of TIMER0_VALUE field.
	MCPWM_TIMER0_STATUS_TIMER0_VALUE_Msk = 0xffff
	// Position of TIMER0_DIRECTION field.
	MCPWM_TIMER0_STATUS_TIMER0_DIRECTION_Pos = 0x10
	// Bit mask of TIMER0_DIRECTION field.
	MCPWM_TIMER0_STATUS_TIMER0_DIRECTION_Msk = 0x10000
	// Bit TIMER0_DIRECTION.
	MCPWM_TIMER0_STATUS_TIMER0_DIRECTION = 0x10000

	// TIMER1_CFG0
	// Position of TIMER1_PRESCALE field.
	MCPWM_TIMER1_CFG0_TIMER1_PRESCALE_Pos = 0x0
	// Bit mask of TIMER1_PRESCALE field.
	MCPWM_TIMER1_CFG0_TIMER1_PRESCALE_Msk = 0xff
	// Position of TIMER1_PERIOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_Pos = 0x8
	// Bit mask of TIMER1_PERIOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_Msk = 0xffff00
	// Position of TIMER1_PERIOD_UPMETHOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_UPMETHOD_Pos = 0x18
	// Bit mask of TIMER1_PERIOD_UPMETHOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_UPMETHOD_Msk = 0x3000000

	// TIMER1_CFG1
	// Position of TIMER1_START field.
	MCPWM_TIMER1_CFG1_TIMER1_START_Pos = 0x0
	// Bit mask of TIMER1_START field.
	MCPWM_TIMER1_CFG1_TIMER1_START_Msk = 0x7
	// Position of TIMER1_MOD field.
	MCPWM_TIMER1_CFG1_TIMER1_MOD_Pos = 0x3
	// Bit mask of TIMER1_MOD field.
	MCPWM_TIMER1_CFG1_TIMER1_MOD_Msk = 0x18

	// TIMER1_SYNC
	// Position of TIMER1_SYNCI_EN field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCI_EN_Pos = 0x0
	// Bit mask of TIMER1_SYNCI_EN field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCI_EN_Msk = 0x1
	// Bit TIMER1_SYNCI_EN.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCI_EN = 0x1
	// Position of SW field.
	MCPWM_TIMER1_SYNC_SW_Pos = 0x1
	// Bit mask of SW field.
	MCPWM_TIMER1_SYNC_SW_Msk = 0x2
	// Bit SW.
	MCPWM_TIMER1_SYNC_SW = 0x2
	// Position of TIMER1_SYNCO_SEL field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCO_SEL_Pos = 0x2
	// Bit mask of TIMER1_SYNCO_SEL field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCO_SEL_Msk = 0xc
	// Position of TIMER1_PHASE field.
	MCPWM_TIMER1_SYNC_TIMER1_PHASE_Pos = 0x4
	// Bit mask of TIMER1_PHASE field.
	MCPWM_TIMER1_SYNC_TIMER1_PHASE_Msk = 0xffff0
	// Position of TIMER1_PHASE_DIRECTION field.
	MCPWM_TIMER1_SYNC_TIMER1_PHASE_DIRECTION_Pos = 0x14
	// Bit mask of TIMER1_PHASE_DIRECTION field.
	MCPWM_TIMER1_SYNC_TIMER1_PHASE_DIRECTION_Msk = 0x100000
	// Bit TIMER1_PHASE_DIRECTION.
	MCPWM_TIMER1_SYNC_TIMER1_PHASE_DIRECTION = 0x100000

	// TIMER1_STATUS
	// Position of TIMER1_VALUE field.
	MCPWM_TIMER1_STATUS_TIMER1_VALUE_Pos = 0x0
	// Bit mask of TIMER1_VALUE field.
	MCPWM_TIMER1_STATUS_TIMER1_VALUE_Msk = 0xffff
	// Position of TIMER1_DIRECTION field.
	MCPWM_TIMER1_STATUS_TIMER1_DIRECTION_Pos = 0x10
	// Bit mask of TIMER1_DIRECTION field.
	MCPWM_TIMER1_STATUS_TIMER1_DIRECTION_Msk = 0x10000
	// Bit TIMER1_DIRECTION.
	MCPWM_TIMER1_STATUS_TIMER1_DIRECTION = 0x10000

	// TIMER2_CFG0
	// Position of TIMER2_PRESCALE field.
	MCPWM_TIMER2_CFG0_TIMER2_PRESCALE_Pos = 0x0
	// Bit mask of TIMER2_PRESCALE field.
	MCPWM_TIMER2_CFG0_TIMER2_PRESCALE_Msk = 0xff
	// Position of TIMER2_PERIOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_Pos = 0x8
	// Bit mask of TIMER2_PERIOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_Msk = 0xffff00
	// Position of TIMER2_PERIOD_UPMETHOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_UPMETHOD_Pos = 0x18
	// Bit mask of TIMER2_PERIOD_UPMETHOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_UPMETHOD_Msk = 0x3000000

	// TIMER2_CFG1
	// Position of TIMER2_START field.
	MCPWM_TIMER2_CFG1_TIMER2_START_Pos = 0x0
	// Bit mask of TIMER2_START field.
	MCPWM_TIMER2_CFG1_TIMER2_START_Msk = 0x7
	// Position of TIMER2_MOD field.
	MCPWM_TIMER2_CFG1_TIMER2_MOD_Pos = 0x3
	// Bit mask of TIMER2_MOD field.
	MCPWM_TIMER2_CFG1_TIMER2_MOD_Msk = 0x18

	// TIMER2_SYNC
	// Position of TIMER2_SYNCI_EN field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCI_EN_Pos = 0x0
	// Bit mask of TIMER2_SYNCI_EN field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCI_EN_Msk = 0x1
	// Bit TIMER2_SYNCI_EN.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCI_EN = 0x1
	// Position of SW field.
	MCPWM_TIMER2_SYNC_SW_Pos = 0x1
	// Bit mask of SW field.
	MCPWM_TIMER2_SYNC_SW_Msk = 0x2
	// Bit SW.
	MCPWM_TIMER2_SYNC_SW = 0x2
	// Position of TIMER2_SYNCO_SEL field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCO_SEL_Pos = 0x2
	// Bit mask of TIMER2_SYNCO_SEL field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCO_SEL_Msk = 0xc
	// Position of TIMER2_PHASE field.
	MCPWM_TIMER2_SYNC_TIMER2_PHASE_Pos = 0x4
	// Bit mask of TIMER2_PHASE field.
	MCPWM_TIMER2_SYNC_TIMER2_PHASE_Msk = 0xffff0
	// Position of TIMER2_PHASE_DIRECTION field.
	MCPWM_TIMER2_SYNC_TIMER2_PHASE_DIRECTION_Pos = 0x14
	// Bit mask of TIMER2_PHASE_DIRECTION field.
	MCPWM_TIMER2_SYNC_TIMER2_PHASE_DIRECTION_Msk = 0x100000
	// Bit TIMER2_PHASE_DIRECTION.
	MCPWM_TIMER2_SYNC_TIMER2_PHASE_DIRECTION = 0x100000

	// TIMER2_STATUS
	// Position of TIMER2_VALUE field.
	MCPWM_TIMER2_STATUS_TIMER2_VALUE_Pos = 0x0
	// Bit mask of TIMER2_VALUE field.
	MCPWM_TIMER2_STATUS_TIMER2_VALUE_Msk = 0xffff
	// Position of TIMER2_DIRECTION field.
	MCPWM_TIMER2_STATUS_TIMER2_DIRECTION_Pos = 0x10
	// Bit mask of TIMER2_DIRECTION field.
	MCPWM_TIMER2_STATUS_TIMER2_DIRECTION_Msk = 0x10000
	// Bit TIMER2_DIRECTION.
	MCPWM_TIMER2_STATUS_TIMER2_DIRECTION = 0x10000

	// TIMER_SYNCI_CFG
	// Position of TIMER0_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER0_SYNCISEL_Pos = 0x0
	// Bit mask of TIMER0_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER0_SYNCISEL_Msk = 0x7
	// Position of TIMER1_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER1_SYNCISEL_Pos = 0x3
	// Bit mask of TIMER1_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER1_SYNCISEL_Msk = 0x38
	// Position of TIMER2_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER2_SYNCISEL_Pos = 0x6
	// Bit mask of TIMER2_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER2_SYNCISEL_Msk = 0x1c0
	// Position of EXTERNAL_SYNCI0_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT_Pos = 0x9
	// Bit mask of EXTERNAL_SYNCI0_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT_Msk = 0x200
	// Bit EXTERNAL_SYNCI0_INVERT.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT = 0x200
	// Position of EXTERNAL_SYNCI1_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT_Pos = 0xa
	// Bit mask of EXTERNAL_SYNCI1_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT_Msk = 0x400
	// Bit EXTERNAL_SYNCI1_INVERT.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT = 0x400
	// Position of EXTERNAL_SYNCI2_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT_Pos = 0xb
	// Bit mask of EXTERNAL_SYNCI2_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT_Msk = 0x800
	// Bit EXTERNAL_SYNCI2_INVERT.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT = 0x800

	// OPERATOR_TIMERSEL
	// Position of OPERATOR0_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR0_TIMERSEL_Pos = 0x0
	// Bit mask of OPERATOR0_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR0_TIMERSEL_Msk = 0x3
	// Position of OPERATOR1_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR1_TIMERSEL_Pos = 0x2
	// Bit mask of OPERATOR1_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR1_TIMERSEL_Msk = 0xc
	// Position of OPERATOR2_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR2_TIMERSEL_Pos = 0x4
	// Bit mask of OPERATOR2_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR2_TIMERSEL_Msk = 0x30

	// GEN0_STMP_CFG
	// Position of GEN0_A_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_UPMETHOD_Pos = 0x0
	// Bit mask of GEN0_A_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_UPMETHOD_Msk = 0xf
	// Position of GEN0_B_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_UPMETHOD_Pos = 0x4
	// Bit mask of GEN0_B_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_UPMETHOD_Msk = 0xf0
	// Position of GEN0_A_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_SHDW_FULL_Pos = 0x8
	// Bit mask of GEN0_A_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_SHDW_FULL_Msk = 0x100
	// Bit GEN0_A_SHDW_FULL.
	MCPWM_GEN0_STMP_CFG_GEN0_A_SHDW_FULL = 0x100
	// Position of GEN0_B_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_SHDW_FULL_Pos = 0x9
	// Bit mask of GEN0_B_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_SHDW_FULL_Msk = 0x200
	// Bit GEN0_B_SHDW_FULL.
	MCPWM_GEN0_STMP_CFG_GEN0_B_SHDW_FULL = 0x200

	// GEN0_TSTMP_A
	// Position of GEN0_A field.
	MCPWM_GEN0_TSTMP_A_GEN0_A_Pos = 0x0
	// Bit mask of GEN0_A field.
	MCPWM_GEN0_TSTMP_A_GEN0_A_Msk = 0xffff

	// GEN0_TSTMP_B
	// Position of GEN0_B field.
	MCPWM_GEN0_TSTMP_B_GEN0_B_Pos = 0x0
	// Bit mask of GEN0_B field.
	MCPWM_GEN0_TSTMP_B_GEN0_B_Msk = 0xffff

	// GEN0_CFG0
	// Position of GEN0_CFG_UPMETHOD field.
	MCPWM_GEN0_CFG0_GEN0_CFG_UPMETHOD_Pos = 0x0
	// Bit mask of GEN0_CFG_UPMETHOD field.
	MCPWM_GEN0_CFG0_GEN0_CFG_UPMETHOD_Msk = 0xf
	// Position of GEN0_T0_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T0_SEL_Pos = 0x4
	// Bit mask of GEN0_T0_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T0_SEL_Msk = 0x70
	// Position of GEN0_T1_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T1_SEL_Pos = 0x7
	// Bit mask of GEN0_T1_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T1_SEL_Msk = 0x380

	// GEN0_FORCE
	// Position of GEN0_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD_Pos = 0x0
	// Bit mask of GEN0_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD_Msk = 0x3f
	// Position of GEN0_A_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_CNTUFORCE_MODE_Pos = 0x6
	// Bit mask of GEN0_A_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_CNTUFORCE_MODE_Msk = 0xc0
	// Position of GEN0_B_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_CNTUFORCE_MODE_Pos = 0x8
	// Bit mask of GEN0_B_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_CNTUFORCE_MODE_Msk = 0x300
	// Position of GEN0_A_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_Pos = 0xa
	// Bit mask of GEN0_A_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_Msk = 0x400
	// Bit GEN0_A_NCIFORCE.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE = 0x400
	// Position of GEN0_A_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_MODE_Pos = 0xb
	// Bit mask of GEN0_A_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_MODE_Msk = 0x1800
	// Position of GEN0_B_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_Pos = 0xd
	// Bit mask of GEN0_B_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_Msk = 0x2000
	// Bit GEN0_B_NCIFORCE.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE = 0x2000
	// Position of GEN0_B_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_MODE_Pos = 0xe
	// Bit mask of GEN0_B_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_MODE_Msk = 0xc000

	// GEN0_A
	// Position of UTEZ field.
	MCPWM_GEN0_A_UTEZ_Pos = 0x0
	// Bit mask of UTEZ field.
	MCPWM_GEN0_A_UTEZ_Msk = 0x3
	// Position of UTEP field.
	MCPWM_GEN0_A_UTEP_Pos = 0x2
	// Bit mask of UTEP field.
	MCPWM_GEN0_A_UTEP_Msk = 0xc
	// Position of UTEA field.
	MCPWM_GEN0_A_UTEA_Pos = 0x4
	// Bit mask of UTEA field.
	MCPWM_GEN0_A_UTEA_Msk = 0x30
	// Position of UTEB field.
	MCPWM_GEN0_A_UTEB_Pos = 0x6
	// Bit mask of UTEB field.
	MCPWM_GEN0_A_UTEB_Msk = 0xc0
	// Position of UT0 field.
	MCPWM_GEN0_A_UT0_Pos = 0x8
	// Bit mask of UT0 field.
	MCPWM_GEN0_A_UT0_Msk = 0x300
	// Position of UT1 field.
	MCPWM_GEN0_A_UT1_Pos = 0xa
	// Bit mask of UT1 field.
	MCPWM_GEN0_A_UT1_Msk = 0xc00
	// Position of DTEZ field.
	MCPWM_GEN0_A_DTEZ_Pos = 0xc
	// Bit mask of DTEZ field.
	MCPWM_GEN0_A_DTEZ_Msk = 0x3000
	// Position of DTEP field.
	MCPWM_GEN0_A_DTEP_Pos = 0xe
	// Bit mask of DTEP field.
	MCPWM_GEN0_A_DTEP_Msk = 0xc000
	// Position of DTEA field.
	MCPWM_GEN0_A_DTEA_Pos = 0x10
	// Bit mask of DTEA field.
	MCPWM_GEN0_A_DTEA_Msk = 0x30000
	// Position of DTEB field.
	MCPWM_GEN0_A_DTEB_Pos = 0x12
	// Bit mask of DTEB field.
	MCPWM_GEN0_A_DTEB_Msk = 0xc0000
	// Position of DT0 field.
	MCPWM_GEN0_A_DT0_Pos = 0x14
	// Bit mask of DT0 field.
	MCPWM_GEN0_A_DT0_Msk = 0x300000
	// Position of DT1 field.
	MCPWM_GEN0_A_DT1_Pos = 0x16
	// Bit mask of DT1 field.
	MCPWM_GEN0_A_DT1_Msk = 0xc00000

	// GEN0_B
	// Position of UTEZ field.
	MCPWM_GEN0_B_UTEZ_Pos = 0x0
	// Bit mask of UTEZ field.
	MCPWM_GEN0_B_UTEZ_Msk = 0x3
	// Position of UTEP field.
	MCPWM_GEN0_B_UTEP_Pos = 0x2
	// Bit mask of UTEP field.
	MCPWM_GEN0_B_UTEP_Msk = 0xc
	// Position of UTEA field.
	MCPWM_GEN0_B_UTEA_Pos = 0x4
	// Bit mask of UTEA field.
	MCPWM_GEN0_B_UTEA_Msk = 0x30
	// Position of UTEB field.
	MCPWM_GEN0_B_UTEB_Pos = 0x6
	// Bit mask of UTEB field.
	MCPWM_GEN0_B_UTEB_Msk = 0xc0
	// Position of UT0 field.
	MCPWM_GEN0_B_UT0_Pos = 0x8
	// Bit mask of UT0 field.
	MCPWM_GEN0_B_UT0_Msk = 0x300
	// Position of UT1 field.
	MCPWM_GEN0_B_UT1_Pos = 0xa
	// Bit mask of UT1 field.
	MCPWM_GEN0_B_UT1_Msk = 0xc00
	// Position of DTEZ field.
	MCPWM_GEN0_B_DTEZ_Pos = 0xc
	// Bit mask of DTEZ field.
	MCPWM_GEN0_B_DTEZ_Msk = 0x3000
	// Position of DTEP field.
	MCPWM_GEN0_B_DTEP_Pos = 0xe
	// Bit mask of DTEP field.
	MCPWM_GEN0_B_DTEP_Msk = 0xc000
	// Position of DTEA field.
	MCPWM_GEN0_B_DTEA_Pos = 0x10
	// Bit mask of DTEA field.
	MCPWM_GEN0_B_DTEA_Msk = 0x30000
	// Position of DTEB field.
	MCPWM_GEN0_B_DTEB_Pos = 0x12
	// Bit mask of DTEB field.
	MCPWM_GEN0_B_DTEB_Msk = 0xc0000
	// Position of DT0 field.
	MCPWM_GEN0_B_DT0_Pos = 0x14
	// Bit mask of DT0 field.
	MCPWM_GEN0_B_DT0_Msk = 0x300000
	// Position of DT1 field.
	MCPWM_GEN0_B_DT1_Pos = 0x16
	// Bit mask of DT1 field.
	MCPWM_GEN0_B_DT1_Msk = 0xc00000

	// DT0_CFG
	// Position of DT0_FED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_FED_UPMETHOD_Pos = 0x0
	// Bit mask of DT0_FED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_FED_UPMETHOD_Msk = 0xf
	// Position of DT0_RED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_RED_UPMETHOD_Pos = 0x4
	// Bit mask of DT0_RED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_RED_UPMETHOD_Msk = 0xf0
	// Position of DT0_DEB_MODE field.
	MCPWM_DT0_CFG_DT0_DEB_MODE_Pos = 0x8
	// Bit mask of DT0_DEB_MODE field.
	MCPWM_DT0_CFG_DT0_DEB_MODE_Msk = 0x100
	// Bit DT0_DEB_MODE.
	MCPWM_DT0_CFG_DT0_DEB_MODE = 0x100
	// Position of DT0_A_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_A_OUTSWAP_Pos = 0x9
	// Bit mask of DT0_A_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_A_OUTSWAP_Msk = 0x200
	// Bit DT0_A_OUTSWAP.
	MCPWM_DT0_CFG_DT0_A_OUTSWAP = 0x200
	// Position of DT0_B_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_B_OUTSWAP_Pos = 0xa
	// Bit mask of DT0_B_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_B_OUTSWAP_Msk = 0x400
	// Bit DT0_B_OUTSWAP.
	MCPWM_DT0_CFG_DT0_B_OUTSWAP = 0x400
	// Position of DT0_RED_INSEL field.
	MCPWM_DT0_CFG_DT0_RED_INSEL_Pos = 0xb
	// Bit mask of DT0_RED_INSEL field.
	MCPWM_DT0_CFG_DT0_RED_INSEL_Msk = 0x800
	// Bit DT0_RED_INSEL.
	MCPWM_DT0_CFG_DT0_RED_INSEL = 0x800
	// Position of DT0_FED_INSEL field.
	MCPWM_DT0_CFG_DT0_FED_INSEL_Pos = 0xc
	// Bit mask of DT0_FED_INSEL field.
	MCPWM_DT0_CFG_DT0_FED_INSEL_Msk = 0x1000
	// Bit DT0_FED_INSEL.
	MCPWM_DT0_CFG_DT0_FED_INSEL = 0x1000
	// Position of DT0_RED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_RED_OUTINVERT_Pos = 0xd
	// Bit mask of DT0_RED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_RED_OUTINVERT_Msk = 0x2000
	// Bit DT0_RED_OUTINVERT.
	MCPWM_DT0_CFG_DT0_RED_OUTINVERT = 0x2000
	// Position of DT0_FED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_FED_OUTINVERT_Pos = 0xe
	// Bit mask of DT0_FED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_FED_OUTINVERT_Msk = 0x4000
	// Bit DT0_FED_OUTINVERT.
	MCPWM_DT0_CFG_DT0_FED_OUTINVERT = 0x4000
	// Position of DT0_A_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_A_OUTBYPASS_Pos = 0xf
	// Bit mask of DT0_A_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_A_OUTBYPASS_Msk = 0x8000
	// Bit DT0_A_OUTBYPASS.
	MCPWM_DT0_CFG_DT0_A_OUTBYPASS = 0x8000
	// Position of DT0_B_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_B_OUTBYPASS_Pos = 0x10
	// Bit mask of DT0_B_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_B_OUTBYPASS_Msk = 0x10000
	// Bit DT0_B_OUTBYPASS.
	MCPWM_DT0_CFG_DT0_B_OUTBYPASS = 0x10000
	// Position of DT0_CLK_SEL field.
	MCPWM_DT0_CFG_DT0_CLK_SEL_Pos = 0x11
	// Bit mask of DT0_CLK_SEL field.
	MCPWM_DT0_CFG_DT0_CLK_SEL_Msk = 0x20000
	// Bit DT0_CLK_SEL.
	MCPWM_DT0_CFG_DT0_CLK_SEL = 0x20000

	// DT0_FED_CFG
	// Position of DT0_FED field.
	MCPWM_DT0_FED_CFG_DT0_FED_Pos = 0x0
	// Bit mask of DT0_FED field.
	MCPWM_DT0_FED_CFG_DT0_FED_Msk = 0xffff

	// DT0_RED_CFG
	// Position of DT0_RED field.
	MCPWM_DT0_RED_CFG_DT0_RED_Pos = 0x0
	// Bit mask of DT0_RED field.
	MCPWM_DT0_RED_CFG_DT0_RED_Msk = 0xffff

	// CARRIER0_CFG
	// Position of CARRIER0_EN field.
	MCPWM_CARRIER0_CFG_CARRIER0_EN_Pos = 0x0
	// Bit mask of CARRIER0_EN field.
	MCPWM_CARRIER0_CFG_CARRIER0_EN_Msk = 0x1
	// Bit CARRIER0_EN.
	MCPWM_CARRIER0_CFG_CARRIER0_EN = 0x1
	// Position of CARRIER0_PRESCALE field.
	MCPWM_CARRIER0_CFG_CARRIER0_PRESCALE_Pos = 0x1
	// Bit mask of CARRIER0_PRESCALE field.
	MCPWM_CARRIER0_CFG_CARRIER0_PRESCALE_Msk = 0x1e
	// Position of CARRIER0_DUTY field.
	MCPWM_CARRIER0_CFG_CARRIER0_DUTY_Pos = 0x5
	// Bit mask of CARRIER0_DUTY field.
	MCPWM_CARRIER0_CFG_CARRIER0_DUTY_Msk = 0xe0
	// Position of CARRIER0_OSHTWTH field.
	MCPWM_CARRIER0_CFG_CARRIER0_OSHTWTH_Pos = 0x8
	// Bit mask of CARRIER0_OSHTWTH field.
	MCPWM_CARRIER0_CFG_CARRIER0_OSHTWTH_Msk = 0xf00
	// Position of CARRIER0_OUT_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_OUT_INVERT_Pos = 0xc
	// Bit mask of CARRIER0_OUT_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_OUT_INVERT_Msk = 0x1000
	// Bit CARRIER0_OUT_INVERT.
	MCPWM_CARRIER0_CFG_CARRIER0_OUT_INVERT = 0x1000
	// Position of CARRIER0_IN_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_IN_INVERT_Pos = 0xd
	// Bit mask of CARRIER0_IN_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_IN_INVERT_Msk = 0x2000
	// Bit CARRIER0_IN_INVERT.
	MCPWM_CARRIER0_CFG_CARRIER0_IN_INVERT = 0x2000

	// FH0_CFG0
	// Position of FH0_SW_CBC field.
	MCPWM_FH0_CFG0_FH0_SW_CBC_Pos = 0x0
	// Bit mask of FH0_SW_CBC field.
	MCPWM_FH0_CFG0_FH0_SW_CBC_Msk = 0x1
	// Bit FH0_SW_CBC.
	MCPWM_FH0_CFG0_FH0_SW_CBC = 0x1
	// Position of FH0_F2_CBC field.
	MCPWM_FH0_CFG0_FH0_F2_CBC_Pos = 0x1
	// Bit mask of FH0_F2_CBC field.
	MCPWM_FH0_CFG0_FH0_F2_CBC_Msk = 0x2
	// Bit FH0_F2_CBC.
	MCPWM_FH0_CFG0_FH0_F2_CBC = 0x2
	// Position of FH0_F1_CBC field.
	MCPWM_FH0_CFG0_FH0_F1_CBC_Pos = 0x2
	// Bit mask of FH0_F1_CBC field.
	MCPWM_FH0_CFG0_FH0_F1_CBC_Msk = 0x4
	// Bit FH0_F1_CBC.
	MCPWM_FH0_CFG0_FH0_F1_CBC = 0x4
	// Position of FH0_F0_CBC field.
	MCPWM_FH0_CFG0_FH0_F0_CBC_Pos = 0x3
	// Bit mask of FH0_F0_CBC field.
	MCPWM_FH0_CFG0_FH0_F0_CBC_Msk = 0x8
	// Bit FH0_F0_CBC.
	MCPWM_FH0_CFG0_FH0_F0_CBC = 0x8
	// Position of FH0_SW_OST field.
	MCPWM_FH0_CFG0_FH0_SW_OST_Pos = 0x4
	// Bit mask of FH0_SW_OST field.
	MCPWM_FH0_CFG0_FH0_SW_OST_Msk = 0x10
	// Bit FH0_SW_OST.
	MCPWM_FH0_CFG0_FH0_SW_OST = 0x10
	// Position of FH0_F2_OST field.
	MCPWM_FH0_CFG0_FH0_F2_OST_Pos = 0x5
	// Bit mask of FH0_F2_OST field.
	MCPWM_FH0_CFG0_FH0_F2_OST_Msk = 0x20
	// Bit FH0_F2_OST.
	MCPWM_FH0_CFG0_FH0_F2_OST = 0x20
	// Position of FH0_F1_OST field.
	MCPWM_FH0_CFG0_FH0_F1_OST_Pos = 0x6
	// Bit mask of FH0_F1_OST field.
	MCPWM_FH0_CFG0_FH0_F1_OST_Msk = 0x40
	// Bit FH0_F1_OST.
	MCPWM_FH0_CFG0_FH0_F1_OST = 0x40
	// Position of FH0_F0_OST field.
	MCPWM_FH0_CFG0_FH0_F0_OST_Pos = 0x7
	// Bit mask of FH0_F0_OST field.
	MCPWM_FH0_CFG0_FH0_F0_OST_Msk = 0x80
	// Bit FH0_F0_OST.
	MCPWM_FH0_CFG0_FH0_F0_OST = 0x80
	// Position of FH0_A_CBC_D field.
	MCPWM_FH0_CFG0_FH0_A_CBC_D_Pos = 0x8
	// Bit mask of FH0_A_CBC_D field.
	MCPWM_FH0_CFG0_FH0_A_CBC_D_Msk = 0x300
	// Position of FH0_A_CBC_U field.
	MCPWM_FH0_CFG0_FH0_A_CBC_U_Pos = 0xa
	// Bit mask of FH0_A_CBC_U field.
	MCPWM_FH0_CFG0_FH0_A_CBC_U_Msk = 0xc00
	// Position of FH0_A_OST_D field.
	MCPWM_FH0_CFG0_FH0_A_OST_D_Pos = 0xc
	// Bit mask of FH0_A_OST_D field.
	MCPWM_FH0_CFG0_FH0_A_OST_D_Msk = 0x3000
	// Position of FH0_A_OST_U field.
	MCPWM_FH0_CFG0_FH0_A_OST_U_Pos = 0xe
	// Bit mask of FH0_A_OST_U field.
	MCPWM_FH0_CFG0_FH0_A_OST_U_Msk = 0xc000
	// Position of FH0_B_CBC_D field.
	MCPWM_FH0_CFG0_FH0_B_CBC_D_Pos = 0x10
	// Bit mask of FH0_B_CBC_D field.
	MCPWM_FH0_CFG0_FH0_B_CBC_D_Msk = 0x30000
	// Position of FH0_B_CBC_U field.
	MCPWM_FH0_CFG0_FH0_B_CBC_U_Pos = 0x12
	// Bit mask of FH0_B_CBC_U field.
	MCPWM_FH0_CFG0_FH0_B_CBC_U_Msk = 0xc0000
	// Position of FH0_B_OST_D field.
	MCPWM_FH0_CFG0_FH0_B_OST_D_Pos = 0x14
	// Bit mask of FH0_B_OST_D field.
	MCPWM_FH0_CFG0_FH0_B_OST_D_Msk = 0x300000
	// Position of FH0_B_OST_U field.
	MCPWM_FH0_CFG0_FH0_B_OST_U_Pos = 0x16
	// Bit mask of FH0_B_OST_U field.
	MCPWM_FH0_CFG0_FH0_B_OST_U_Msk = 0xc00000

	// FH0_CFG1
	// Position of FH0_CLR_OST field.
	MCPWM_FH0_CFG1_FH0_CLR_OST_Pos = 0x0
	// Bit mask of FH0_CLR_OST field.
	MCPWM_FH0_CFG1_FH0_CLR_OST_Msk = 0x1
	// Bit FH0_CLR_OST.
	MCPWM_FH0_CFG1_FH0_CLR_OST = 0x1
	// Position of FH0_CBCPULSE field.
	MCPWM_FH0_CFG1_FH0_CBCPULSE_Pos = 0x1
	// Bit mask of FH0_CBCPULSE field.
	MCPWM_FH0_CFG1_FH0_CBCPULSE_Msk = 0x6
	// Position of FH0_FORCE_CBC field.
	MCPWM_FH0_CFG1_FH0_FORCE_CBC_Pos = 0x3
	// Bit mask of FH0_FORCE_CBC field.
	MCPWM_FH0_CFG1_FH0_FORCE_CBC_Msk = 0x8
	// Bit FH0_FORCE_CBC.
	MCPWM_FH0_CFG1_FH0_FORCE_CBC = 0x8
	// Position of FH0_FORCE_OST field.
	MCPWM_FH0_CFG1_FH0_FORCE_OST_Pos = 0x4
	// Bit mask of FH0_FORCE_OST field.
	MCPWM_FH0_CFG1_FH0_FORCE_OST_Msk = 0x10
	// Bit FH0_FORCE_OST.
	MCPWM_FH0_CFG1_FH0_FORCE_OST = 0x10

	// FH0_STATUS
	// Position of FH0_CBC_ON field.
	MCPWM_FH0_STATUS_FH0_CBC_ON_Pos = 0x0
	// Bit mask of FH0_CBC_ON field.
	MCPWM_FH0_STATUS_FH0_CBC_ON_Msk = 0x1
	// Bit FH0_CBC_ON.
	MCPWM_FH0_STATUS_FH0_CBC_ON = 0x1
	// Position of FH0_OST_ON field.
	MCPWM_FH0_STATUS_FH0_OST_ON_Pos = 0x1
	// Bit mask of FH0_OST_ON field.
	MCPWM_FH0_STATUS_FH0_OST_ON_Msk = 0x2
	// Bit FH0_OST_ON.
	MCPWM_FH0_STATUS_FH0_OST_ON = 0x2

	// GEN1_STMP_CFG
	// Position of GEN1_A_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_UPMETHOD_Pos = 0x0
	// Bit mask of GEN1_A_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_UPMETHOD_Msk = 0xf
	// Position of GEN1_B_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_UPMETHOD_Pos = 0x4
	// Bit mask of GEN1_B_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_UPMETHOD_Msk = 0xf0
	// Position of GEN1_A_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_SHDW_FULL_Pos = 0x8
	// Bit mask of GEN1_A_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_SHDW_FULL_Msk = 0x100
	// Bit GEN1_A_SHDW_FULL.
	MCPWM_GEN1_STMP_CFG_GEN1_A_SHDW_FULL = 0x100
	// Position of GEN1_B_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_SHDW_FULL_Pos = 0x9
	// Bit mask of GEN1_B_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_SHDW_FULL_Msk = 0x200
	// Bit GEN1_B_SHDW_FULL.
	MCPWM_GEN1_STMP_CFG_GEN1_B_SHDW_FULL = 0x200

	// GEN1_TSTMP_A
	// Position of GEN1_A field.
	MCPWM_GEN1_TSTMP_A_GEN1_A_Pos = 0x0
	// Bit mask of GEN1_A field.
	MCPWM_GEN1_TSTMP_A_GEN1_A_Msk = 0xffff

	// GEN1_TSTMP_B
	// Position of GEN1_B field.
	MCPWM_GEN1_TSTMP_B_GEN1_B_Pos = 0x0
	// Bit mask of GEN1_B field.
	MCPWM_GEN1_TSTMP_B_GEN1_B_Msk = 0xffff

	// GEN1_CFG0
	// Position of GEN1_CFG_UPMETHOD field.
	MCPWM_GEN1_CFG0_GEN1_CFG_UPMETHOD_Pos = 0x0
	// Bit mask of GEN1_CFG_UPMETHOD field.
	MCPWM_GEN1_CFG0_GEN1_CFG_UPMETHOD_Msk = 0xf
	// Position of GEN1_T0_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T0_SEL_Pos = 0x4
	// Bit mask of GEN1_T0_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T0_SEL_Msk = 0x70
	// Position of GEN1_T1_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T1_SEL_Pos = 0x7
	// Bit mask of GEN1_T1_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T1_SEL_Msk = 0x380

	// GEN1_FORCE
	// Position of GEN1_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD_Pos = 0x0
	// Bit mask of GEN1_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD_Msk = 0x3f
	// Position of GEN1_A_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_CNTUFORCE_MODE_Pos = 0x6
	// Bit mask of GEN1_A_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_CNTUFORCE_MODE_Msk = 0xc0
	// Position of GEN1_B_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_CNTUFORCE_MODE_Pos = 0x8
	// Bit mask of GEN1_B_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_CNTUFORCE_MODE_Msk = 0x300
	// Position of GEN1_A_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_Pos = 0xa
	// Bit mask of GEN1_A_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_Msk = 0x400
	// Bit GEN1_A_NCIFORCE.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE = 0x400
	// Position of GEN1_A_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_MODE_Pos = 0xb
	// Bit mask of GEN1_A_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_MODE_Msk = 0x1800
	// Position of GEN1_B_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_Pos = 0xd
	// Bit mask of GEN1_B_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_Msk = 0x2000
	// Bit GEN1_B_NCIFORCE.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE = 0x2000
	// Position of GEN1_B_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_MODE_Pos = 0xe
	// Bit mask of GEN1_B_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_MODE_Msk = 0xc000

	// GEN1_A
	// Position of UTEZ field.
	MCPWM_GEN1_A_UTEZ_Pos = 0x0
	// Bit mask of UTEZ field.
	MCPWM_GEN1_A_UTEZ_Msk = 0x3
	// Position of UTEP field.
	MCPWM_GEN1_A_UTEP_Pos = 0x2
	// Bit mask of UTEP field.
	MCPWM_GEN1_A_UTEP_Msk = 0xc
	// Position of UTEA field.
	MCPWM_GEN1_A_UTEA_Pos = 0x4
	// Bit mask of UTEA field.
	MCPWM_GEN1_A_UTEA_Msk = 0x30
	// Position of UTEB field.
	MCPWM_GEN1_A_UTEB_Pos = 0x6
	// Bit mask of UTEB field.
	MCPWM_GEN1_A_UTEB_Msk = 0xc0
	// Position of UT0 field.
	MCPWM_GEN1_A_UT0_Pos = 0x8
	// Bit mask of UT0 field.
	MCPWM_GEN1_A_UT0_Msk = 0x300
	// Position of UT1 field.
	MCPWM_GEN1_A_UT1_Pos = 0xa
	// Bit mask of UT1 field.
	MCPWM_GEN1_A_UT1_Msk = 0xc00
	// Position of DTEZ field.
	MCPWM_GEN1_A_DTEZ_Pos = 0xc
	// Bit mask of DTEZ field.
	MCPWM_GEN1_A_DTEZ_Msk = 0x3000
	// Position of DTEP field.
	MCPWM_GEN1_A_DTEP_Pos = 0xe
	// Bit mask of DTEP field.
	MCPWM_GEN1_A_DTEP_Msk = 0xc000
	// Position of DTEA field.
	MCPWM_GEN1_A_DTEA_Pos = 0x10
	// Bit mask of DTEA field.
	MCPWM_GEN1_A_DTEA_Msk = 0x30000
	// Position of DTEB field.
	MCPWM_GEN1_A_DTEB_Pos = 0x12
	// Bit mask of DTEB field.
	MCPWM_GEN1_A_DTEB_Msk = 0xc0000
	// Position of DT0 field.
	MCPWM_GEN1_A_DT0_Pos = 0x14
	// Bit mask of DT0 field.
	MCPWM_GEN1_A_DT0_Msk = 0x300000
	// Position of DT1 field.
	MCPWM_GEN1_A_DT1_Pos = 0x16
	// Bit mask of DT1 field.
	MCPWM_GEN1_A_DT1_Msk = 0xc00000

	// GEN1_B
	// Position of UTEZ field.
	MCPWM_GEN1_B_UTEZ_Pos = 0x0
	// Bit mask of UTEZ field.
	MCPWM_GEN1_B_UTEZ_Msk = 0x3
	// Position of UTEP field.
	MCPWM_GEN1_B_UTEP_Pos = 0x2
	// Bit mask of UTEP field.
	MCPWM_GEN1_B_UTEP_Msk = 0xc
	// Position of UTEA field.
	MCPWM_GEN1_B_UTEA_Pos = 0x4
	// Bit mask of UTEA field.
	MCPWM_GEN1_B_UTEA_Msk = 0x30
	// Position of UTEB field.
	MCPWM_GEN1_B_UTEB_Pos = 0x6
	// Bit mask of UTEB field.
	MCPWM_GEN1_B_UTEB_Msk = 0xc0
	// Position of UT0 field.
	MCPWM_GEN1_B_UT0_Pos = 0x8
	// Bit mask of UT0 field.
	MCPWM_GEN1_B_UT0_Msk = 0x300
	// Position of UT1 field.
	MCPWM_GEN1_B_UT1_Pos = 0xa
	// Bit mask of UT1 field.
	MCPWM_GEN1_B_UT1_Msk = 0xc00
	// Position of DTEZ field.
	MCPWM_GEN1_B_DTEZ_Pos = 0xc
	// Bit mask of DTEZ field.
	MCPWM_GEN1_B_DTEZ_Msk = 0x3000
	// Position of DTEP field.
	MCPWM_GEN1_B_DTEP_Pos = 0xe
	// Bit mask of DTEP field.
	MCPWM_GEN1_B_DTEP_Msk = 0xc000
	// Position of DTEA field.
	MCPWM_GEN1_B_DTEA_Pos = 0x10
	// Bit mask of DTEA field.
	MCPWM_GEN1_B_DTEA_Msk = 0x30000
	// Position of DTEB field.
	MCPWM_GEN1_B_DTEB_Pos = 0x12
	// Bit mask of DTEB field.
	MCPWM_GEN1_B_DTEB_Msk = 0xc0000
	// Position of DT0 field.
	MCPWM_GEN1_B_DT0_Pos = 0x14
	// Bit mask of DT0 field.
	MCPWM_GEN1_B_DT0_Msk = 0x300000
	// Position of DT1 field.
	MCPWM_GEN1_B_DT1_Pos = 0x16
	// Bit mask of DT1 field.
	MCPWM_GEN1_B_DT1_Msk = 0xc00000

	// DT1_CFG
	// Position of DT1_FED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_FED_UPMETHOD_Pos = 0x0
	// Bit mask of DT1_FED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_FED_UPMETHOD_Msk = 0xf
	// Position of DT1_RED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_RED_UPMETHOD_Pos = 0x4
	// Bit mask of DT1_RED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_RED_UPMETHOD_Msk = 0xf0
	// Position of DT1_DEB_MODE field.
	MCPWM_DT1_CFG_DT1_DEB_MODE_Pos = 0x8
	// Bit mask of DT1_DEB_MODE field.
	MCPWM_DT1_CFG_DT1_DEB_MODE_Msk = 0x100
	// Bit DT1_DEB_MODE.
	MCPWM_DT1_CFG_DT1_DEB_MODE = 0x100
	// Position of DT1_A_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_A_OUTSWAP_Pos = 0x9
	// Bit mask of DT1_A_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_A_OUTSWAP_Msk = 0x200
	// Bit DT1_A_OUTSWAP.
	MCPWM_DT1_CFG_DT1_A_OUTSWAP = 0x200
	// Position of DT1_B_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_B_OUTSWAP_Pos = 0xa
	// Bit mask of DT1_B_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_B_OUTSWAP_Msk = 0x400
	// Bit DT1_B_OUTSWAP.
	MCPWM_DT1_CFG_DT1_B_OUTSWAP = 0x400
	// Position of DT1_RED_INSEL field.
	MCPWM_DT1_CFG_DT1_RED_INSEL_Pos = 0xb
	// Bit mask of DT1_RED_INSEL field.
	MCPWM_DT1_CFG_DT1_RED_INSEL_Msk = 0x800
	// Bit DT1_RED_INSEL.
	MCPWM_DT1_CFG_DT1_RED_INSEL = 0x800
	// Position of DT1_FED_INSEL field.
	MCPWM_DT1_CFG_DT1_FED_INSEL_Pos = 0xc
	// Bit mask of DT1_FED_INSEL field.
	MCPWM_DT1_CFG_DT1_FED_INSEL_Msk = 0x1000
	// Bit DT1_FED_INSEL.
	MCPWM_DT1_CFG_DT1_FED_INSEL = 0x1000
	// Position of DT1_RED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_RED_OUTINVERT_Pos = 0xd
	// Bit mask of DT1_RED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_RED_OUTINVERT_Msk = 0x2000
	// Bit DT1_RED_OUTINVERT.
	MCPWM_DT1_CFG_DT1_RED_OUTINVERT = 0x2000
	// Position of DT1_FED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_FED_OUTINVERT_Pos = 0xe
	// Bit mask of DT1_FED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_FED_OUTINVERT_Msk = 0x4000
	// Bit DT1_FED_OUTINVERT.
	MCPWM_DT1_CFG_DT1_FED_OUTINVERT = 0x4000
	// Position of DT1_A_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_A_OUTBYPASS_Pos = 0xf
	// Bit mask of DT1_A_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_A_OUTBYPASS_Msk = 0x8000
	// Bit DT1_A_OUTBYPASS.
	MCPWM_DT1_CFG_DT1_A_OUTBYPASS = 0x8000
	// Position of DT1_B_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_B_OUTBYPASS_Pos = 0x10
	// Bit mask of DT1_B_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_B_OUTBYPASS_Msk = 0x10000
	// Bit DT1_B_OUTBYPASS.
	MCPWM_DT1_CFG_DT1_B_OUTBYPASS = 0x10000
	// Position of DT1_CLK_SEL field.
	MCPWM_DT1_CFG_DT1_CLK_SEL_Pos = 0x11
	// Bit mask of DT1_CLK_SEL field.
	MCPWM_DT1_CFG_DT1_CLK_SEL_Msk = 0x20000
	// Bit DT1_CLK_SEL.
	MCPWM_DT1_CFG_DT1_CLK_SEL = 0x20000

	// DT1_FED_CFG
	// Position of DT1_FED field.
	MCPWM_DT1_FED_CFG_DT1_FED_Pos = 0x0
	// Bit mask of DT1_FED field.
	MCPWM_DT1_FED_CFG_DT1_FED_Msk = 0xffff

	// DT1_RED_CFG
	// Position of DT1_RED field.
	MCPWM_DT1_RED_CFG_DT1_RED_Pos = 0x0
	// Bit mask of DT1_RED field.
	MCPWM_DT1_RED_CFG_DT1_RED_Msk = 0xffff

	// CARRIER1_CFG
	// Position of CARRIER1_EN field.
	MCPWM_CARRIER1_CFG_CARRIER1_EN_Pos = 0x0
	// Bit mask of CARRIER1_EN field.
	MCPWM_CARRIER1_CFG_CARRIER1_EN_Msk = 0x1
	// Bit CARRIER1_EN.
	MCPWM_CARRIER1_CFG_CARRIER1_EN = 0x1
	// Position of CARRIER1_PRESCALE field.
	MCPWM_CARRIER1_CFG_CARRIER1_PRESCALE_Pos = 0x1
	// Bit mask of CARRIER1_PRESCALE field.
	MCPWM_CARRIER1_CFG_CARRIER1_PRESCALE_Msk = 0x1e
	// Position of CARRIER1_DUTY field.
	MCPWM_CARRIER1_CFG_CARRIER1_DUTY_Pos = 0x5
	// Bit mask of CARRIER1_DUTY field.
	MCPWM_CARRIER1_CFG_CARRIER1_DUTY_Msk = 0xe0
	// Position of CARRIER1_OSHTWTH field.
	MCPWM_CARRIER1_CFG_CARRIER1_OSHTWTH_Pos = 0x8
	// Bit mask of CARRIER1_OSHTWTH field.
	MCPWM_CARRIER1_CFG_CARRIER1_OSHTWTH_Msk = 0xf00
	// Position of CARRIER1_OUT_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_OUT_INVERT_Pos = 0xc
	// Bit mask of CARRIER1_OUT_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_OUT_INVERT_Msk = 0x1000
	// Bit CARRIER1_OUT_INVERT.
	MCPWM_CARRIER1_CFG_CARRIER1_OUT_INVERT = 0x1000
	// Position of CARRIER1_IN_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_IN_INVERT_Pos = 0xd
	// Bit mask of CARRIER1_IN_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_IN_INVERT_Msk = 0x2000
	// Bit CARRIER1_IN_INVERT.
	MCPWM_CARRIER1_CFG_CARRIER1_IN_INVERT = 0x2000

	// FH1_CFG0
	// Position of FH1_SW_CBC field.
	MCPWM_FH1_CFG0_FH1_SW_CBC_Pos = 0x0
	// Bit mask of FH1_SW_CBC field.
	MCPWM_FH1_CFG0_FH1_SW_CBC_Msk = 0x1
	// Bit FH1_SW_CBC.
	MCPWM_FH1_CFG0_FH1_SW_CBC = 0x1
	// Position of FH1_F2_CBC field.
	MCPWM_FH1_CFG0_FH1_F2_CBC_Pos = 0x1
	// Bit mask of FH1_F2_CBC field.
	MCPWM_FH1_CFG0_FH1_F2_CBC_Msk = 0x2
	// Bit FH1_F2_CBC.
	MCPWM_FH1_CFG0_FH1_F2_CBC = 0x2
	// Position of FH1_F1_CBC field.
	MCPWM_FH1_CFG0_FH1_F1_CBC_Pos = 0x2
	// Bit mask of FH1_F1_CBC field.
	MCPWM_FH1_CFG0_FH1_F1_CBC_Msk = 0x4
	// Bit FH1_F1_CBC.
	MCPWM_FH1_CFG0_FH1_F1_CBC = 0x4
	// Position of FH1_F0_CBC field.
	MCPWM_FH1_CFG0_FH1_F0_CBC_Pos = 0x3
	// Bit mask of FH1_F0_CBC field.
	MCPWM_FH1_CFG0_FH1_F0_CBC_Msk = 0x8
	// Bit FH1_F0_CBC.
	MCPWM_FH1_CFG0_FH1_F0_CBC = 0x8
	// Position of FH1_SW_OST field.
	MCPWM_FH1_CFG0_FH1_SW_OST_Pos = 0x4
	// Bit mask of FH1_SW_OST field.
	MCPWM_FH1_CFG0_FH1_SW_OST_Msk = 0x10
	// Bit FH1_SW_OST.
	MCPWM_FH1_CFG0_FH1_SW_OST = 0x10
	// Position of FH1_F2_OST field.
	MCPWM_FH1_CFG0_FH1_F2_OST_Pos = 0x5
	// Bit mask of FH1_F2_OST field.
	MCPWM_FH1_CFG0_FH1_F2_OST_Msk = 0x20
	// Bit FH1_F2_OST.
	MCPWM_FH1_CFG0_FH1_F2_OST = 0x20
	// Position of FH1_F1_OST field.
	MCPWM_FH1_CFG0_FH1_F1_OST_Pos = 0x6
	// Bit mask of FH1_F1_OST field.
	MCPWM_FH1_CFG0_FH1_F1_OST_Msk = 0x40
	// Bit FH1_F1_OST.
	MCPWM_FH1_CFG0_FH1_F1_OST = 0x40
	// Position of FH1_F0_OST field.
	MCPWM_FH1_CFG0_FH1_F0_OST_Pos = 0x7
	// Bit mask of FH1_F0_OST field.
	MCPWM_FH1_CFG0_FH1_F0_OST_Msk = 0x80
	// Bit FH1_F0_OST.
	MCPWM_FH1_CFG0_FH1_F0_OST = 0x80
	// Position of FH1_A_CBC_D field.
	MCPWM_FH1_CFG0_FH1_A_CBC_D_Pos = 0x8
	// Bit mask of FH1_A_CBC_D field.
	MCPWM_FH1_CFG0_FH1_A_CBC_D_Msk = 0x300
	// Position of FH1_A_CBC_U field.
	MCPWM_FH1_CFG0_FH1_A_CBC_U_Pos = 0xa
	// Bit mask of FH1_A_CBC_U field.
	MCPWM_FH1_CFG0_FH1_A_CBC_U_Msk = 0xc00
	// Position of FH1_A_OST_D field.
	MCPWM_FH1_CFG0_FH1_A_OST_D_Pos = 0xc
	// Bit mask of FH1_A_OST_D field.
	MCPWM_FH1_CFG0_FH1_A_OST_D_Msk = 0x3000
	// Position of FH1_A_OST_U field.
	MCPWM_FH1_CFG0_FH1_A_OST_U_Pos = 0xe
	// Bit mask of FH1_A_OST_U field.
	MCPWM_FH1_CFG0_FH1_A_OST_U_Msk = 0xc000
	// Position of FH1_B_CBC_D field.
	MCPWM_FH1_CFG0_FH1_B_CBC_D_Pos = 0x10
	// Bit mask of FH1_B_CBC_D field.
	MCPWM_FH1_CFG0_FH1_B_CBC_D_Msk = 0x30000
	// Position of FH1_B_CBC_U field.
	MCPWM_FH1_CFG0_FH1_B_CBC_U_Pos = 0x12
	// Bit mask of FH1_B_CBC_U field.
	MCPWM_FH1_CFG0_FH1_B_CBC_U_Msk = 0xc0000
	// Position of FH1_B_OST_D field.
	MCPWM_FH1_CFG0_FH1_B_OST_D_Pos = 0x14
	// Bit mask of FH1_B_OST_D field.
	MCPWM_FH1_CFG0_FH1_B_OST_D_Msk = 0x300000
	// Position of FH1_B_OST_U field.
	MCPWM_FH1_CFG0_FH1_B_OST_U_Pos = 0x16
	// Bit mask of FH1_B_OST_U field.
	MCPWM_FH1_CFG0_FH1_B_OST_U_Msk = 0xc00000

	// FH1_CFG1
	// Position of FH1_CLR_OST field.
	MCPWM_FH1_CFG1_FH1_CLR_OST_Pos = 0x0
	// Bit mask of FH1_CLR_OST field.
	MCPWM_FH1_CFG1_FH1_CLR_OST_Msk = 0x1
	// Bit FH1_CLR_OST.
	MCPWM_FH1_CFG1_FH1_CLR_OST = 0x1
	// Position of FH1_CBCPULSE field.
	MCPWM_FH1_CFG1_FH1_CBCPULSE_Pos = 0x1
	// Bit mask of FH1_CBCPULSE field.
	MCPWM_FH1_CFG1_FH1_CBCPULSE_Msk = 0x6
	// Position of FH1_FORCE_CBC field.
	MCPWM_FH1_CFG1_FH1_FORCE_CBC_Pos = 0x3
	// Bit mask of FH1_FORCE_CBC field.
	MCPWM_FH1_CFG1_FH1_FORCE_CBC_Msk = 0x8
	// Bit FH1_FORCE_CBC.
	MCPWM_FH1_CFG1_FH1_FORCE_CBC = 0x8
	// Position of FH1_FORCE_OST field.
	MCPWM_FH1_CFG1_FH1_FORCE_OST_Pos = 0x4
	// Bit mask of FH1_FORCE_OST field.
	MCPWM_FH1_CFG1_FH1_FORCE_OST_Msk = 0x10
	// Bit FH1_FORCE_OST.
	MCPWM_FH1_CFG1_FH1_FORCE_OST = 0x10

	// FH1_STATUS
	// Position of FH1_CBC_ON field.
	MCPWM_FH1_STATUS_FH1_CBC_ON_Pos = 0x0
	// Bit mask of FH1_CBC_ON field.
	MCPWM_FH1_STATUS_FH1_CBC_ON_Msk = 0x1
	// Bit FH1_CBC_ON.
	MCPWM_FH1_STATUS_FH1_CBC_ON = 0x1
	// Position of FH1_OST_ON field.
	MCPWM_FH1_STATUS_FH1_OST_ON_Pos = 0x1
	// Bit mask of FH1_OST_ON field.
	MCPWM_FH1_STATUS_FH1_OST_ON_Msk = 0x2
	// Bit FH1_OST_ON.
	MCPWM_FH1_STATUS_FH1_OST_ON = 0x2

	// GEN2_STMP_CFG
	// Position of GEN2_A_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_UPMETHOD_Pos = 0x0
	// Bit mask of GEN2_A_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_UPMETHOD_Msk = 0xf
	// Position of GEN2_B_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_UPMETHOD_Pos = 0x4
	// Bit mask of GEN2_B_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_UPMETHOD_Msk = 0xf0
	// Position of GEN2_A_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_SHDW_FULL_Pos = 0x8
	// Bit mask of GEN2_A_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_SHDW_FULL_Msk = 0x100
	// Bit GEN2_A_SHDW_FULL.
	MCPWM_GEN2_STMP_CFG_GEN2_A_SHDW_FULL = 0x100
	// Position of GEN2_B_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_SHDW_FULL_Pos = 0x9
	// Bit mask of GEN2_B_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_SHDW_FULL_Msk = 0x200
	// Bit GEN2_B_SHDW_FULL.
	MCPWM_GEN2_STMP_CFG_GEN2_B_SHDW_FULL = 0x200

	// GEN2_TSTMP_A
	// Position of GEN2_A field.
	MCPWM_GEN2_TSTMP_A_GEN2_A_Pos = 0x0
	// Bit mask of GEN2_A field.
	MCPWM_GEN2_TSTMP_A_GEN2_A_Msk = 0xffff

	// GEN2_TSTMP_B
	// Position of GEN2_B field.
	MCPWM_GEN2_TSTMP_B_GEN2_B_Pos = 0x0
	// Bit mask of GEN2_B field.
	MCPWM_GEN2_TSTMP_B_GEN2_B_Msk = 0xffff

	// GEN2_CFG0
	// Position of GEN2_CFG_UPMETHOD field.
	MCPWM_GEN2_CFG0_GEN2_CFG_UPMETHOD_Pos = 0x0
	// Bit mask of GEN2_CFG_UPMETHOD field.
	MCPWM_GEN2_CFG0_GEN2_CFG_UPMETHOD_Msk = 0xf
	// Position of GEN2_T0_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T0_SEL_Pos = 0x4
	// Bit mask of GEN2_T0_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T0_SEL_Msk = 0x70
	// Position of GEN2_T1_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T1_SEL_Pos = 0x7
	// Bit mask of GEN2_T1_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T1_SEL_Msk = 0x380

	// GEN2_FORCE
	// Position of GEN2_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD_Pos = 0x0
	// Bit mask of GEN2_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD_Msk = 0x3f
	// Position of GEN2_A_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_CNTUFORCE_MODE_Pos = 0x6
	// Bit mask of GEN2_A_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_CNTUFORCE_MODE_Msk = 0xc0
	// Position of GEN2_B_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_CNTUFORCE_MODE_Pos = 0x8
	// Bit mask of GEN2_B_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_CNTUFORCE_MODE_Msk = 0x300
	// Position of GEN2_A_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_Pos = 0xa
	// Bit mask of GEN2_A_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_Msk = 0x400
	// Bit GEN2_A_NCIFORCE.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE = 0x400
	// Position of GEN2_A_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_MODE_Pos = 0xb
	// Bit mask of GEN2_A_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_MODE_Msk = 0x1800
	// Position of GEN2_B_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_Pos = 0xd
	// Bit mask of GEN2_B_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_Msk = 0x2000
	// Bit GEN2_B_NCIFORCE.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE = 0x2000
	// Position of GEN2_B_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_MODE_Pos = 0xe
	// Bit mask of GEN2_B_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_MODE_Msk = 0xc000

	// GEN2_A
	// Position of UTEZ field.
	MCPWM_GEN2_A_UTEZ_Pos = 0x0
	// Bit mask of UTEZ field.
	MCPWM_GEN2_A_UTEZ_Msk = 0x3
	// Position of UTEP field.
	MCPWM_GEN2_A_UTEP_Pos = 0x2
	// Bit mask of UTEP field.
	MCPWM_GEN2_A_UTEP_Msk = 0xc
	// Position of UTEA field.
	MCPWM_GEN2_A_UTEA_Pos = 0x4
	// Bit mask of UTEA field.
	MCPWM_GEN2_A_UTEA_Msk = 0x30
	// Position of UTEB field.
	MCPWM_GEN2_A_UTEB_Pos = 0x6
	// Bit mask of UTEB field.
	MCPWM_GEN2_A_UTEB_Msk = 0xc0
	// Position of UT0 field.
	MCPWM_GEN2_A_UT0_Pos = 0x8
	// Bit mask of UT0 field.
	MCPWM_GEN2_A_UT0_Msk = 0x300
	// Position of UT1 field.
	MCPWM_GEN2_A_UT1_Pos = 0xa
	// Bit mask of UT1 field.
	MCPWM_GEN2_A_UT1_Msk = 0xc00
	// Position of DTEZ field.
	MCPWM_GEN2_A_DTEZ_Pos = 0xc
	// Bit mask of DTEZ field.
	MCPWM_GEN2_A_DTEZ_Msk = 0x3000
	// Position of DTEP field.
	MCPWM_GEN2_A_DTEP_Pos = 0xe
	// Bit mask of DTEP field.
	MCPWM_GEN2_A_DTEP_Msk = 0xc000
	// Position of DTEA field.
	MCPWM_GEN2_A_DTEA_Pos = 0x10
	// Bit mask of DTEA field.
	MCPWM_GEN2_A_DTEA_Msk = 0x30000
	// Position of DTEB field.
	MCPWM_GEN2_A_DTEB_Pos = 0x12
	// Bit mask of DTEB field.
	MCPWM_GEN2_A_DTEB_Msk = 0xc0000
	// Position of DT0 field.
	MCPWM_GEN2_A_DT0_Pos = 0x14
	// Bit mask of DT0 field.
	MCPWM_GEN2_A_DT0_Msk = 0x300000
	// Position of DT1 field.
	MCPWM_GEN2_A_DT1_Pos = 0x16
	// Bit mask of DT1 field.
	MCPWM_GEN2_A_DT1_Msk = 0xc00000

	// GEN2_B
	// Position of UTEZ field.
	MCPWM_GEN2_B_UTEZ_Pos = 0x0
	// Bit mask of UTEZ field.
	MCPWM_GEN2_B_UTEZ_Msk = 0x3
	// Position of UTEP field.
	MCPWM_GEN2_B_UTEP_Pos = 0x2
	// Bit mask of UTEP field.
	MCPWM_GEN2_B_UTEP_Msk = 0xc
	// Position of UTEA field.
	MCPWM_GEN2_B_UTEA_Pos = 0x4
	// Bit mask of UTEA field.
	MCPWM_GEN2_B_UTEA_Msk = 0x30
	// Position of UTEB field.
	MCPWM_GEN2_B_UTEB_Pos = 0x6
	// Bit mask of UTEB field.
	MCPWM_GEN2_B_UTEB_Msk = 0xc0
	// Position of UT0 field.
	MCPWM_GEN2_B_UT0_Pos = 0x8
	// Bit mask of UT0 field.
	MCPWM_GEN2_B_UT0_Msk = 0x300
	// Position of UT1 field.
	MCPWM_GEN2_B_UT1_Pos = 0xa
	// Bit mask of UT1 field.
	MCPWM_GEN2_B_UT1_Msk = 0xc00
	// Position of DTEZ field.
	MCPWM_GEN2_B_DTEZ_Pos = 0xc
	// Bit mask of DTEZ field.
	MCPWM_GEN2_B_DTEZ_Msk = 0x3000
	// Position of DTEP field.
	MCPWM_GEN2_B_DTEP_Pos = 0xe
	// Bit mask of DTEP field.
	MCPWM_GEN2_B_DTEP_Msk = 0xc000
	// Position of DTEA field.
	MCPWM_GEN2_B_DTEA_Pos = 0x10
	// Bit mask of DTEA field.
	MCPWM_GEN2_B_DTEA_Msk = 0x30000
	// Position of DTEB field.
	MCPWM_GEN2_B_DTEB_Pos = 0x12
	// Bit mask of DTEB field.
	MCPWM_GEN2_B_DTEB_Msk = 0xc0000
	// Position of DT0 field.
	MCPWM_GEN2_B_DT0_Pos = 0x14
	// Bit mask of DT0 field.
	MCPWM_GEN2_B_DT0_Msk = 0x300000
	// Position of DT1 field.
	MCPWM_GEN2_B_DT1_Pos = 0x16
	// Bit mask of DT1 field.
	MCPWM_GEN2_B_DT1_Msk = 0xc00000

	// DT2_CFG
	// Position of DT2_FED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_FED_UPMETHOD_Pos = 0x0
	// Bit mask of DT2_FED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_FED_UPMETHOD_Msk = 0xf
	// Position of DT2_RED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_RED_UPMETHOD_Pos = 0x4
	// Bit mask of DT2_RED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_RED_UPMETHOD_Msk = 0xf0
	// Position of DT2_DEB_MODE field.
	MCPWM_DT2_CFG_DT2_DEB_MODE_Pos = 0x8
	// Bit mask of DT2_DEB_MODE field.
	MCPWM_DT2_CFG_DT2_DEB_MODE_Msk = 0x100
	// Bit DT2_DEB_MODE.
	MCPWM_DT2_CFG_DT2_DEB_MODE = 0x100
	// Position of DT2_A_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_A_OUTSWAP_Pos = 0x9
	// Bit mask of DT2_A_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_A_OUTSWAP_Msk = 0x200
	// Bit DT2_A_OUTSWAP.
	MCPWM_DT2_CFG_DT2_A_OUTSWAP = 0x200
	// Position of DT2_B_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_B_OUTSWAP_Pos = 0xa
	// Bit mask of DT2_B_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_B_OUTSWAP_Msk = 0x400
	// Bit DT2_B_OUTSWAP.
	MCPWM_DT2_CFG_DT2_B_OUTSWAP = 0x400
	// Position of DT2_RED_INSEL field.
	MCPWM_DT2_CFG_DT2_RED_INSEL_Pos = 0xb
	// Bit mask of DT2_RED_INSEL field.
	MCPWM_DT2_CFG_DT2_RED_INSEL_Msk = 0x800
	// Bit DT2_RED_INSEL.
	MCPWM_DT2_CFG_DT2_RED_INSEL = 0x800
	// Position of DT2_FED_INSEL field.
	MCPWM_DT2_CFG_DT2_FED_INSEL_Pos = 0xc
	// Bit mask of DT2_FED_INSEL field.
	MCPWM_DT2_CFG_DT2_FED_INSEL_Msk = 0x1000
	// Bit DT2_FED_INSEL.
	MCPWM_DT2_CFG_DT2_FED_INSEL = 0x1000
	// Position of DT2_RED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_RED_OUTINVERT_Pos = 0xd
	// Bit mask of DT2_RED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_RED_OUTINVERT_Msk = 0x2000
	// Bit DT2_RED_OUTINVERT.
	MCPWM_DT2_CFG_DT2_RED_OUTINVERT = 0x2000
	// Position of DT2_FED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_FED_OUTINVERT_Pos = 0xe
	// Bit mask of DT2_FED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_FED_OUTINVERT_Msk = 0x4000
	// Bit DT2_FED_OUTINVERT.
	MCPWM_DT2_CFG_DT2_FED_OUTINVERT = 0x4000
	// Position of DT2_A_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_A_OUTBYPASS_Pos = 0xf
	// Bit mask of DT2_A_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_A_OUTBYPASS_Msk = 0x8000
	// Bit DT2_A_OUTBYPASS.
	MCPWM_DT2_CFG_DT2_A_OUTBYPASS = 0x8000
	// Position of DT2_B_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_B_OUTBYPASS_Pos = 0x10
	// Bit mask of DT2_B_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_B_OUTBYPASS_Msk = 0x10000
	// Bit DT2_B_OUTBYPASS.
	MCPWM_DT2_CFG_DT2_B_OUTBYPASS = 0x10000
	// Position of DT2_CLK_SEL field.
	MCPWM_DT2_CFG_DT2_CLK_SEL_Pos = 0x11
	// Bit mask of DT2_CLK_SEL field.
	MCPWM_DT2_CFG_DT2_CLK_SEL_Msk = 0x20000
	// Bit DT2_CLK_SEL.
	MCPWM_DT2_CFG_DT2_CLK_SEL = 0x20000

	// DT2_FED_CFG
	// Position of DT2_FED field.
	MCPWM_DT2_FED_CFG_DT2_FED_Pos = 0x0
	// Bit mask of DT2_FED field.
	MCPWM_DT2_FED_CFG_DT2_FED_Msk = 0xffff

	// DT2_RED_CFG
	// Position of DT2_RED field.
	MCPWM_DT2_RED_CFG_DT2_RED_Pos = 0x0
	// Bit mask of DT2_RED field.
	MCPWM_DT2_RED_CFG_DT2_RED_Msk = 0xffff

	// CARRIER2_CFG
	// Position of CARRIER2_EN field.
	MCPWM_CARRIER2_CFG_CARRIER2_EN_Pos = 0x0
	// Bit mask of CARRIER2_EN field.
	MCPWM_CARRIER2_CFG_CARRIER2_EN_Msk = 0x1
	// Bit CARRIER2_EN.
	MCPWM_CARRIER2_CFG_CARRIER2_EN = 0x1
	// Position of CARRIER2_PRESCALE field.
	MCPWM_CARRIER2_CFG_CARRIER2_PRESCALE_Pos = 0x1
	// Bit mask of CARRIER2_PRESCALE field.
	MCPWM_CARRIER2_CFG_CARRIER2_PRESCALE_Msk = 0x1e
	// Position of CARRIER2_DUTY field.
	MCPWM_CARRIER2_CFG_CARRIER2_DUTY_Pos = 0x5
	// Bit mask of CARRIER2_DUTY field.
	MCPWM_CARRIER2_CFG_CARRIER2_DUTY_Msk = 0xe0
	// Position of CARRIER2_OSHTWTH field.
	MCPWM_CARRIER2_CFG_CARRIER2_OSHTWTH_Pos = 0x8
	// Bit mask of CARRIER2_OSHTWTH field.
	MCPWM_CARRIER2_CFG_CARRIER2_OSHTWTH_Msk = 0xf00
	// Position of CARRIER2_OUT_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_OUT_INVERT_Pos = 0xc
	// Bit mask of CARRIER2_OUT_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_OUT_INVERT_Msk = 0x1000
	// Bit CARRIER2_OUT_INVERT.
	MCPWM_CARRIER2_CFG_CARRIER2_OUT_INVERT = 0x1000
	// Position of CARRIER2_IN_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_IN_INVERT_Pos = 0xd
	// Bit mask of CARRIER2_IN_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_IN_INVERT_Msk = 0x2000
	// Bit CARRIER2_IN_INVERT.
	MCPWM_CARRIER2_CFG_CARRIER2_IN_INVERT = 0x2000

	// FH2_CFG0
	// Position of FH2_SW_CBC field.
	MCPWM_FH2_CFG0_FH2_SW_CBC_Pos = 0x0
	// Bit mask of FH2_SW_CBC field.
	MCPWM_FH2_CFG0_FH2_SW_CBC_Msk = 0x1
	// Bit FH2_SW_CBC.
	MCPWM_FH2_CFG0_FH2_SW_CBC = 0x1
	// Position of FH2_F2_CBC field.
	MCPWM_FH2_CFG0_FH2_F2_CBC_Pos = 0x1
	// Bit mask of FH2_F2_CBC field.
	MCPWM_FH2_CFG0_FH2_F2_CBC_Msk = 0x2
	// Bit FH2_F2_CBC.
	MCPWM_FH2_CFG0_FH2_F2_CBC = 0x2
	// Position of FH2_F1_CBC field.
	MCPWM_FH2_CFG0_FH2_F1_CBC_Pos = 0x2
	// Bit mask of FH2_F1_CBC field.
	MCPWM_FH2_CFG0_FH2_F1_CBC_Msk = 0x4
	// Bit FH2_F1_CBC.
	MCPWM_FH2_CFG0_FH2_F1_CBC = 0x4
	// Position of FH2_F0_CBC field.
	MCPWM_FH2_CFG0_FH2_F0_CBC_Pos = 0x3
	// Bit mask of FH2_F0_CBC field.
	MCPWM_FH2_CFG0_FH2_F0_CBC_Msk = 0x8
	// Bit FH2_F0_CBC.
	MCPWM_FH2_CFG0_FH2_F0_CBC = 0x8
	// Position of FH2_SW_OST field.
	MCPWM_FH2_CFG0_FH2_SW_OST_Pos = 0x4
	// Bit mask of FH2_SW_OST field.
	MCPWM_FH2_CFG0_FH2_SW_OST_Msk = 0x10
	// Bit FH2_SW_OST.
	MCPWM_FH2_CFG0_FH2_SW_OST = 0x10
	// Position of FH2_F2_OST field.
	MCPWM_FH2_CFG0_FH2_F2_OST_Pos = 0x5
	// Bit mask of FH2_F2_OST field.
	MCPWM_FH2_CFG0_FH2_F2_OST_Msk = 0x20
	// Bit FH2_F2_OST.
	MCPWM_FH2_CFG0_FH2_F2_OST = 0x20
	// Position of FH2_F1_OST field.
	MCPWM_FH2_CFG0_FH2_F1_OST_Pos = 0x6
	// Bit mask of FH2_F1_OST field.
	MCPWM_FH2_CFG0_FH2_F1_OST_Msk = 0x40
	// Bit FH2_F1_OST.
	MCPWM_FH2_CFG0_FH2_F1_OST = 0x40
	// Position of FH2_F0_OST field.
	MCPWM_FH2_CFG0_FH2_F0_OST_Pos = 0x7
	// Bit mask of FH2_F0_OST field.
	MCPWM_FH2_CFG0_FH2_F0_OST_Msk = 0x80
	// Bit FH2_F0_OST.
	MCPWM_FH2_CFG0_FH2_F0_OST = 0x80
	// Position of FH2_A_CBC_D field.
	MCPWM_FH2_CFG0_FH2_A_CBC_D_Pos = 0x8
	// Bit mask of FH2_A_CBC_D field.
	MCPWM_FH2_CFG0_FH2_A_CBC_D_Msk = 0x300
	// Position of FH2_A_CBC_U field.
	MCPWM_FH2_CFG0_FH2_A_CBC_U_Pos = 0xa
	// Bit mask of FH2_A_CBC_U field.
	MCPWM_FH2_CFG0_FH2_A_CBC_U_Msk = 0xc00
	// Position of FH2_A_OST_D field.
	MCPWM_FH2_CFG0_FH2_A_OST_D_Pos = 0xc
	// Bit mask of FH2_A_OST_D field.
	MCPWM_FH2_CFG0_FH2_A_OST_D_Msk = 0x3000
	// Position of FH2_A_OST_U field.
	MCPWM_FH2_CFG0_FH2_A_OST_U_Pos = 0xe
	// Bit mask of FH2_A_OST_U field.
	MCPWM_FH2_CFG0_FH2_A_OST_U_Msk = 0xc000
	// Position of FH2_B_CBC_D field.
	MCPWM_FH2_CFG0_FH2_B_CBC_D_Pos = 0x10
	// Bit mask of FH2_B_CBC_D field.
	MCPWM_FH2_CFG0_FH2_B_CBC_D_Msk = 0x30000
	// Position of FH2_B_CBC_U field.
	MCPWM_FH2_CFG0_FH2_B_CBC_U_Pos = 0x12
	// Bit mask of FH2_B_CBC_U field.
	MCPWM_FH2_CFG0_FH2_B_CBC_U_Msk = 0xc0000
	// Position of FH2_B_OST_D field.
	MCPWM_FH2_CFG0_FH2_B_OST_D_Pos = 0x14
	// Bit mask of FH2_B_OST_D field.
	MCPWM_FH2_CFG0_FH2_B_OST_D_Msk = 0x300000
	// Position of FH2_B_OST_U field.
	MCPWM_FH2_CFG0_FH2_B_OST_U_Pos = 0x16
	// Bit mask of FH2_B_OST_U field.
	MCPWM_FH2_CFG0_FH2_B_OST_U_Msk = 0xc00000

	// FH2_CFG1
	// Position of FH2_CLR_OST field.
	MCPWM_FH2_CFG1_FH2_CLR_OST_Pos = 0x0
	// Bit mask of FH2_CLR_OST field.
	MCPWM_FH2_CFG1_FH2_CLR_OST_Msk = 0x1
	// Bit FH2_CLR_OST.
	MCPWM_FH2_CFG1_FH2_CLR_OST = 0x1
	// Position of FH2_CBCPULSE field.
	MCPWM_FH2_CFG1_FH2_CBCPULSE_Pos = 0x1
	// Bit mask of FH2_CBCPULSE field.
	MCPWM_FH2_CFG1_FH2_CBCPULSE_Msk = 0x6
	// Position of FH2_FORCE_CBC field.
	MCPWM_FH2_CFG1_FH2_FORCE_CBC_Pos = 0x3
	// Bit mask of FH2_FORCE_CBC field.
	MCPWM_FH2_CFG1_FH2_FORCE_CBC_Msk = 0x8
	// Bit FH2_FORCE_CBC.
	MCPWM_FH2_CFG1_FH2_FORCE_CBC = 0x8
	// Position of FH2_FORCE_OST field.
	MCPWM_FH2_CFG1_FH2_FORCE_OST_Pos = 0x4
	// Bit mask of FH2_FORCE_OST field.
	MCPWM_FH2_CFG1_FH2_FORCE_OST_Msk = 0x10
	// Bit FH2_FORCE_OST.
	MCPWM_FH2_CFG1_FH2_FORCE_OST = 0x10

	// FH2_STATUS
	// Position of FH2_CBC_ON field.
	MCPWM_FH2_STATUS_FH2_CBC_ON_Pos = 0x0
	// Bit mask of FH2_CBC_ON field.
	MCPWM_FH2_STATUS_FH2_CBC_ON_Msk = 0x1
	// Bit FH2_CBC_ON.
	MCPWM_FH2_STATUS_FH2_CBC_ON = 0x1
	// Position of FH2_OST_ON field.
	MCPWM_FH2_STATUS_FH2_OST_ON_Pos = 0x1
	// Bit mask of FH2_OST_ON field.
	MCPWM_FH2_STATUS_FH2_OST_ON_Msk = 0x2
	// Bit FH2_OST_ON.
	MCPWM_FH2_STATUS_FH2_OST_ON = 0x2

	// FAULT_DETECT
	// Position of F0_EN field.
	MCPWM_FAULT_DETECT_F0_EN_Pos = 0x0
	// Bit mask of F0_EN field.
	MCPWM_FAULT_DETECT_F0_EN_Msk = 0x1
	// Bit F0_EN.
	MCPWM_FAULT_DETECT_F0_EN = 0x1
	// Position of F1_EN field.
	MCPWM_FAULT_DETECT_F1_EN_Pos = 0x1
	// Bit mask of F1_EN field.
	MCPWM_FAULT_DETECT_F1_EN_Msk = 0x2
	// Bit F1_EN.
	MCPWM_FAULT_DETECT_F1_EN = 0x2
	// Position of F2_EN field.
	MCPWM_FAULT_DETECT_F2_EN_Pos = 0x2
	// Bit mask of F2_EN field.
	MCPWM_FAULT_DETECT_F2_EN_Msk = 0x4
	// Bit F2_EN.
	MCPWM_FAULT_DETECT_F2_EN = 0x4
	// Position of F0_POLE field.
	MCPWM_FAULT_DETECT_F0_POLE_Pos = 0x3
	// Bit mask of F0_POLE field.
	MCPWM_FAULT_DETECT_F0_POLE_Msk = 0x8
	// Bit F0_POLE.
	MCPWM_FAULT_DETECT_F0_POLE = 0x8
	// Position of F1_POLE field.
	MCPWM_FAULT_DETECT_F1_POLE_Pos = 0x4
	// Bit mask of F1_POLE field.
	MCPWM_FAULT_DETECT_F1_POLE_Msk = 0x10
	// Bit F1_POLE.
	MCPWM_FAULT_DETECT_F1_POLE = 0x10
	// Position of F2_POLE field.
	MCPWM_FAULT_DETECT_F2_POLE_Pos = 0x5
	// Bit mask of F2_POLE field.
	MCPWM_FAULT_DETECT_F2_POLE_Msk = 0x20
	// Bit F2_POLE.
	MCPWM_FAULT_DETECT_F2_POLE = 0x20
	// Position of EVENT_F0 field.
	MCPWM_FAULT_DETECT_EVENT_F0_Pos = 0x6
	// Bit mask of EVENT_F0 field.
	MCPWM_FAULT_DETECT_EVENT_F0_Msk = 0x40
	// Bit EVENT_F0.
	MCPWM_FAULT_DETECT_EVENT_F0 = 0x40
	// Position of EVENT_F1 field.
	MCPWM_FAULT_DETECT_EVENT_F1_Pos = 0x7
	// Bit mask of EVENT_F1 field.
	MCPWM_FAULT_DETECT_EVENT_F1_Msk = 0x80
	// Bit EVENT_F1.
	MCPWM_FAULT_DETECT_EVENT_F1 = 0x80
	// Position of EVENT_F2 field.
	MCPWM_FAULT_DETECT_EVENT_F2_Pos = 0x8
	// Bit mask of EVENT_F2 field.
	MCPWM_FAULT_DETECT_EVENT_F2_Msk = 0x100
	// Bit EVENT_F2.
	MCPWM_FAULT_DETECT_EVENT_F2 = 0x100

	// CAP_TIMER_CFG
	// Position of CAP_TIMER_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_TIMER_EN_Pos = 0x0
	// Bit mask of CAP_TIMER_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_TIMER_EN_Msk = 0x1
	// Bit CAP_TIMER_EN.
	MCPWM_CAP_TIMER_CFG_CAP_TIMER_EN = 0x1
	// Position of CAP_SYNCI_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_EN_Pos = 0x1
	// Bit mask of CAP_SYNCI_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_EN_Msk = 0x2
	// Bit CAP_SYNCI_EN.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_EN = 0x2
	// Position of CAP_SYNCI_SEL field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_SEL_Pos = 0x2
	// Bit mask of CAP_SYNCI_SEL field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_SEL_Msk = 0x1c
	// Position of CAP_SYNC_SW field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNC_SW_Pos = 0x5
	// Bit mask of CAP_SYNC_SW field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNC_SW_Msk = 0x20
	// Bit CAP_SYNC_SW.
	MCPWM_CAP_TIMER_CFG_CAP_SYNC_SW = 0x20

	// CAP_TIMER_PHASE
	// Position of CAP_TIMER_PHASE field.
	MCPWM_CAP_TIMER_PHASE_CAP_TIMER_PHASE_Pos = 0x0
	// Bit mask of CAP_TIMER_PHASE field.
	MCPWM_CAP_TIMER_PHASE_CAP_TIMER_PHASE_Msk = 0xffffffff

	// CAP_CH0_CFG
	// Position of CAP0_EN field.
	MCPWM_CAP_CH0_CFG_CAP0_EN_Pos = 0x0
	// Bit mask of CAP0_EN field.
	MCPWM_CAP_CH0_CFG_CAP0_EN_Msk = 0x1
	// Bit CAP0_EN.
	MCPWM_CAP_CH0_CFG_CAP0_EN = 0x1
	// Position of CAP0_MODE field.
	MCPWM_CAP_CH0_CFG_CAP0_MODE_Pos = 0x1
	// Bit mask of CAP0_MODE field.
	MCPWM_CAP_CH0_CFG_CAP0_MODE_Msk = 0x6
	// Position of CAP0_PRESCALE field.
	MCPWM_CAP_CH0_CFG_CAP0_PRESCALE_Pos = 0x3
	// Bit mask of CAP0_PRESCALE field.
	MCPWM_CAP_CH0_CFG_CAP0_PRESCALE_Msk = 0x7f8
	// Position of CAP0_IN_INVERT field.
	MCPWM_CAP_CH0_CFG_CAP0_IN_INVERT_Pos = 0xb
	// Bit mask of CAP0_IN_INVERT field.
	MCPWM_CAP_CH0_CFG_CAP0_IN_INVERT_Msk = 0x800
	// Bit CAP0_IN_INVERT.
	MCPWM_CAP_CH0_CFG_CAP0_IN_INVERT = 0x800
	// Position of CAP0_SW field.
	MCPWM_CAP_CH0_CFG_CAP0_SW_Pos = 0xc
	// Bit mask of CAP0_SW field.
	MCPWM_CAP_CH0_CFG_CAP0_SW_Msk = 0x1000
	// Bit CAP0_SW.
	MCPWM_CAP_CH0_CFG_CAP0_SW = 0x1000

	// CAP_CH1_CFG
	// Position of CAP1_EN field.
	MCPWM_CAP_CH1_CFG_CAP1_EN_Pos = 0x0
	// Bit mask of CAP1_EN field.
	MCPWM_CAP_CH1_CFG_CAP1_EN_Msk = 0x1
	// Bit CAP1_EN.
	MCPWM_CAP_CH1_CFG_CAP1_EN = 0x1
	// Position of CAP1_MODE field.
	MCPWM_CAP_CH1_CFG_CAP1_MODE_Pos = 0x1
	// Bit mask of CAP1_MODE field.
	MCPWM_CAP_CH1_CFG_CAP1_MODE_Msk = 0x6
	// Position of CAP1_PRESCALE field.
	MCPWM_CAP_CH1_CFG_CAP1_PRESCALE_Pos = 0x3
	// Bit mask of CAP1_PRESCALE field.
	MCPWM_CAP_CH1_CFG_CAP1_PRESCALE_Msk = 0x7f8
	// Position of CAP1_IN_INVERT field.
	MCPWM_CAP_CH1_CFG_CAP1_IN_INVERT_Pos = 0xb
	// Bit mask of CAP1_IN_INVERT field.
	MCPWM_CAP_CH1_CFG_CAP1_IN_INVERT_Msk = 0x800
	// Bit CAP1_IN_INVERT.
	MCPWM_CAP_CH1_CFG_CAP1_IN_INVERT = 0x800
	// Position of CAP1_SW field.
	MCPWM_CAP_CH1_CFG_CAP1_SW_Pos = 0xc
	// Bit mask of CAP1_SW field.
	MCPWM_CAP_CH1_CFG_CAP1_SW_Msk = 0x1000
	// Bit CAP1_SW.
	MCPWM_CAP_CH1_CFG_CAP1_SW = 0x1000

	// CAP_CH2_CFG
	// Position of CAP2_EN field.
	MCPWM_CAP_CH2_CFG_CAP2_EN_Pos = 0x0
	// Bit mask of CAP2_EN field.
	MCPWM_CAP_CH2_CFG_CAP2_EN_Msk = 0x1
	// Bit CAP2_EN.
	MCPWM_CAP_CH2_CFG_CAP2_EN = 0x1
	// Position of CAP2_MODE field.
	MCPWM_CAP_CH2_CFG_CAP2_MODE_Pos = 0x1
	// Bit mask of CAP2_MODE field.
	MCPWM_CAP_CH2_CFG_CAP2_MODE_Msk = 0x6
	// Position of CAP2_PRESCALE field.
	MCPWM_CAP_CH2_CFG_CAP2_PRESCALE_Pos = 0x3
	// Bit mask of CAP2_PRESCALE field.
	MCPWM_CAP_CH2_CFG_CAP2_PRESCALE_Msk = 0x7f8
	// Position of CAP2_IN_INVERT field.
	MCPWM_CAP_CH2_CFG_CAP2_IN_INVERT_Pos = 0xb
	// Bit mask of CAP2_IN_INVERT field.
	MCPWM_CAP_CH2_CFG_CAP2_IN_INVERT_Msk = 0x800
	// Bit CAP2_IN_INVERT.
	MCPWM_CAP_CH2_CFG_CAP2_IN_INVERT = 0x800
	// Position of CAP2_SW field.
	MCPWM_CAP_CH2_CFG_CAP2_SW_Pos = 0xc
	// Bit mask of CAP2_SW field.
	MCPWM_CAP_CH2_CFG_CAP2_SW_Msk = 0x1000
	// Bit CAP2_SW.
	MCPWM_CAP_CH2_CFG_CAP2_SW = 0x1000

	// CAP_CH0
	// Position of CAP0_VALUE field.
	MCPWM_CAP_CH0_CAP0_VALUE_Pos = 0x0
	// Bit mask of CAP0_VALUE field.
	MCPWM_CAP_CH0_CAP0_VALUE_Msk = 0xffffffff

	// CAP_CH1
	// Position of CAP1_VALUE field.
	MCPWM_CAP_CH1_CAP1_VALUE_Pos = 0x0
	// Bit mask of CAP1_VALUE field.
	MCPWM_CAP_CH1_CAP1_VALUE_Msk = 0xffffffff

	// CAP_CH2
	// Position of CAP2_VALUE field.
	MCPWM_CAP_CH2_CAP2_VALUE_Pos = 0x0
	// Bit mask of CAP2_VALUE field.
	MCPWM_CAP_CH2_CAP2_VALUE_Msk = 0xffffffff

	// CAP_STATUS
	// Position of CAP0_EDGE field.
	MCPWM_CAP_STATUS_CAP0_EDGE_Pos = 0x0
	// Bit mask of CAP0_EDGE field.
	MCPWM_CAP_STATUS_CAP0_EDGE_Msk = 0x1
	// Bit CAP0_EDGE.
	MCPWM_CAP_STATUS_CAP0_EDGE = 0x1
	// Position of CAP1_EDGE field.
	MCPWM_CAP_STATUS_CAP1_EDGE_Pos = 0x1
	// Bit mask of CAP1_EDGE field.
	MCPWM_CAP_STATUS_CAP1_EDGE_Msk = 0x2
	// Bit CAP1_EDGE.
	MCPWM_CAP_STATUS_CAP1_EDGE = 0x2
	// Position of CAP2_EDGE field.
	MCPWM_CAP_STATUS_CAP2_EDGE_Pos = 0x2
	// Bit mask of CAP2_EDGE field.
	MCPWM_CAP_STATUS_CAP2_EDGE_Msk = 0x4
	// Bit CAP2_EDGE.
	MCPWM_CAP_STATUS_CAP2_EDGE = 0x4

	// UPDATE_CFG
	// Position of GLOBAL_UP_EN field.
	MCPWM_UPDATE_CFG_GLOBAL_UP_EN_Pos = 0x0
	// Bit mask of GLOBAL_UP_EN field.
	MCPWM_UPDATE_CFG_GLOBAL_UP_EN_Msk = 0x1
	// Bit GLOBAL_UP_EN.
	MCPWM_UPDATE_CFG_GLOBAL_UP_EN = 0x1
	// Position of GLOBAL_FORCE_UP field.
	MCPWM_UPDATE_CFG_GLOBAL_FORCE_UP_Pos = 0x1
	// Bit mask of GLOBAL_FORCE_UP field.
	MCPWM_UPDATE_CFG_GLOBAL_FORCE_UP_Msk = 0x2
	// Bit GLOBAL_FORCE_UP.
	MCPWM_UPDATE_CFG_GLOBAL_FORCE_UP = 0x2
	// Position of OP0_UP_EN field.
	MCPWM_UPDATE_CFG_OP0_UP_EN_Pos = 0x2
	// Bit mask of OP0_UP_EN field.
	MCPWM_UPDATE_CFG_OP0_UP_EN_Msk = 0x4
	// Bit OP0_UP_EN.
	MCPWM_UPDATE_CFG_OP0_UP_EN = 0x4
	// Position of OP0_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP0_FORCE_UP_Pos = 0x3
	// Bit mask of OP0_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP0_FORCE_UP_Msk = 0x8
	// Bit OP0_FORCE_UP.
	MCPWM_UPDATE_CFG_OP0_FORCE_UP = 0x8
	// Position of OP1_UP_EN field.
	MCPWM_UPDATE_CFG_OP1_UP_EN_Pos = 0x4
	// Bit mask of OP1_UP_EN field.
	MCPWM_UPDATE_CFG_OP1_UP_EN_Msk = 0x10
	// Bit OP1_UP_EN.
	MCPWM_UPDATE_CFG_OP1_UP_EN = 0x10
	// Position of OP1_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP1_FORCE_UP_Pos = 0x5
	// Bit mask of OP1_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP1_FORCE_UP_Msk = 0x20
	// Bit OP1_FORCE_UP.
	MCPWM_UPDATE_CFG_OP1_FORCE_UP = 0x20
	// Position of OP2_UP_EN field.
	MCPWM_UPDATE_CFG_OP2_UP_EN_Pos = 0x6
	// Bit mask of OP2_UP_EN field.
	MCPWM_UPDATE_CFG_OP2_UP_EN_Msk = 0x40
	// Bit OP2_UP_EN.
	MCPWM_UPDATE_CFG_OP2_UP_EN = 0x40
	// Position of OP2_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP2_FORCE_UP_Pos = 0x7
	// Bit mask of OP2_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP2_FORCE_UP_Msk = 0x80
	// Bit OP2_FORCE_UP.
	MCPWM_UPDATE_CFG_OP2_FORCE_UP = 0x80

	// INT_ENA
	// Position of TIMER0_STOP_INT_ENA field.
	MCPWM_INT_ENA_TIMER0_STOP_INT_ENA_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_ENA field.
	MCPWM_INT_ENA_TIMER0_STOP_INT_ENA_Msk = 0x1
	// Bit TIMER0_STOP_INT_ENA.
	MCPWM_INT_ENA_TIMER0_STOP_INT_ENA = 0x1
	// Position of TIMER1_STOP_INT_ENA field.
	MCPWM_INT_ENA_TIMER1_STOP_INT_ENA_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_ENA field.
	MCPWM_INT_ENA_TIMER1_STOP_INT_ENA_Msk = 0x2
	// Bit TIMER1_STOP_INT_ENA.
	MCPWM_INT_ENA_TIMER1_STOP_INT_ENA = 0x2
	// Position of TIMER2_STOP_INT_ENA field.
	MCPWM_INT_ENA_TIMER2_STOP_INT_ENA_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_ENA field.
	MCPWM_INT_ENA_TIMER2_STOP_INT_ENA_Msk = 0x4
	// Bit TIMER2_STOP_INT_ENA.
	MCPWM_INT_ENA_TIMER2_STOP_INT_ENA = 0x4
	// Position of TIMER0_TEZ_INT_ENA field.
	MCPWM_INT_ENA_TIMER0_TEZ_INT_ENA_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_ENA field.
	MCPWM_INT_ENA_TIMER0_TEZ_INT_ENA_Msk = 0x8
	// Bit TIMER0_TEZ_INT_ENA.
	MCPWM_INT_ENA_TIMER0_TEZ_INT_ENA = 0x8
	// Position of TIMER1_TEZ_INT_ENA field.
	MCPWM_INT_ENA_TIMER1_TEZ_INT_ENA_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_ENA field.
	MCPWM_INT_ENA_TIMER1_TEZ_INT_ENA_Msk = 0x10
	// Bit TIMER1_TEZ_INT_ENA.
	MCPWM_INT_ENA_TIMER1_TEZ_INT_ENA = 0x10
	// Position of TIMER2_TEZ_INT_ENA field.
	MCPWM_INT_ENA_TIMER2_TEZ_INT_ENA_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_ENA field.
	MCPWM_INT_ENA_TIMER2_TEZ_INT_ENA_Msk = 0x20
	// Bit TIMER2_TEZ_INT_ENA.
	MCPWM_INT_ENA_TIMER2_TEZ_INT_ENA = 0x20
	// Position of TIMER0_TEP_INT_ENA field.
	MCPWM_INT_ENA_TIMER0_TEP_INT_ENA_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_ENA field.
	MCPWM_INT_ENA_TIMER0_TEP_INT_ENA_Msk = 0x40
	// Bit TIMER0_TEP_INT_ENA.
	MCPWM_INT_ENA_TIMER0_TEP_INT_ENA = 0x40
	// Position of TIMER1_TEP_INT_ENA field.
	MCPWM_INT_ENA_TIMER1_TEP_INT_ENA_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_ENA field.
	MCPWM_INT_ENA_TIMER1_TEP_INT_ENA_Msk = 0x80
	// Bit TIMER1_TEP_INT_ENA.
	MCPWM_INT_ENA_TIMER1_TEP_INT_ENA = 0x80
	// Position of TIMER2_TEP_INT_ENA field.
	MCPWM_INT_ENA_TIMER2_TEP_INT_ENA_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_ENA field.
	MCPWM_INT_ENA_TIMER2_TEP_INT_ENA_Msk = 0x100
	// Bit TIMER2_TEP_INT_ENA.
	MCPWM_INT_ENA_TIMER2_TEP_INT_ENA = 0x100
	// Position of FAULT0_INT_ENA field.
	MCPWM_INT_ENA_FAULT0_INT_ENA_Pos = 0x9
	// Bit mask of FAULT0_INT_ENA field.
	MCPWM_INT_ENA_FAULT0_INT_ENA_Msk = 0x200
	// Bit FAULT0_INT_ENA.
	MCPWM_INT_ENA_FAULT0_INT_ENA = 0x200
	// Position of FAULT1_INT_ENA field.
	MCPWM_INT_ENA_FAULT1_INT_ENA_Pos = 0xa
	// Bit mask of FAULT1_INT_ENA field.
	MCPWM_INT_ENA_FAULT1_INT_ENA_Msk = 0x400
	// Bit FAULT1_INT_ENA.
	MCPWM_INT_ENA_FAULT1_INT_ENA = 0x400
	// Position of FAULT2_INT_ENA field.
	MCPWM_INT_ENA_FAULT2_INT_ENA_Pos = 0xb
	// Bit mask of FAULT2_INT_ENA field.
	MCPWM_INT_ENA_FAULT2_INT_ENA_Msk = 0x800
	// Bit FAULT2_INT_ENA.
	MCPWM_INT_ENA_FAULT2_INT_ENA = 0x800
	// Position of FAULT0_CLR_INT_ENA field.
	MCPWM_INT_ENA_FAULT0_CLR_INT_ENA_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_ENA field.
	MCPWM_INT_ENA_FAULT0_CLR_INT_ENA_Msk = 0x1000
	// Bit FAULT0_CLR_INT_ENA.
	MCPWM_INT_ENA_FAULT0_CLR_INT_ENA = 0x1000
	// Position of FAULT1_CLR_INT_ENA field.
	MCPWM_INT_ENA_FAULT1_CLR_INT_ENA_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_ENA field.
	MCPWM_INT_ENA_FAULT1_CLR_INT_ENA_Msk = 0x2000
	// Bit FAULT1_CLR_INT_ENA.
	MCPWM_INT_ENA_FAULT1_CLR_INT_ENA = 0x2000
	// Position of FAULT2_CLR_INT_ENA field.
	MCPWM_INT_ENA_FAULT2_CLR_INT_ENA_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_ENA field.
	MCPWM_INT_ENA_FAULT2_CLR_INT_ENA_Msk = 0x4000
	// Bit FAULT2_CLR_INT_ENA.
	MCPWM_INT_ENA_FAULT2_CLR_INT_ENA = 0x4000
	// Position of OP0_TEA_INT_ENA field.
	MCPWM_INT_ENA_OP0_TEA_INT_ENA_Pos = 0xf
	// Bit mask of OP0_TEA_INT_ENA field.
	MCPWM_INT_ENA_OP0_TEA_INT_ENA_Msk = 0x8000
	// Bit OP0_TEA_INT_ENA.
	MCPWM_INT_ENA_OP0_TEA_INT_ENA = 0x8000
	// Position of OP1_TEA_INT_ENA field.
	MCPWM_INT_ENA_OP1_TEA_INT_ENA_Pos = 0x10
	// Bit mask of OP1_TEA_INT_ENA field.
	MCPWM_INT_ENA_OP1_TEA_INT_ENA_Msk = 0x10000
	// Bit OP1_TEA_INT_ENA.
	MCPWM_INT_ENA_OP1_TEA_INT_ENA = 0x10000
	// Position of OP2_TEA_INT_ENA field.
	MCPWM_INT_ENA_OP2_TEA_INT_ENA_Pos = 0x11
	// Bit mask of OP2_TEA_INT_ENA field.
	MCPWM_INT_ENA_OP2_TEA_INT_ENA_Msk = 0x20000
	// Bit OP2_TEA_INT_ENA.
	MCPWM_INT_ENA_OP2_TEA_INT_ENA = 0x20000
	// Position of OP0_TEB_INT_ENA field.
	MCPWM_INT_ENA_OP0_TEB_INT_ENA_Pos = 0x12
	// Bit mask of OP0_TEB_INT_ENA field.
	MCPWM_INT_ENA_OP0_TEB_INT_ENA_Msk = 0x40000
	// Bit OP0_TEB_INT_ENA.
	MCPWM_INT_ENA_OP0_TEB_INT_ENA = 0x40000
	// Position of OP1_TEB_INT_ENA field.
	MCPWM_INT_ENA_OP1_TEB_INT_ENA_Pos = 0x13
	// Bit mask of OP1_TEB_INT_ENA field.
	MCPWM_INT_ENA_OP1_TEB_INT_ENA_Msk = 0x80000
	// Bit OP1_TEB_INT_ENA.
	MCPWM_INT_ENA_OP1_TEB_INT_ENA = 0x80000
	// Position of OP2_TEB_INT_ENA field.
	MCPWM_INT_ENA_OP2_TEB_INT_ENA_Pos = 0x14
	// Bit mask of OP2_TEB_INT_ENA field.
	MCPWM_INT_ENA_OP2_TEB_INT_ENA_Msk = 0x100000
	// Bit OP2_TEB_INT_ENA.
	MCPWM_INT_ENA_OP2_TEB_INT_ENA = 0x100000
	// Position of FH0_CBC_INT_ENA field.
	MCPWM_INT_ENA_FH0_CBC_INT_ENA_Pos = 0x15
	// Bit mask of FH0_CBC_INT_ENA field.
	MCPWM_INT_ENA_FH0_CBC_INT_ENA_Msk = 0x200000
	// Bit FH0_CBC_INT_ENA.
	MCPWM_INT_ENA_FH0_CBC_INT_ENA = 0x200000
	// Position of FH1_CBC_INT_ENA field.
	MCPWM_INT_ENA_FH1_CBC_INT_ENA_Pos = 0x16
	// Bit mask of FH1_CBC_INT_ENA field.
	MCPWM_INT_ENA_FH1_CBC_INT_ENA_Msk = 0x400000
	// Bit FH1_CBC_INT_ENA.
	MCPWM_INT_ENA_FH1_CBC_INT_ENA = 0x400000
	// Position of FH2_CBC_INT_ENA field.
	MCPWM_INT_ENA_FH2_CBC_INT_ENA_Pos = 0x17
	// Bit mask of FH2_CBC_INT_ENA field.
	MCPWM_INT_ENA_FH2_CBC_INT_ENA_Msk = 0x800000
	// Bit FH2_CBC_INT_ENA.
	MCPWM_INT_ENA_FH2_CBC_INT_ENA = 0x800000
	// Position of FH0_OST_INT_ENA field.
	MCPWM_INT_ENA_FH0_OST_INT_ENA_Pos = 0x18
	// Bit mask of FH0_OST_INT_ENA field.
	MCPWM_INT_ENA_FH0_OST_INT_ENA_Msk = 0x1000000
	// Bit FH0_OST_INT_ENA.
	MCPWM_INT_ENA_FH0_OST_INT_ENA = 0x1000000
	// Position of FH1_OST_INT_ENA field.
	MCPWM_INT_ENA_FH1_OST_INT_ENA_Pos = 0x19
	// Bit mask of FH1_OST_INT_ENA field.
	MCPWM_INT_ENA_FH1_OST_INT_ENA_Msk = 0x2000000
	// Bit FH1_OST_INT_ENA.
	MCPWM_INT_ENA_FH1_OST_INT_ENA = 0x2000000
	// Position of FH2_OST_INT_ENA field.
	MCPWM_INT_ENA_FH2_OST_INT_ENA_Pos = 0x1a
	// Bit mask of FH2_OST_INT_ENA field.
	MCPWM_INT_ENA_FH2_OST_INT_ENA_Msk = 0x4000000
	// Bit FH2_OST_INT_ENA.
	MCPWM_INT_ENA_FH2_OST_INT_ENA = 0x4000000
	// Position of CAP0_INT_ENA field.
	MCPWM_INT_ENA_CAP0_INT_ENA_Pos = 0x1b
	// Bit mask of CAP0_INT_ENA field.
	MCPWM_INT_ENA_CAP0_INT_ENA_Msk = 0x8000000
	// Bit CAP0_INT_ENA.
	MCPWM_INT_ENA_CAP0_INT_ENA = 0x8000000
	// Position of CAP1_INT_ENA field.
	MCPWM_INT_ENA_CAP1_INT_ENA_Pos = 0x1c
	// Bit mask of CAP1_INT_ENA field.
	MCPWM_INT_ENA_CAP1_INT_ENA_Msk = 0x10000000
	// Bit CAP1_INT_ENA.
	MCPWM_INT_ENA_CAP1_INT_ENA = 0x10000000
	// Position of CAP2_INT_ENA field.
	MCPWM_INT_ENA_CAP2_INT_ENA_Pos = 0x1d
	// Bit mask of CAP2_INT_ENA field.
	MCPWM_INT_ENA_CAP2_INT_ENA_Msk = 0x20000000
	// Bit CAP2_INT_ENA.
	MCPWM_INT_ENA_CAP2_INT_ENA = 0x20000000

	// INT_RAW
	// Position of TIMER0_STOP_INT_RAW field.
	MCPWM_INT_RAW_TIMER0_STOP_INT_RAW_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_RAW field.
	MCPWM_INT_RAW_TIMER0_STOP_INT_RAW_Msk = 0x1
	// Bit TIMER0_STOP_INT_RAW.
	MCPWM_INT_RAW_TIMER0_STOP_INT_RAW = 0x1
	// Position of TIMER1_STOP_INT_RAW field.
	MCPWM_INT_RAW_TIMER1_STOP_INT_RAW_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_RAW field.
	MCPWM_INT_RAW_TIMER1_STOP_INT_RAW_Msk = 0x2
	// Bit TIMER1_STOP_INT_RAW.
	MCPWM_INT_RAW_TIMER1_STOP_INT_RAW = 0x2
	// Position of TIMER2_STOP_INT_RAW field.
	MCPWM_INT_RAW_TIMER2_STOP_INT_RAW_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_RAW field.
	MCPWM_INT_RAW_TIMER2_STOP_INT_RAW_Msk = 0x4
	// Bit TIMER2_STOP_INT_RAW.
	MCPWM_INT_RAW_TIMER2_STOP_INT_RAW = 0x4
	// Position of TIMER0_TEZ_INT_RAW field.
	MCPWM_INT_RAW_TIMER0_TEZ_INT_RAW_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_RAW field.
	MCPWM_INT_RAW_TIMER0_TEZ_INT_RAW_Msk = 0x8
	// Bit TIMER0_TEZ_INT_RAW.
	MCPWM_INT_RAW_TIMER0_TEZ_INT_RAW = 0x8
	// Position of TIMER1_TEZ_INT_RAW field.
	MCPWM_INT_RAW_TIMER1_TEZ_INT_RAW_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_RAW field.
	MCPWM_INT_RAW_TIMER1_TEZ_INT_RAW_Msk = 0x10
	// Bit TIMER1_TEZ_INT_RAW.
	MCPWM_INT_RAW_TIMER1_TEZ_INT_RAW = 0x10
	// Position of TIMER2_TEZ_INT_RAW field.
	MCPWM_INT_RAW_TIMER2_TEZ_INT_RAW_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_RAW field.
	MCPWM_INT_RAW_TIMER2_TEZ_INT_RAW_Msk = 0x20
	// Bit TIMER2_TEZ_INT_RAW.
	MCPWM_INT_RAW_TIMER2_TEZ_INT_RAW = 0x20
	// Position of TIMER0_TEP_INT_RAW field.
	MCPWM_INT_RAW_TIMER0_TEP_INT_RAW_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_RAW field.
	MCPWM_INT_RAW_TIMER0_TEP_INT_RAW_Msk = 0x40
	// Bit TIMER0_TEP_INT_RAW.
	MCPWM_INT_RAW_TIMER0_TEP_INT_RAW = 0x40
	// Position of TIMER1_TEP_INT_RAW field.
	MCPWM_INT_RAW_TIMER1_TEP_INT_RAW_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_RAW field.
	MCPWM_INT_RAW_TIMER1_TEP_INT_RAW_Msk = 0x80
	// Bit TIMER1_TEP_INT_RAW.
	MCPWM_INT_RAW_TIMER1_TEP_INT_RAW = 0x80
	// Position of TIMER2_TEP_INT_RAW field.
	MCPWM_INT_RAW_TIMER2_TEP_INT_RAW_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_RAW field.
	MCPWM_INT_RAW_TIMER2_TEP_INT_RAW_Msk = 0x100
	// Bit TIMER2_TEP_INT_RAW.
	MCPWM_INT_RAW_TIMER2_TEP_INT_RAW = 0x100
	// Position of FAULT0_INT_RAW field.
	MCPWM_INT_RAW_FAULT0_INT_RAW_Pos = 0x9
	// Bit mask of FAULT0_INT_RAW field.
	MCPWM_INT_RAW_FAULT0_INT_RAW_Msk = 0x200
	// Bit FAULT0_INT_RAW.
	MCPWM_INT_RAW_FAULT0_INT_RAW = 0x200
	// Position of FAULT1_INT_RAW field.
	MCPWM_INT_RAW_FAULT1_INT_RAW_Pos = 0xa
	// Bit mask of FAULT1_INT_RAW field.
	MCPWM_INT_RAW_FAULT1_INT_RAW_Msk = 0x400
	// Bit FAULT1_INT_RAW.
	MCPWM_INT_RAW_FAULT1_INT_RAW = 0x400
	// Position of FAULT2_INT_RAW field.
	MCPWM_INT_RAW_FAULT2_INT_RAW_Pos = 0xb
	// Bit mask of FAULT2_INT_RAW field.
	MCPWM_INT_RAW_FAULT2_INT_RAW_Msk = 0x800
	// Bit FAULT2_INT_RAW.
	MCPWM_INT_RAW_FAULT2_INT_RAW = 0x800
	// Position of FAULT0_CLR_INT_RAW field.
	MCPWM_INT_RAW_FAULT0_CLR_INT_RAW_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_RAW field.
	MCPWM_INT_RAW_FAULT0_CLR_INT_RAW_Msk = 0x1000
	// Bit FAULT0_CLR_INT_RAW.
	MCPWM_INT_RAW_FAULT0_CLR_INT_RAW = 0x1000
	// Position of FAULT1_CLR_INT_RAW field.
	MCPWM_INT_RAW_FAULT1_CLR_INT_RAW_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_RAW field.
	MCPWM_INT_RAW_FAULT1_CLR_INT_RAW_Msk = 0x2000
	// Bit FAULT1_CLR_INT_RAW.
	MCPWM_INT_RAW_FAULT1_CLR_INT_RAW = 0x2000
	// Position of FAULT2_CLR_INT_RAW field.
	MCPWM_INT_RAW_FAULT2_CLR_INT_RAW_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_RAW field.
	MCPWM_INT_RAW_FAULT2_CLR_INT_RAW_Msk = 0x4000
	// Bit FAULT2_CLR_INT_RAW.
	MCPWM_INT_RAW_FAULT2_CLR_INT_RAW = 0x4000
	// Position of OP0_TEA_INT_RAW field.
	MCPWM_INT_RAW_OP0_TEA_INT_RAW_Pos = 0xf
	// Bit mask of OP0_TEA_INT_RAW field.
	MCPWM_INT_RAW_OP0_TEA_INT_RAW_Msk = 0x8000
	// Bit OP0_TEA_INT_RAW.
	MCPWM_INT_RAW_OP0_TEA_INT_RAW = 0x8000
	// Position of OP1_TEA_INT_RAW field.
	MCPWM_INT_RAW_OP1_TEA_INT_RAW_Pos = 0x10
	// Bit mask of OP1_TEA_INT_RAW field.
	MCPWM_INT_RAW_OP1_TEA_INT_RAW_Msk = 0x10000
	// Bit OP1_TEA_INT_RAW.
	MCPWM_INT_RAW_OP1_TEA_INT_RAW = 0x10000
	// Position of OP2_TEA_INT_RAW field.
	MCPWM_INT_RAW_OP2_TEA_INT_RAW_Pos = 0x11
	// Bit mask of OP2_TEA_INT_RAW field.
	MCPWM_INT_RAW_OP2_TEA_INT_RAW_Msk = 0x20000
	// Bit OP2_TEA_INT_RAW.
	MCPWM_INT_RAW_OP2_TEA_INT_RAW = 0x20000
	// Position of OP0_TEB_INT_RAW field.
	MCPWM_INT_RAW_OP0_TEB_INT_RAW_Pos = 0x12
	// Bit mask of OP0_TEB_INT_RAW field.
	MCPWM_INT_RAW_OP0_TEB_INT_RAW_Msk = 0x40000
	// Bit OP0_TEB_INT_RAW.
	MCPWM_INT_RAW_OP0_TEB_INT_RAW = 0x40000
	// Position of OP1_TEB_INT_RAW field.
	MCPWM_INT_RAW_OP1_TEB_INT_RAW_Pos = 0x13
	// Bit mask of OP1_TEB_INT_RAW field.
	MCPWM_INT_RAW_OP1_TEB_INT_RAW_Msk = 0x80000
	// Bit OP1_TEB_INT_RAW.
	MCPWM_INT_RAW_OP1_TEB_INT_RAW = 0x80000
	// Position of OP2_TEB_INT_RAW field.
	MCPWM_INT_RAW_OP2_TEB_INT_RAW_Pos = 0x14
	// Bit mask of OP2_TEB_INT_RAW field.
	MCPWM_INT_RAW_OP2_TEB_INT_RAW_Msk = 0x100000
	// Bit OP2_TEB_INT_RAW.
	MCPWM_INT_RAW_OP2_TEB_INT_RAW = 0x100000
	// Position of FH0_CBC_INT_RAW field.
	MCPWM_INT_RAW_FH0_CBC_INT_RAW_Pos = 0x15
	// Bit mask of FH0_CBC_INT_RAW field.
	MCPWM_INT_RAW_FH0_CBC_INT_RAW_Msk = 0x200000
	// Bit FH0_CBC_INT_RAW.
	MCPWM_INT_RAW_FH0_CBC_INT_RAW = 0x200000
	// Position of FH1_CBC_INT_RAW field.
	MCPWM_INT_RAW_FH1_CBC_INT_RAW_Pos = 0x16
	// Bit mask of FH1_CBC_INT_RAW field.
	MCPWM_INT_RAW_FH1_CBC_INT_RAW_Msk = 0x400000
	// Bit FH1_CBC_INT_RAW.
	MCPWM_INT_RAW_FH1_CBC_INT_RAW = 0x400000
	// Position of FH2_CBC_INT_RAW field.
	MCPWM_INT_RAW_FH2_CBC_INT_RAW_Pos = 0x17
	// Bit mask of FH2_CBC_INT_RAW field.
	MCPWM_INT_RAW_FH2_CBC_INT_RAW_Msk = 0x800000
	// Bit FH2_CBC_INT_RAW.
	MCPWM_INT_RAW_FH2_CBC_INT_RAW = 0x800000
	// Position of FH0_OST_INT_RAW field.
	MCPWM_INT_RAW_FH0_OST_INT_RAW_Pos = 0x18
	// Bit mask of FH0_OST_INT_RAW field.
	MCPWM_INT_RAW_FH0_OST_INT_RAW_Msk = 0x1000000
	// Bit FH0_OST_INT_RAW.
	MCPWM_INT_RAW_FH0_OST_INT_RAW = 0x1000000
	// Position of FH1_OST_INT_RAW field.
	MCPWM_INT_RAW_FH1_OST_INT_RAW_Pos = 0x19
	// Bit mask of FH1_OST_INT_RAW field.
	MCPWM_INT_RAW_FH1_OST_INT_RAW_Msk = 0x2000000
	// Bit FH1_OST_INT_RAW.
	MCPWM_INT_RAW_FH1_OST_INT_RAW = 0x2000000
	// Position of FH2_OST_INT_RAW field.
	MCPWM_INT_RAW_FH2_OST_INT_RAW_Pos = 0x1a
	// Bit mask of FH2_OST_INT_RAW field.
	MCPWM_INT_RAW_FH2_OST_INT_RAW_Msk = 0x4000000
	// Bit FH2_OST_INT_RAW.
	MCPWM_INT_RAW_FH2_OST_INT_RAW = 0x4000000
	// Position of CAP0_INT_RAW field.
	MCPWM_INT_RAW_CAP0_INT_RAW_Pos = 0x1b
	// Bit mask of CAP0_INT_RAW field.
	MCPWM_INT_RAW_CAP0_INT_RAW_Msk = 0x8000000
	// Bit CAP0_INT_RAW.
	MCPWM_INT_RAW_CAP0_INT_RAW = 0x8000000
	// Position of CAP1_INT_RAW field.
	MCPWM_INT_RAW_CAP1_INT_RAW_Pos = 0x1c
	// Bit mask of CAP1_INT_RAW field.
	MCPWM_INT_RAW_CAP1_INT_RAW_Msk = 0x10000000
	// Bit CAP1_INT_RAW.
	MCPWM_INT_RAW_CAP1_INT_RAW = 0x10000000
	// Position of CAP2_INT_RAW field.
	MCPWM_INT_RAW_CAP2_INT_RAW_Pos = 0x1d
	// Bit mask of CAP2_INT_RAW field.
	MCPWM_INT_RAW_CAP2_INT_RAW_Msk = 0x20000000
	// Bit CAP2_INT_RAW.
	MCPWM_INT_RAW_CAP2_INT_RAW = 0x20000000

	// INT_ST
	// Position of TIMER0_STOP_INT_ST field.
	MCPWM_INT_ST_TIMER0_STOP_INT_ST_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_ST field.
	MCPWM_INT_ST_TIMER0_STOP_INT_ST_Msk = 0x1
	// Bit TIMER0_STOP_INT_ST.
	MCPWM_INT_ST_TIMER0_STOP_INT_ST = 0x1
	// Position of TIMER1_STOP_INT_ST field.
	MCPWM_INT_ST_TIMER1_STOP_INT_ST_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_ST field.
	MCPWM_INT_ST_TIMER1_STOP_INT_ST_Msk = 0x2
	// Bit TIMER1_STOP_INT_ST.
	MCPWM_INT_ST_TIMER1_STOP_INT_ST = 0x2
	// Position of TIMER2_STOP_INT_ST field.
	MCPWM_INT_ST_TIMER2_STOP_INT_ST_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_ST field.
	MCPWM_INT_ST_TIMER2_STOP_INT_ST_Msk = 0x4
	// Bit TIMER2_STOP_INT_ST.
	MCPWM_INT_ST_TIMER2_STOP_INT_ST = 0x4
	// Position of TIMER0_TEZ_INT_ST field.
	MCPWM_INT_ST_TIMER0_TEZ_INT_ST_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_ST field.
	MCPWM_INT_ST_TIMER0_TEZ_INT_ST_Msk = 0x8
	// Bit TIMER0_TEZ_INT_ST.
	MCPWM_INT_ST_TIMER0_TEZ_INT_ST = 0x8
	// Position of TIMER1_TEZ_INT_ST field.
	MCPWM_INT_ST_TIMER1_TEZ_INT_ST_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_ST field.
	MCPWM_INT_ST_TIMER1_TEZ_INT_ST_Msk = 0x10
	// Bit TIMER1_TEZ_INT_ST.
	MCPWM_INT_ST_TIMER1_TEZ_INT_ST = 0x10
	// Position of TIMER2_TEZ_INT_ST field.
	MCPWM_INT_ST_TIMER2_TEZ_INT_ST_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_ST field.
	MCPWM_INT_ST_TIMER2_TEZ_INT_ST_Msk = 0x20
	// Bit TIMER2_TEZ_INT_ST.
	MCPWM_INT_ST_TIMER2_TEZ_INT_ST = 0x20
	// Position of TIMER0_TEP_INT_ST field.
	MCPWM_INT_ST_TIMER0_TEP_INT_ST_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_ST field.
	MCPWM_INT_ST_TIMER0_TEP_INT_ST_Msk = 0x40
	// Bit TIMER0_TEP_INT_ST.
	MCPWM_INT_ST_TIMER0_TEP_INT_ST = 0x40
	// Position of TIMER1_TEP_INT_ST field.
	MCPWM_INT_ST_TIMER1_TEP_INT_ST_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_ST field.
	MCPWM_INT_ST_TIMER1_TEP_INT_ST_Msk = 0x80
	// Bit TIMER1_TEP_INT_ST.
	MCPWM_INT_ST_TIMER1_TEP_INT_ST = 0x80
	// Position of TIMER2_TEP_INT_ST field.
	MCPWM_INT_ST_TIMER2_TEP_INT_ST_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_ST field.
	MCPWM_INT_ST_TIMER2_TEP_INT_ST_Msk = 0x100
	// Bit TIMER2_TEP_INT_ST.
	MCPWM_INT_ST_TIMER2_TEP_INT_ST = 0x100
	// Position of FAULT0_INT_ST field.
	MCPWM_INT_ST_FAULT0_INT_ST_Pos = 0x9
	// Bit mask of FAULT0_INT_ST field.
	MCPWM_INT_ST_FAULT0_INT_ST_Msk = 0x200
	// Bit FAULT0_INT_ST.
	MCPWM_INT_ST_FAULT0_INT_ST = 0x200
	// Position of FAULT1_INT_ST field.
	MCPWM_INT_ST_FAULT1_INT_ST_Pos = 0xa
	// Bit mask of FAULT1_INT_ST field.
	MCPWM_INT_ST_FAULT1_INT_ST_Msk = 0x400
	// Bit FAULT1_INT_ST.
	MCPWM_INT_ST_FAULT1_INT_ST = 0x400
	// Position of FAULT2_INT_ST field.
	MCPWM_INT_ST_FAULT2_INT_ST_Pos = 0xb
	// Bit mask of FAULT2_INT_ST field.
	MCPWM_INT_ST_FAULT2_INT_ST_Msk = 0x800
	// Bit FAULT2_INT_ST.
	MCPWM_INT_ST_FAULT2_INT_ST = 0x800
	// Position of FAULT0_CLR_INT_ST field.
	MCPWM_INT_ST_FAULT0_CLR_INT_ST_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_ST field.
	MCPWM_INT_ST_FAULT0_CLR_INT_ST_Msk = 0x1000
	// Bit FAULT0_CLR_INT_ST.
	MCPWM_INT_ST_FAULT0_CLR_INT_ST = 0x1000
	// Position of FAULT1_CLR_INT_ST field.
	MCPWM_INT_ST_FAULT1_CLR_INT_ST_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_ST field.
	MCPWM_INT_ST_FAULT1_CLR_INT_ST_Msk = 0x2000
	// Bit FAULT1_CLR_INT_ST.
	MCPWM_INT_ST_FAULT1_CLR_INT_ST = 0x2000
	// Position of FAULT2_CLR_INT_ST field.
	MCPWM_INT_ST_FAULT2_CLR_INT_ST_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_ST field.
	MCPWM_INT_ST_FAULT2_CLR_INT_ST_Msk = 0x4000
	// Bit FAULT2_CLR_INT_ST.
	MCPWM_INT_ST_FAULT2_CLR_INT_ST = 0x4000
	// Position of OP0_TEA_INT_ST field.
	MCPWM_INT_ST_OP0_TEA_INT_ST_Pos = 0xf
	// Bit mask of OP0_TEA_INT_ST field.
	MCPWM_INT_ST_OP0_TEA_INT_ST_Msk = 0x8000
	// Bit OP0_TEA_INT_ST.
	MCPWM_INT_ST_OP0_TEA_INT_ST = 0x8000
	// Position of OP1_TEA_INT_ST field.
	MCPWM_INT_ST_OP1_TEA_INT_ST_Pos = 0x10
	// Bit mask of OP1_TEA_INT_ST field.
	MCPWM_INT_ST_OP1_TEA_INT_ST_Msk = 0x10000
	// Bit OP1_TEA_INT_ST.
	MCPWM_INT_ST_OP1_TEA_INT_ST = 0x10000
	// Position of OP2_TEA_INT_ST field.
	MCPWM_INT_ST_OP2_TEA_INT_ST_Pos = 0x11
	// Bit mask of OP2_TEA_INT_ST field.
	MCPWM_INT_ST_OP2_TEA_INT_ST_Msk = 0x20000
	// Bit OP2_TEA_INT_ST.
	MCPWM_INT_ST_OP2_TEA_INT_ST = 0x20000
	// Position of OP0_TEB_INT_ST field.
	MCPWM_INT_ST_OP0_TEB_INT_ST_Pos = 0x12
	// Bit mask of OP0_TEB_INT_ST field.
	MCPWM_INT_ST_OP0_TEB_INT_ST_Msk = 0x40000
	// Bit OP0_TEB_INT_ST.
	MCPWM_INT_ST_OP0_TEB_INT_ST = 0x40000
	// Position of OP1_TEB_INT_ST field.
	MCPWM_INT_ST_OP1_TEB_INT_ST_Pos = 0x13
	// Bit mask of OP1_TEB_INT_ST field.
	MCPWM_INT_ST_OP1_TEB_INT_ST_Msk = 0x80000
	// Bit OP1_TEB_INT_ST.
	MCPWM_INT_ST_OP1_TEB_INT_ST = 0x80000
	// Position of OP2_TEB_INT_ST field.
	MCPWM_INT_ST_OP2_TEB_INT_ST_Pos = 0x14
	// Bit mask of OP2_TEB_INT_ST field.
	MCPWM_INT_ST_OP2_TEB_INT_ST_Msk = 0x100000
	// Bit OP2_TEB_INT_ST.
	MCPWM_INT_ST_OP2_TEB_INT_ST = 0x100000
	// Position of FH0_CBC_INT_ST field.
	MCPWM_INT_ST_FH0_CBC_INT_ST_Pos = 0x15
	// Bit mask of FH0_CBC_INT_ST field.
	MCPWM_INT_ST_FH0_CBC_INT_ST_Msk = 0x200000
	// Bit FH0_CBC_INT_ST.
	MCPWM_INT_ST_FH0_CBC_INT_ST = 0x200000
	// Position of FH1_CBC_INT_ST field.
	MCPWM_INT_ST_FH1_CBC_INT_ST_Pos = 0x16
	// Bit mask of FH1_CBC_INT_ST field.
	MCPWM_INT_ST_FH1_CBC_INT_ST_Msk = 0x400000
	// Bit FH1_CBC_INT_ST.
	MCPWM_INT_ST_FH1_CBC_INT_ST = 0x400000
	// Position of FH2_CBC_INT_ST field.
	MCPWM_INT_ST_FH2_CBC_INT_ST_Pos = 0x17
	// Bit mask of FH2_CBC_INT_ST field.
	MCPWM_INT_ST_FH2_CBC_INT_ST_Msk = 0x800000
	// Bit FH2_CBC_INT_ST.
	MCPWM_INT_ST_FH2_CBC_INT_ST = 0x800000
	// Position of FH0_OST_INT_ST field.
	MCPWM_INT_ST_FH0_OST_INT_ST_Pos = 0x18
	// Bit mask of FH0_OST_INT_ST field.
	MCPWM_INT_ST_FH0_OST_INT_ST_Msk = 0x1000000
	// Bit FH0_OST_INT_ST.
	MCPWM_INT_ST_FH0_OST_INT_ST = 0x1000000
	// Position of FH1_OST_INT_ST field.
	MCPWM_INT_ST_FH1_OST_INT_ST_Pos = 0x19
	// Bit mask of FH1_OST_INT_ST field.
	MCPWM_INT_ST_FH1_OST_INT_ST_Msk = 0x2000000
	// Bit FH1_OST_INT_ST.
	MCPWM_INT_ST_FH1_OST_INT_ST = 0x2000000
	// Position of FH2_OST_INT_ST field.
	MCPWM_INT_ST_FH2_OST_INT_ST_Pos = 0x1a
	// Bit mask of FH2_OST_INT_ST field.
	MCPWM_INT_ST_FH2_OST_INT_ST_Msk = 0x4000000
	// Bit FH2_OST_INT_ST.
	MCPWM_INT_ST_FH2_OST_INT_ST = 0x4000000
	// Position of CAP0_INT_ST field.
	MCPWM_INT_ST_CAP0_INT_ST_Pos = 0x1b
	// Bit mask of CAP0_INT_ST field.
	MCPWM_INT_ST_CAP0_INT_ST_Msk = 0x8000000
	// Bit CAP0_INT_ST.
	MCPWM_INT_ST_CAP0_INT_ST = 0x8000000
	// Position of CAP1_INT_ST field.
	MCPWM_INT_ST_CAP1_INT_ST_Pos = 0x1c
	// Bit mask of CAP1_INT_ST field.
	MCPWM_INT_ST_CAP1_INT_ST_Msk = 0x10000000
	// Bit CAP1_INT_ST.
	MCPWM_INT_ST_CAP1_INT_ST = 0x10000000
	// Position of CAP2_INT_ST field.
	MCPWM_INT_ST_CAP2_INT_ST_Pos = 0x1d
	// Bit mask of CAP2_INT_ST field.
	MCPWM_INT_ST_CAP2_INT_ST_Msk = 0x20000000
	// Bit CAP2_INT_ST.
	MCPWM_INT_ST_CAP2_INT_ST = 0x20000000

	// INT_CLR
	// Position of TIMER0_STOP_INT_CLR field.
	MCPWM_INT_CLR_TIMER0_STOP_INT_CLR_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_CLR field.
	MCPWM_INT_CLR_TIMER0_STOP_INT_CLR_Msk = 0x1
	// Bit TIMER0_STOP_INT_CLR.
	MCPWM_INT_CLR_TIMER0_STOP_INT_CLR = 0x1
	// Position of TIMER1_STOP_INT_CLR field.
	MCPWM_INT_CLR_TIMER1_STOP_INT_CLR_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_CLR field.
	MCPWM_INT_CLR_TIMER1_STOP_INT_CLR_Msk = 0x2
	// Bit TIMER1_STOP_INT_CLR.
	MCPWM_INT_CLR_TIMER1_STOP_INT_CLR = 0x2
	// Position of TIMER2_STOP_INT_CLR field.
	MCPWM_INT_CLR_TIMER2_STOP_INT_CLR_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_CLR field.
	MCPWM_INT_CLR_TIMER2_STOP_INT_CLR_Msk = 0x4
	// Bit TIMER2_STOP_INT_CLR.
	MCPWM_INT_CLR_TIMER2_STOP_INT_CLR = 0x4
	// Position of TIMER0_TEZ_INT_CLR field.
	MCPWM_INT_CLR_TIMER0_TEZ_INT_CLR_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_CLR field.
	MCPWM_INT_CLR_TIMER0_TEZ_INT_CLR_Msk = 0x8
	// Bit TIMER0_TEZ_INT_CLR.
	MCPWM_INT_CLR_TIMER0_TEZ_INT_CLR = 0x8
	// Position of TIMER1_TEZ_INT_CLR field.
	MCPWM_INT_CLR_TIMER1_TEZ_INT_CLR_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_CLR field.
	MCPWM_INT_CLR_TIMER1_TEZ_INT_CLR_Msk = 0x10
	// Bit TIMER1_TEZ_INT_CLR.
	MCPWM_INT_CLR_TIMER1_TEZ_INT_CLR = 0x10
	// Position of TIMER2_TEZ_INT_CLR field.
	MCPWM_INT_CLR_TIMER2_TEZ_INT_CLR_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_CLR field.
	MCPWM_INT_CLR_TIMER2_TEZ_INT_CLR_Msk = 0x20
	// Bit TIMER2_TEZ_INT_CLR.
	MCPWM_INT_CLR_TIMER2_TEZ_INT_CLR = 0x20
	// Position of TIMER0_TEP_INT_CLR field.
	MCPWM_INT_CLR_TIMER0_TEP_INT_CLR_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_CLR field.
	MCPWM_INT_CLR_TIMER0_TEP_INT_CLR_Msk = 0x40
	// Bit TIMER0_TEP_INT_CLR.
	MCPWM_INT_CLR_TIMER0_TEP_INT_CLR = 0x40
	// Position of TIMER1_TEP_INT_CLR field.
	MCPWM_INT_CLR_TIMER1_TEP_INT_CLR_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_CLR field.
	MCPWM_INT_CLR_TIMER1_TEP_INT_CLR_Msk = 0x80
	// Bit TIMER1_TEP_INT_CLR.
	MCPWM_INT_CLR_TIMER1_TEP_INT_CLR = 0x80
	// Position of TIMER2_TEP_INT_CLR field.
	MCPWM_INT_CLR_TIMER2_TEP_INT_CLR_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_CLR field.
	MCPWM_INT_CLR_TIMER2_TEP_INT_CLR_Msk = 0x100
	// Bit TIMER2_TEP_INT_CLR.
	MCPWM_INT_CLR_TIMER2_TEP_INT_CLR = 0x100
	// Position of FAULT0_INT_CLR field.
	MCPWM_INT_CLR_FAULT0_INT_CLR_Pos = 0x9
	// Bit mask of FAULT0_INT_CLR field.
	MCPWM_INT_CLR_FAULT0_INT_CLR_Msk = 0x200
	// Bit FAULT0_INT_CLR.
	MCPWM_INT_CLR_FAULT0_INT_CLR = 0x200
	// Position of FAULT1_INT_CLR field.
	MCPWM_INT_CLR_FAULT1_INT_CLR_Pos = 0xa
	// Bit mask of FAULT1_INT_CLR field.
	MCPWM_INT_CLR_FAULT1_INT_CLR_Msk = 0x400
	// Bit FAULT1_INT_CLR.
	MCPWM_INT_CLR_FAULT1_INT_CLR = 0x400
	// Position of FAULT2_INT_CLR field.
	MCPWM_INT_CLR_FAULT2_INT_CLR_Pos = 0xb
	// Bit mask of FAULT2_INT_CLR field.
	MCPWM_INT_CLR_FAULT2_INT_CLR_Msk = 0x800
	// Bit FAULT2_INT_CLR.
	MCPWM_INT_CLR_FAULT2_INT_CLR = 0x800
	// Position of FAULT0_CLR_INT_CLR field.
	MCPWM_INT_CLR_FAULT0_CLR_INT_CLR_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_CLR field.
	MCPWM_INT_CLR_FAULT0_CLR_INT_CLR_Msk = 0x1000
	// Bit FAULT0_CLR_INT_CLR.
	MCPWM_INT_CLR_FAULT0_CLR_INT_CLR = 0x1000
	// Position of FAULT1_CLR_INT_CLR field.
	MCPWM_INT_CLR_FAULT1_CLR_INT_CLR_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_CLR field.
	MCPWM_INT_CLR_FAULT1_CLR_INT_CLR_Msk = 0x2000
	// Bit FAULT1_CLR_INT_CLR.
	MCPWM_INT_CLR_FAULT1_CLR_INT_CLR = 0x2000
	// Position of FAULT2_CLR_INT_CLR field.
	MCPWM_INT_CLR_FAULT2_CLR_INT_CLR_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_CLR field.
	MCPWM_INT_CLR_FAULT2_CLR_INT_CLR_Msk = 0x4000
	// Bit FAULT2_CLR_INT_CLR.
	MCPWM_INT_CLR_FAULT2_CLR_INT_CLR = 0x4000
	// Position of OP0_TEA_INT_CLR field.
	MCPWM_INT_CLR_OP0_TEA_INT_CLR_Pos = 0xf
	// Bit mask of OP0_TEA_INT_CLR field.
	MCPWM_INT_CLR_OP0_TEA_INT_CLR_Msk = 0x8000
	// Bit OP0_TEA_INT_CLR.
	MCPWM_INT_CLR_OP0_TEA_INT_CLR = 0x8000
	// Position of OP1_TEA_INT_CLR field.
	MCPWM_INT_CLR_OP1_TEA_INT_CLR_Pos = 0x10
	// Bit mask of OP1_TEA_INT_CLR field.
	MCPWM_INT_CLR_OP1_TEA_INT_CLR_Msk = 0x10000
	// Bit OP1_TEA_INT_CLR.
	MCPWM_INT_CLR_OP1_TEA_INT_CLR = 0x10000
	// Position of OP2_TEA_INT_CLR field.
	MCPWM_INT_CLR_OP2_TEA_INT_CLR_Pos = 0x11
	// Bit mask of OP2_TEA_INT_CLR field.
	MCPWM_INT_CLR_OP2_TEA_INT_CLR_Msk = 0x20000
	// Bit OP2_TEA_INT_CLR.
	MCPWM_INT_CLR_OP2_TEA_INT_CLR = 0x20000
	// Position of OP0_TEB_INT_CLR field.
	MCPWM_INT_CLR_OP0_TEB_INT_CLR_Pos = 0x12
	// Bit mask of OP0_TEB_INT_CLR field.
	MCPWM_INT_CLR_OP0_TEB_INT_CLR_Msk = 0x40000
	// Bit OP0_TEB_INT_CLR.
	MCPWM_INT_CLR_OP0_TEB_INT_CLR = 0x40000
	// Position of OP1_TEB_INT_CLR field.
	MCPWM_INT_CLR_OP1_TEB_INT_CLR_Pos = 0x13
	// Bit mask of OP1_TEB_INT_CLR field.
	MCPWM_INT_CLR_OP1_TEB_INT_CLR_Msk = 0x80000
	// Bit OP1_TEB_INT_CLR.
	MCPWM_INT_CLR_OP1_TEB_INT_CLR = 0x80000
	// Position of OP2_TEB_INT_CLR field.
	MCPWM_INT_CLR_OP2_TEB_INT_CLR_Pos = 0x14
	// Bit mask of OP2_TEB_INT_CLR field.
	MCPWM_INT_CLR_OP2_TEB_INT_CLR_Msk = 0x100000
	// Bit OP2_TEB_INT_CLR.
	MCPWM_INT_CLR_OP2_TEB_INT_CLR = 0x100000
	// Position of FH0_CBC_INT_CLR field.
	MCPWM_INT_CLR_FH0_CBC_INT_CLR_Pos = 0x15
	// Bit mask of FH0_CBC_INT_CLR field.
	MCPWM_INT_CLR_FH0_CBC_INT_CLR_Msk = 0x200000
	// Bit FH0_CBC_INT_CLR.
	MCPWM_INT_CLR_FH0_CBC_INT_CLR = 0x200000
	// Position of FH1_CBC_INT_CLR field.
	MCPWM_INT_CLR_FH1_CBC_INT_CLR_Pos = 0x16
	// Bit mask of FH1_CBC_INT_CLR field.
	MCPWM_INT_CLR_FH1_CBC_INT_CLR_Msk = 0x400000
	// Bit FH1_CBC_INT_CLR.
	MCPWM_INT_CLR_FH1_CBC_INT_CLR = 0x400000
	// Position of FH2_CBC_INT_CLR field.
	MCPWM_INT_CLR_FH2_CBC_INT_CLR_Pos = 0x17
	// Bit mask of FH2_CBC_INT_CLR field.
	MCPWM_INT_CLR_FH2_CBC_INT_CLR_Msk = 0x800000
	// Bit FH2_CBC_INT_CLR.
	MCPWM_INT_CLR_FH2_CBC_INT_CLR = 0x800000
	// Position of FH0_OST_INT_CLR field.
	MCPWM_INT_CLR_FH0_OST_INT_CLR_Pos = 0x18
	// Bit mask of FH0_OST_INT_CLR field.
	MCPWM_INT_CLR_FH0_OST_INT_CLR_Msk = 0x1000000
	// Bit FH0_OST_INT_CLR.
	MCPWM_INT_CLR_FH0_OST_INT_CLR = 0x1000000
	// Position of FH1_OST_INT_CLR field.
	MCPWM_INT_CLR_FH1_OST_INT_CLR_Pos = 0x19
	// Bit mask of FH1_OST_INT_CLR field.
	MCPWM_INT_CLR_FH1_OST_INT_CLR_Msk = 0x2000000
	// Bit FH1_OST_INT_CLR.
	MCPWM_INT_CLR_FH1_OST_INT_CLR = 0x2000000
	// Position of FH2_OST_INT_CLR field.
	MCPWM_INT_CLR_FH2_OST_INT_CLR_Pos = 0x1a
	// Bit mask of FH2_OST_INT_CLR field.
	MCPWM_INT_CLR_FH2_OST_INT_CLR_Msk = 0x4000000
	// Bit FH2_OST_INT_CLR.
	MCPWM_INT_CLR_FH2_OST_INT_CLR = 0x4000000
	// Position of CAP0_INT_CLR field.
	MCPWM_INT_CLR_CAP0_INT_CLR_Pos = 0x1b
	// Bit mask of CAP0_INT_CLR field.
	MCPWM_INT_CLR_CAP0_INT_CLR_Msk = 0x8000000
	// Bit CAP0_INT_CLR.
	MCPWM_INT_CLR_CAP0_INT_CLR = 0x8000000
	// Position of CAP1_INT_CLR field.
	MCPWM_INT_CLR_CAP1_INT_CLR_Pos = 0x1c
	// Bit mask of CAP1_INT_CLR field.
	MCPWM_INT_CLR_CAP1_INT_CLR_Msk = 0x10000000
	// Bit CAP1_INT_CLR.
	MCPWM_INT_CLR_CAP1_INT_CLR = 0x10000000
	// Position of CAP2_INT_CLR field.
	MCPWM_INT_CLR_CAP2_INT_CLR_Pos = 0x1d
	// Bit mask of CAP2_INT_CLR field.
	MCPWM_INT_CLR_CAP2_INT_CLR_Msk = 0x20000000
	// Bit CAP2_INT_CLR.
	MCPWM_INT_CLR_CAP2_INT_CLR = 0x20000000

	// CLK
	// Position of EN field.
	MCPWM_CLK_EN_Pos = 0x0
	// Bit mask of EN field.
	MCPWM_CLK_EN_Msk = 0x1
	// Bit EN.
	MCPWM_CLK_EN = 0x1

	// VERSION
	// Position of DATE field.
	MCPWM_VERSION_DATE_Pos = 0x0
	// Bit mask of DATE field.
	MCPWM_VERSION_DATE_Msk = 0xfffffff
)

// Constants for NRX: NRX Peripheral
const (
	// NRXPD_CTRL: WiFi RX control register
	// Position of DEMAP_FORCE_PD field.
	NRX_NRXPD_CTRL_DEMAP_FORCE_PD_Pos = 0x0
	// Bit mask of DEMAP_FORCE_PD field.
	NRX_NRXPD_CTRL_DEMAP_FORCE_PD_Msk = 0x1
	// Bit DEMAP_FORCE_PD.
	NRX_NRXPD_CTRL_DEMAP_FORCE_PD = 0x1
	// Position of DEMAP_FORCE_PU field.
	NRX_NRXPD_CTRL_DEMAP_FORCE_PU_Pos = 0x1
	// Bit mask of DEMAP_FORCE_PU field.
	NRX_NRXPD_CTRL_DEMAP_FORCE_PU_Msk = 0x2
	// Bit DEMAP_FORCE_PU.
	NRX_NRXPD_CTRL_DEMAP_FORCE_PU = 0x2
	// Position of VIT_FORCE_PD field.
	NRX_NRXPD_CTRL_VIT_FORCE_PD_Pos = 0x2
	// Bit mask of VIT_FORCE_PD field.
	NRX_NRXPD_CTRL_VIT_FORCE_PD_Msk = 0x4
	// Bit VIT_FORCE_PD.
	NRX_NRXPD_CTRL_VIT_FORCE_PD = 0x4
	// Position of VIT_FORCE_PU field.
	NRX_NRXPD_CTRL_VIT_FORCE_PU_Pos = 0x3
	// Bit mask of VIT_FORCE_PU field.
	NRX_NRXPD_CTRL_VIT_FORCE_PU_Msk = 0x8
	// Bit VIT_FORCE_PU.
	NRX_NRXPD_CTRL_VIT_FORCE_PU = 0x8
	// Position of RX_ROT_FORCE_PD field.
	NRX_NRXPD_CTRL_RX_ROT_FORCE_PD_Pos = 0x4
	// Bit mask of RX_ROT_FORCE_PD field.
	NRX_NRXPD_CTRL_RX_ROT_FORCE_PD_Msk = 0x10
	// Bit RX_ROT_FORCE_PD.
	NRX_NRXPD_CTRL_RX_ROT_FORCE_PD = 0x10
	// Position of RX_ROT_FORCE_PU field.
	NRX_NRXPD_CTRL_RX_ROT_FORCE_PU_Pos = 0x5
	// Bit mask of RX_ROT_FORCE_PU field.
	NRX_NRXPD_CTRL_RX_ROT_FORCE_PU_Msk = 0x20
	// Bit RX_ROT_FORCE_PU.
	NRX_NRXPD_CTRL_RX_ROT_FORCE_PU = 0x20
	// Position of CHAN_EST_FORCE_PD field.
	NRX_NRXPD_CTRL_CHAN_EST_FORCE_PD_Pos = 0x6
	// Bit mask of CHAN_EST_FORCE_PD field.
	NRX_NRXPD_CTRL_CHAN_EST_FORCE_PD_Msk = 0x40
	// Bit CHAN_EST_FORCE_PD.
	NRX_NRXPD_CTRL_CHAN_EST_FORCE_PD = 0x40
	// Position of CHAN_EST_FORCE_PU field.
	NRX_NRXPD_CTRL_CHAN_EST_FORCE_PU_Pos = 0x7
	// Bit mask of CHAN_EST_FORCE_PU field.
	NRX_NRXPD_CTRL_CHAN_EST_FORCE_PU_Msk = 0x80
	// Bit CHAN_EST_FORCE_PU.
	NRX_NRXPD_CTRL_CHAN_EST_FORCE_PU = 0x80
)

// Constants for PCNT: Pulse Count Controller
const (
	// U0_CONF0
	// Position of FILTER_THRES field.
	PCNT_U_CONF0_FILTER_THRES_Pos = 0x0
	// Bit mask of FILTER_THRES field.
	PCNT_U_CONF0_FILTER_THRES_Msk = 0x3ff
	// Position of FILTER_EN field.
	PCNT_U_CONF0_FILTER_EN_Pos = 0xa
	// Bit mask of FILTER_EN field.
	PCNT_U_CONF0_FILTER_EN_Msk = 0x400
	// Bit FILTER_EN.
	PCNT_U_CONF0_FILTER_EN = 0x400
	// Position of THR_ZERO_EN field.
	PCNT_U_CONF0_THR_ZERO_EN_Pos = 0xb
	// Bit mask of THR_ZERO_EN field.
	PCNT_U_CONF0_THR_ZERO_EN_Msk = 0x800
	// Bit THR_ZERO_EN.
	PCNT_U_CONF0_THR_ZERO_EN = 0x800
	// Position of THR_H_LIM_EN field.
	PCNT_U_CONF0_THR_H_LIM_EN_Pos = 0xc
	// Bit mask of THR_H_LIM_EN field.
	PCNT_U_CONF0_THR_H_LIM_EN_Msk = 0x1000
	// Bit THR_H_LIM_EN.
	PCNT_U_CONF0_THR_H_LIM_EN = 0x1000
	// Position of THR_L_LIM_EN field.
	PCNT_U_CONF0_THR_L_LIM_EN_Pos = 0xd
	// Bit mask of THR_L_LIM_EN field.
	PCNT_U_CONF0_THR_L_LIM_EN_Msk = 0x2000
	// Bit THR_L_LIM_EN.
	PCNT_U_CONF0_THR_L_LIM_EN = 0x2000
	// Position of THR_THRES0_EN field.
	PCNT_U_CONF0_THR_THRES0_EN_Pos = 0xe
	// Bit mask of THR_THRES0_EN field.
	PCNT_U_CONF0_THR_THRES0_EN_Msk = 0x4000
	// Bit THR_THRES0_EN.
	PCNT_U_CONF0_THR_THRES0_EN = 0x4000
	// Position of THR_THRES1_EN field.
	PCNT_U_CONF0_THR_THRES1_EN_Pos = 0xf
	// Bit mask of THR_THRES1_EN field.
	PCNT_U_CONF0_THR_THRES1_EN_Msk = 0x8000
	// Bit THR_THRES1_EN.
	PCNT_U_CONF0_THR_THRES1_EN = 0x8000
	// Position of CH0_NEG_MODE field.
	PCNT_U_CONF0_CH0_NEG_MODE_Pos = 0x10
	// Bit mask of CH0_NEG_MODE field.
	PCNT_U_CONF0_CH0_NEG_MODE_Msk = 0x30000
	// Position of CH0_POS_MODE field.
	PCNT_U_CONF0_CH0_POS_MODE_Pos = 0x12
	// Bit mask of CH0_POS_MODE field.
	PCNT_U_CONF0_CH0_POS_MODE_Msk = 0xc0000
	// Position of CH0_HCTRL_MODE field.
	PCNT_U_CONF0_CH0_HCTRL_MODE_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE field.
	PCNT_U_CONF0_CH0_HCTRL_MODE_Msk = 0x300000
	// Position of CH0_LCTRL_MODE field.
	PCNT_U_CONF0_CH0_LCTRL_MODE_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE field.
	PCNT_U_CONF0_CH0_LCTRL_MODE_Msk = 0xc00000
	// Position of CH1_NEG_MODE field.
	PCNT_U_CONF0_CH1_NEG_MODE_Pos = 0x18
	// Bit mask of CH1_NEG_MODE field.
	PCNT_U_CONF0_CH1_NEG_MODE_Msk = 0x3000000
	// Position of CH1_POS_MODE field.
	PCNT_U_CONF0_CH1_POS_MODE_Pos = 0x1a
	// Bit mask of CH1_POS_MODE field.
	PCNT_U_CONF0_CH1_POS_MODE_Msk = 0xc000000
	// Position of CH1_HCTRL_MODE field.
	PCNT_U_CONF0_CH1_HCTRL_MODE_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE field.
	PCNT_U_CONF0_CH1_HCTRL_MODE_Msk = 0x30000000
	// Position of CH1_LCTRL_MODE field.
	PCNT_U_CONF0_CH1_LCTRL_MODE_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE field.
	PCNT_U_CONF0_CH1_LCTRL_MODE_Msk = 0xc0000000

	// U0_CONF1
	// Position of CNT_THRES0 field.
	PCNT_U_CONF1_CNT_THRES0_Pos = 0x0
	// Bit mask of CNT_THRES0 field.
	PCNT_U_CONF1_CNT_THRES0_Msk = 0xffff
	// Position of CNT_THRES1 field.
	PCNT_U_CONF1_CNT_THRES1_Pos = 0x10
	// Bit mask of CNT_THRES1 field.
	PCNT_U_CONF1_CNT_THRES1_Msk = 0xffff0000

	// U0_CONF2
	// Position of CNT_H_LIM field.
	PCNT_U_CONF2_CNT_H_LIM_Pos = 0x0
	// Bit mask of CNT_H_LIM field.
	PCNT_U_CONF2_CNT_H_LIM_Msk = 0xffff
	// Position of CNT_L_LIM field.
	PCNT_U_CONF2_CNT_L_LIM_Pos = 0x10
	// Bit mask of CNT_L_LIM field.
	PCNT_U_CONF2_CNT_L_LIM_Msk = 0xffff0000

	// U0_CNT
	// Position of CNT field.
	PCNT_U_CNT_CNT_Pos = 0x0
	// Bit mask of CNT field.
	PCNT_U_CNT_CNT_Msk = 0xffff

	// INT_RAW
	// Position of CNT_THR_EVENT_U0 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U0_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U0_Msk = 0x1
	// Bit CNT_THR_EVENT_U0.
	PCNT_INT_RAW_CNT_THR_EVENT_U0 = 0x1
	// Position of CNT_THR_EVENT_U1 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U1_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U1_Msk = 0x2
	// Bit CNT_THR_EVENT_U1.
	PCNT_INT_RAW_CNT_THR_EVENT_U1 = 0x2
	// Position of CNT_THR_EVENT_U2 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U2_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U2_Msk = 0x4
	// Bit CNT_THR_EVENT_U2.
	PCNT_INT_RAW_CNT_THR_EVENT_U2 = 0x4
	// Position of CNT_THR_EVENT_U3 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U3_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U3_Msk = 0x8
	// Bit CNT_THR_EVENT_U3.
	PCNT_INT_RAW_CNT_THR_EVENT_U3 = 0x8
	// Position of CNT_THR_EVENT_U4 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U4_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U4_Msk = 0x10
	// Bit CNT_THR_EVENT_U4.
	PCNT_INT_RAW_CNT_THR_EVENT_U4 = 0x10
	// Position of CNT_THR_EVENT_U5 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U5_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U5_Msk = 0x20
	// Bit CNT_THR_EVENT_U5.
	PCNT_INT_RAW_CNT_THR_EVENT_U5 = 0x20
	// Position of CNT_THR_EVENT_U6 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U6_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U6_Msk = 0x40
	// Bit CNT_THR_EVENT_U6.
	PCNT_INT_RAW_CNT_THR_EVENT_U6 = 0x40
	// Position of CNT_THR_EVENT_U7 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U7_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7 field.
	PCNT_INT_RAW_CNT_THR_EVENT_U7_Msk = 0x80
	// Bit CNT_THR_EVENT_U7.
	PCNT_INT_RAW_CNT_THR_EVENT_U7 = 0x80

	// INT_ST
	// Position of CNT_THR_EVENT_U0 field.
	PCNT_INT_ST_CNT_THR_EVENT_U0_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0 field.
	PCNT_INT_ST_CNT_THR_EVENT_U0_Msk = 0x1
	// Bit CNT_THR_EVENT_U0.
	PCNT_INT_ST_CNT_THR_EVENT_U0 = 0x1
	// Position of CNT_THR_EVENT_U1 field.
	PCNT_INT_ST_CNT_THR_EVENT_U1_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1 field.
	PCNT_INT_ST_CNT_THR_EVENT_U1_Msk = 0x2
	// Bit CNT_THR_EVENT_U1.
	PCNT_INT_ST_CNT_THR_EVENT_U1 = 0x2
	// Position of CNT_THR_EVENT_U2 field.
	PCNT_INT_ST_CNT_THR_EVENT_U2_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2 field.
	PCNT_INT_ST_CNT_THR_EVENT_U2_Msk = 0x4
	// Bit CNT_THR_EVENT_U2.
	PCNT_INT_ST_CNT_THR_EVENT_U2 = 0x4
	// Position of CNT_THR_EVENT_U3 field.
	PCNT_INT_ST_CNT_THR_EVENT_U3_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3 field.
	PCNT_INT_ST_CNT_THR_EVENT_U3_Msk = 0x8
	// Bit CNT_THR_EVENT_U3.
	PCNT_INT_ST_CNT_THR_EVENT_U3 = 0x8
	// Position of CNT_THR_EVENT_U4 field.
	PCNT_INT_ST_CNT_THR_EVENT_U4_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4 field.
	PCNT_INT_ST_CNT_THR_EVENT_U4_Msk = 0x10
	// Bit CNT_THR_EVENT_U4.
	PCNT_INT_ST_CNT_THR_EVENT_U4 = 0x10
	// Position of CNT_THR_EVENT_U5 field.
	PCNT_INT_ST_CNT_THR_EVENT_U5_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5 field.
	PCNT_INT_ST_CNT_THR_EVENT_U5_Msk = 0x20
	// Bit CNT_THR_EVENT_U5.
	PCNT_INT_ST_CNT_THR_EVENT_U5 = 0x20
	// Position of CNT_THR_EVENT_U6 field.
	PCNT_INT_ST_CNT_THR_EVENT_U6_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6 field.
	PCNT_INT_ST_CNT_THR_EVENT_U6_Msk = 0x40
	// Bit CNT_THR_EVENT_U6.
	PCNT_INT_ST_CNT_THR_EVENT_U6 = 0x40
	// Position of CNT_THR_EVENT_U7 field.
	PCNT_INT_ST_CNT_THR_EVENT_U7_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7 field.
	PCNT_INT_ST_CNT_THR_EVENT_U7_Msk = 0x80
	// Bit CNT_THR_EVENT_U7.
	PCNT_INT_ST_CNT_THR_EVENT_U7 = 0x80

	// INT_ENA
	// Position of CNT_THR_EVENT_U0 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U0_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U0_Msk = 0x1
	// Bit CNT_THR_EVENT_U0.
	PCNT_INT_ENA_CNT_THR_EVENT_U0 = 0x1
	// Position of CNT_THR_EVENT_U1 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U1_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U1_Msk = 0x2
	// Bit CNT_THR_EVENT_U1.
	PCNT_INT_ENA_CNT_THR_EVENT_U1 = 0x2
	// Position of CNT_THR_EVENT_U2 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U2_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U2_Msk = 0x4
	// Bit CNT_THR_EVENT_U2.
	PCNT_INT_ENA_CNT_THR_EVENT_U2 = 0x4
	// Position of CNT_THR_EVENT_U3 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U3_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U3_Msk = 0x8
	// Bit CNT_THR_EVENT_U3.
	PCNT_INT_ENA_CNT_THR_EVENT_U3 = 0x8
	// Position of CNT_THR_EVENT_U4 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U4_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U4_Msk = 0x10
	// Bit CNT_THR_EVENT_U4.
	PCNT_INT_ENA_CNT_THR_EVENT_U4 = 0x10
	// Position of CNT_THR_EVENT_U5 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U5_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U5_Msk = 0x20
	// Bit CNT_THR_EVENT_U5.
	PCNT_INT_ENA_CNT_THR_EVENT_U5 = 0x20
	// Position of CNT_THR_EVENT_U6 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U6_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U6_Msk = 0x40
	// Bit CNT_THR_EVENT_U6.
	PCNT_INT_ENA_CNT_THR_EVENT_U6 = 0x40
	// Position of CNT_THR_EVENT_U7 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U7_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7 field.
	PCNT_INT_ENA_CNT_THR_EVENT_U7_Msk = 0x80
	// Bit CNT_THR_EVENT_U7.
	PCNT_INT_ENA_CNT_THR_EVENT_U7 = 0x80

	// INT_CLR
	// Position of CNT_THR_EVENT_U0 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U0_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U0_Msk = 0x1
	// Bit CNT_THR_EVENT_U0.
	PCNT_INT_CLR_CNT_THR_EVENT_U0 = 0x1
	// Position of CNT_THR_EVENT_U1 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U1_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U1_Msk = 0x2
	// Bit CNT_THR_EVENT_U1.
	PCNT_INT_CLR_CNT_THR_EVENT_U1 = 0x2
	// Position of CNT_THR_EVENT_U2 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U2_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U2_Msk = 0x4
	// Bit CNT_THR_EVENT_U2.
	PCNT_INT_CLR_CNT_THR_EVENT_U2 = 0x4
	// Position of CNT_THR_EVENT_U3 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U3_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U3_Msk = 0x8
	// Bit CNT_THR_EVENT_U3.
	PCNT_INT_CLR_CNT_THR_EVENT_U3 = 0x8
	// Position of CNT_THR_EVENT_U4 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U4_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U4_Msk = 0x10
	// Bit CNT_THR_EVENT_U4.
	PCNT_INT_CLR_CNT_THR_EVENT_U4 = 0x10
	// Position of CNT_THR_EVENT_U5 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U5_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U5_Msk = 0x20
	// Bit CNT_THR_EVENT_U5.
	PCNT_INT_CLR_CNT_THR_EVENT_U5 = 0x20
	// Position of CNT_THR_EVENT_U6 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U6_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U6_Msk = 0x40
	// Bit CNT_THR_EVENT_U6.
	PCNT_INT_CLR_CNT_THR_EVENT_U6 = 0x40
	// Position of CNT_THR_EVENT_U7 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U7_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7 field.
	PCNT_INT_CLR_CNT_THR_EVENT_U7_Msk = 0x80
	// Bit CNT_THR_EVENT_U7.
	PCNT_INT_CLR_CNT_THR_EVENT_U7 = 0x80

	// U0_STATUS
	// Position of CORE_STATUS_U0 field.
	PCNT_U_STATUS_CORE_STATUS_U0_Pos = 0x0
	// Bit mask of CORE_STATUS_U0 field.
	PCNT_U_STATUS_CORE_STATUS_U0_Msk = 0xffffffff
	// Position of ZERO_MODE field.
	PCNT_U_STATUS_ZERO_MODE_Pos = 0x0
	// Bit mask of ZERO_MODE field.
	PCNT_U_STATUS_ZERO_MODE_Msk = 0x3
	// Position of THRES1 field.
	PCNT_U_STATUS_THRES1_Pos = 0x2
	// Bit mask of THRES1 field.
	PCNT_U_STATUS_THRES1_Msk = 0x4
	// Bit THRES1.
	PCNT_U_STATUS_THRES1 = 0x4
	// Position of THRES0 field.
	PCNT_U_STATUS_THRES0_Pos = 0x3
	// Bit mask of THRES0 field.
	PCNT_U_STATUS_THRES0_Msk = 0x8
	// Bit THRES0.
	PCNT_U_STATUS_THRES0 = 0x8
	// Position of L_LIM field.
	PCNT_U_STATUS_L_LIM_Pos = 0x4
	// Bit mask of L_LIM field.
	PCNT_U_STATUS_L_LIM_Msk = 0x10
	// Bit L_LIM.
	PCNT_U_STATUS_L_LIM = 0x10
	// Position of H_LIM field.
	PCNT_U_STATUS_H_LIM_Pos = 0x5
	// Bit mask of H_LIM field.
	PCNT_U_STATUS_H_LIM_Msk = 0x20
	// Bit H_LIM.
	PCNT_U_STATUS_H_LIM = 0x20
	// Position of ZERO field.
	PCNT_U_STATUS_ZERO_Pos = 0x6
	// Bit mask of ZERO field.
	PCNT_U_STATUS_ZERO_Msk = 0x40
	// Bit ZERO.
	PCNT_U_STATUS_ZERO = 0x40

	// CTRL
	// Position of CNT_RST_U0 field.
	PCNT_CTRL_CNT_RST_U0_Pos = 0x0
	// Bit mask of CNT_RST_U0 field.
	PCNT_CTRL_CNT_RST_U0_Msk = 0x1
	// Bit CNT_RST_U0.
	PCNT_CTRL_CNT_RST_U0 = 0x1
	// Position of CNT_PAUSE_U0 field.
	PCNT_CTRL_CNT_PAUSE_U0_Pos = 0x1
	// Bit mask of CNT_PAUSE_U0 field.
	PCNT_CTRL_CNT_PAUSE_U0_Msk = 0x2
	// Bit CNT_PAUSE_U0.
	PCNT_CTRL_CNT_PAUSE_U0 = 0x2
	// Position of CNT_RST_U1 field.
	PCNT_CTRL_CNT_RST_U1_Pos = 0x2
	// Bit mask of CNT_RST_U1 field.
	PCNT_CTRL_CNT_RST_U1_Msk = 0x4
	// Bit CNT_RST_U1.
	PCNT_CTRL_CNT_RST_U1 = 0x4
	// Position of CNT_PAUSE_U1 field.
	PCNT_CTRL_CNT_PAUSE_U1_Pos = 0x3
	// Bit mask of CNT_PAUSE_U1 field.
	PCNT_CTRL_CNT_PAUSE_U1_Msk = 0x8
	// Bit CNT_PAUSE_U1.
	PCNT_CTRL_CNT_PAUSE_U1 = 0x8
	// Position of CNT_RST_U2 field.
	PCNT_CTRL_CNT_RST_U2_Pos = 0x4
	// Bit mask of CNT_RST_U2 field.
	PCNT_CTRL_CNT_RST_U2_Msk = 0x10
	// Bit CNT_RST_U2.
	PCNT_CTRL_CNT_RST_U2 = 0x10
	// Position of CNT_PAUSE_U2 field.
	PCNT_CTRL_CNT_PAUSE_U2_Pos = 0x5
	// Bit mask of CNT_PAUSE_U2 field.
	PCNT_CTRL_CNT_PAUSE_U2_Msk = 0x20
	// Bit CNT_PAUSE_U2.
	PCNT_CTRL_CNT_PAUSE_U2 = 0x20
	// Position of CNT_RST_U3 field.
	PCNT_CTRL_CNT_RST_U3_Pos = 0x6
	// Bit mask of CNT_RST_U3 field.
	PCNT_CTRL_CNT_RST_U3_Msk = 0x40
	// Bit CNT_RST_U3.
	PCNT_CTRL_CNT_RST_U3 = 0x40
	// Position of CNT_PAUSE_U3 field.
	PCNT_CTRL_CNT_PAUSE_U3_Pos = 0x7
	// Bit mask of CNT_PAUSE_U3 field.
	PCNT_CTRL_CNT_PAUSE_U3_Msk = 0x80
	// Bit CNT_PAUSE_U3.
	PCNT_CTRL_CNT_PAUSE_U3 = 0x80
	// Position of CNT_RST_U4 field.
	PCNT_CTRL_CNT_RST_U4_Pos = 0x8
	// Bit mask of CNT_RST_U4 field.
	PCNT_CTRL_CNT_RST_U4_Msk = 0x100
	// Bit CNT_RST_U4.
	PCNT_CTRL_CNT_RST_U4 = 0x100
	// Position of CNT_PAUSE_U4 field.
	PCNT_CTRL_CNT_PAUSE_U4_Pos = 0x9
	// Bit mask of CNT_PAUSE_U4 field.
	PCNT_CTRL_CNT_PAUSE_U4_Msk = 0x200
	// Bit CNT_PAUSE_U4.
	PCNT_CTRL_CNT_PAUSE_U4 = 0x200
	// Position of CNT_RST_U5 field.
	PCNT_CTRL_CNT_RST_U5_Pos = 0xa
	// Bit mask of CNT_RST_U5 field.
	PCNT_CTRL_CNT_RST_U5_Msk = 0x400
	// Bit CNT_RST_U5.
	PCNT_CTRL_CNT_RST_U5 = 0x400
	// Position of CNT_PAUSE_U5 field.
	PCNT_CTRL_CNT_PAUSE_U5_Pos = 0xb
	// Bit mask of CNT_PAUSE_U5 field.
	PCNT_CTRL_CNT_PAUSE_U5_Msk = 0x800
	// Bit CNT_PAUSE_U5.
	PCNT_CTRL_CNT_PAUSE_U5 = 0x800
	// Position of CNT_RST_U6 field.
	PCNT_CTRL_CNT_RST_U6_Pos = 0xc
	// Bit mask of CNT_RST_U6 field.
	PCNT_CTRL_CNT_RST_U6_Msk = 0x1000
	// Bit CNT_RST_U6.
	PCNT_CTRL_CNT_RST_U6 = 0x1000
	// Position of CNT_PAUSE_U6 field.
	PCNT_CTRL_CNT_PAUSE_U6_Pos = 0xd
	// Bit mask of CNT_PAUSE_U6 field.
	PCNT_CTRL_CNT_PAUSE_U6_Msk = 0x2000
	// Bit CNT_PAUSE_U6.
	PCNT_CTRL_CNT_PAUSE_U6 = 0x2000
	// Position of CNT_RST_U7 field.
	PCNT_CTRL_CNT_RST_U7_Pos = 0xe
	// Bit mask of CNT_RST_U7 field.
	PCNT_CTRL_CNT_RST_U7_Msk = 0x4000
	// Bit CNT_RST_U7.
	PCNT_CTRL_CNT_RST_U7 = 0x4000
	// Position of CNT_PAUSE_U7 field.
	PCNT_CTRL_CNT_PAUSE_U7_Pos = 0xf
	// Bit mask of CNT_PAUSE_U7 field.
	PCNT_CTRL_CNT_PAUSE_U7_Msk = 0x8000
	// Bit CNT_PAUSE_U7.
	PCNT_CTRL_CNT_PAUSE_U7 = 0x8000
	// Position of CLK_EN field.
	PCNT_CTRL_CLK_EN_Pos = 0x10
	// Bit mask of CLK_EN field.
	PCNT_CTRL_CLK_EN_Msk = 0x10000
	// Bit CLK_EN.
	PCNT_CTRL_CLK_EN = 0x10000

	// DATE
	// Position of DATE field.
	PCNT_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	PCNT_DATE_DATE_Msk = 0xffffffff
)

// Constants for RMT: Remote Control
const (
	// CH0CONF0
	// Position of DIV_CNT field.
	RMT_CHCONF0_DIV_CNT_Pos = 0x0
	// Bit mask of DIV_CNT field.
	RMT_CHCONF0_DIV_CNT_Msk = 0xff
	// Position of IDLE_THRES field.
	RMT_CHCONF0_IDLE_THRES_Pos = 0x8
	// Bit mask of IDLE_THRES field.
	RMT_CHCONF0_IDLE_THRES_Msk = 0xffff00
	// Position of MEM_SIZE field.
	RMT_CHCONF0_MEM_SIZE_Pos = 0x18
	// Bit mask of MEM_SIZE field.
	RMT_CHCONF0_MEM_SIZE_Msk = 0xf000000
	// Position of CARRIER_EN field.
	RMT_CHCONF0_CARRIER_EN_Pos = 0x1c
	// Bit mask of CARRIER_EN field.
	RMT_CHCONF0_CARRIER_EN_Msk = 0x10000000
	// Bit CARRIER_EN.
	RMT_CHCONF0_CARRIER_EN = 0x10000000
	// Position of CARRIER_OUT_LV field.
	RMT_CHCONF0_CARRIER_OUT_LV_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV field.
	RMT_CHCONF0_CARRIER_OUT_LV_Msk = 0x20000000
	// Bit CARRIER_OUT_LV.
	RMT_CHCONF0_CARRIER_OUT_LV = 0x20000000
	// Position of MEM_PD field.
	RMT_CHCONF0_MEM_PD_Pos = 0x1e
	// Bit mask of MEM_PD field.
	RMT_CHCONF0_MEM_PD_Msk = 0x40000000
	// Bit MEM_PD.
	RMT_CHCONF0_MEM_PD = 0x40000000
	// Position of CLK_EN field.
	RMT_CHCONF0_CLK_EN_Pos = 0x1f
	// Bit mask of CLK_EN field.
	RMT_CHCONF0_CLK_EN_Msk = 0x80000000
	// Bit CLK_EN.
	RMT_CHCONF0_CLK_EN = 0x80000000

	// CH0CONF1
	// Position of TX_START field.
	RMT_CHCONF1_TX_START_Pos = 0x0
	// Bit mask of TX_START field.
	RMT_CHCONF1_TX_START_Msk = 0x1
	// Bit TX_START.
	RMT_CHCONF1_TX_START = 0x1
	// Position of RX_EN field.
	RMT_CHCONF1_RX_EN_Pos = 0x1
	// Bit mask of RX_EN field.
	RMT_CHCONF1_RX_EN_Msk = 0x2
	// Bit RX_EN.
	RMT_CHCONF1_RX_EN = 0x2
	// Position of MEM_WR_RST field.
	RMT_CHCONF1_MEM_WR_RST_Pos = 0x2
	// Bit mask of MEM_WR_RST field.
	RMT_CHCONF1_MEM_WR_RST_Msk = 0x4
	// Bit MEM_WR_RST.
	RMT_CHCONF1_MEM_WR_RST = 0x4
	// Position of MEM_RD_RST field.
	RMT_CHCONF1_MEM_RD_RST_Pos = 0x3
	// Bit mask of MEM_RD_RST field.
	RMT_CHCONF1_MEM_RD_RST_Msk = 0x8
	// Bit MEM_RD_RST.
	RMT_CHCONF1_MEM_RD_RST = 0x8
	// Position of APB_MEM_RST field.
	RMT_CHCONF1_APB_MEM_RST_Pos = 0x4
	// Bit mask of APB_MEM_RST field.
	RMT_CHCONF1_APB_MEM_RST_Msk = 0x10
	// Bit APB_MEM_RST.
	RMT_CHCONF1_APB_MEM_RST = 0x10
	// Position of MEM_OWNER field.
	RMT_CHCONF1_MEM_OWNER_Pos = 0x5
	// Bit mask of MEM_OWNER field.
	RMT_CHCONF1_MEM_OWNER_Msk = 0x20
	// Bit MEM_OWNER.
	RMT_CHCONF1_MEM_OWNER = 0x20
	// Position of TX_CONTI_MODE field.
	RMT_CHCONF1_TX_CONTI_MODE_Pos = 0x6
	// Bit mask of TX_CONTI_MODE field.
	RMT_CHCONF1_TX_CONTI_MODE_Msk = 0x40
	// Bit TX_CONTI_MODE.
	RMT_CHCONF1_TX_CONTI_MODE = 0x40
	// Position of RX_FILTER_EN field.
	RMT_CHCONF1_RX_FILTER_EN_Pos = 0x7
	// Bit mask of RX_FILTER_EN field.
	RMT_CHCONF1_RX_FILTER_EN_Msk = 0x80
	// Bit RX_FILTER_EN.
	RMT_CHCONF1_RX_FILTER_EN = 0x80
	// Position of RX_FILTER_THRES field.
	RMT_CHCONF1_RX_FILTER_THRES_Pos = 0x8
	// Bit mask of RX_FILTER_THRES field.
	RMT_CHCONF1_RX_FILTER_THRES_Msk = 0xff00
	// Position of REF_CNT_RST field.
	RMT_CHCONF1_REF_CNT_RST_Pos = 0x10
	// Bit mask of REF_CNT_RST field.
	RMT_CHCONF1_REF_CNT_RST_Msk = 0x10000
	// Bit REF_CNT_RST.
	RMT_CHCONF1_REF_CNT_RST = 0x10000
	// Position of REF_ALWAYS_ON field.
	RMT_CHCONF1_REF_ALWAYS_ON_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON field.
	RMT_CHCONF1_REF_ALWAYS_ON_Msk = 0x20000
	// Bit REF_ALWAYS_ON.
	RMT_CHCONF1_REF_ALWAYS_ON = 0x20000
	// Position of IDLE_OUT_LV field.
	RMT_CHCONF1_IDLE_OUT_LV_Pos = 0x12
	// Bit mask of IDLE_OUT_LV field.
	RMT_CHCONF1_IDLE_OUT_LV_Msk = 0x40000
	// Bit IDLE_OUT_LV.
	RMT_CHCONF1_IDLE_OUT_LV = 0x40000
	// Position of IDLE_OUT_EN field.
	RMT_CHCONF1_IDLE_OUT_EN_Pos = 0x13
	// Bit mask of IDLE_OUT_EN field.
	RMT_CHCONF1_IDLE_OUT_EN_Msk = 0x80000
	// Bit IDLE_OUT_EN.
	RMT_CHCONF1_IDLE_OUT_EN = 0x80000

	// CH0STATUS
	// Position of STATUS field.
	RMT_CHSTATUS_STATUS_Pos = 0x0
	// Bit mask of STATUS field.
	RMT_CHSTATUS_STATUS_Msk = 0xffffffff
	// Position of MEM_WADDR_EX field.
	RMT_CHSTATUS_MEM_WADDR_EX_Pos = 0x0
	// Bit mask of MEM_WADDR_EX field.
	RMT_CHSTATUS_MEM_WADDR_EX_Msk = 0x3ff
	// Position of MEM_RADDR_EX field.
	RMT_CHSTATUS_MEM_RADDR_EX_Pos = 0xc
	// Bit mask of MEM_RADDR_EX field.
	RMT_CHSTATUS_MEM_RADDR_EX_Msk = 0x3ff000
	// Position of STATE field.
	RMT_CHSTATUS_STATE_Pos = 0x18
	// Bit mask of STATE field.
	RMT_CHSTATUS_STATE_Msk = 0x7000000
	// Position of MEM_OWNER_ERR field.
	RMT_CHSTATUS_MEM_OWNER_ERR_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR field.
	RMT_CHSTATUS_MEM_OWNER_ERR_Msk = 0x8000000
	// Bit MEM_OWNER_ERR.
	RMT_CHSTATUS_MEM_OWNER_ERR = 0x8000000
	// Position of MEM_FULL field.
	RMT_CHSTATUS_MEM_FULL_Pos = 0x1c
	// Bit mask of MEM_FULL field.
	RMT_CHSTATUS_MEM_FULL_Msk = 0x10000000
	// Bit MEM_FULL.
	RMT_CHSTATUS_MEM_FULL = 0x10000000
	// Position of MEM_EMPTY field.
	RMT_CHSTATUS_MEM_EMPTY_Pos = 0x1d
	// Bit mask of MEM_EMPTY field.
	RMT_CHSTATUS_MEM_EMPTY_Msk = 0x20000000
	// Bit MEM_EMPTY.
	RMT_CHSTATUS_MEM_EMPTY = 0x20000000
	// Position of APB_MEM_WR_ERR field.
	RMT_CHSTATUS_APB_MEM_WR_ERR_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR field.
	RMT_CHSTATUS_APB_MEM_WR_ERR_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR.
	RMT_CHSTATUS_APB_MEM_WR_ERR = 0x40000000
	// Position of APB_MEM_RD_ERR field.
	RMT_CHSTATUS_APB_MEM_RD_ERR_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR field.
	RMT_CHSTATUS_APB_MEM_RD_ERR_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR.
	RMT_CHSTATUS_APB_MEM_RD_ERR = 0x80000000

	// CH0ADDR
	// Position of APB_MEM_ADDR field.
	RMT_CHADDR_APB_MEM_ADDR_Pos = 0x0
	// Bit mask of APB_MEM_ADDR field.
	RMT_CHADDR_APB_MEM_ADDR_Msk = 0xffffffff

	// INT_RAW
	// Position of CH_s_TX_END field.
	RMT_INT_RAW_CH_s_TX_END_Pos = 0x0
	// Bit mask of CH_s_TX_END field.
	RMT_INT_RAW_CH_s_TX_END_Msk = 0x1
	// Bit CH_s_TX_END.
	RMT_INT_RAW_CH_s_TX_END = 0x1
	// Position of CH_s_RX_END field.
	RMT_INT_RAW_CH_s_RX_END_Pos = 0x1
	// Bit mask of CH_s_RX_END field.
	RMT_INT_RAW_CH_s_RX_END_Msk = 0x2
	// Bit CH_s_RX_END.
	RMT_INT_RAW_CH_s_RX_END = 0x2
	// Position of CH_s_ERR field.
	RMT_INT_RAW_CH_s_ERR_Pos = 0x2
	// Bit mask of CH_s_ERR field.
	RMT_INT_RAW_CH_s_ERR_Msk = 0x4
	// Bit CH_s_ERR.
	RMT_INT_RAW_CH_s_ERR = 0x4
	// Position of CH_s_TX_THR_EVENT field.
	RMT_INT_RAW_CH_s_TX_THR_EVENT_Pos = 0x18
	// Bit mask of CH_s_TX_THR_EVENT field.
	RMT_INT_RAW_CH_s_TX_THR_EVENT_Msk = 0x1000000
	// Bit CH_s_TX_THR_EVENT.
	RMT_INT_RAW_CH_s_TX_THR_EVENT = 0x1000000

	// INT_ST
	// Position of CH_s_TX_END field.
	RMT_INT_ST_CH_s_TX_END_Pos = 0x0
	// Bit mask of CH_s_TX_END field.
	RMT_INT_ST_CH_s_TX_END_Msk = 0x1
	// Bit CH_s_TX_END.
	RMT_INT_ST_CH_s_TX_END = 0x1
	// Position of CH_s_RX_END field.
	RMT_INT_ST_CH_s_RX_END_Pos = 0x1
	// Bit mask of CH_s_RX_END field.
	RMT_INT_ST_CH_s_RX_END_Msk = 0x2
	// Bit CH_s_RX_END.
	RMT_INT_ST_CH_s_RX_END = 0x2
	// Position of CH_s_ERR field.
	RMT_INT_ST_CH_s_ERR_Pos = 0x2
	// Bit mask of CH_s_ERR field.
	RMT_INT_ST_CH_s_ERR_Msk = 0x4
	// Bit CH_s_ERR.
	RMT_INT_ST_CH_s_ERR = 0x4
	// Position of CH_s_TX_THR_EVENT field.
	RMT_INT_ST_CH_s_TX_THR_EVENT_Pos = 0x18
	// Bit mask of CH_s_TX_THR_EVENT field.
	RMT_INT_ST_CH_s_TX_THR_EVENT_Msk = 0x1000000
	// Bit CH_s_TX_THR_EVENT.
	RMT_INT_ST_CH_s_TX_THR_EVENT = 0x1000000

	// INT_ENA
	// Position of CH_s_TX_END field.
	RMT_INT_ENA_CH_s_TX_END_Pos = 0x0
	// Bit mask of CH_s_TX_END field.
	RMT_INT_ENA_CH_s_TX_END_Msk = 0x1
	// Bit CH_s_TX_END.
	RMT_INT_ENA_CH_s_TX_END = 0x1
	// Position of CH_s_RX_END field.
	RMT_INT_ENA_CH_s_RX_END_Pos = 0x1
	// Bit mask of CH_s_RX_END field.
	RMT_INT_ENA_CH_s_RX_END_Msk = 0x2
	// Bit CH_s_RX_END.
	RMT_INT_ENA_CH_s_RX_END = 0x2
	// Position of CH_s_ERR field.
	RMT_INT_ENA_CH_s_ERR_Pos = 0x2
	// Bit mask of CH_s_ERR field.
	RMT_INT_ENA_CH_s_ERR_Msk = 0x4
	// Bit CH_s_ERR.
	RMT_INT_ENA_CH_s_ERR = 0x4
	// Position of CH_s_TX_THR_EVENT field.
	RMT_INT_ENA_CH_s_TX_THR_EVENT_Pos = 0x18
	// Bit mask of CH_s_TX_THR_EVENT field.
	RMT_INT_ENA_CH_s_TX_THR_EVENT_Msk = 0x1000000
	// Bit CH_s_TX_THR_EVENT.
	RMT_INT_ENA_CH_s_TX_THR_EVENT = 0x1000000

	// INT_CLR
	// Position of CH_s_TX_END field.
	RMT_INT_CLR_CH_s_TX_END_Pos = 0x0
	// Bit mask of CH_s_TX_END field.
	RMT_INT_CLR_CH_s_TX_END_Msk = 0x1
	// Bit CH_s_TX_END.
	RMT_INT_CLR_CH_s_TX_END = 0x1
	// Position of CH_s_RX_END field.
	RMT_INT_CLR_CH_s_RX_END_Pos = 0x1
	// Bit mask of CH_s_RX_END field.
	RMT_INT_CLR_CH_s_RX_END_Msk = 0x2
	// Bit CH_s_RX_END.
	RMT_INT_CLR_CH_s_RX_END = 0x2
	// Position of CH_s_ERR field.
	RMT_INT_CLR_CH_s_ERR_Pos = 0x2
	// Bit mask of CH_s_ERR field.
	RMT_INT_CLR_CH_s_ERR_Msk = 0x4
	// Bit CH_s_ERR.
	RMT_INT_CLR_CH_s_ERR = 0x4
	// Position of CH_s_TX_THR_EVENT field.
	RMT_INT_CLR_CH_s_TX_THR_EVENT_Pos = 0x18
	// Bit mask of CH_s_TX_THR_EVENT field.
	RMT_INT_CLR_CH_s_TX_THR_EVENT_Msk = 0x1000000
	// Bit CH_s_TX_THR_EVENT.
	RMT_INT_CLR_CH_s_TX_THR_EVENT = 0x1000000

	// CH0CARRIER_DUTY
	// Position of CARRIER_LOW field.
	RMT_CHCARRIER_DUTY_CARRIER_LOW_Pos = 0x0
	// Bit mask of CARRIER_LOW field.
	RMT_CHCARRIER_DUTY_CARRIER_LOW_Msk = 0xffff
	// Position of CARRIER_HIGH field.
	RMT_CHCARRIER_DUTY_CARRIER_HIGH_Pos = 0x10
	// Bit mask of CARRIER_HIGH field.
	RMT_CHCARRIER_DUTY_CARRIER_HIGH_Msk = 0xffff0000

	// CH0_TX_LIM
	// Position of TX_LIM field.
	RMT_CH_TX_LIM_TX_LIM_Pos = 0x0
	// Bit mask of TX_LIM field.
	RMT_CH_TX_LIM_TX_LIM_Msk = 0x1ff

	// APB_CONF
	// Position of APB_FIFO_MASK field.
	RMT_APB_CONF_APB_FIFO_MASK_Pos = 0x0
	// Bit mask of APB_FIFO_MASK field.
	RMT_APB_CONF_APB_FIFO_MASK_Msk = 0x1
	// Bit APB_FIFO_MASK.
	RMT_APB_CONF_APB_FIFO_MASK = 0x1
	// Position of MEM_TX_WRAP_EN field.
	RMT_APB_CONF_MEM_TX_WRAP_EN_Pos = 0x1
	// Bit mask of MEM_TX_WRAP_EN field.
	RMT_APB_CONF_MEM_TX_WRAP_EN_Msk = 0x2
	// Bit MEM_TX_WRAP_EN.
	RMT_APB_CONF_MEM_TX_WRAP_EN = 0x2

	// DATE
	// Position of DATE field.
	RMT_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	RMT_DATE_DATE_Msk = 0xffffffff
)

// Constants for RNG: Hardware Random Number Generator
const ()

// Constants for RSA: RSA (Rivest Shamir Adleman) Accelerator
const (
	// M_PRIME
	// Position of M_PRIME field.
	RSA_M_PRIME_M_PRIME_Pos = 0x0
	// Bit mask of M_PRIME field.
	RSA_M_PRIME_M_PRIME_Msk = 0xff

	// MODEXP_MODE
	// Position of MODEXP_MODE field.
	RSA_MODEXP_MODE_MODEXP_MODE_Pos = 0x0
	// Bit mask of MODEXP_MODE field.
	RSA_MODEXP_MODE_MODEXP_MODE_Msk = 0x7

	// MODEXP_START
	// Position of MODEXP_START field.
	RSA_MODEXP_START_MODEXP_START_Pos = 0x0
	// Bit mask of MODEXP_START field.
	RSA_MODEXP_START_MODEXP_START_Msk = 0x1
	// Bit MODEXP_START.
	RSA_MODEXP_START_MODEXP_START = 0x1

	// MULT_MODE
	// Position of MULT_MODE field.
	RSA_MULT_MODE_MULT_MODE_Pos = 0x0
	// Bit mask of MULT_MODE field.
	RSA_MULT_MODE_MULT_MODE_Msk = 0xf

	// MULT_START
	// Position of MULT_START field.
	RSA_MULT_START_MULT_START_Pos = 0x0
	// Bit mask of MULT_START field.
	RSA_MULT_START_MULT_START_Msk = 0x1
	// Bit MULT_START.
	RSA_MULT_START_MULT_START = 0x1

	// INTERRUPT
	// Position of INTERRUPT field.
	RSA_INTERRUPT_INTERRUPT_Pos = 0x0
	// Bit mask of INTERRUPT field.
	RSA_INTERRUPT_INTERRUPT_Msk = 0x1
	// Bit INTERRUPT.
	RSA_INTERRUPT_INTERRUPT = 0x1

	// CLEAN
	// Position of CLEAN field.
	RSA_CLEAN_CLEAN_Pos = 0x0
	// Bit mask of CLEAN field.
	RSA_CLEAN_CLEAN_Msk = 0x1
	// Bit CLEAN.
	RSA_CLEAN_CLEAN = 0x1
)

// Constants for RTC_CNTL: Real-Time Clock Control
const (
	// OPTIONS0
	// Position of SW_STALL_APPCPU_C0 field.
	RTC_CNTL_OPTIONS0_SW_STALL_APPCPU_C0_Pos = 0x0
	// Bit mask of SW_STALL_APPCPU_C0 field.
	RTC_CNTL_OPTIONS0_SW_STALL_APPCPU_C0_Msk = 0x3
	// Position of SW_STALL_PROCPU_C0 field.
	RTC_CNTL_OPTIONS0_SW_STALL_PROCPU_C0_Pos = 0x2
	// Bit mask of SW_STALL_PROCPU_C0 field.
	RTC_CNTL_OPTIONS0_SW_STALL_PROCPU_C0_Msk = 0xc
	// Position of SW_APPCPU_RST field.
	RTC_CNTL_OPTIONS0_SW_APPCPU_RST_Pos = 0x4
	// Bit mask of SW_APPCPU_RST field.
	RTC_CNTL_OPTIONS0_SW_APPCPU_RST_Msk = 0x10
	// Bit SW_APPCPU_RST.
	RTC_CNTL_OPTIONS0_SW_APPCPU_RST = 0x10
	// Position of SW_PROCPU_RST field.
	RTC_CNTL_OPTIONS0_SW_PROCPU_RST_Pos = 0x5
	// Bit mask of SW_PROCPU_RST field.
	RTC_CNTL_OPTIONS0_SW_PROCPU_RST_Msk = 0x20
	// Bit SW_PROCPU_RST.
	RTC_CNTL_OPTIONS0_SW_PROCPU_RST = 0x20
	// Position of BB_I2C_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BB_I2C_FORCE_PD_Pos = 0x6
	// Bit mask of BB_I2C_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BB_I2C_FORCE_PD_Msk = 0x40
	// Bit BB_I2C_FORCE_PD.
	RTC_CNTL_OPTIONS0_BB_I2C_FORCE_PD = 0x40
	// Position of BB_I2C_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BB_I2C_FORCE_PU_Pos = 0x7
	// Bit mask of BB_I2C_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BB_I2C_FORCE_PU_Msk = 0x80
	// Bit BB_I2C_FORCE_PU.
	RTC_CNTL_OPTIONS0_BB_I2C_FORCE_PU = 0x80
	// Position of BBPLL_I2C_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BBPLL_I2C_FORCE_PD_Pos = 0x8
	// Bit mask of BBPLL_I2C_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BBPLL_I2C_FORCE_PD_Msk = 0x100
	// Bit BBPLL_I2C_FORCE_PD.
	RTC_CNTL_OPTIONS0_BBPLL_I2C_FORCE_PD = 0x100
	// Position of BBPLL_I2C_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BBPLL_I2C_FORCE_PU_Pos = 0x9
	// Bit mask of BBPLL_I2C_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BBPLL_I2C_FORCE_PU_Msk = 0x200
	// Bit BBPLL_I2C_FORCE_PU.
	RTC_CNTL_OPTIONS0_BBPLL_I2C_FORCE_PU = 0x200
	// Position of BBPLL_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BBPLL_FORCE_PD_Pos = 0xa
	// Bit mask of BBPLL_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BBPLL_FORCE_PD_Msk = 0x400
	// Bit BBPLL_FORCE_PD.
	RTC_CNTL_OPTIONS0_BBPLL_FORCE_PD = 0x400
	// Position of BBPLL_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BBPLL_FORCE_PU_Pos = 0xb
	// Bit mask of BBPLL_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BBPLL_FORCE_PU_Msk = 0x800
	// Bit BBPLL_FORCE_PU.
	RTC_CNTL_OPTIONS0_BBPLL_FORCE_PU = 0x800
	// Position of XTL_FORCE_PD field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_PD_Pos = 0xc
	// Bit mask of XTL_FORCE_PD field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_PD_Msk = 0x1000
	// Bit XTL_FORCE_PD.
	RTC_CNTL_OPTIONS0_XTL_FORCE_PD = 0x1000
	// Position of XTL_FORCE_PU field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_PU_Pos = 0xd
	// Bit mask of XTL_FORCE_PU field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_PU_Msk = 0x2000
	// Bit XTL_FORCE_PU.
	RTC_CNTL_OPTIONS0_XTL_FORCE_PU = 0x2000
	// Position of BIAS_SLEEP_FOLW_8M field.
	RTC_CNTL_OPTIONS0_BIAS_SLEEP_FOLW_8M_Pos = 0xe
	// Bit mask of BIAS_SLEEP_FOLW_8M field.
	RTC_CNTL_OPTIONS0_BIAS_SLEEP_FOLW_8M_Msk = 0x4000
	// Bit BIAS_SLEEP_FOLW_8M.
	RTC_CNTL_OPTIONS0_BIAS_SLEEP_FOLW_8M = 0x4000
	// Position of BIAS_FORCE_SLEEP field.
	RTC_CNTL_OPTIONS0_BIAS_FORCE_SLEEP_Pos = 0xf
	// Bit mask of BIAS_FORCE_SLEEP field.
	RTC_CNTL_OPTIONS0_BIAS_FORCE_SLEEP_Msk = 0x8000
	// Bit BIAS_FORCE_SLEEP.
	RTC_CNTL_OPTIONS0_BIAS_FORCE_SLEEP = 0x8000
	// Position of BIAS_FORCE_NOSLEEP field.
	RTC_CNTL_OPTIONS0_BIAS_FORCE_NOSLEEP_Pos = 0x10
	// Bit mask of BIAS_FORCE_NOSLEEP field.
	RTC_CNTL_OPTIONS0_BIAS_FORCE_NOSLEEP_Msk = 0x10000
	// Bit BIAS_FORCE_NOSLEEP.
	RTC_CNTL_OPTIONS0_BIAS_FORCE_NOSLEEP = 0x10000
	// Position of BIAS_I2C_FOLW_8M field.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FOLW_8M_Pos = 0x11
	// Bit mask of BIAS_I2C_FOLW_8M field.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FOLW_8M_Msk = 0x20000
	// Bit BIAS_I2C_FOLW_8M.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FOLW_8M = 0x20000
	// Position of BIAS_I2C_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FORCE_PD_Pos = 0x12
	// Bit mask of BIAS_I2C_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FORCE_PD_Msk = 0x40000
	// Bit BIAS_I2C_FORCE_PD.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FORCE_PD = 0x40000
	// Position of BIAS_I2C_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FORCE_PU_Pos = 0x13
	// Bit mask of BIAS_I2C_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FORCE_PU_Msk = 0x80000
	// Bit BIAS_I2C_FORCE_PU.
	RTC_CNTL_OPTIONS0_BIAS_I2C_FORCE_PU = 0x80000
	// Position of BIAS_CORE_FOLW_8M field.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FOLW_8M_Pos = 0x14
	// Bit mask of BIAS_CORE_FOLW_8M field.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FOLW_8M_Msk = 0x100000
	// Bit BIAS_CORE_FOLW_8M.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FOLW_8M = 0x100000
	// Position of BIAS_CORE_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FORCE_PD_Pos = 0x15
	// Bit mask of BIAS_CORE_FORCE_PD field.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FORCE_PD_Msk = 0x200000
	// Bit BIAS_CORE_FORCE_PD.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FORCE_PD = 0x200000
	// Position of BIAS_CORE_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FORCE_PU_Pos = 0x16
	// Bit mask of BIAS_CORE_FORCE_PU field.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FORCE_PU_Msk = 0x400000
	// Bit BIAS_CORE_FORCE_PU.
	RTC_CNTL_OPTIONS0_BIAS_CORE_FORCE_PU = 0x400000
	// Position of XTL_FORCE_ISO field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_ISO_Pos = 0x17
	// Bit mask of XTL_FORCE_ISO field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_ISO_Msk = 0x800000
	// Bit XTL_FORCE_ISO.
	RTC_CNTL_OPTIONS0_XTL_FORCE_ISO = 0x800000
	// Position of PLL_FORCE_ISO field.
	RTC_CNTL_OPTIONS0_PLL_FORCE_ISO_Pos = 0x18
	// Bit mask of PLL_FORCE_ISO field.
	RTC_CNTL_OPTIONS0_PLL_FORCE_ISO_Msk = 0x1000000
	// Bit PLL_FORCE_ISO.
	RTC_CNTL_OPTIONS0_PLL_FORCE_ISO = 0x1000000
	// Position of ANALOG_FORCE_ISO field.
	RTC_CNTL_OPTIONS0_ANALOG_FORCE_ISO_Pos = 0x19
	// Bit mask of ANALOG_FORCE_ISO field.
	RTC_CNTL_OPTIONS0_ANALOG_FORCE_ISO_Msk = 0x2000000
	// Bit ANALOG_FORCE_ISO.
	RTC_CNTL_OPTIONS0_ANALOG_FORCE_ISO = 0x2000000
	// Position of XTL_FORCE_NOISO field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_NOISO_Pos = 0x1a
	// Bit mask of XTL_FORCE_NOISO field.
	RTC_CNTL_OPTIONS0_XTL_FORCE_NOISO_Msk = 0x4000000
	// Bit XTL_FORCE_NOISO.
	RTC_CNTL_OPTIONS0_XTL_FORCE_NOISO = 0x4000000
	// Position of PLL_FORCE_NOISO field.
	RTC_CNTL_OPTIONS0_PLL_FORCE_NOISO_Pos = 0x1b
	// Bit mask of PLL_FORCE_NOISO field.
	RTC_CNTL_OPTIONS0_PLL_FORCE_NOISO_Msk = 0x8000000
	// Bit PLL_FORCE_NOISO.
	RTC_CNTL_OPTIONS0_PLL_FORCE_NOISO = 0x8000000
	// Position of ANALOG_FORCE_NOISO field.
	RTC_CNTL_OPTIONS0_ANALOG_FORCE_NOISO_Pos = 0x1c
	// Bit mask of ANALOG_FORCE_NOISO field.
	RTC_CNTL_OPTIONS0_ANALOG_FORCE_NOISO_Msk = 0x10000000
	// Bit ANALOG_FORCE_NOISO.
	RTC_CNTL_OPTIONS0_ANALOG_FORCE_NOISO = 0x10000000
	// Position of DG_WRAP_FORCE_RST field.
	RTC_CNTL_OPTIONS0_DG_WRAP_FORCE_RST_Pos = 0x1d
	// Bit mask of DG_WRAP_FORCE_RST field.
	RTC_CNTL_OPTIONS0_DG_WRAP_FORCE_RST_Msk = 0x20000000
	// Bit DG_WRAP_FORCE_RST.
	RTC_CNTL_OPTIONS0_DG_WRAP_FORCE_RST = 0x20000000
	// Position of DG_WRAP_FORCE_NORST field.
	RTC_CNTL_OPTIONS0_DG_WRAP_FORCE_NORST_Pos = 0x1e
	// Bit mask of DG_WRAP_FORCE_NORST field.
	RTC_CNTL_OPTIONS0_DG_WRAP_FORCE_NORST_Msk = 0x40000000
	// Bit DG_WRAP_FORCE_NORST.
	RTC_CNTL_OPTIONS0_DG_WRAP_FORCE_NORST = 0x40000000
	// Position of SW_SYS_RST field.
	RTC_CNTL_OPTIONS0_SW_SYS_RST_Pos = 0x1f
	// Bit mask of SW_SYS_RST field.
	RTC_CNTL_OPTIONS0_SW_SYS_RST_Msk = 0x80000000
	// Bit SW_SYS_RST.
	RTC_CNTL_OPTIONS0_SW_SYS_RST = 0x80000000

	// SLP_TIMER0
	// Position of SLP_VAL_LO field.
	RTC_CNTL_SLP_TIMER0_SLP_VAL_LO_Pos = 0x0
	// Bit mask of SLP_VAL_LO field.
	RTC_CNTL_SLP_TIMER0_SLP_VAL_LO_Msk = 0xffffffff

	// SLP_TIMER1
	// Position of SLP_VAL_HI field.
	RTC_CNTL_SLP_TIMER1_SLP_VAL_HI_Pos = 0x0
	// Bit mask of SLP_VAL_HI field.
	RTC_CNTL_SLP_TIMER1_SLP_VAL_HI_Msk = 0xffff
	// Position of MAIN_TIMER_ALARM_EN field.
	RTC_CNTL_SLP_TIMER1_MAIN_TIMER_ALARM_EN_Pos = 0x10
	// Bit mask of MAIN_TIMER_ALARM_EN field.
	RTC_CNTL_SLP_TIMER1_MAIN_TIMER_ALARM_EN_Msk = 0x10000
	// Bit MAIN_TIMER_ALARM_EN.
	RTC_CNTL_SLP_TIMER1_MAIN_TIMER_ALARM_EN = 0x10000

	// TIME_UPDATE
	// Position of TIME_VALID field.
	RTC_CNTL_TIME_UPDATE_TIME_VALID_Pos = 0x1e
	// Bit mask of TIME_VALID field.
	RTC_CNTL_TIME_UPDATE_TIME_VALID_Msk = 0x40000000
	// Bit TIME_VALID.
	RTC_CNTL_TIME_UPDATE_TIME_VALID = 0x40000000
	// Position of TIME_UPDATE field.
	RTC_CNTL_TIME_UPDATE_TIME_UPDATE_Pos = 0x1f
	// Bit mask of TIME_UPDATE field.
	RTC_CNTL_TIME_UPDATE_TIME_UPDATE_Msk = 0x80000000
	// Bit TIME_UPDATE.
	RTC_CNTL_TIME_UPDATE_TIME_UPDATE = 0x80000000

	// TIME0
	// Position of TIME_LO field.
	RTC_CNTL_TIME0_TIME_LO_Pos = 0x0
	// Bit mask of TIME_LO field.
	RTC_CNTL_TIME0_TIME_LO_Msk = 0xffffffff

	// TIME1
	// Position of TIME_HI field.
	RTC_CNTL_TIME1_TIME_HI_Pos = 0x0
	// Bit mask of TIME_HI field.
	RTC_CNTL_TIME1_TIME_HI_Msk = 0xffff

	// STATE0
	// Position of TOUCH_WAKEUP_FORCE_EN field.
	RTC_CNTL_STATE0_TOUCH_WAKEUP_FORCE_EN_Pos = 0x14
	// Bit mask of TOUCH_WAKEUP_FORCE_EN field.
	RTC_CNTL_STATE0_TOUCH_WAKEUP_FORCE_EN_Msk = 0x100000
	// Bit TOUCH_WAKEUP_FORCE_EN.
	RTC_CNTL_STATE0_TOUCH_WAKEUP_FORCE_EN = 0x100000
	// Position of ULP_CP_WAKEUP_FORCE_EN field.
	RTC_CNTL_STATE0_ULP_CP_WAKEUP_FORCE_EN_Pos = 0x15
	// Bit mask of ULP_CP_WAKEUP_FORCE_EN field.
	RTC_CNTL_STATE0_ULP_CP_WAKEUP_FORCE_EN_Msk = 0x200000
	// Bit ULP_CP_WAKEUP_FORCE_EN.
	RTC_CNTL_STATE0_ULP_CP_WAKEUP_FORCE_EN = 0x200000
	// Position of APB2RTC_BRIDGE_SEL field.
	RTC_CNTL_STATE0_APB2RTC_BRIDGE_SEL_Pos = 0x16
	// Bit mask of APB2RTC_BRIDGE_SEL field.
	RTC_CNTL_STATE0_APB2RTC_BRIDGE_SEL_Msk = 0x400000
	// Bit APB2RTC_BRIDGE_SEL.
	RTC_CNTL_STATE0_APB2RTC_BRIDGE_SEL = 0x400000
	// Position of TOUCH_SLP_TIMER_EN field.
	RTC_CNTL_STATE0_TOUCH_SLP_TIMER_EN_Pos = 0x17
	// Bit mask of TOUCH_SLP_TIMER_EN field.
	RTC_CNTL_STATE0_TOUCH_SLP_TIMER_EN_Msk = 0x800000
	// Bit TOUCH_SLP_TIMER_EN.
	RTC_CNTL_STATE0_TOUCH_SLP_TIMER_EN = 0x800000
	// Position of ULP_CP_SLP_TIMER_EN field.
	RTC_CNTL_STATE0_ULP_CP_SLP_TIMER_EN_Pos = 0x18
	// Bit mask of ULP_CP_SLP_TIMER_EN field.
	RTC_CNTL_STATE0_ULP_CP_SLP_TIMER_EN_Msk = 0x1000000
	// Bit ULP_CP_SLP_TIMER_EN.
	RTC_CNTL_STATE0_ULP_CP_SLP_TIMER_EN = 0x1000000
	// Position of SDIO_ACTIVE_IND field.
	RTC_CNTL_STATE0_SDIO_ACTIVE_IND_Pos = 0x1c
	// Bit mask of SDIO_ACTIVE_IND field.
	RTC_CNTL_STATE0_SDIO_ACTIVE_IND_Msk = 0x10000000
	// Bit SDIO_ACTIVE_IND.
	RTC_CNTL_STATE0_SDIO_ACTIVE_IND = 0x10000000
	// Position of SLP_WAKEUP field.
	RTC_CNTL_STATE0_SLP_WAKEUP_Pos = 0x1d
	// Bit mask of SLP_WAKEUP field.
	RTC_CNTL_STATE0_SLP_WAKEUP_Msk = 0x20000000
	// Bit SLP_WAKEUP.
	RTC_CNTL_STATE0_SLP_WAKEUP = 0x20000000
	// Position of SLP_REJECT field.
	RTC_CNTL_STATE0_SLP_REJECT_Pos = 0x1e
	// Bit mask of SLP_REJECT field.
	RTC_CNTL_STATE0_SLP_REJECT_Msk = 0x40000000
	// Bit SLP_REJECT.
	RTC_CNTL_STATE0_SLP_REJECT = 0x40000000
	// Position of SLEEP_EN field.
	RTC_CNTL_STATE0_SLEEP_EN_Pos = 0x1f
	// Bit mask of SLEEP_EN field.
	RTC_CNTL_STATE0_SLEEP_EN_Msk = 0x80000000
	// Bit SLEEP_EN.
	RTC_CNTL_STATE0_SLEEP_EN = 0x80000000

	// TIMER1
	// Position of CPU_STALL_EN field.
	RTC_CNTL_TIMER1_CPU_STALL_EN_Pos = 0x0
	// Bit mask of CPU_STALL_EN field.
	RTC_CNTL_TIMER1_CPU_STALL_EN_Msk = 0x1
	// Bit CPU_STALL_EN.
	RTC_CNTL_TIMER1_CPU_STALL_EN = 0x1
	// Position of CPU_STALL_WAIT field.
	RTC_CNTL_TIMER1_CPU_STALL_WAIT_Pos = 0x1
	// Bit mask of CPU_STALL_WAIT field.
	RTC_CNTL_TIMER1_CPU_STALL_WAIT_Msk = 0x3e
	// Position of CK8M_WAIT field.
	RTC_CNTL_TIMER1_CK8M_WAIT_Pos = 0x6
	// Bit mask of CK8M_WAIT field.
	RTC_CNTL_TIMER1_CK8M_WAIT_Msk = 0x3fc0
	// Position of XTL_BUF_WAIT field.
	RTC_CNTL_TIMER1_XTL_BUF_WAIT_Pos = 0xe
	// Bit mask of XTL_BUF_WAIT field.
	RTC_CNTL_TIMER1_XTL_BUF_WAIT_Msk = 0xffc000
	// Position of PLL_BUF_WAIT field.
	RTC_CNTL_TIMER1_PLL_BUF_WAIT_Pos = 0x18
	// Bit mask of PLL_BUF_WAIT field.
	RTC_CNTL_TIMER1_PLL_BUF_WAIT_Msk = 0xff000000

	// TIMER2
	// Position of ULPCP_TOUCH_START_WAIT field.
	RTC_CNTL_TIMER2_ULPCP_TOUCH_START_WAIT_Pos = 0xf
	// Bit mask of ULPCP_TOUCH_START_WAIT field.
	RTC_CNTL_TIMER2_ULPCP_TOUCH_START_WAIT_Msk = 0xff8000
	// Position of MIN_TIME_CK8M_OFF field.
	RTC_CNTL_TIMER2_MIN_TIME_CK8M_OFF_Pos = 0x18
	// Bit mask of MIN_TIME_CK8M_OFF field.
	RTC_CNTL_TIMER2_MIN_TIME_CK8M_OFF_Msk = 0xff000000

	// TIMER3
	// Position of WIFI_WAIT_TIMER field.
	RTC_CNTL_TIMER3_WIFI_WAIT_TIMER_Pos = 0x0
	// Bit mask of WIFI_WAIT_TIMER field.
	RTC_CNTL_TIMER3_WIFI_WAIT_TIMER_Msk = 0x1ff
	// Position of WIFI_POWERUP_TIMER field.
	RTC_CNTL_TIMER3_WIFI_POWERUP_TIMER_Pos = 0x9
	// Bit mask of WIFI_POWERUP_TIMER field.
	RTC_CNTL_TIMER3_WIFI_POWERUP_TIMER_Msk = 0xfe00
	// Position of ROM_RAM_WAIT_TIMER field.
	RTC_CNTL_TIMER3_ROM_RAM_WAIT_TIMER_Pos = 0x10
	// Bit mask of ROM_RAM_WAIT_TIMER field.
	RTC_CNTL_TIMER3_ROM_RAM_WAIT_TIMER_Msk = 0x1ff0000
	// Position of ROM_RAM_POWERUP_TIMER field.
	RTC_CNTL_TIMER3_ROM_RAM_POWERUP_TIMER_Pos = 0x19
	// Bit mask of ROM_RAM_POWERUP_TIMER field.
	RTC_CNTL_TIMER3_ROM_RAM_POWERUP_TIMER_Msk = 0xfe000000

	// TIMER4
	// Position of WAIT_TIMER field.
	RTC_CNTL_TIMER4_WAIT_TIMER_Pos = 0x0
	// Bit mask of WAIT_TIMER field.
	RTC_CNTL_TIMER4_WAIT_TIMER_Msk = 0x1ff
	// Position of POWERUP_TIMER field.
	RTC_CNTL_TIMER4_POWERUP_TIMER_Pos = 0x9
	// Bit mask of POWERUP_TIMER field.
	RTC_CNTL_TIMER4_POWERUP_TIMER_Msk = 0xfe00
	// Position of DG_WRAP_WAIT_TIMER field.
	RTC_CNTL_TIMER4_DG_WRAP_WAIT_TIMER_Pos = 0x10
	// Bit mask of DG_WRAP_WAIT_TIMER field.
	RTC_CNTL_TIMER4_DG_WRAP_WAIT_TIMER_Msk = 0x1ff0000
	// Position of DG_WRAP_POWERUP_TIMER field.
	RTC_CNTL_TIMER4_DG_WRAP_POWERUP_TIMER_Pos = 0x19
	// Bit mask of DG_WRAP_POWERUP_TIMER field.
	RTC_CNTL_TIMER4_DG_WRAP_POWERUP_TIMER_Msk = 0xfe000000

	// TIMER5
	// Position of ULP_CP_SUBTIMER_PREDIV field.
	RTC_CNTL_TIMER5_ULP_CP_SUBTIMER_PREDIV_Pos = 0x0
	// Bit mask of ULP_CP_SUBTIMER_PREDIV field.
	RTC_CNTL_TIMER5_ULP_CP_SUBTIMER_PREDIV_Msk = 0xff
	// Position of MIN_SLP_VAL field.
	RTC_CNTL_TIMER5_MIN_SLP_VAL_Pos = 0x8
	// Bit mask of MIN_SLP_VAL field.
	RTC_CNTL_TIMER5_MIN_SLP_VAL_Msk = 0xff00
	// Position of RTCMEM_WAIT_TIMER field.
	RTC_CNTL_TIMER5_RTCMEM_WAIT_TIMER_Pos = 0x10
	// Bit mask of RTCMEM_WAIT_TIMER field.
	RTC_CNTL_TIMER5_RTCMEM_WAIT_TIMER_Msk = 0x1ff0000
	// Position of RTCMEM_POWERUP_TIMER field.
	RTC_CNTL_TIMER5_RTCMEM_POWERUP_TIMER_Pos = 0x19
	// Bit mask of RTCMEM_POWERUP_TIMER field.
	RTC_CNTL_TIMER5_RTCMEM_POWERUP_TIMER_Msk = 0xfe000000

	// ANA_CONF
	// Position of PLLA_FORCE_PD field.
	RTC_CNTL_ANA_CONF_PLLA_FORCE_PD_Pos = 0x17
	// Bit mask of PLLA_FORCE_PD field.
	RTC_CNTL_ANA_CONF_PLLA_FORCE_PD_Msk = 0x800000
	// Bit PLLA_FORCE_PD.
	RTC_CNTL_ANA_CONF_PLLA_FORCE_PD = 0x800000
	// Position of PLLA_FORCE_PU field.
	RTC_CNTL_ANA_CONF_PLLA_FORCE_PU_Pos = 0x18
	// Bit mask of PLLA_FORCE_PU field.
	RTC_CNTL_ANA_CONF_PLLA_FORCE_PU_Msk = 0x1000000
	// Bit PLLA_FORCE_PU.
	RTC_CNTL_ANA_CONF_PLLA_FORCE_PU = 0x1000000
	// Position of BBPLL_CAL_SLP_START field.
	RTC_CNTL_ANA_CONF_BBPLL_CAL_SLP_START_Pos = 0x19
	// Bit mask of BBPLL_CAL_SLP_START field.
	RTC_CNTL_ANA_CONF_BBPLL_CAL_SLP_START_Msk = 0x2000000
	// Bit BBPLL_CAL_SLP_START.
	RTC_CNTL_ANA_CONF_BBPLL_CAL_SLP_START = 0x2000000
	// Position of PVTMON_PU field.
	RTC_CNTL_ANA_CONF_PVTMON_PU_Pos = 0x1a
	// Bit mask of PVTMON_PU field.
	RTC_CNTL_ANA_CONF_PVTMON_PU_Msk = 0x4000000
	// Bit PVTMON_PU.
	RTC_CNTL_ANA_CONF_PVTMON_PU = 0x4000000
	// Position of TXRF_I2C_PU field.
	RTC_CNTL_ANA_CONF_TXRF_I2C_PU_Pos = 0x1b
	// Bit mask of TXRF_I2C_PU field.
	RTC_CNTL_ANA_CONF_TXRF_I2C_PU_Msk = 0x8000000
	// Bit TXRF_I2C_PU.
	RTC_CNTL_ANA_CONF_TXRF_I2C_PU = 0x8000000
	// Position of RFRX_PBUS_PU field.
	RTC_CNTL_ANA_CONF_RFRX_PBUS_PU_Pos = 0x1c
	// Bit mask of RFRX_PBUS_PU field.
	RTC_CNTL_ANA_CONF_RFRX_PBUS_PU_Msk = 0x10000000
	// Bit RFRX_PBUS_PU.
	RTC_CNTL_ANA_CONF_RFRX_PBUS_PU = 0x10000000
	// Position of CKGEN_I2C_PU field.
	RTC_CNTL_ANA_CONF_CKGEN_I2C_PU_Pos = 0x1e
	// Bit mask of CKGEN_I2C_PU field.
	RTC_CNTL_ANA_CONF_CKGEN_I2C_PU_Msk = 0x40000000
	// Bit CKGEN_I2C_PU.
	RTC_CNTL_ANA_CONF_CKGEN_I2C_PU = 0x40000000
	// Position of PLL_I2C_PU field.
	RTC_CNTL_ANA_CONF_PLL_I2C_PU_Pos = 0x1f
	// Bit mask of PLL_I2C_PU field.
	RTC_CNTL_ANA_CONF_PLL_I2C_PU_Msk = 0x80000000
	// Bit PLL_I2C_PU.
	RTC_CNTL_ANA_CONF_PLL_I2C_PU = 0x80000000

	// RESET_STATE
	// Position of RESET_CAUSE_PROCPU field.
	RTC_CNTL_RESET_STATE_RESET_CAUSE_PROCPU_Pos = 0x0
	// Bit mask of RESET_CAUSE_PROCPU field.
	RTC_CNTL_RESET_STATE_RESET_CAUSE_PROCPU_Msk = 0x3f
	// Position of RESET_CAUSE_APPCPU field.
	RTC_CNTL_RESET_STATE_RESET_CAUSE_APPCPU_Pos = 0x6
	// Bit mask of RESET_CAUSE_APPCPU field.
	RTC_CNTL_RESET_STATE_RESET_CAUSE_APPCPU_Msk = 0xfc0
	// Position of APPCPU_STAT_VECTOR_SEL field.
	RTC_CNTL_RESET_STATE_APPCPU_STAT_VECTOR_SEL_Pos = 0xc
	// Bit mask of APPCPU_STAT_VECTOR_SEL field.
	RTC_CNTL_RESET_STATE_APPCPU_STAT_VECTOR_SEL_Msk = 0x1000
	// Bit APPCPU_STAT_VECTOR_SEL.
	RTC_CNTL_RESET_STATE_APPCPU_STAT_VECTOR_SEL = 0x1000
	// Position of PROCPU_STAT_VECTOR_SEL field.
	RTC_CNTL_RESET_STATE_PROCPU_STAT_VECTOR_SEL_Pos = 0xd
	// Bit mask of PROCPU_STAT_VECTOR_SEL field.
	RTC_CNTL_RESET_STATE_PROCPU_STAT_VECTOR_SEL_Msk = 0x2000
	// Bit PROCPU_STAT_VECTOR_SEL.
	RTC_CNTL_RESET_STATE_PROCPU_STAT_VECTOR_SEL = 0x2000

	// WAKEUP_STATE
	// Position of WAKEUP_CAUSE field.
	RTC_CNTL_WAKEUP_STATE_WAKEUP_CAUSE_Pos = 0x0
	// Bit mask of WAKEUP_CAUSE field.
	RTC_CNTL_WAKEUP_STATE_WAKEUP_CAUSE_Msk = 0x7ff
	// Position of WAKEUP_ENA field.
	RTC_CNTL_WAKEUP_STATE_WAKEUP_ENA_Pos = 0xb
	// Bit mask of WAKEUP_ENA field.
	RTC_CNTL_WAKEUP_STATE_WAKEUP_ENA_Msk = 0x3ff800
	// Position of GPIO_WAKEUP_FILTER field.
	RTC_CNTL_WAKEUP_STATE_GPIO_WAKEUP_FILTER_Pos = 0x16
	// Bit mask of GPIO_WAKEUP_FILTER field.
	RTC_CNTL_WAKEUP_STATE_GPIO_WAKEUP_FILTER_Msk = 0x400000
	// Bit GPIO_WAKEUP_FILTER.
	RTC_CNTL_WAKEUP_STATE_GPIO_WAKEUP_FILTER = 0x400000

	// INT_ENA
	// Position of SLP_WAKEUP_INT_ENA field.
	RTC_CNTL_INT_ENA_SLP_WAKEUP_INT_ENA_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_ENA field.
	RTC_CNTL_INT_ENA_SLP_WAKEUP_INT_ENA_Msk = 0x1
	// Bit SLP_WAKEUP_INT_ENA.
	RTC_CNTL_INT_ENA_SLP_WAKEUP_INT_ENA = 0x1
	// Position of SLP_REJECT_INT_ENA field.
	RTC_CNTL_INT_ENA_SLP_REJECT_INT_ENA_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_ENA field.
	RTC_CNTL_INT_ENA_SLP_REJECT_INT_ENA_Msk = 0x2
	// Bit SLP_REJECT_INT_ENA.
	RTC_CNTL_INT_ENA_SLP_REJECT_INT_ENA = 0x2
	// Position of SDIO_IDLE_INT_ENA field.
	RTC_CNTL_INT_ENA_SDIO_IDLE_INT_ENA_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_ENA field.
	RTC_CNTL_INT_ENA_SDIO_IDLE_INT_ENA_Msk = 0x4
	// Bit SDIO_IDLE_INT_ENA.
	RTC_CNTL_INT_ENA_SDIO_IDLE_INT_ENA = 0x4
	// Position of WDT_INT_ENA field.
	RTC_CNTL_INT_ENA_WDT_INT_ENA_Pos = 0x3
	// Bit mask of WDT_INT_ENA field.
	RTC_CNTL_INT_ENA_WDT_INT_ENA_Msk = 0x8
	// Bit WDT_INT_ENA.
	RTC_CNTL_INT_ENA_WDT_INT_ENA = 0x8
	// Position of TIME_VALID_INT_ENA field.
	RTC_CNTL_INT_ENA_TIME_VALID_INT_ENA_Pos = 0x4
	// Bit mask of TIME_VALID_INT_ENA field.
	RTC_CNTL_INT_ENA_TIME_VALID_INT_ENA_Msk = 0x10
	// Bit TIME_VALID_INT_ENA.
	RTC_CNTL_INT_ENA_TIME_VALID_INT_ENA = 0x10
	// Position of ULP_CP_INT_ENA field.
	RTC_CNTL_INT_ENA_ULP_CP_INT_ENA_Pos = 0x5
	// Bit mask of ULP_CP_INT_ENA field.
	RTC_CNTL_INT_ENA_ULP_CP_INT_ENA_Msk = 0x20
	// Bit ULP_CP_INT_ENA.
	RTC_CNTL_INT_ENA_ULP_CP_INT_ENA = 0x20
	// Position of TOUCH_INT_ENA field.
	RTC_CNTL_INT_ENA_TOUCH_INT_ENA_Pos = 0x6
	// Bit mask of TOUCH_INT_ENA field.
	RTC_CNTL_INT_ENA_TOUCH_INT_ENA_Msk = 0x40
	// Bit TOUCH_INT_ENA.
	RTC_CNTL_INT_ENA_TOUCH_INT_ENA = 0x40
	// Position of BROWN_OUT_INT_ENA field.
	RTC_CNTL_INT_ENA_BROWN_OUT_INT_ENA_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_ENA field.
	RTC_CNTL_INT_ENA_BROWN_OUT_INT_ENA_Msk = 0x80
	// Bit BROWN_OUT_INT_ENA.
	RTC_CNTL_INT_ENA_BROWN_OUT_INT_ENA = 0x80
	// Position of MAIN_TIMER_INT_ENA field.
	RTC_CNTL_INT_ENA_MAIN_TIMER_INT_ENA_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_ENA field.
	RTC_CNTL_INT_ENA_MAIN_TIMER_INT_ENA_Msk = 0x100
	// Bit MAIN_TIMER_INT_ENA.
	RTC_CNTL_INT_ENA_MAIN_TIMER_INT_ENA = 0x100

	// INT_RAW
	// Position of SLP_WAKEUP_INT_RAW field.
	RTC_CNTL_INT_RAW_SLP_WAKEUP_INT_RAW_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_RAW field.
	RTC_CNTL_INT_RAW_SLP_WAKEUP_INT_RAW_Msk = 0x1
	// Bit SLP_WAKEUP_INT_RAW.
	RTC_CNTL_INT_RAW_SLP_WAKEUP_INT_RAW = 0x1
	// Position of SLP_REJECT_INT_RAW field.
	RTC_CNTL_INT_RAW_SLP_REJECT_INT_RAW_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_RAW field.
	RTC_CNTL_INT_RAW_SLP_REJECT_INT_RAW_Msk = 0x2
	// Bit SLP_REJECT_INT_RAW.
	RTC_CNTL_INT_RAW_SLP_REJECT_INT_RAW = 0x2
	// Position of SDIO_IDLE_INT_RAW field.
	RTC_CNTL_INT_RAW_SDIO_IDLE_INT_RAW_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_RAW field.
	RTC_CNTL_INT_RAW_SDIO_IDLE_INT_RAW_Msk = 0x4
	// Bit SDIO_IDLE_INT_RAW.
	RTC_CNTL_INT_RAW_SDIO_IDLE_INT_RAW = 0x4
	// Position of WDT_INT_RAW field.
	RTC_CNTL_INT_RAW_WDT_INT_RAW_Pos = 0x3
	// Bit mask of WDT_INT_RAW field.
	RTC_CNTL_INT_RAW_WDT_INT_RAW_Msk = 0x8
	// Bit WDT_INT_RAW.
	RTC_CNTL_INT_RAW_WDT_INT_RAW = 0x8
	// Position of TIME_VALID_INT_RAW field.
	RTC_CNTL_INT_RAW_TIME_VALID_INT_RAW_Pos = 0x4
	// Bit mask of TIME_VALID_INT_RAW field.
	RTC_CNTL_INT_RAW_TIME_VALID_INT_RAW_Msk = 0x10
	// Bit TIME_VALID_INT_RAW.
	RTC_CNTL_INT_RAW_TIME_VALID_INT_RAW = 0x10
	// Position of ULP_CP_INT_RAW field.
	RTC_CNTL_INT_RAW_ULP_CP_INT_RAW_Pos = 0x5
	// Bit mask of ULP_CP_INT_RAW field.
	RTC_CNTL_INT_RAW_ULP_CP_INT_RAW_Msk = 0x20
	// Bit ULP_CP_INT_RAW.
	RTC_CNTL_INT_RAW_ULP_CP_INT_RAW = 0x20
	// Position of TOUCH_INT_RAW field.
	RTC_CNTL_INT_RAW_TOUCH_INT_RAW_Pos = 0x6
	// Bit mask of TOUCH_INT_RAW field.
	RTC_CNTL_INT_RAW_TOUCH_INT_RAW_Msk = 0x40
	// Bit TOUCH_INT_RAW.
	RTC_CNTL_INT_RAW_TOUCH_INT_RAW = 0x40
	// Position of BROWN_OUT_INT_RAW field.
	RTC_CNTL_INT_RAW_BROWN_OUT_INT_RAW_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_RAW field.
	RTC_CNTL_INT_RAW_BROWN_OUT_INT_RAW_Msk = 0x80
	// Bit BROWN_OUT_INT_RAW.
	RTC_CNTL_INT_RAW_BROWN_OUT_INT_RAW = 0x80
	// Position of MAIN_TIMER_INT_RAW field.
	RTC_CNTL_INT_RAW_MAIN_TIMER_INT_RAW_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_RAW field.
	RTC_CNTL_INT_RAW_MAIN_TIMER_INT_RAW_Msk = 0x100
	// Bit MAIN_TIMER_INT_RAW.
	RTC_CNTL_INT_RAW_MAIN_TIMER_INT_RAW = 0x100

	// INT_ST
	// Position of SLP_WAKEUP_INT_ST field.
	RTC_CNTL_INT_ST_SLP_WAKEUP_INT_ST_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_ST field.
	RTC_CNTL_INT_ST_SLP_WAKEUP_INT_ST_Msk = 0x1
	// Bit SLP_WAKEUP_INT_ST.
	RTC_CNTL_INT_ST_SLP_WAKEUP_INT_ST = 0x1
	// Position of SLP_REJECT_INT_ST field.
	RTC_CNTL_INT_ST_SLP_REJECT_INT_ST_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_ST field.
	RTC_CNTL_INT_ST_SLP_REJECT_INT_ST_Msk = 0x2
	// Bit SLP_REJECT_INT_ST.
	RTC_CNTL_INT_ST_SLP_REJECT_INT_ST = 0x2
	// Position of SDIO_IDLE_INT_ST field.
	RTC_CNTL_INT_ST_SDIO_IDLE_INT_ST_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_ST field.
	RTC_CNTL_INT_ST_SDIO_IDLE_INT_ST_Msk = 0x4
	// Bit SDIO_IDLE_INT_ST.
	RTC_CNTL_INT_ST_SDIO_IDLE_INT_ST = 0x4
	// Position of WDT_INT_ST field.
	RTC_CNTL_INT_ST_WDT_INT_ST_Pos = 0x3
	// Bit mask of WDT_INT_ST field.
	RTC_CNTL_INT_ST_WDT_INT_ST_Msk = 0x8
	// Bit WDT_INT_ST.
	RTC_CNTL_INT_ST_WDT_INT_ST = 0x8
	// Position of TIME_VALID_INT_ST field.
	RTC_CNTL_INT_ST_TIME_VALID_INT_ST_Pos = 0x4
	// Bit mask of TIME_VALID_INT_ST field.
	RTC_CNTL_INT_ST_TIME_VALID_INT_ST_Msk = 0x10
	// Bit TIME_VALID_INT_ST.
	RTC_CNTL_INT_ST_TIME_VALID_INT_ST = 0x10
	// Position of SAR_INT_ST field.
	RTC_CNTL_INT_ST_SAR_INT_ST_Pos = 0x5
	// Bit mask of SAR_INT_ST field.
	RTC_CNTL_INT_ST_SAR_INT_ST_Msk = 0x20
	// Bit SAR_INT_ST.
	RTC_CNTL_INT_ST_SAR_INT_ST = 0x20
	// Position of TOUCH_INT_ST field.
	RTC_CNTL_INT_ST_TOUCH_INT_ST_Pos = 0x6
	// Bit mask of TOUCH_INT_ST field.
	RTC_CNTL_INT_ST_TOUCH_INT_ST_Msk = 0x40
	// Bit TOUCH_INT_ST.
	RTC_CNTL_INT_ST_TOUCH_INT_ST = 0x40
	// Position of BROWN_OUT_INT_ST field.
	RTC_CNTL_INT_ST_BROWN_OUT_INT_ST_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_ST field.
	RTC_CNTL_INT_ST_BROWN_OUT_INT_ST_Msk = 0x80
	// Bit BROWN_OUT_INT_ST.
	RTC_CNTL_INT_ST_BROWN_OUT_INT_ST = 0x80
	// Position of MAIN_TIMER_INT_ST field.
	RTC_CNTL_INT_ST_MAIN_TIMER_INT_ST_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_ST field.
	RTC_CNTL_INT_ST_MAIN_TIMER_INT_ST_Msk = 0x100
	// Bit MAIN_TIMER_INT_ST.
	RTC_CNTL_INT_ST_MAIN_TIMER_INT_ST = 0x100

	// INT_CLR
	// Position of SLP_WAKEUP_INT_CLR field.
	RTC_CNTL_INT_CLR_SLP_WAKEUP_INT_CLR_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_CLR field.
	RTC_CNTL_INT_CLR_SLP_WAKEUP_INT_CLR_Msk = 0x1
	// Bit SLP_WAKEUP_INT_CLR.
	RTC_CNTL_INT_CLR_SLP_WAKEUP_INT_CLR = 0x1
	// Position of SLP_REJECT_INT_CLR field.
	RTC_CNTL_INT_CLR_SLP_REJECT_INT_CLR_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_CLR field.
	RTC_CNTL_INT_CLR_SLP_REJECT_INT_CLR_Msk = 0x2
	// Bit SLP_REJECT_INT_CLR.
	RTC_CNTL_INT_CLR_SLP_REJECT_INT_CLR = 0x2
	// Position of SDIO_IDLE_INT_CLR field.
	RTC_CNTL_INT_CLR_SDIO_IDLE_INT_CLR_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_CLR field.
	RTC_CNTL_INT_CLR_SDIO_IDLE_INT_CLR_Msk = 0x4
	// Bit SDIO_IDLE_INT_CLR.
	RTC_CNTL_INT_CLR_SDIO_IDLE_INT_CLR = 0x4
	// Position of WDT_INT_CLR field.
	RTC_CNTL_INT_CLR_WDT_INT_CLR_Pos = 0x3
	// Bit mask of WDT_INT_CLR field.
	RTC_CNTL_INT_CLR_WDT_INT_CLR_Msk = 0x8
	// Bit WDT_INT_CLR.
	RTC_CNTL_INT_CLR_WDT_INT_CLR = 0x8
	// Position of TIME_VALID_INT_CLR field.
	RTC_CNTL_INT_CLR_TIME_VALID_INT_CLR_Pos = 0x4
	// Bit mask of TIME_VALID_INT_CLR field.
	RTC_CNTL_INT_CLR_TIME_VALID_INT_CLR_Msk = 0x10
	// Bit TIME_VALID_INT_CLR.
	RTC_CNTL_INT_CLR_TIME_VALID_INT_CLR = 0x10
	// Position of SAR_INT_CLR field.
	RTC_CNTL_INT_CLR_SAR_INT_CLR_Pos = 0x5
	// Bit mask of SAR_INT_CLR field.
	RTC_CNTL_INT_CLR_SAR_INT_CLR_Msk = 0x20
	// Bit SAR_INT_CLR.
	RTC_CNTL_INT_CLR_SAR_INT_CLR = 0x20
	// Position of TOUCH_INT_CLR field.
	RTC_CNTL_INT_CLR_TOUCH_INT_CLR_Pos = 0x6
	// Bit mask of TOUCH_INT_CLR field.
	RTC_CNTL_INT_CLR_TOUCH_INT_CLR_Msk = 0x40
	// Bit TOUCH_INT_CLR.
	RTC_CNTL_INT_CLR_TOUCH_INT_CLR = 0x40
	// Position of BROWN_OUT_INT_CLR field.
	RTC_CNTL_INT_CLR_BROWN_OUT_INT_CLR_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_CLR field.
	RTC_CNTL_INT_CLR_BROWN_OUT_INT_CLR_Msk = 0x80
	// Bit BROWN_OUT_INT_CLR.
	RTC_CNTL_INT_CLR_BROWN_OUT_INT_CLR = 0x80
	// Position of MAIN_TIMER_INT_CLR field.
	RTC_CNTL_INT_CLR_MAIN_TIMER_INT_CLR_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_CLR field.
	RTC_CNTL_INT_CLR_MAIN_TIMER_INT_CLR_Msk = 0x100
	// Bit MAIN_TIMER_INT_CLR.
	RTC_CNTL_INT_CLR_MAIN_TIMER_INT_CLR = 0x100

	// STORE0
	// Position of SCRATCH0 field.
	RTC_CNTL_STORE0_SCRATCH0_Pos = 0x0
	// Bit mask of SCRATCH0 field.
	RTC_CNTL_STORE0_SCRATCH0_Msk = 0xffffffff

	// STORE1
	// Position of SCRATCH1 field.
	RTC_CNTL_STORE1_SCRATCH1_Pos = 0x0
	// Bit mask of SCRATCH1 field.
	RTC_CNTL_STORE1_SCRATCH1_Msk = 0xffffffff

	// STORE2
	// Position of SCRATCH2 field.
	RTC_CNTL_STORE2_SCRATCH2_Pos = 0x0
	// Bit mask of SCRATCH2 field.
	RTC_CNTL_STORE2_SCRATCH2_Msk = 0xffffffff

	// STORE3
	// Position of SCRATCH3 field.
	RTC_CNTL_STORE3_SCRATCH3_Pos = 0x0
	// Bit mask of SCRATCH3 field.
	RTC_CNTL_STORE3_SCRATCH3_Msk = 0xffffffff

	// EXT_XTL_CONF
	// Position of XTL_EXT_CTR_LV field.
	RTC_CNTL_EXT_XTL_CONF_XTL_EXT_CTR_LV_Pos = 0x1e
	// Bit mask of XTL_EXT_CTR_LV field.
	RTC_CNTL_EXT_XTL_CONF_XTL_EXT_CTR_LV_Msk = 0x40000000
	// Bit XTL_EXT_CTR_LV.
	RTC_CNTL_EXT_XTL_CONF_XTL_EXT_CTR_LV = 0x40000000
	// Position of XTL_EXT_CTR_EN field.
	RTC_CNTL_EXT_XTL_CONF_XTL_EXT_CTR_EN_Pos = 0x1f
	// Bit mask of XTL_EXT_CTR_EN field.
	RTC_CNTL_EXT_XTL_CONF_XTL_EXT_CTR_EN_Msk = 0x80000000
	// Bit XTL_EXT_CTR_EN.
	RTC_CNTL_EXT_XTL_CONF_XTL_EXT_CTR_EN = 0x80000000

	// EXT_WAKEUP_CONF
	// Position of EXT_WAKEUP0_LV field.
	RTC_CNTL_EXT_WAKEUP_CONF_EXT_WAKEUP0_LV_Pos = 0x1e
	// Bit mask of EXT_WAKEUP0_LV field.
	RTC_CNTL_EXT_WAKEUP_CONF_EXT_WAKEUP0_LV_Msk = 0x40000000
	// Bit EXT_WAKEUP0_LV.
	RTC_CNTL_EXT_WAKEUP_CONF_EXT_WAKEUP0_LV = 0x40000000
	// Position of EXT_WAKEUP1_LV field.
	RTC_CNTL_EXT_WAKEUP_CONF_EXT_WAKEUP1_LV_Pos = 0x1f
	// Bit mask of EXT_WAKEUP1_LV field.
	RTC_CNTL_EXT_WAKEUP_CONF_EXT_WAKEUP1_LV_Msk = 0x80000000
	// Bit EXT_WAKEUP1_LV.
	RTC_CNTL_EXT_WAKEUP_CONF_EXT_WAKEUP1_LV = 0x80000000

	// SLP_REJECT_CONF
	// Position of GPIO_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_GPIO_REJECT_EN_Pos = 0x18
	// Bit mask of GPIO_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_GPIO_REJECT_EN_Msk = 0x1000000
	// Bit GPIO_REJECT_EN.
	RTC_CNTL_SLP_REJECT_CONF_GPIO_REJECT_EN = 0x1000000
	// Position of SDIO_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_SDIO_REJECT_EN_Pos = 0x19
	// Bit mask of SDIO_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_SDIO_REJECT_EN_Msk = 0x2000000
	// Bit SDIO_REJECT_EN.
	RTC_CNTL_SLP_REJECT_CONF_SDIO_REJECT_EN = 0x2000000
	// Position of LIGHT_SLP_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_LIGHT_SLP_REJECT_EN_Pos = 0x1a
	// Bit mask of LIGHT_SLP_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_LIGHT_SLP_REJECT_EN_Msk = 0x4000000
	// Bit LIGHT_SLP_REJECT_EN.
	RTC_CNTL_SLP_REJECT_CONF_LIGHT_SLP_REJECT_EN = 0x4000000
	// Position of DEEP_SLP_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_DEEP_SLP_REJECT_EN_Pos = 0x1b
	// Bit mask of DEEP_SLP_REJECT_EN field.
	RTC_CNTL_SLP_REJECT_CONF_DEEP_SLP_REJECT_EN_Msk = 0x8000000
	// Bit DEEP_SLP_REJECT_EN.
	RTC_CNTL_SLP_REJECT_CONF_DEEP_SLP_REJECT_EN = 0x8000000
	// Position of REJECT_CAUSE field.
	RTC_CNTL_SLP_REJECT_CONF_REJECT_CAUSE_Pos = 0x1c
	// Bit mask of REJECT_CAUSE field.
	RTC_CNTL_SLP_REJECT_CONF_REJECT_CAUSE_Msk = 0xf0000000

	// CPU_PERIOD_CONF
	// Position of CPUSEL_CONF field.
	RTC_CNTL_CPU_PERIOD_CONF_CPUSEL_CONF_Pos = 0x1d
	// Bit mask of CPUSEL_CONF field.
	RTC_CNTL_CPU_PERIOD_CONF_CPUSEL_CONF_Msk = 0x20000000
	// Bit CPUSEL_CONF.
	RTC_CNTL_CPU_PERIOD_CONF_CPUSEL_CONF = 0x20000000
	// Position of CPUPERIOD_SEL field.
	RTC_CNTL_CPU_PERIOD_CONF_CPUPERIOD_SEL_Pos = 0x1e
	// Bit mask of CPUPERIOD_SEL field.
	RTC_CNTL_CPU_PERIOD_CONF_CPUPERIOD_SEL_Msk = 0xc0000000

	// SDIO_ACT_CONF
	// Position of SDIO_ACT_DNUM field.
	RTC_CNTL_SDIO_ACT_CONF_SDIO_ACT_DNUM_Pos = 0x16
	// Bit mask of SDIO_ACT_DNUM field.
	RTC_CNTL_SDIO_ACT_CONF_SDIO_ACT_DNUM_Msk = 0xffc00000

	// CLK_CONF
	// Position of CK8M_DIV field.
	RTC_CNTL_CLK_CONF_CK8M_DIV_Pos = 0x4
	// Bit mask of CK8M_DIV field.
	RTC_CNTL_CLK_CONF_CK8M_DIV_Msk = 0x30
	// DIV128
	RTC_CNTL_CLK_CONF_CK8M_DIV_DIV128 = 0x0
	// DIV256
	RTC_CNTL_CLK_CONF_CK8M_DIV_DIV256 = 0x1
	// DIV512
	RTC_CNTL_CLK_CONF_CK8M_DIV_DIV512 = 0x2
	// DIV1024
	RTC_CNTL_CLK_CONF_CK8M_DIV_DIV1024 = 0x3
	// Position of ENB_CK8M field.
	RTC_CNTL_CLK_CONF_ENB_CK8M_Pos = 0x6
	// Bit mask of ENB_CK8M field.
	RTC_CNTL_CLK_CONF_ENB_CK8M_Msk = 0x40
	// Bit ENB_CK8M.
	RTC_CNTL_CLK_CONF_ENB_CK8M = 0x40
	// Position of ENB_CK8M_DIV field.
	RTC_CNTL_CLK_CONF_ENB_CK8M_DIV_Pos = 0x7
	// Bit mask of ENB_CK8M_DIV field.
	RTC_CNTL_CLK_CONF_ENB_CK8M_DIV_Msk = 0x80
	// Bit ENB_CK8M_DIV.
	RTC_CNTL_CLK_CONF_ENB_CK8M_DIV = 0x80
	// CK8M_DIV_256
	RTC_CNTL_CLK_CONF_ENB_CK8M_DIV_CK8M_DIV_256 = 0x0
	// CK8M
	RTC_CNTL_CLK_CONF_ENB_CK8M_DIV_CK8M = 0x1
	// Position of DIG_XTAL32K_EN field.
	RTC_CNTL_CLK_CONF_DIG_XTAL32K_EN_Pos = 0x8
	// Bit mask of DIG_XTAL32K_EN field.
	RTC_CNTL_CLK_CONF_DIG_XTAL32K_EN_Msk = 0x100
	// Bit DIG_XTAL32K_EN.
	RTC_CNTL_CLK_CONF_DIG_XTAL32K_EN = 0x100
	// Position of DIG_CLK8M_D256_EN field.
	RTC_CNTL_CLK_CONF_DIG_CLK8M_D256_EN_Pos = 0x9
	// Bit mask of DIG_CLK8M_D256_EN field.
	RTC_CNTL_CLK_CONF_DIG_CLK8M_D256_EN_Msk = 0x200
	// Bit DIG_CLK8M_D256_EN.
	RTC_CNTL_CLK_CONF_DIG_CLK8M_D256_EN = 0x200
	// Position of DIG_CLK8M_EN field.
	RTC_CNTL_CLK_CONF_DIG_CLK8M_EN_Pos = 0xa
	// Bit mask of DIG_CLK8M_EN field.
	RTC_CNTL_CLK_CONF_DIG_CLK8M_EN_Msk = 0x400
	// Bit DIG_CLK8M_EN.
	RTC_CNTL_CLK_CONF_DIG_CLK8M_EN = 0x400
	// Position of CK8M_DFREQ_FORCE field.
	RTC_CNTL_CLK_CONF_CK8M_DFREQ_FORCE_Pos = 0xb
	// Bit mask of CK8M_DFREQ_FORCE field.
	RTC_CNTL_CLK_CONF_CK8M_DFREQ_FORCE_Msk = 0x800
	// Bit CK8M_DFREQ_FORCE.
	RTC_CNTL_CLK_CONF_CK8M_DFREQ_FORCE = 0x800
	// Position of CK8M_DIV_SEL field.
	RTC_CNTL_CLK_CONF_CK8M_DIV_SEL_Pos = 0xc
	// Bit mask of CK8M_DIV_SEL field.
	RTC_CNTL_CLK_CONF_CK8M_DIV_SEL_Msk = 0x7000
	// Position of XTAL_FORCE_NOGATING field.
	RTC_CNTL_CLK_CONF_XTAL_FORCE_NOGATING_Pos = 0xf
	// Bit mask of XTAL_FORCE_NOGATING field.
	RTC_CNTL_CLK_CONF_XTAL_FORCE_NOGATING_Msk = 0x8000
	// Bit XTAL_FORCE_NOGATING.
	RTC_CNTL_CLK_CONF_XTAL_FORCE_NOGATING = 0x8000
	// Position of CK8M_FORCE_NOGATING field.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_NOGATING_Pos = 0x10
	// Bit mask of CK8M_FORCE_NOGATING field.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_NOGATING_Msk = 0x10000
	// Bit CK8M_FORCE_NOGATING.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_NOGATING = 0x10000
	// Position of CK8M_DFREQ field.
	RTC_CNTL_CLK_CONF_CK8M_DFREQ_Pos = 0x11
	// Bit mask of CK8M_DFREQ field.
	RTC_CNTL_CLK_CONF_CK8M_DFREQ_Msk = 0x1fe0000
	// Position of CK8M_FORCE_PD field.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_PD_Pos = 0x19
	// Bit mask of CK8M_FORCE_PD field.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_PD_Msk = 0x2000000
	// Bit CK8M_FORCE_PD.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_PD = 0x2000000
	// Position of CK8M_FORCE_PU field.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_PU_Pos = 0x1a
	// Bit mask of CK8M_FORCE_PU field.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_PU_Msk = 0x4000000
	// Bit CK8M_FORCE_PU.
	RTC_CNTL_CLK_CONF_CK8M_FORCE_PU = 0x4000000
	// Position of SOC_CLK_SEL field.
	RTC_CNTL_CLK_CONF_SOC_CLK_SEL_Pos = 0x1b
	// Bit mask of SOC_CLK_SEL field.
	RTC_CNTL_CLK_CONF_SOC_CLK_SEL_Msk = 0x18000000
	// XTAL
	RTC_CNTL_CLK_CONF_SOC_CLK_SEL_XTAL = 0x0
	// PLL
	RTC_CNTL_CLK_CONF_SOC_CLK_SEL_PLL = 0x1
	// CK8M
	RTC_CNTL_CLK_CONF_SOC_CLK_SEL_CK8M = 0x2
	// APLL
	RTC_CNTL_CLK_CONF_SOC_CLK_SEL_APLL = 0x3
	// Position of FAST_CLK_RTC_SEL field.
	RTC_CNTL_CLK_CONF_FAST_CLK_RTC_SEL_Pos = 0x1d
	// Bit mask of FAST_CLK_RTC_SEL field.
	RTC_CNTL_CLK_CONF_FAST_CLK_RTC_SEL_Msk = 0x20000000
	// Bit FAST_CLK_RTC_SEL.
	RTC_CNTL_CLK_CONF_FAST_CLK_RTC_SEL = 0x20000000
	// XTAL_DIV_4
	RTC_CNTL_CLK_CONF_FAST_CLK_RTC_SEL_XTAL_DIV_4 = 0x0
	// CK8M
	RTC_CNTL_CLK_CONF_FAST_CLK_RTC_SEL_CK8M = 0x1
	// Position of ANA_CLK_RTC_SEL field.
	RTC_CNTL_CLK_CONF_ANA_CLK_RTC_SEL_Pos = 0x1e
	// Bit mask of ANA_CLK_RTC_SEL field.
	RTC_CNTL_CLK_CONF_ANA_CLK_RTC_SEL_Msk = 0xc0000000
	// SLOW_CK
	RTC_CNTL_CLK_CONF_ANA_CLK_RTC_SEL_SLOW_CK = 0x0
	// CK_XTAL_32K
	RTC_CNTL_CLK_CONF_ANA_CLK_RTC_SEL_CK_XTAL_32K = 0x1
	// CK8M_D256_OUT
	RTC_CNTL_CLK_CONF_ANA_CLK_RTC_SEL_CK8M_D256_OUT = 0x2

	// SDIO_CONF
	// Position of SDIO_PD_EN field.
	RTC_CNTL_SDIO_CONF_SDIO_PD_EN_Pos = 0x15
	// Bit mask of SDIO_PD_EN field.
	RTC_CNTL_SDIO_CONF_SDIO_PD_EN_Msk = 0x200000
	// Bit SDIO_PD_EN.
	RTC_CNTL_SDIO_CONF_SDIO_PD_EN = 0x200000
	// Position of SDIO_FORCE field.
	RTC_CNTL_SDIO_CONF_SDIO_FORCE_Pos = 0x16
	// Bit mask of SDIO_FORCE field.
	RTC_CNTL_SDIO_CONF_SDIO_FORCE_Msk = 0x400000
	// Bit SDIO_FORCE.
	RTC_CNTL_SDIO_CONF_SDIO_FORCE = 0x400000
	// Position of SDIO_TIEH field.
	RTC_CNTL_SDIO_CONF_SDIO_TIEH_Pos = 0x17
	// Bit mask of SDIO_TIEH field.
	RTC_CNTL_SDIO_CONF_SDIO_TIEH_Msk = 0x800000
	// Bit SDIO_TIEH.
	RTC_CNTL_SDIO_CONF_SDIO_TIEH = 0x800000
	// Position of REG1P8_READY field.
	RTC_CNTL_SDIO_CONF_REG1P8_READY_Pos = 0x18
	// Bit mask of REG1P8_READY field.
	RTC_CNTL_SDIO_CONF_REG1P8_READY_Msk = 0x1000000
	// Bit REG1P8_READY.
	RTC_CNTL_SDIO_CONF_REG1P8_READY = 0x1000000
	// Position of DREFL_SDIO field.
	RTC_CNTL_SDIO_CONF_DREFL_SDIO_Pos = 0x19
	// Bit mask of DREFL_SDIO field.
	RTC_CNTL_SDIO_CONF_DREFL_SDIO_Msk = 0x6000000
	// Position of DREFM_SDIO field.
	RTC_CNTL_SDIO_CONF_DREFM_SDIO_Pos = 0x1b
	// Bit mask of DREFM_SDIO field.
	RTC_CNTL_SDIO_CONF_DREFM_SDIO_Msk = 0x18000000
	// Position of DREFH_SDIO field.
	RTC_CNTL_SDIO_CONF_DREFH_SDIO_Pos = 0x1d
	// Bit mask of DREFH_SDIO field.
	RTC_CNTL_SDIO_CONF_DREFH_SDIO_Msk = 0x60000000
	// Position of XPD_SDIO field.
	RTC_CNTL_SDIO_CONF_XPD_SDIO_Pos = 0x1f
	// Bit mask of XPD_SDIO field.
	RTC_CNTL_SDIO_CONF_XPD_SDIO_Msk = 0x80000000
	// Bit XPD_SDIO.
	RTC_CNTL_SDIO_CONF_XPD_SDIO = 0x80000000

	// BIAS_CONF
	// Position of DBG_ATTEN field.
	RTC_CNTL_BIAS_CONF_DBG_ATTEN_Pos = 0x18
	// Bit mask of DBG_ATTEN field.
	RTC_CNTL_BIAS_CONF_DBG_ATTEN_Msk = 0x3000000
	// Position of ENB_SCK_XTAL field.
	RTC_CNTL_BIAS_CONF_ENB_SCK_XTAL_Pos = 0x1a
	// Bit mask of ENB_SCK_XTAL field.
	RTC_CNTL_BIAS_CONF_ENB_SCK_XTAL_Msk = 0x4000000
	// Bit ENB_SCK_XTAL.
	RTC_CNTL_BIAS_CONF_ENB_SCK_XTAL = 0x4000000
	// Position of INC_HEARTBEAT_REFRESH field.
	RTC_CNTL_BIAS_CONF_INC_HEARTBEAT_REFRESH_Pos = 0x1b
	// Bit mask of INC_HEARTBEAT_REFRESH field.
	RTC_CNTL_BIAS_CONF_INC_HEARTBEAT_REFRESH_Msk = 0x8000000
	// Bit INC_HEARTBEAT_REFRESH.
	RTC_CNTL_BIAS_CONF_INC_HEARTBEAT_REFRESH = 0x8000000
	// Position of DEC_HEARTBEAT_PERIOD field.
	RTC_CNTL_BIAS_CONF_DEC_HEARTBEAT_PERIOD_Pos = 0x1c
	// Bit mask of DEC_HEARTBEAT_PERIOD field.
	RTC_CNTL_BIAS_CONF_DEC_HEARTBEAT_PERIOD_Msk = 0x10000000
	// Bit DEC_HEARTBEAT_PERIOD.
	RTC_CNTL_BIAS_CONF_DEC_HEARTBEAT_PERIOD = 0x10000000
	// Position of INC_HEARTBEAT_PERIOD field.
	RTC_CNTL_BIAS_CONF_INC_HEARTBEAT_PERIOD_Pos = 0x1d
	// Bit mask of INC_HEARTBEAT_PERIOD field.
	RTC_CNTL_BIAS_CONF_INC_HEARTBEAT_PERIOD_Msk = 0x20000000
	// Bit INC_HEARTBEAT_PERIOD.
	RTC_CNTL_BIAS_CONF_INC_HEARTBEAT_PERIOD = 0x20000000
	// Position of DEC_HEARTBEAT_WIDTH field.
	RTC_CNTL_BIAS_CONF_DEC_HEARTBEAT_WIDTH_Pos = 0x1e
	// Bit mask of DEC_HEARTBEAT_WIDTH field.
	RTC_CNTL_BIAS_CONF_DEC_HEARTBEAT_WIDTH_Msk = 0x40000000
	// Bit DEC_HEARTBEAT_WIDTH.
	RTC_CNTL_BIAS_CONF_DEC_HEARTBEAT_WIDTH = 0x40000000
	// Position of RST_BIAS_I2C field.
	RTC_CNTL_BIAS_CONF_RST_BIAS_I2C_Pos = 0x1f
	// Bit mask of RST_BIAS_I2C field.
	RTC_CNTL_BIAS_CONF_RST_BIAS_I2C_Msk = 0x80000000
	// Bit RST_BIAS_I2C.
	RTC_CNTL_BIAS_CONF_RST_BIAS_I2C = 0x80000000

	// REG
	// Position of SCK_DCAP_FORCE field.
	RTC_CNTL_REG_SCK_DCAP_FORCE_Pos = 0x7
	// Bit mask of SCK_DCAP_FORCE field.
	RTC_CNTL_REG_SCK_DCAP_FORCE_Msk = 0x80
	// Bit SCK_DCAP_FORCE.
	RTC_CNTL_REG_SCK_DCAP_FORCE = 0x80
	// Position of DIG_DBIAS_SLP field.
	RTC_CNTL_REG_DIG_DBIAS_SLP_Pos = 0x8
	// Bit mask of DIG_DBIAS_SLP field.
	RTC_CNTL_REG_DIG_DBIAS_SLP_Msk = 0x700
	// Position of DIG_DBIAS_WAK field.
	RTC_CNTL_REG_DIG_DBIAS_WAK_Pos = 0xb
	// Bit mask of DIG_DBIAS_WAK field.
	RTC_CNTL_REG_DIG_DBIAS_WAK_Msk = 0x3800
	// Position of SCK_DCAP field.
	RTC_CNTL_REG_SCK_DCAP_Pos = 0xe
	// Bit mask of SCK_DCAP field.
	RTC_CNTL_REG_SCK_DCAP_Msk = 0x3fc000
	// Position of DBIAS_SLP field.
	RTC_CNTL_REG_DBIAS_SLP_Pos = 0x16
	// Bit mask of DBIAS_SLP field.
	RTC_CNTL_REG_DBIAS_SLP_Msk = 0x1c00000
	// Position of DBIAS_WAK field.
	RTC_CNTL_REG_DBIAS_WAK_Pos = 0x19
	// Bit mask of DBIAS_WAK field.
	RTC_CNTL_REG_DBIAS_WAK_Msk = 0xe000000
	// Position of DBOOST_FORCE_PD field.
	RTC_CNTL_REG_DBOOST_FORCE_PD_Pos = 0x1c
	// Bit mask of DBOOST_FORCE_PD field.
	RTC_CNTL_REG_DBOOST_FORCE_PD_Msk = 0x10000000
	// Bit DBOOST_FORCE_PD.
	RTC_CNTL_REG_DBOOST_FORCE_PD = 0x10000000
	// Position of DBOOST_FORCE_PU field.
	RTC_CNTL_REG_DBOOST_FORCE_PU_Pos = 0x1d
	// Bit mask of DBOOST_FORCE_PU field.
	RTC_CNTL_REG_DBOOST_FORCE_PU_Msk = 0x20000000
	// Bit DBOOST_FORCE_PU.
	RTC_CNTL_REG_DBOOST_FORCE_PU = 0x20000000
	// Position of FORCE_PD field.
	RTC_CNTL_REG_FORCE_PD_Pos = 0x1e
	// Bit mask of FORCE_PD field.
	RTC_CNTL_REG_FORCE_PD_Msk = 0x40000000
	// Bit FORCE_PD.
	RTC_CNTL_REG_FORCE_PD = 0x40000000
	// Position of FORCE_PU field.
	RTC_CNTL_REG_FORCE_PU_Pos = 0x1f
	// Bit mask of FORCE_PU field.
	RTC_CNTL_REG_FORCE_PU_Msk = 0x80000000
	// Bit FORCE_PU.
	RTC_CNTL_REG_FORCE_PU = 0x80000000

	// PWC
	// Position of FASTMEM_FORCE_NOISO field.
	RTC_CNTL_PWC_FASTMEM_FORCE_NOISO_Pos = 0x0
	// Bit mask of FASTMEM_FORCE_NOISO field.
	RTC_CNTL_PWC_FASTMEM_FORCE_NOISO_Msk = 0x1
	// Bit FASTMEM_FORCE_NOISO.
	RTC_CNTL_PWC_FASTMEM_FORCE_NOISO = 0x1
	// Position of FASTMEM_FORCE_ISO field.
	RTC_CNTL_PWC_FASTMEM_FORCE_ISO_Pos = 0x1
	// Bit mask of FASTMEM_FORCE_ISO field.
	RTC_CNTL_PWC_FASTMEM_FORCE_ISO_Msk = 0x2
	// Bit FASTMEM_FORCE_ISO.
	RTC_CNTL_PWC_FASTMEM_FORCE_ISO = 0x2
	// Position of SLOWMEM_FORCE_NOISO field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_NOISO_Pos = 0x2
	// Bit mask of SLOWMEM_FORCE_NOISO field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_NOISO_Msk = 0x4
	// Bit SLOWMEM_FORCE_NOISO.
	RTC_CNTL_PWC_SLOWMEM_FORCE_NOISO = 0x4
	// Position of SLOWMEM_FORCE_ISO field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_ISO_Pos = 0x3
	// Bit mask of SLOWMEM_FORCE_ISO field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_ISO_Msk = 0x8
	// Bit SLOWMEM_FORCE_ISO.
	RTC_CNTL_PWC_SLOWMEM_FORCE_ISO = 0x8
	// Position of FORCE_ISO field.
	RTC_CNTL_PWC_FORCE_ISO_Pos = 0x4
	// Bit mask of FORCE_ISO field.
	RTC_CNTL_PWC_FORCE_ISO_Msk = 0x10
	// Bit FORCE_ISO.
	RTC_CNTL_PWC_FORCE_ISO = 0x10
	// Position of FORCE_NOISO field.
	RTC_CNTL_PWC_FORCE_NOISO_Pos = 0x5
	// Bit mask of FORCE_NOISO field.
	RTC_CNTL_PWC_FORCE_NOISO_Msk = 0x20
	// Bit FORCE_NOISO.
	RTC_CNTL_PWC_FORCE_NOISO = 0x20
	// Position of FASTMEM_FOLW_CPU field.
	RTC_CNTL_PWC_FASTMEM_FOLW_CPU_Pos = 0x6
	// Bit mask of FASTMEM_FOLW_CPU field.
	RTC_CNTL_PWC_FASTMEM_FOLW_CPU_Msk = 0x40
	// Bit FASTMEM_FOLW_CPU.
	RTC_CNTL_PWC_FASTMEM_FOLW_CPU = 0x40
	// Position of FASTMEM_FORCE_LPD field.
	RTC_CNTL_PWC_FASTMEM_FORCE_LPD_Pos = 0x7
	// Bit mask of FASTMEM_FORCE_LPD field.
	RTC_CNTL_PWC_FASTMEM_FORCE_LPD_Msk = 0x80
	// Bit FASTMEM_FORCE_LPD.
	RTC_CNTL_PWC_FASTMEM_FORCE_LPD = 0x80
	// Position of FASTMEM_FORCE_LPU field.
	RTC_CNTL_PWC_FASTMEM_FORCE_LPU_Pos = 0x8
	// Bit mask of FASTMEM_FORCE_LPU field.
	RTC_CNTL_PWC_FASTMEM_FORCE_LPU_Msk = 0x100
	// Bit FASTMEM_FORCE_LPU.
	RTC_CNTL_PWC_FASTMEM_FORCE_LPU = 0x100
	// Position of SLOWMEM_FOLW_CPU field.
	RTC_CNTL_PWC_SLOWMEM_FOLW_CPU_Pos = 0x9
	// Bit mask of SLOWMEM_FOLW_CPU field.
	RTC_CNTL_PWC_SLOWMEM_FOLW_CPU_Msk = 0x200
	// Bit SLOWMEM_FOLW_CPU.
	RTC_CNTL_PWC_SLOWMEM_FOLW_CPU = 0x200
	// Position of SLOWMEM_FORCE_LPD field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_LPD_Pos = 0xa
	// Bit mask of SLOWMEM_FORCE_LPD field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_LPD_Msk = 0x400
	// Bit SLOWMEM_FORCE_LPD.
	RTC_CNTL_PWC_SLOWMEM_FORCE_LPD = 0x400
	// Position of SLOWMEM_FORCE_LPU field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_LPU_Pos = 0xb
	// Bit mask of SLOWMEM_FORCE_LPU field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_LPU_Msk = 0x800
	// Bit SLOWMEM_FORCE_LPU.
	RTC_CNTL_PWC_SLOWMEM_FORCE_LPU = 0x800
	// Position of FASTMEM_FORCE_PD field.
	RTC_CNTL_PWC_FASTMEM_FORCE_PD_Pos = 0xc
	// Bit mask of FASTMEM_FORCE_PD field.
	RTC_CNTL_PWC_FASTMEM_FORCE_PD_Msk = 0x1000
	// Bit FASTMEM_FORCE_PD.
	RTC_CNTL_PWC_FASTMEM_FORCE_PD = 0x1000
	// Position of FASTMEM_FORCE_PU field.
	RTC_CNTL_PWC_FASTMEM_FORCE_PU_Pos = 0xd
	// Bit mask of FASTMEM_FORCE_PU field.
	RTC_CNTL_PWC_FASTMEM_FORCE_PU_Msk = 0x2000
	// Bit FASTMEM_FORCE_PU.
	RTC_CNTL_PWC_FASTMEM_FORCE_PU = 0x2000
	// Position of FASTMEM_PD_EN field.
	RTC_CNTL_PWC_FASTMEM_PD_EN_Pos = 0xe
	// Bit mask of FASTMEM_PD_EN field.
	RTC_CNTL_PWC_FASTMEM_PD_EN_Msk = 0x4000
	// Bit FASTMEM_PD_EN.
	RTC_CNTL_PWC_FASTMEM_PD_EN = 0x4000
	// Position of SLOWMEM_FORCE_PD field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_PD_Pos = 0xf
	// Bit mask of SLOWMEM_FORCE_PD field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_PD_Msk = 0x8000
	// Bit SLOWMEM_FORCE_PD.
	RTC_CNTL_PWC_SLOWMEM_FORCE_PD = 0x8000
	// Position of SLOWMEM_FORCE_PU field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_PU_Pos = 0x10
	// Bit mask of SLOWMEM_FORCE_PU field.
	RTC_CNTL_PWC_SLOWMEM_FORCE_PU_Msk = 0x10000
	// Bit SLOWMEM_FORCE_PU.
	RTC_CNTL_PWC_SLOWMEM_FORCE_PU = 0x10000
	// Position of SLOWMEM_PD_EN field.
	RTC_CNTL_PWC_SLOWMEM_PD_EN_Pos = 0x11
	// Bit mask of SLOWMEM_PD_EN field.
	RTC_CNTL_PWC_SLOWMEM_PD_EN_Msk = 0x20000
	// Bit SLOWMEM_PD_EN.
	RTC_CNTL_PWC_SLOWMEM_PD_EN = 0x20000
	// Position of FORCE_PD field.
	RTC_CNTL_PWC_FORCE_PD_Pos = 0x12
	// Bit mask of FORCE_PD field.
	RTC_CNTL_PWC_FORCE_PD_Msk = 0x40000
	// Bit FORCE_PD.
	RTC_CNTL_PWC_FORCE_PD = 0x40000
	// Position of FORCE_PU field.
	RTC_CNTL_PWC_FORCE_PU_Pos = 0x13
	// Bit mask of FORCE_PU field.
	RTC_CNTL_PWC_FORCE_PU_Msk = 0x80000
	// Bit FORCE_PU.
	RTC_CNTL_PWC_FORCE_PU = 0x80000
	// Position of PD_EN field.
	RTC_CNTL_PWC_PD_EN_Pos = 0x14
	// Bit mask of PD_EN field.
	RTC_CNTL_PWC_PD_EN_Msk = 0x100000
	// Bit PD_EN.
	RTC_CNTL_PWC_PD_EN = 0x100000

	// DIG_PWC
	// Position of LSLP_MEM_FORCE_PD field.
	RTC_CNTL_DIG_PWC_LSLP_MEM_FORCE_PD_Pos = 0x3
	// Bit mask of LSLP_MEM_FORCE_PD field.
	RTC_CNTL_DIG_PWC_LSLP_MEM_FORCE_PD_Msk = 0x8
	// Bit LSLP_MEM_FORCE_PD.
	RTC_CNTL_DIG_PWC_LSLP_MEM_FORCE_PD = 0x8
	// Position of LSLP_MEM_FORCE_PU field.
	RTC_CNTL_DIG_PWC_LSLP_MEM_FORCE_PU_Pos = 0x4
	// Bit mask of LSLP_MEM_FORCE_PU field.
	RTC_CNTL_DIG_PWC_LSLP_MEM_FORCE_PU_Msk = 0x10
	// Bit LSLP_MEM_FORCE_PU.
	RTC_CNTL_DIG_PWC_LSLP_MEM_FORCE_PU = 0x10
	// Position of ROM0_FORCE_PD field.
	RTC_CNTL_DIG_PWC_ROM0_FORCE_PD_Pos = 0x5
	// Bit mask of ROM0_FORCE_PD field.
	RTC_CNTL_DIG_PWC_ROM0_FORCE_PD_Msk = 0x20
	// Bit ROM0_FORCE_PD.
	RTC_CNTL_DIG_PWC_ROM0_FORCE_PD = 0x20
	// Position of ROM0_FORCE_PU field.
	RTC_CNTL_DIG_PWC_ROM0_FORCE_PU_Pos = 0x6
	// Bit mask of ROM0_FORCE_PU field.
	RTC_CNTL_DIG_PWC_ROM0_FORCE_PU_Msk = 0x40
	// Bit ROM0_FORCE_PU.
	RTC_CNTL_DIG_PWC_ROM0_FORCE_PU = 0x40
	// Position of INTER_RAM0_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM0_FORCE_PD_Pos = 0x7
	// Bit mask of INTER_RAM0_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM0_FORCE_PD_Msk = 0x80
	// Bit INTER_RAM0_FORCE_PD.
	RTC_CNTL_DIG_PWC_INTER_RAM0_FORCE_PD = 0x80
	// Position of INTER_RAM0_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM0_FORCE_PU_Pos = 0x8
	// Bit mask of INTER_RAM0_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM0_FORCE_PU_Msk = 0x100
	// Bit INTER_RAM0_FORCE_PU.
	RTC_CNTL_DIG_PWC_INTER_RAM0_FORCE_PU = 0x100
	// Position of INTER_RAM1_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM1_FORCE_PD_Pos = 0x9
	// Bit mask of INTER_RAM1_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM1_FORCE_PD_Msk = 0x200
	// Bit INTER_RAM1_FORCE_PD.
	RTC_CNTL_DIG_PWC_INTER_RAM1_FORCE_PD = 0x200
	// Position of INTER_RAM1_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM1_FORCE_PU_Pos = 0xa
	// Bit mask of INTER_RAM1_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM1_FORCE_PU_Msk = 0x400
	// Bit INTER_RAM1_FORCE_PU.
	RTC_CNTL_DIG_PWC_INTER_RAM1_FORCE_PU = 0x400
	// Position of INTER_RAM2_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM2_FORCE_PD_Pos = 0xb
	// Bit mask of INTER_RAM2_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM2_FORCE_PD_Msk = 0x800
	// Bit INTER_RAM2_FORCE_PD.
	RTC_CNTL_DIG_PWC_INTER_RAM2_FORCE_PD = 0x800
	// Position of INTER_RAM2_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM2_FORCE_PU_Pos = 0xc
	// Bit mask of INTER_RAM2_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM2_FORCE_PU_Msk = 0x1000
	// Bit INTER_RAM2_FORCE_PU.
	RTC_CNTL_DIG_PWC_INTER_RAM2_FORCE_PU = 0x1000
	// Position of INTER_RAM3_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM3_FORCE_PD_Pos = 0xd
	// Bit mask of INTER_RAM3_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM3_FORCE_PD_Msk = 0x2000
	// Bit INTER_RAM3_FORCE_PD.
	RTC_CNTL_DIG_PWC_INTER_RAM3_FORCE_PD = 0x2000
	// Position of INTER_RAM3_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM3_FORCE_PU_Pos = 0xe
	// Bit mask of INTER_RAM3_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM3_FORCE_PU_Msk = 0x4000
	// Bit INTER_RAM3_FORCE_PU.
	RTC_CNTL_DIG_PWC_INTER_RAM3_FORCE_PU = 0x4000
	// Position of INTER_RAM4_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM4_FORCE_PD_Pos = 0xf
	// Bit mask of INTER_RAM4_FORCE_PD field.
	RTC_CNTL_DIG_PWC_INTER_RAM4_FORCE_PD_Msk = 0x8000
	// Bit INTER_RAM4_FORCE_PD.
	RTC_CNTL_DIG_PWC_INTER_RAM4_FORCE_PD = 0x8000
	// Position of INTER_RAM4_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM4_FORCE_PU_Pos = 0x10
	// Bit mask of INTER_RAM4_FORCE_PU field.
	RTC_CNTL_DIG_PWC_INTER_RAM4_FORCE_PU_Msk = 0x10000
	// Bit INTER_RAM4_FORCE_PU.
	RTC_CNTL_DIG_PWC_INTER_RAM4_FORCE_PU = 0x10000
	// Position of WIFI_FORCE_PD field.
	RTC_CNTL_DIG_PWC_WIFI_FORCE_PD_Pos = 0x11
	// Bit mask of WIFI_FORCE_PD field.
	RTC_CNTL_DIG_PWC_WIFI_FORCE_PD_Msk = 0x20000
	// Bit WIFI_FORCE_PD.
	RTC_CNTL_DIG_PWC_WIFI_FORCE_PD = 0x20000
	// Position of WIFI_FORCE_PU field.
	RTC_CNTL_DIG_PWC_WIFI_FORCE_PU_Pos = 0x12
	// Bit mask of WIFI_FORCE_PU field.
	RTC_CNTL_DIG_PWC_WIFI_FORCE_PU_Msk = 0x40000
	// Bit WIFI_FORCE_PU.
	RTC_CNTL_DIG_PWC_WIFI_FORCE_PU = 0x40000
	// Position of DG_WRAP_FORCE_PD field.
	RTC_CNTL_DIG_PWC_DG_WRAP_FORCE_PD_Pos = 0x13
	// Bit mask of DG_WRAP_FORCE_PD field.
	RTC_CNTL_DIG_PWC_DG_WRAP_FORCE_PD_Msk = 0x80000
	// Bit DG_WRAP_FORCE_PD.
	RTC_CNTL_DIG_PWC_DG_WRAP_FORCE_PD = 0x80000
	// Position of DG_WRAP_FORCE_PU field.
	RTC_CNTL_DIG_PWC_DG_WRAP_FORCE_PU_Pos = 0x14
	// Bit mask of DG_WRAP_FORCE_PU field.
	RTC_CNTL_DIG_PWC_DG_WRAP_FORCE_PU_Msk = 0x100000
	// Bit DG_WRAP_FORCE_PU.
	RTC_CNTL_DIG_PWC_DG_WRAP_FORCE_PU = 0x100000
	// Position of ROM0_PD_EN field.
	RTC_CNTL_DIG_PWC_ROM0_PD_EN_Pos = 0x18
	// Bit mask of ROM0_PD_EN field.
	RTC_CNTL_DIG_PWC_ROM0_PD_EN_Msk = 0x1000000
	// Bit ROM0_PD_EN.
	RTC_CNTL_DIG_PWC_ROM0_PD_EN = 0x1000000
	// Position of INTER_RAM0_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM0_PD_EN_Pos = 0x19
	// Bit mask of INTER_RAM0_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM0_PD_EN_Msk = 0x2000000
	// Bit INTER_RAM0_PD_EN.
	RTC_CNTL_DIG_PWC_INTER_RAM0_PD_EN = 0x2000000
	// Position of INTER_RAM1_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM1_PD_EN_Pos = 0x1a
	// Bit mask of INTER_RAM1_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM1_PD_EN_Msk = 0x4000000
	// Bit INTER_RAM1_PD_EN.
	RTC_CNTL_DIG_PWC_INTER_RAM1_PD_EN = 0x4000000
	// Position of INTER_RAM2_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM2_PD_EN_Pos = 0x1b
	// Bit mask of INTER_RAM2_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM2_PD_EN_Msk = 0x8000000
	// Bit INTER_RAM2_PD_EN.
	RTC_CNTL_DIG_PWC_INTER_RAM2_PD_EN = 0x8000000
	// Position of INTER_RAM3_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM3_PD_EN_Pos = 0x1c
	// Bit mask of INTER_RAM3_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM3_PD_EN_Msk = 0x10000000
	// Bit INTER_RAM3_PD_EN.
	RTC_CNTL_DIG_PWC_INTER_RAM3_PD_EN = 0x10000000
	// Position of INTER_RAM4_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM4_PD_EN_Pos = 0x1d
	// Bit mask of INTER_RAM4_PD_EN field.
	RTC_CNTL_DIG_PWC_INTER_RAM4_PD_EN_Msk = 0x20000000
	// Bit INTER_RAM4_PD_EN.
	RTC_CNTL_DIG_PWC_INTER_RAM4_PD_EN = 0x20000000
	// Position of WIFI_PD_EN field.
	RTC_CNTL_DIG_PWC_WIFI_PD_EN_Pos = 0x1e
	// Bit mask of WIFI_PD_EN field.
	RTC_CNTL_DIG_PWC_WIFI_PD_EN_Msk = 0x40000000
	// Bit WIFI_PD_EN.
	RTC_CNTL_DIG_PWC_WIFI_PD_EN = 0x40000000
	// Position of DG_WRAP_PD_EN field.
	RTC_CNTL_DIG_PWC_DG_WRAP_PD_EN_Pos = 0x1f
	// Bit mask of DG_WRAP_PD_EN field.
	RTC_CNTL_DIG_PWC_DG_WRAP_PD_EN_Msk = 0x80000000
	// Bit DG_WRAP_PD_EN.
	RTC_CNTL_DIG_PWC_DG_WRAP_PD_EN = 0x80000000

	// DIG_ISO
	// Position of FORCE_OFF field.
	RTC_CNTL_DIG_ISO_FORCE_OFF_Pos = 0x7
	// Bit mask of FORCE_OFF field.
	RTC_CNTL_DIG_ISO_FORCE_OFF_Msk = 0x80
	// Bit FORCE_OFF.
	RTC_CNTL_DIG_ISO_FORCE_OFF = 0x80
	// Position of FORCE_ON field.
	RTC_CNTL_DIG_ISO_FORCE_ON_Pos = 0x8
	// Bit mask of FORCE_ON field.
	RTC_CNTL_DIG_ISO_FORCE_ON_Msk = 0x100
	// Bit FORCE_ON.
	RTC_CNTL_DIG_ISO_FORCE_ON = 0x100
	// Position of DG_PAD_AUTOHOLD field.
	RTC_CNTL_DIG_ISO_DG_PAD_AUTOHOLD_Pos = 0x9
	// Bit mask of DG_PAD_AUTOHOLD field.
	RTC_CNTL_DIG_ISO_DG_PAD_AUTOHOLD_Msk = 0x200
	// Bit DG_PAD_AUTOHOLD.
	RTC_CNTL_DIG_ISO_DG_PAD_AUTOHOLD = 0x200
	// Position of CLR_DG_PAD_AUTOHOLD field.
	RTC_CNTL_DIG_ISO_CLR_DG_PAD_AUTOHOLD_Pos = 0xa
	// Bit mask of CLR_DG_PAD_AUTOHOLD field.
	RTC_CNTL_DIG_ISO_CLR_DG_PAD_AUTOHOLD_Msk = 0x400
	// Bit CLR_DG_PAD_AUTOHOLD.
	RTC_CNTL_DIG_ISO_CLR_DG_PAD_AUTOHOLD = 0x400
	// Position of DG_PAD_AUTOHOLD_EN field.
	RTC_CNTL_DIG_ISO_DG_PAD_AUTOHOLD_EN_Pos = 0xb
	// Bit mask of DG_PAD_AUTOHOLD_EN field.
	RTC_CNTL_DIG_ISO_DG_PAD_AUTOHOLD_EN_Msk = 0x800
	// Bit DG_PAD_AUTOHOLD_EN.
	RTC_CNTL_DIG_ISO_DG_PAD_AUTOHOLD_EN = 0x800
	// Position of DG_PAD_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_NOISO_Pos = 0xc
	// Bit mask of DG_PAD_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_NOISO_Msk = 0x1000
	// Bit DG_PAD_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_NOISO = 0x1000
	// Position of DG_PAD_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_ISO_Pos = 0xd
	// Bit mask of DG_PAD_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_ISO_Msk = 0x2000
	// Bit DG_PAD_FORCE_ISO.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_ISO = 0x2000
	// Position of DG_PAD_FORCE_UNHOLD field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_UNHOLD_Pos = 0xe
	// Bit mask of DG_PAD_FORCE_UNHOLD field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_UNHOLD_Msk = 0x4000
	// Bit DG_PAD_FORCE_UNHOLD.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_UNHOLD = 0x4000
	// Position of DG_PAD_FORCE_HOLD field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_HOLD_Pos = 0xf
	// Bit mask of DG_PAD_FORCE_HOLD field.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_HOLD_Msk = 0x8000
	// Bit DG_PAD_FORCE_HOLD.
	RTC_CNTL_DIG_ISO_DG_PAD_FORCE_HOLD = 0x8000
	// Position of ROM0_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_ROM0_FORCE_ISO_Pos = 0x10
	// Bit mask of ROM0_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_ROM0_FORCE_ISO_Msk = 0x10000
	// Bit ROM0_FORCE_ISO.
	RTC_CNTL_DIG_ISO_ROM0_FORCE_ISO = 0x10000
	// Position of ROM0_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_ROM0_FORCE_NOISO_Pos = 0x11
	// Bit mask of ROM0_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_ROM0_FORCE_NOISO_Msk = 0x20000
	// Bit ROM0_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_ROM0_FORCE_NOISO = 0x20000
	// Position of INTER_RAM0_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM0_FORCE_ISO_Pos = 0x12
	// Bit mask of INTER_RAM0_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM0_FORCE_ISO_Msk = 0x40000
	// Bit INTER_RAM0_FORCE_ISO.
	RTC_CNTL_DIG_ISO_INTER_RAM0_FORCE_ISO = 0x40000
	// Position of INTER_RAM0_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM0_FORCE_NOISO_Pos = 0x13
	// Bit mask of INTER_RAM0_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM0_FORCE_NOISO_Msk = 0x80000
	// Bit INTER_RAM0_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_INTER_RAM0_FORCE_NOISO = 0x80000
	// Position of INTER_RAM1_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM1_FORCE_ISO_Pos = 0x14
	// Bit mask of INTER_RAM1_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM1_FORCE_ISO_Msk = 0x100000
	// Bit INTER_RAM1_FORCE_ISO.
	RTC_CNTL_DIG_ISO_INTER_RAM1_FORCE_ISO = 0x100000
	// Position of INTER_RAM1_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM1_FORCE_NOISO_Pos = 0x15
	// Bit mask of INTER_RAM1_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM1_FORCE_NOISO_Msk = 0x200000
	// Bit INTER_RAM1_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_INTER_RAM1_FORCE_NOISO = 0x200000
	// Position of INTER_RAM2_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM2_FORCE_ISO_Pos = 0x16
	// Bit mask of INTER_RAM2_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM2_FORCE_ISO_Msk = 0x400000
	// Bit INTER_RAM2_FORCE_ISO.
	RTC_CNTL_DIG_ISO_INTER_RAM2_FORCE_ISO = 0x400000
	// Position of INTER_RAM2_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM2_FORCE_NOISO_Pos = 0x17
	// Bit mask of INTER_RAM2_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM2_FORCE_NOISO_Msk = 0x800000
	// Bit INTER_RAM2_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_INTER_RAM2_FORCE_NOISO = 0x800000
	// Position of INTER_RAM3_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM3_FORCE_ISO_Pos = 0x18
	// Bit mask of INTER_RAM3_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM3_FORCE_ISO_Msk = 0x1000000
	// Bit INTER_RAM3_FORCE_ISO.
	RTC_CNTL_DIG_ISO_INTER_RAM3_FORCE_ISO = 0x1000000
	// Position of INTER_RAM3_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM3_FORCE_NOISO_Pos = 0x19
	// Bit mask of INTER_RAM3_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM3_FORCE_NOISO_Msk = 0x2000000
	// Bit INTER_RAM3_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_INTER_RAM3_FORCE_NOISO = 0x2000000
	// Position of INTER_RAM4_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM4_FORCE_ISO_Pos = 0x1a
	// Bit mask of INTER_RAM4_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM4_FORCE_ISO_Msk = 0x4000000
	// Bit INTER_RAM4_FORCE_ISO.
	RTC_CNTL_DIG_ISO_INTER_RAM4_FORCE_ISO = 0x4000000
	// Position of INTER_RAM4_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM4_FORCE_NOISO_Pos = 0x1b
	// Bit mask of INTER_RAM4_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_INTER_RAM4_FORCE_NOISO_Msk = 0x8000000
	// Bit INTER_RAM4_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_INTER_RAM4_FORCE_NOISO = 0x8000000
	// Position of WIFI_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_WIFI_FORCE_ISO_Pos = 0x1c
	// Bit mask of WIFI_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_WIFI_FORCE_ISO_Msk = 0x10000000
	// Bit WIFI_FORCE_ISO.
	RTC_CNTL_DIG_ISO_WIFI_FORCE_ISO = 0x10000000
	// Position of WIFI_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_WIFI_FORCE_NOISO_Pos = 0x1d
	// Bit mask of WIFI_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_WIFI_FORCE_NOISO_Msk = 0x20000000
	// Bit WIFI_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_WIFI_FORCE_NOISO = 0x20000000
	// Position of DG_WRAP_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_DG_WRAP_FORCE_ISO_Pos = 0x1e
	// Bit mask of DG_WRAP_FORCE_ISO field.
	RTC_CNTL_DIG_ISO_DG_WRAP_FORCE_ISO_Msk = 0x40000000
	// Bit DG_WRAP_FORCE_ISO.
	RTC_CNTL_DIG_ISO_DG_WRAP_FORCE_ISO = 0x40000000
	// Position of DG_WRAP_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_DG_WRAP_FORCE_NOISO_Pos = 0x1f
	// Bit mask of DG_WRAP_FORCE_NOISO field.
	RTC_CNTL_DIG_ISO_DG_WRAP_FORCE_NOISO_Msk = 0x80000000
	// Bit DG_WRAP_FORCE_NOISO.
	RTC_CNTL_DIG_ISO_DG_WRAP_FORCE_NOISO = 0x80000000

	// WDTCONFIG0
	// Position of WDT_PAUSE_IN_SLP field.
	RTC_CNTL_WDTCONFIG0_WDT_PAUSE_IN_SLP_Pos = 0x7
	// Bit mask of WDT_PAUSE_IN_SLP field.
	RTC_CNTL_WDTCONFIG0_WDT_PAUSE_IN_SLP_Msk = 0x80
	// Bit WDT_PAUSE_IN_SLP.
	RTC_CNTL_WDTCONFIG0_WDT_PAUSE_IN_SLP = 0x80
	// Position of WDT_APPCPU_RESET_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_APPCPU_RESET_EN_Pos = 0x8
	// Bit mask of WDT_APPCPU_RESET_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_APPCPU_RESET_EN_Msk = 0x100
	// Bit WDT_APPCPU_RESET_EN.
	RTC_CNTL_WDTCONFIG0_WDT_APPCPU_RESET_EN = 0x100
	// Position of WDT_PROCPU_RESET_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_PROCPU_RESET_EN_Pos = 0x9
	// Bit mask of WDT_PROCPU_RESET_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_PROCPU_RESET_EN_Msk = 0x200
	// Bit WDT_PROCPU_RESET_EN.
	RTC_CNTL_WDTCONFIG0_WDT_PROCPU_RESET_EN = 0x200
	// Position of WDT_FLASHBOOT_MOD_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Pos = 0xa
	// Bit mask of WDT_FLASHBOOT_MOD_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Msk = 0x400
	// Bit WDT_FLASHBOOT_MOD_EN.
	RTC_CNTL_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN = 0x400
	// Position of WDT_SYS_RESET_LENGTH field.
	RTC_CNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Pos = 0xb
	// Bit mask of WDT_SYS_RESET_LENGTH field.
	RTC_CNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Msk = 0x3800
	// Position of WDT_CPU_RESET_LENGTH field.
	RTC_CNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Pos = 0xe
	// Bit mask of WDT_CPU_RESET_LENGTH field.
	RTC_CNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Msk = 0x1c000
	// Position of WDT_LEVEL_INT_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_LEVEL_INT_EN_Pos = 0x11
	// Bit mask of WDT_LEVEL_INT_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_LEVEL_INT_EN_Msk = 0x20000
	// Bit WDT_LEVEL_INT_EN.
	RTC_CNTL_WDTCONFIG0_WDT_LEVEL_INT_EN = 0x20000
	// Position of WDT_EDGE_INT_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_EDGE_INT_EN_Pos = 0x12
	// Bit mask of WDT_EDGE_INT_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_EDGE_INT_EN_Msk = 0x40000
	// Bit WDT_EDGE_INT_EN.
	RTC_CNTL_WDTCONFIG0_WDT_EDGE_INT_EN = 0x40000
	// Position of WDT_STG3 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG3_Pos = 0x13
	// Bit mask of WDT_STG3 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG3_Msk = 0x380000
	// Position of WDT_STG2 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG2_Pos = 0x16
	// Bit mask of WDT_STG2 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG2_Msk = 0x1c00000
	// Position of WDT_STG1 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG1_Pos = 0x19
	// Bit mask of WDT_STG1 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG1_Msk = 0xe000000
	// Position of WDT_STG0 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG0_Pos = 0x1c
	// Bit mask of WDT_STG0 field.
	RTC_CNTL_WDTCONFIG0_WDT_STG0_Msk = 0x70000000
	// Position of WDT_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_EN_Pos = 0x1f
	// Bit mask of WDT_EN field.
	RTC_CNTL_WDTCONFIG0_WDT_EN_Msk = 0x80000000
	// Bit WDT_EN.
	RTC_CNTL_WDTCONFIG0_WDT_EN = 0x80000000

	// WDTCONFIG1
	// Position of WDT_STG0_HOLD field.
	RTC_CNTL_WDTCONFIG1_WDT_STG0_HOLD_Pos = 0x0
	// Bit mask of WDT_STG0_HOLD field.
	RTC_CNTL_WDTCONFIG1_WDT_STG0_HOLD_Msk = 0xffffffff

	// WDTCONFIG2
	// Position of WDT_STG1_HOLD field.
	RTC_CNTL_WDTCONFIG2_WDT_STG1_HOLD_Pos = 0x0
	// Bit mask of WDT_STG1_HOLD field.
	RTC_CNTL_WDTCONFIG2_WDT_STG1_HOLD_Msk = 0xffffffff

	// WDTCONFIG3
	// Position of WDT_STG2_HOLD field.
	RTC_CNTL_WDTCONFIG3_WDT_STG2_HOLD_Pos = 0x0
	// Bit mask of WDT_STG2_HOLD field.
	RTC_CNTL_WDTCONFIG3_WDT_STG2_HOLD_Msk = 0xffffffff

	// WDTCONFIG4
	// Position of WDT_STG3_HOLD field.
	RTC_CNTL_WDTCONFIG4_WDT_STG3_HOLD_Pos = 0x0
	// Bit mask of WDT_STG3_HOLD field.
	RTC_CNTL_WDTCONFIG4_WDT_STG3_HOLD_Msk = 0xffffffff

	// WDTFEED
	// Position of WDT_FEED field.
	RTC_CNTL_WDTFEED_WDT_FEED_Pos = 0x1f
	// Bit mask of WDT_FEED field.
	RTC_CNTL_WDTFEED_WDT_FEED_Msk = 0x80000000
	// Bit WDT_FEED.
	RTC_CNTL_WDTFEED_WDT_FEED = 0x80000000

	// WDTWPROTECT
	// Position of WDT_WKEY field.
	RTC_CNTL_WDTWPROTECT_WDT_WKEY_Pos = 0x0
	// Bit mask of WDT_WKEY field.
	RTC_CNTL_WDTWPROTECT_WDT_WKEY_Msk = 0xffffffff

	// TEST_MUX
	// Position of ENT_RTC field.
	RTC_CNTL_TEST_MUX_ENT_RTC_Pos = 0x1d
	// Bit mask of ENT_RTC field.
	RTC_CNTL_TEST_MUX_ENT_RTC_Msk = 0x20000000
	// Bit ENT_RTC.
	RTC_CNTL_TEST_MUX_ENT_RTC = 0x20000000
	// Position of DTEST_RTC field.
	RTC_CNTL_TEST_MUX_DTEST_RTC_Pos = 0x1e
	// Bit mask of DTEST_RTC field.
	RTC_CNTL_TEST_MUX_DTEST_RTC_Msk = 0xc0000000

	// SW_CPU_STALL
	// Position of SW_STALL_APPCPU_C1 field.
	RTC_CNTL_SW_CPU_STALL_SW_STALL_APPCPU_C1_Pos = 0x14
	// Bit mask of SW_STALL_APPCPU_C1 field.
	RTC_CNTL_SW_CPU_STALL_SW_STALL_APPCPU_C1_Msk = 0x3f00000
	// Position of SW_STALL_PROCPU_C1 field.
	RTC_CNTL_SW_CPU_STALL_SW_STALL_PROCPU_C1_Pos = 0x1a
	// Bit mask of SW_STALL_PROCPU_C1 field.
	RTC_CNTL_SW_CPU_STALL_SW_STALL_PROCPU_C1_Msk = 0xfc000000

	// STORE4
	// Position of SCRATCH4 field.
	RTC_CNTL_STORE4_SCRATCH4_Pos = 0x0
	// Bit mask of SCRATCH4 field.
	RTC_CNTL_STORE4_SCRATCH4_Msk = 0xffffffff

	// STORE5
	// Position of SCRATCH5 field.
	RTC_CNTL_STORE5_SCRATCH5_Pos = 0x0
	// Bit mask of SCRATCH5 field.
	RTC_CNTL_STORE5_SCRATCH5_Msk = 0xffffffff

	// STORE6
	// Position of SCRATCH6 field.
	RTC_CNTL_STORE6_SCRATCH6_Pos = 0x0
	// Bit mask of SCRATCH6 field.
	RTC_CNTL_STORE6_SCRATCH6_Msk = 0xffffffff

	// STORE7
	// Position of SCRATCH7 field.
	RTC_CNTL_STORE7_SCRATCH7_Pos = 0x0
	// Bit mask of SCRATCH7 field.
	RTC_CNTL_STORE7_SCRATCH7_Msk = 0xffffffff

	// LOW_POWER_ST
	// Position of LOW_POWER_DIAG0 field.
	RTC_CNTL_LOW_POWER_ST_LOW_POWER_DIAG0_Pos = 0x0
	// Bit mask of LOW_POWER_DIAG0 field.
	RTC_CNTL_LOW_POWER_ST_LOW_POWER_DIAG0_Msk = 0xffffffff
	// Position of RDY_FOR_WAKEUP field.
	RTC_CNTL_LOW_POWER_ST_RDY_FOR_WAKEUP_Pos = 0x13
	// Bit mask of RDY_FOR_WAKEUP field.
	RTC_CNTL_LOW_POWER_ST_RDY_FOR_WAKEUP_Msk = 0x80000
	// Bit RDY_FOR_WAKEUP.
	RTC_CNTL_LOW_POWER_ST_RDY_FOR_WAKEUP = 0x80000

	// DIAG1
	// Position of LOW_POWER_DIAG1 field.
	RTC_CNTL_DIAG1_LOW_POWER_DIAG1_Pos = 0x0
	// Bit mask of LOW_POWER_DIAG1 field.
	RTC_CNTL_DIAG1_LOW_POWER_DIAG1_Msk = 0xffffffff

	// HOLD_FORCE
	// Position of ADC1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_ADC1_HOLD_FORCE_Pos = 0x0
	// Bit mask of ADC1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_ADC1_HOLD_FORCE_Msk = 0x1
	// Bit ADC1_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_ADC1_HOLD_FORCE = 0x1
	// Position of ADC2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_ADC2_HOLD_FORCE_Pos = 0x1
	// Bit mask of ADC2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_ADC2_HOLD_FORCE_Msk = 0x2
	// Bit ADC2_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_ADC2_HOLD_FORCE = 0x2
	// Position of PDAC1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_PDAC1_HOLD_FORCE_Pos = 0x2
	// Bit mask of PDAC1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_PDAC1_HOLD_FORCE_Msk = 0x4
	// Bit PDAC1_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_PDAC1_HOLD_FORCE = 0x4
	// Position of PDAC2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_PDAC2_HOLD_FORCE_Pos = 0x3
	// Bit mask of PDAC2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_PDAC2_HOLD_FORCE_Msk = 0x8
	// Bit PDAC2_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_PDAC2_HOLD_FORCE = 0x8
	// Position of SENSE1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE1_HOLD_FORCE_Pos = 0x4
	// Bit mask of SENSE1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE1_HOLD_FORCE_Msk = 0x10
	// Bit SENSE1_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_SENSE1_HOLD_FORCE = 0x10
	// Position of SENSE2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE2_HOLD_FORCE_Pos = 0x5
	// Bit mask of SENSE2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE2_HOLD_FORCE_Msk = 0x20
	// Bit SENSE2_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_SENSE2_HOLD_FORCE = 0x20
	// Position of SENSE3_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE3_HOLD_FORCE_Pos = 0x6
	// Bit mask of SENSE3_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE3_HOLD_FORCE_Msk = 0x40
	// Bit SENSE3_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_SENSE3_HOLD_FORCE = 0x40
	// Position of SENSE4_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE4_HOLD_FORCE_Pos = 0x7
	// Bit mask of SENSE4_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_SENSE4_HOLD_FORCE_Msk = 0x80
	// Bit SENSE4_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_SENSE4_HOLD_FORCE = 0x80
	// Position of TOUCH_PAD0_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD0_HOLD_FORCE_Pos = 0x8
	// Bit mask of TOUCH_PAD0_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD0_HOLD_FORCE_Msk = 0x100
	// Bit TOUCH_PAD0_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD0_HOLD_FORCE = 0x100
	// Position of TOUCH_PAD1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD1_HOLD_FORCE_Pos = 0x9
	// Bit mask of TOUCH_PAD1_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD1_HOLD_FORCE_Msk = 0x200
	// Bit TOUCH_PAD1_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD1_HOLD_FORCE = 0x200
	// Position of TOUCH_PAD2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD2_HOLD_FORCE_Pos = 0xa
	// Bit mask of TOUCH_PAD2_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD2_HOLD_FORCE_Msk = 0x400
	// Bit TOUCH_PAD2_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD2_HOLD_FORCE = 0x400
	// Position of TOUCH_PAD3_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD3_HOLD_FORCE_Pos = 0xb
	// Bit mask of TOUCH_PAD3_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD3_HOLD_FORCE_Msk = 0x800
	// Bit TOUCH_PAD3_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD3_HOLD_FORCE = 0x800
	// Position of TOUCH_PAD4_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD4_HOLD_FORCE_Pos = 0xc
	// Bit mask of TOUCH_PAD4_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD4_HOLD_FORCE_Msk = 0x1000
	// Bit TOUCH_PAD4_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD4_HOLD_FORCE = 0x1000
	// Position of TOUCH_PAD5_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD5_HOLD_FORCE_Pos = 0xd
	// Bit mask of TOUCH_PAD5_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD5_HOLD_FORCE_Msk = 0x2000
	// Bit TOUCH_PAD5_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD5_HOLD_FORCE = 0x2000
	// Position of TOUCH_PAD6_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD6_HOLD_FORCE_Pos = 0xe
	// Bit mask of TOUCH_PAD6_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD6_HOLD_FORCE_Msk = 0x4000
	// Bit TOUCH_PAD6_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD6_HOLD_FORCE = 0x4000
	// Position of TOUCH_PAD7_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD7_HOLD_FORCE_Pos = 0xf
	// Bit mask of TOUCH_PAD7_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD7_HOLD_FORCE_Msk = 0x8000
	// Bit TOUCH_PAD7_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_TOUCH_PAD7_HOLD_FORCE = 0x8000
	// Position of X32P_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_X32P_HOLD_FORCE_Pos = 0x10
	// Bit mask of X32P_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_X32P_HOLD_FORCE_Msk = 0x10000
	// Bit X32P_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_X32P_HOLD_FORCE = 0x10000
	// Position of X32N_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_X32N_HOLD_FORCE_Pos = 0x11
	// Bit mask of X32N_HOLD_FORCE field.
	RTC_CNTL_HOLD_FORCE_X32N_HOLD_FORCE_Msk = 0x20000
	// Bit X32N_HOLD_FORCE.
	RTC_CNTL_HOLD_FORCE_X32N_HOLD_FORCE = 0x20000

	// EXT_WAKEUP1
	// Position of SEL field.
	RTC_CNTL_EXT_WAKEUP1_SEL_Pos = 0x0
	// Bit mask of SEL field.
	RTC_CNTL_EXT_WAKEUP1_SEL_Msk = 0x3ffff
	// Position of STATUS_CLR field.
	RTC_CNTL_EXT_WAKEUP1_STATUS_CLR_Pos = 0x12
	// Bit mask of STATUS_CLR field.
	RTC_CNTL_EXT_WAKEUP1_STATUS_CLR_Msk = 0x40000
	// Bit STATUS_CLR.
	RTC_CNTL_EXT_WAKEUP1_STATUS_CLR = 0x40000

	// EXT_WAKEUP1_STATUS
	// Position of EXT_WAKEUP1_STATUS field.
	RTC_CNTL_EXT_WAKEUP1_STATUS_EXT_WAKEUP1_STATUS_Pos = 0x0
	// Bit mask of EXT_WAKEUP1_STATUS field.
	RTC_CNTL_EXT_WAKEUP1_STATUS_EXT_WAKEUP1_STATUS_Msk = 0x3ffff

	// BROWN_OUT
	// Position of RTC_MEM_PID_CONF field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_PID_CONF_Pos = 0x0
	// Bit mask of RTC_MEM_PID_CONF field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_PID_CONF_Msk = 0xff
	// Position of RTC_MEM_CRC_START field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_START_Pos = 0x8
	// Bit mask of RTC_MEM_CRC_START field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_START_Msk = 0x100
	// Bit RTC_MEM_CRC_START.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_START = 0x100
	// Position of RTC_MEM_CRC_ADDR field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_ADDR_Pos = 0x9
	// Bit mask of RTC_MEM_CRC_ADDR field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_ADDR_Msk = 0xffe00
	// Position of CLOSE_FLASH_ENA field.
	RTC_CNTL_BROWN_OUT_CLOSE_FLASH_ENA_Pos = 0xe
	// Bit mask of CLOSE_FLASH_ENA field.
	RTC_CNTL_BROWN_OUT_CLOSE_FLASH_ENA_Msk = 0x4000
	// Bit CLOSE_FLASH_ENA.
	RTC_CNTL_BROWN_OUT_CLOSE_FLASH_ENA = 0x4000
	// Position of PD_RF_ENA field.
	RTC_CNTL_BROWN_OUT_PD_RF_ENA_Pos = 0xf
	// Bit mask of PD_RF_ENA field.
	RTC_CNTL_BROWN_OUT_PD_RF_ENA_Msk = 0x8000
	// Bit PD_RF_ENA.
	RTC_CNTL_BROWN_OUT_PD_RF_ENA = 0x8000
	// Position of RST_WAIT field.
	RTC_CNTL_BROWN_OUT_RST_WAIT_Pos = 0x10
	// Bit mask of RST_WAIT field.
	RTC_CNTL_BROWN_OUT_RST_WAIT_Msk = 0x3ff0000
	// Position of RTC_MEM_CRC_LEN field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_LEN_Pos = 0x14
	// Bit mask of RTC_MEM_CRC_LEN field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_LEN_Msk = 0x7ff00000
	// Position of RST_ENA field.
	RTC_CNTL_BROWN_OUT_RST_ENA_Pos = 0x1a
	// Bit mask of RST_ENA field.
	RTC_CNTL_BROWN_OUT_RST_ENA_Msk = 0x4000000
	// Bit RST_ENA.
	RTC_CNTL_BROWN_OUT_RST_ENA = 0x4000000
	// Position of DBROWN_OUT_THRES field.
	RTC_CNTL_BROWN_OUT_DBROWN_OUT_THRES_Pos = 0x1b
	// Bit mask of DBROWN_OUT_THRES field.
	RTC_CNTL_BROWN_OUT_DBROWN_OUT_THRES_Msk = 0x38000000
	// Position of ENA field.
	RTC_CNTL_BROWN_OUT_ENA_Pos = 0x1e
	// Bit mask of ENA field.
	RTC_CNTL_BROWN_OUT_ENA_Msk = 0x40000000
	// Bit ENA.
	RTC_CNTL_BROWN_OUT_ENA = 0x40000000
	// Position of DET field.
	RTC_CNTL_BROWN_OUT_DET_Pos = 0x1f
	// Bit mask of DET field.
	RTC_CNTL_BROWN_OUT_DET_Msk = 0x80000000
	// Bit DET.
	RTC_CNTL_BROWN_OUT_DET = 0x80000000
	// Position of RTC_MEM_CRC_FINISH field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_FINISH_Pos = 0x1f
	// Bit mask of RTC_MEM_CRC_FINISH field.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_FINISH_Msk = 0x80000000
	// Bit RTC_MEM_CRC_FINISH.
	RTC_CNTL_BROWN_OUT_RTC_MEM_CRC_FINISH = 0x80000000

	// DATE
	// Position of CNTL_DATE field.
	RTC_CNTL_DATE_CNTL_DATE_Pos = 0x0
	// Bit mask of CNTL_DATE field.
	RTC_CNTL_DATE_CNTL_DATE_Msk = 0xfffffff
)

// Constants for RTC_IO: Low-power Input/Output
const (
	// OUT
	// Position of DATA field.
	RTC_GPIO_OUT_DATA_Pos = 0xe
	// Bit mask of DATA field.
	RTC_GPIO_OUT_DATA_Msk = 0xffffc000

	// OUT_W1TS
	// Position of OUT_DATA_W1TS field.
	RTC_GPIO_OUT_W1TS_OUT_DATA_W1TS_Pos = 0xe
	// Bit mask of OUT_DATA_W1TS field.
	RTC_GPIO_OUT_W1TS_OUT_DATA_W1TS_Msk = 0xffffc000

	// OUT_W1TC
	// Position of OUT_DATA_W1TC field.
	RTC_GPIO_OUT_W1TC_OUT_DATA_W1TC_Pos = 0xe
	// Bit mask of OUT_DATA_W1TC field.
	RTC_GPIO_OUT_W1TC_OUT_DATA_W1TC_Msk = 0xffffc000

	// ENABLE
	// Position of ENABLE field.
	RTC_GPIO_ENABLE_ENABLE_Pos = 0xe
	// Bit mask of ENABLE field.
	RTC_GPIO_ENABLE_ENABLE_Msk = 0xffffc000

	// ENABLE_W1TS
	// Position of ENABLE_W1TS field.
	RTC_GPIO_ENABLE_W1TS_ENABLE_W1TS_Pos = 0xe
	// Bit mask of ENABLE_W1TS field.
	RTC_GPIO_ENABLE_W1TS_ENABLE_W1TS_Msk = 0xffffc000

	// ENABLE_W1TC
	// Position of ENABLE_W1TC field.
	RTC_GPIO_ENABLE_W1TC_ENABLE_W1TC_Pos = 0xe
	// Bit mask of ENABLE_W1TC field.
	RTC_GPIO_ENABLE_W1TC_ENABLE_W1TC_Msk = 0xffffc000

	// STATUS
	// Position of INT field.
	RTC_GPIO_STATUS_INT_Pos = 0xe
	// Bit mask of INT field.
	RTC_GPIO_STATUS_INT_Msk = 0xffffc000

	// STATUS_W1TS
	// Position of STATUS_INT_W1TS field.
	RTC_GPIO_STATUS_W1TS_STATUS_INT_W1TS_Pos = 0xe
	// Bit mask of STATUS_INT_W1TS field.
	RTC_GPIO_STATUS_W1TS_STATUS_INT_W1TS_Msk = 0xffffc000

	// STATUS_W1TC
	// Position of STATUS_INT_W1TC field.
	RTC_GPIO_STATUS_W1TC_STATUS_INT_W1TC_Pos = 0xe
	// Bit mask of STATUS_INT_W1TC field.
	RTC_GPIO_STATUS_W1TC_STATUS_INT_W1TC_Msk = 0xffffc000

	// IN
	// Position of NEXT field.
	RTC_GPIO_IN_NEXT_Pos = 0xe
	// Bit mask of NEXT field.
	RTC_GPIO_IN_NEXT_Msk = 0xffffc000

	// PIN0
	// Position of PAD_DRIVER field.
	RTC_GPIO_PIN_PAD_DRIVER_Pos = 0x2
	// Bit mask of PAD_DRIVER field.
	RTC_GPIO_PIN_PAD_DRIVER_Msk = 0x4
	// Bit PAD_DRIVER.
	RTC_GPIO_PIN_PAD_DRIVER = 0x4
	// Position of INT_TYPE field.
	RTC_GPIO_PIN_INT_TYPE_Pos = 0x7
	// Bit mask of INT_TYPE field.
	RTC_GPIO_PIN_INT_TYPE_Msk = 0x380
	// Position of WAKEUP_ENABLE field.
	RTC_GPIO_PIN_WAKEUP_ENABLE_Pos = 0xa
	// Bit mask of WAKEUP_ENABLE field.
	RTC_GPIO_PIN_WAKEUP_ENABLE_Msk = 0x400
	// Bit WAKEUP_ENABLE.
	RTC_GPIO_PIN_WAKEUP_ENABLE = 0x400

	// RTC_DEBUG_SEL
	// Position of DEBUG_SEL0 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL0_Pos = 0x0
	// Bit mask of DEBUG_SEL0 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL0_Msk = 0x1f
	// Position of DEBUG_SEL1 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL1_Pos = 0x5
	// Bit mask of DEBUG_SEL1 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL1_Msk = 0x3e0
	// Position of DEBUG_SEL2 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL2_Pos = 0xa
	// Bit mask of DEBUG_SEL2 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL2_Msk = 0x7c00
	// Position of DEBUG_SEL3 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL3_Pos = 0xf
	// Bit mask of DEBUG_SEL3 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL3_Msk = 0xf8000
	// Position of DEBUG_SEL4 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL4_Pos = 0x14
	// Bit mask of DEBUG_SEL4 field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_SEL4_Msk = 0x1f00000
	// Position of DEBUG_12M_NO_GATING field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_12M_NO_GATING_Pos = 0x19
	// Bit mask of DEBUG_12M_NO_GATING field.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_12M_NO_GATING_Msk = 0x2000000
	// Bit DEBUG_12M_NO_GATING.
	RTC_GPIO_RTC_DEBUG_SEL_DEBUG_12M_NO_GATING = 0x2000000

	// DIG_PAD_HOLD
	// Position of DIG_PAD_HOLD field.
	RTC_GPIO_DIG_PAD_HOLD_DIG_PAD_HOLD_Pos = 0x0
	// Bit mask of DIG_PAD_HOLD field.
	RTC_GPIO_DIG_PAD_HOLD_DIG_PAD_HOLD_Msk = 0xffffffff

	// HALL_SENS
	// Position of HALL_PHASE field.
	RTC_GPIO_HALL_SENS_HALL_PHASE_Pos = 0x1e
	// Bit mask of HALL_PHASE field.
	RTC_GPIO_HALL_SENS_HALL_PHASE_Msk = 0x40000000
	// Bit HALL_PHASE.
	RTC_GPIO_HALL_SENS_HALL_PHASE = 0x40000000
	// Position of XPD_HALL field.
	RTC_GPIO_HALL_SENS_XPD_HALL_Pos = 0x1f
	// Bit mask of XPD_HALL field.
	RTC_GPIO_HALL_SENS_XPD_HALL_Msk = 0x80000000
	// Bit XPD_HALL.
	RTC_GPIO_HALL_SENS_XPD_HALL = 0x80000000

	// SENSOR_PADS
	// Position of SENSE4_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE4_FUN_IE_Pos = 0x4
	// Bit mask of SENSE4_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE4_FUN_IE_Msk = 0x10
	// Bit SENSE4_FUN_IE.
	RTC_GPIO_SENSOR_PADS_SENSE4_FUN_IE = 0x10
	// Position of SENSE4_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE4_SLP_IE_Pos = 0x5
	// Bit mask of SENSE4_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE4_SLP_IE_Msk = 0x20
	// Bit SENSE4_SLP_IE.
	RTC_GPIO_SENSOR_PADS_SENSE4_SLP_IE = 0x20
	// Position of SENSE4_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE4_SLP_SEL_Pos = 0x6
	// Bit mask of SENSE4_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE4_SLP_SEL_Msk = 0x40
	// Bit SENSE4_SLP_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE4_SLP_SEL = 0x40
	// Position of SENSE4_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE4_FUN_SEL_Pos = 0x7
	// Bit mask of SENSE4_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE4_FUN_SEL_Msk = 0x180
	// Position of SENSE3_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE3_FUN_IE_Pos = 0x9
	// Bit mask of SENSE3_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE3_FUN_IE_Msk = 0x200
	// Bit SENSE3_FUN_IE.
	RTC_GPIO_SENSOR_PADS_SENSE3_FUN_IE = 0x200
	// Position of SENSE3_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE3_SLP_IE_Pos = 0xa
	// Bit mask of SENSE3_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE3_SLP_IE_Msk = 0x400
	// Bit SENSE3_SLP_IE.
	RTC_GPIO_SENSOR_PADS_SENSE3_SLP_IE = 0x400
	// Position of SENSE3_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE3_SLP_SEL_Pos = 0xb
	// Bit mask of SENSE3_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE3_SLP_SEL_Msk = 0x800
	// Bit SENSE3_SLP_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE3_SLP_SEL = 0x800
	// Position of SENSE3_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE3_FUN_SEL_Pos = 0xc
	// Bit mask of SENSE3_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE3_FUN_SEL_Msk = 0x3000
	// Position of SENSE2_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE2_FUN_IE_Pos = 0xe
	// Bit mask of SENSE2_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE2_FUN_IE_Msk = 0x4000
	// Bit SENSE2_FUN_IE.
	RTC_GPIO_SENSOR_PADS_SENSE2_FUN_IE = 0x4000
	// Position of SENSE2_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE2_SLP_IE_Pos = 0xf
	// Bit mask of SENSE2_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE2_SLP_IE_Msk = 0x8000
	// Bit SENSE2_SLP_IE.
	RTC_GPIO_SENSOR_PADS_SENSE2_SLP_IE = 0x8000
	// Position of SENSE2_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE2_SLP_SEL_Pos = 0x10
	// Bit mask of SENSE2_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE2_SLP_SEL_Msk = 0x10000
	// Bit SENSE2_SLP_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE2_SLP_SEL = 0x10000
	// Position of SENSE2_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE2_FUN_SEL_Pos = 0x11
	// Bit mask of SENSE2_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE2_FUN_SEL_Msk = 0x60000
	// Position of SENSE1_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE1_FUN_IE_Pos = 0x13
	// Bit mask of SENSE1_FUN_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE1_FUN_IE_Msk = 0x80000
	// Bit SENSE1_FUN_IE.
	RTC_GPIO_SENSOR_PADS_SENSE1_FUN_IE = 0x80000
	// Position of SENSE1_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE1_SLP_IE_Pos = 0x14
	// Bit mask of SENSE1_SLP_IE field.
	RTC_GPIO_SENSOR_PADS_SENSE1_SLP_IE_Msk = 0x100000
	// Bit SENSE1_SLP_IE.
	RTC_GPIO_SENSOR_PADS_SENSE1_SLP_IE = 0x100000
	// Position of SENSE1_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE1_SLP_SEL_Pos = 0x15
	// Bit mask of SENSE1_SLP_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE1_SLP_SEL_Msk = 0x200000
	// Bit SENSE1_SLP_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE1_SLP_SEL = 0x200000
	// Position of SENSE1_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE1_FUN_SEL_Pos = 0x16
	// Bit mask of SENSE1_FUN_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE1_FUN_SEL_Msk = 0xc00000
	// Position of SENSE4_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE4_MUX_SEL_Pos = 0x18
	// Bit mask of SENSE4_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE4_MUX_SEL_Msk = 0x1000000
	// Bit SENSE4_MUX_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE4_MUX_SEL = 0x1000000
	// Position of SENSE3_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE3_MUX_SEL_Pos = 0x19
	// Bit mask of SENSE3_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE3_MUX_SEL_Msk = 0x2000000
	// Bit SENSE3_MUX_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE3_MUX_SEL = 0x2000000
	// Position of SENSE2_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE2_MUX_SEL_Pos = 0x1a
	// Bit mask of SENSE2_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE2_MUX_SEL_Msk = 0x4000000
	// Bit SENSE2_MUX_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE2_MUX_SEL = 0x4000000
	// Position of SENSE1_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE1_MUX_SEL_Pos = 0x1b
	// Bit mask of SENSE1_MUX_SEL field.
	RTC_GPIO_SENSOR_PADS_SENSE1_MUX_SEL_Msk = 0x8000000
	// Bit SENSE1_MUX_SEL.
	RTC_GPIO_SENSOR_PADS_SENSE1_MUX_SEL = 0x8000000
	// Position of SENSE4_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE4_HOLD_Pos = 0x1c
	// Bit mask of SENSE4_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE4_HOLD_Msk = 0x10000000
	// Bit SENSE4_HOLD.
	RTC_GPIO_SENSOR_PADS_SENSE4_HOLD = 0x10000000
	// Position of SENSE3_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE3_HOLD_Pos = 0x1d
	// Bit mask of SENSE3_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE3_HOLD_Msk = 0x20000000
	// Bit SENSE3_HOLD.
	RTC_GPIO_SENSOR_PADS_SENSE3_HOLD = 0x20000000
	// Position of SENSE2_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE2_HOLD_Pos = 0x1e
	// Bit mask of SENSE2_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE2_HOLD_Msk = 0x40000000
	// Bit SENSE2_HOLD.
	RTC_GPIO_SENSOR_PADS_SENSE2_HOLD = 0x40000000
	// Position of SENSE1_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE1_HOLD_Pos = 0x1f
	// Bit mask of SENSE1_HOLD field.
	RTC_GPIO_SENSOR_PADS_SENSE1_HOLD_Msk = 0x80000000
	// Bit SENSE1_HOLD.
	RTC_GPIO_SENSOR_PADS_SENSE1_HOLD = 0x80000000

	// ADC_PAD
	// Position of ADC2_FUN_IE field.
	RTC_GPIO_ADC_PAD_ADC2_FUN_IE_Pos = 0x12
	// Bit mask of ADC2_FUN_IE field.
	RTC_GPIO_ADC_PAD_ADC2_FUN_IE_Msk = 0x40000
	// Bit ADC2_FUN_IE.
	RTC_GPIO_ADC_PAD_ADC2_FUN_IE = 0x40000
	// Position of ADC2_SLP_IE field.
	RTC_GPIO_ADC_PAD_ADC2_SLP_IE_Pos = 0x13
	// Bit mask of ADC2_SLP_IE field.
	RTC_GPIO_ADC_PAD_ADC2_SLP_IE_Msk = 0x80000
	// Bit ADC2_SLP_IE.
	RTC_GPIO_ADC_PAD_ADC2_SLP_IE = 0x80000
	// Position of ADC2_SLP_SEL field.
	RTC_GPIO_ADC_PAD_ADC2_SLP_SEL_Pos = 0x14
	// Bit mask of ADC2_SLP_SEL field.
	RTC_GPIO_ADC_PAD_ADC2_SLP_SEL_Msk = 0x100000
	// Bit ADC2_SLP_SEL.
	RTC_GPIO_ADC_PAD_ADC2_SLP_SEL = 0x100000
	// Position of ADC2_FUN_SEL field.
	RTC_GPIO_ADC_PAD_ADC2_FUN_SEL_Pos = 0x15
	// Bit mask of ADC2_FUN_SEL field.
	RTC_GPIO_ADC_PAD_ADC2_FUN_SEL_Msk = 0x600000
	// Position of ADC1_FUN_IE field.
	RTC_GPIO_ADC_PAD_ADC1_FUN_IE_Pos = 0x17
	// Bit mask of ADC1_FUN_IE field.
	RTC_GPIO_ADC_PAD_ADC1_FUN_IE_Msk = 0x800000
	// Bit ADC1_FUN_IE.
	RTC_GPIO_ADC_PAD_ADC1_FUN_IE = 0x800000
	// Position of ADC1_SLP_IE field.
	RTC_GPIO_ADC_PAD_ADC1_SLP_IE_Pos = 0x18
	// Bit mask of ADC1_SLP_IE field.
	RTC_GPIO_ADC_PAD_ADC1_SLP_IE_Msk = 0x1000000
	// Bit ADC1_SLP_IE.
	RTC_GPIO_ADC_PAD_ADC1_SLP_IE = 0x1000000
	// Position of ADC1_SLP_SEL field.
	RTC_GPIO_ADC_PAD_ADC1_SLP_SEL_Pos = 0x19
	// Bit mask of ADC1_SLP_SEL field.
	RTC_GPIO_ADC_PAD_ADC1_SLP_SEL_Msk = 0x2000000
	// Bit ADC1_SLP_SEL.
	RTC_GPIO_ADC_PAD_ADC1_SLP_SEL = 0x2000000
	// Position of ADC1_FUN_SEL field.
	RTC_GPIO_ADC_PAD_ADC1_FUN_SEL_Pos = 0x1a
	// Bit mask of ADC1_FUN_SEL field.
	RTC_GPIO_ADC_PAD_ADC1_FUN_SEL_Msk = 0xc000000
	// Position of ADC2_MUX_SEL field.
	RTC_GPIO_ADC_PAD_ADC2_MUX_SEL_Pos = 0x1c
	// Bit mask of ADC2_MUX_SEL field.
	RTC_GPIO_ADC_PAD_ADC2_MUX_SEL_Msk = 0x10000000
	// Bit ADC2_MUX_SEL.
	RTC_GPIO_ADC_PAD_ADC2_MUX_SEL = 0x10000000
	// Position of ADC1_MUX_SEL field.
	RTC_GPIO_ADC_PAD_ADC1_MUX_SEL_Pos = 0x1d
	// Bit mask of ADC1_MUX_SEL field.
	RTC_GPIO_ADC_PAD_ADC1_MUX_SEL_Msk = 0x20000000
	// Bit ADC1_MUX_SEL.
	RTC_GPIO_ADC_PAD_ADC1_MUX_SEL = 0x20000000
	// Position of ADC2_HOLD field.
	RTC_GPIO_ADC_PAD_ADC2_HOLD_Pos = 0x1e
	// Bit mask of ADC2_HOLD field.
	RTC_GPIO_ADC_PAD_ADC2_HOLD_Msk = 0x40000000
	// Bit ADC2_HOLD.
	RTC_GPIO_ADC_PAD_ADC2_HOLD = 0x40000000
	// Position of ADC1_HOLD field.
	RTC_GPIO_ADC_PAD_ADC1_HOLD_Pos = 0x1f
	// Bit mask of ADC1_HOLD field.
	RTC_GPIO_ADC_PAD_ADC1_HOLD_Msk = 0x80000000
	// Bit ADC1_HOLD.
	RTC_GPIO_ADC_PAD_ADC1_HOLD = 0x80000000

	// PAD_DAC1
	// Position of PDAC1_DAC_XPD_FORCE field.
	RTC_GPIO_PAD_DAC1_PDAC1_DAC_XPD_FORCE_Pos = 0xa
	// Bit mask of PDAC1_DAC_XPD_FORCE field.
	RTC_GPIO_PAD_DAC1_PDAC1_DAC_XPD_FORCE_Msk = 0x400
	// Bit PDAC1_DAC_XPD_FORCE.
	RTC_GPIO_PAD_DAC1_PDAC1_DAC_XPD_FORCE = 0x400
	// Position of PDAC1_FUN_IE field.
	RTC_GPIO_PAD_DAC1_PDAC1_FUN_IE_Pos = 0xb
	// Bit mask of PDAC1_FUN_IE field.
	RTC_GPIO_PAD_DAC1_PDAC1_FUN_IE_Msk = 0x800
	// Bit PDAC1_FUN_IE.
	RTC_GPIO_PAD_DAC1_PDAC1_FUN_IE = 0x800
	// Position of PDAC1_SLP_OE field.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_OE_Pos = 0xc
	// Bit mask of PDAC1_SLP_OE field.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_OE_Msk = 0x1000
	// Bit PDAC1_SLP_OE.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_OE = 0x1000
	// Position of PDAC1_SLP_IE field.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_IE_Pos = 0xd
	// Bit mask of PDAC1_SLP_IE field.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_IE_Msk = 0x2000
	// Bit PDAC1_SLP_IE.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_IE = 0x2000
	// Position of PDAC1_SLP_SEL field.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_SEL_Pos = 0xe
	// Bit mask of PDAC1_SLP_SEL field.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_SEL_Msk = 0x4000
	// Bit PDAC1_SLP_SEL.
	RTC_GPIO_PAD_DAC1_PDAC1_SLP_SEL = 0x4000
	// Position of PDAC1_FUN_SEL field.
	RTC_GPIO_PAD_DAC1_PDAC1_FUN_SEL_Pos = 0xf
	// Bit mask of PDAC1_FUN_SEL field.
	RTC_GPIO_PAD_DAC1_PDAC1_FUN_SEL_Msk = 0x18000
	// Position of PDAC1_MUX_SEL field.
	RTC_GPIO_PAD_DAC1_PDAC1_MUX_SEL_Pos = 0x11
	// Bit mask of PDAC1_MUX_SEL field.
	RTC_GPIO_PAD_DAC1_PDAC1_MUX_SEL_Msk = 0x20000
	// Bit PDAC1_MUX_SEL.
	RTC_GPIO_PAD_DAC1_PDAC1_MUX_SEL = 0x20000
	// Position of PDAC1_XPD_DAC field.
	RTC_GPIO_PAD_DAC1_PDAC1_XPD_DAC_Pos = 0x12
	// Bit mask of PDAC1_XPD_DAC field.
	RTC_GPIO_PAD_DAC1_PDAC1_XPD_DAC_Msk = 0x40000
	// Bit PDAC1_XPD_DAC.
	RTC_GPIO_PAD_DAC1_PDAC1_XPD_DAC = 0x40000
	// Position of PDAC1_DAC field.
	RTC_GPIO_PAD_DAC1_PDAC1_DAC_Pos = 0x13
	// Bit mask of PDAC1_DAC field.
	RTC_GPIO_PAD_DAC1_PDAC1_DAC_Msk = 0x7f80000
	// Position of PDAC1_RUE field.
	RTC_GPIO_PAD_DAC1_PDAC1_RUE_Pos = 0x1b
	// Bit mask of PDAC1_RUE field.
	RTC_GPIO_PAD_DAC1_PDAC1_RUE_Msk = 0x8000000
	// Bit PDAC1_RUE.
	RTC_GPIO_PAD_DAC1_PDAC1_RUE = 0x8000000
	// Position of PDAC1_RDE field.
	RTC_GPIO_PAD_DAC1_PDAC1_RDE_Pos = 0x1c
	// Bit mask of PDAC1_RDE field.
	RTC_GPIO_PAD_DAC1_PDAC1_RDE_Msk = 0x10000000
	// Bit PDAC1_RDE.
	RTC_GPIO_PAD_DAC1_PDAC1_RDE = 0x10000000
	// Position of PDAC1_HOLD field.
	RTC_GPIO_PAD_DAC1_PDAC1_HOLD_Pos = 0x1d
	// Bit mask of PDAC1_HOLD field.
	RTC_GPIO_PAD_DAC1_PDAC1_HOLD_Msk = 0x20000000
	// Bit PDAC1_HOLD.
	RTC_GPIO_PAD_DAC1_PDAC1_HOLD = 0x20000000
	// Position of PDAC1_DRV field.
	RTC_GPIO_PAD_DAC1_PDAC1_DRV_Pos = 0x1e
	// Bit mask of PDAC1_DRV field.
	RTC_GPIO_PAD_DAC1_PDAC1_DRV_Msk = 0xc0000000

	// PAD_DAC2
	// Position of PDAC2_DAC_XPD_FORCE field.
	RTC_GPIO_PAD_DAC2_PDAC2_DAC_XPD_FORCE_Pos = 0xa
	// Bit mask of PDAC2_DAC_XPD_FORCE field.
	RTC_GPIO_PAD_DAC2_PDAC2_DAC_XPD_FORCE_Msk = 0x400
	// Bit PDAC2_DAC_XPD_FORCE.
	RTC_GPIO_PAD_DAC2_PDAC2_DAC_XPD_FORCE = 0x400
	// Position of PDAC2_FUN_IE field.
	RTC_GPIO_PAD_DAC2_PDAC2_FUN_IE_Pos = 0xb
	// Bit mask of PDAC2_FUN_IE field.
	RTC_GPIO_PAD_DAC2_PDAC2_FUN_IE_Msk = 0x800
	// Bit PDAC2_FUN_IE.
	RTC_GPIO_PAD_DAC2_PDAC2_FUN_IE = 0x800
	// Position of PDAC2_SLP_OE field.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_OE_Pos = 0xc
	// Bit mask of PDAC2_SLP_OE field.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_OE_Msk = 0x1000
	// Bit PDAC2_SLP_OE.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_OE = 0x1000
	// Position of PDAC2_SLP_IE field.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_IE_Pos = 0xd
	// Bit mask of PDAC2_SLP_IE field.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_IE_Msk = 0x2000
	// Bit PDAC2_SLP_IE.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_IE = 0x2000
	// Position of PDAC2_SLP_SEL field.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_SEL_Pos = 0xe
	// Bit mask of PDAC2_SLP_SEL field.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_SEL_Msk = 0x4000
	// Bit PDAC2_SLP_SEL.
	RTC_GPIO_PAD_DAC2_PDAC2_SLP_SEL = 0x4000
	// Position of PDAC2_FUN_SEL field.
	RTC_GPIO_PAD_DAC2_PDAC2_FUN_SEL_Pos = 0xf
	// Bit mask of PDAC2_FUN_SEL field.
	RTC_GPIO_PAD_DAC2_PDAC2_FUN_SEL_Msk = 0x18000
	// Position of PDAC2_MUX_SEL field.
	RTC_GPIO_PAD_DAC2_PDAC2_MUX_SEL_Pos = 0x11
	// Bit mask of PDAC2_MUX_SEL field.
	RTC_GPIO_PAD_DAC2_PDAC2_MUX_SEL_Msk = 0x20000
	// Bit PDAC2_MUX_SEL.
	RTC_GPIO_PAD_DAC2_PDAC2_MUX_SEL = 0x20000
	// Position of PDAC2_XPD_DAC field.
	RTC_GPIO_PAD_DAC2_PDAC2_XPD_DAC_Pos = 0x12
	// Bit mask of PDAC2_XPD_DAC field.
	RTC_GPIO_PAD_DAC2_PDAC2_XPD_DAC_Msk = 0x40000
	// Bit PDAC2_XPD_DAC.
	RTC_GPIO_PAD_DAC2_PDAC2_XPD_DAC = 0x40000
	// Position of PDAC2_DAC field.
	RTC_GPIO_PAD_DAC2_PDAC2_DAC_Pos = 0x13
	// Bit mask of PDAC2_DAC field.
	RTC_GPIO_PAD_DAC2_PDAC2_DAC_Msk = 0x7f80000
	// Position of PDAC2_RUE field.
	RTC_GPIO_PAD_DAC2_PDAC2_RUE_Pos = 0x1b
	// Bit mask of PDAC2_RUE field.
	RTC_GPIO_PAD_DAC2_PDAC2_RUE_Msk = 0x8000000
	// Bit PDAC2_RUE.
	RTC_GPIO_PAD_DAC2_PDAC2_RUE = 0x8000000
	// Position of PDAC2_RDE field.
	RTC_GPIO_PAD_DAC2_PDAC2_RDE_Pos = 0x1c
	// Bit mask of PDAC2_RDE field.
	RTC_GPIO_PAD_DAC2_PDAC2_RDE_Msk = 0x10000000
	// Bit PDAC2_RDE.
	RTC_GPIO_PAD_DAC2_PDAC2_RDE = 0x10000000
	// Position of PDAC2_HOLD field.
	RTC_GPIO_PAD_DAC2_PDAC2_HOLD_Pos = 0x1d
	// Bit mask of PDAC2_HOLD field.
	RTC_GPIO_PAD_DAC2_PDAC2_HOLD_Msk = 0x20000000
	// Bit PDAC2_HOLD.
	RTC_GPIO_PAD_DAC2_PDAC2_HOLD = 0x20000000
	// Position of PDAC2_DRV field.
	RTC_GPIO_PAD_DAC2_PDAC2_DRV_Pos = 0x1e
	// Bit mask of PDAC2_DRV field.
	RTC_GPIO_PAD_DAC2_PDAC2_DRV_Msk = 0xc0000000

	// XTAL_32K_PAD
	// Position of DBIAS_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_DBIAS_XTAL_32K_Pos = 0x1
	// Bit mask of DBIAS_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_DBIAS_XTAL_32K_Msk = 0x6
	// Position of DRES_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_DRES_XTAL_32K_Pos = 0x3
	// Bit mask of DRES_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_DRES_XTAL_32K_Msk = 0x18
	// Position of X32P_FUN_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_FUN_IE_Pos = 0x5
	// Bit mask of X32P_FUN_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_FUN_IE_Msk = 0x20
	// Bit X32P_FUN_IE.
	RTC_GPIO_XTAL_32K_PAD_X32P_FUN_IE = 0x20
	// Position of X32P_SLP_OE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_OE_Pos = 0x6
	// Bit mask of X32P_SLP_OE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_OE_Msk = 0x40
	// Bit X32P_SLP_OE.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_OE = 0x40
	// Position of X32P_SLP_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_IE_Pos = 0x7
	// Bit mask of X32P_SLP_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_IE_Msk = 0x80
	// Bit X32P_SLP_IE.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_IE = 0x80
	// Position of X32P_SLP_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_SEL_Pos = 0x8
	// Bit mask of X32P_SLP_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_SEL_Msk = 0x100
	// Bit X32P_SLP_SEL.
	RTC_GPIO_XTAL_32K_PAD_X32P_SLP_SEL = 0x100
	// Position of X32P_FUN_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32P_FUN_SEL_Pos = 0x9
	// Bit mask of X32P_FUN_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32P_FUN_SEL_Msk = 0x600
	// Position of X32N_FUN_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_FUN_IE_Pos = 0xb
	// Bit mask of X32N_FUN_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_FUN_IE_Msk = 0x800
	// Bit X32N_FUN_IE.
	RTC_GPIO_XTAL_32K_PAD_X32N_FUN_IE = 0x800
	// Position of X32N_SLP_OE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_OE_Pos = 0xc
	// Bit mask of X32N_SLP_OE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_OE_Msk = 0x1000
	// Bit X32N_SLP_OE.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_OE = 0x1000
	// Position of X32N_SLP_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_IE_Pos = 0xd
	// Bit mask of X32N_SLP_IE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_IE_Msk = 0x2000
	// Bit X32N_SLP_IE.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_IE = 0x2000
	// Position of X32N_SLP_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_SEL_Pos = 0xe
	// Bit mask of X32N_SLP_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_SEL_Msk = 0x4000
	// Bit X32N_SLP_SEL.
	RTC_GPIO_XTAL_32K_PAD_X32N_SLP_SEL = 0x4000
	// Position of X32N_FUN_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32N_FUN_SEL_Pos = 0xf
	// Bit mask of X32N_FUN_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32N_FUN_SEL_Msk = 0x18000
	// Position of X32P_MUX_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32P_MUX_SEL_Pos = 0x11
	// Bit mask of X32P_MUX_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32P_MUX_SEL_Msk = 0x20000
	// Bit X32P_MUX_SEL.
	RTC_GPIO_XTAL_32K_PAD_X32P_MUX_SEL = 0x20000
	// Position of X32N_MUX_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32N_MUX_SEL_Pos = 0x12
	// Bit mask of X32N_MUX_SEL field.
	RTC_GPIO_XTAL_32K_PAD_X32N_MUX_SEL_Msk = 0x40000
	// Bit X32N_MUX_SEL.
	RTC_GPIO_XTAL_32K_PAD_X32N_MUX_SEL = 0x40000
	// Position of XPD_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_XPD_XTAL_32K_Pos = 0x13
	// Bit mask of XPD_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_XPD_XTAL_32K_Msk = 0x80000
	// Bit XPD_XTAL_32K.
	RTC_GPIO_XTAL_32K_PAD_XPD_XTAL_32K = 0x80000
	// Position of DAC_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_DAC_XTAL_32K_Pos = 0x14
	// Bit mask of DAC_XTAL_32K field.
	RTC_GPIO_XTAL_32K_PAD_DAC_XTAL_32K_Msk = 0x300000
	// Position of X32P_RUE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_RUE_Pos = 0x16
	// Bit mask of X32P_RUE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_RUE_Msk = 0x400000
	// Bit X32P_RUE.
	RTC_GPIO_XTAL_32K_PAD_X32P_RUE = 0x400000
	// Position of X32P_RDE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_RDE_Pos = 0x17
	// Bit mask of X32P_RDE field.
	RTC_GPIO_XTAL_32K_PAD_X32P_RDE_Msk = 0x800000
	// Bit X32P_RDE.
	RTC_GPIO_XTAL_32K_PAD_X32P_RDE = 0x800000
	// Position of X32P_HOLD field.
	RTC_GPIO_XTAL_32K_PAD_X32P_HOLD_Pos = 0x18
	// Bit mask of X32P_HOLD field.
	RTC_GPIO_XTAL_32K_PAD_X32P_HOLD_Msk = 0x1000000
	// Bit X32P_HOLD.
	RTC_GPIO_XTAL_32K_PAD_X32P_HOLD = 0x1000000
	// Position of X32P_DRV field.
	RTC_GPIO_XTAL_32K_PAD_X32P_DRV_Pos = 0x19
	// Bit mask of X32P_DRV field.
	RTC_GPIO_XTAL_32K_PAD_X32P_DRV_Msk = 0x6000000
	// Position of X32N_RUE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_RUE_Pos = 0x1b
	// Bit mask of X32N_RUE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_RUE_Msk = 0x8000000
	// Bit X32N_RUE.
	RTC_GPIO_XTAL_32K_PAD_X32N_RUE = 0x8000000
	// Position of X32N_RDE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_RDE_Pos = 0x1c
	// Bit mask of X32N_RDE field.
	RTC_GPIO_XTAL_32K_PAD_X32N_RDE_Msk = 0x10000000
	// Bit X32N_RDE.
	RTC_GPIO_XTAL_32K_PAD_X32N_RDE = 0x10000000
	// Position of X32N_HOLD field.
	RTC_GPIO_XTAL_32K_PAD_X32N_HOLD_Pos = 0x1d
	// Bit mask of X32N_HOLD field.
	RTC_GPIO_XTAL_32K_PAD_X32N_HOLD_Msk = 0x20000000
	// Bit X32N_HOLD.
	RTC_GPIO_XTAL_32K_PAD_X32N_HOLD = 0x20000000
	// Position of X32N_DRV field.
	RTC_GPIO_XTAL_32K_PAD_X32N_DRV_Pos = 0x1e
	// Bit mask of X32N_DRV field.
	RTC_GPIO_XTAL_32K_PAD_X32N_DRV_Msk = 0xc0000000

	// TOUCH_CFG
	// Position of TOUCH_DCUR field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DCUR_Pos = 0x17
	// Bit mask of TOUCH_DCUR field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DCUR_Msk = 0x1800000
	// Position of TOUCH_DRANGE field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DRANGE_Pos = 0x19
	// Bit mask of TOUCH_DRANGE field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DRANGE_Msk = 0x6000000
	// Position of TOUCH_DREFL field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DREFL_Pos = 0x1b
	// Bit mask of TOUCH_DREFL field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DREFL_Msk = 0x18000000
	// Position of TOUCH_DREFH field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DREFH_Pos = 0x1d
	// Bit mask of TOUCH_DREFH field.
	RTC_GPIO_TOUCH_CFG_TOUCH_DREFH_Msk = 0x60000000
	// Position of TOUCH_XPD_BIAS field.
	RTC_GPIO_TOUCH_CFG_TOUCH_XPD_BIAS_Pos = 0x1f
	// Bit mask of TOUCH_XPD_BIAS field.
	RTC_GPIO_TOUCH_CFG_TOUCH_XPD_BIAS_Msk = 0x80000000
	// Bit TOUCH_XPD_BIAS.
	RTC_GPIO_TOUCH_CFG_TOUCH_XPD_BIAS = 0x80000000

	// TOUCH_PAD0
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD0_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD0_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD0_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD0_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD0_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD0_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD0_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD0_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD0_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD0_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD0_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD0_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD0_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD0_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD0_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD0_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD0_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD0_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD0_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD0_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD0_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD0_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD0_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD0_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD0_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD0_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD0_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD0_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD0_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD0_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD0_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD0_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD0_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD0_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD0_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD0_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD0_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD0_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD0_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD0_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD0_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD0_HOLD = 0x80000000

	// TOUCH_PAD1
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD1_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD1_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD1_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD1_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD1_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD1_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD1_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD1_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD1_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD1_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD1_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD1_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD1_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD1_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD1_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD1_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD1_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD1_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD1_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD1_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD1_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD1_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD1_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD1_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD1_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD1_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD1_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD1_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD1_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD1_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD1_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD1_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD1_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD1_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD1_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD1_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD1_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD1_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD1_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD1_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD1_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD1_HOLD = 0x80000000

	// TOUCH_PAD2
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD2_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD2_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD2_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD2_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD2_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD2_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD2_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD2_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD2_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD2_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD2_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD2_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD2_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD2_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD2_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD2_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD2_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD2_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD2_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD2_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD2_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD2_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD2_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD2_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD2_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD2_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD2_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD2_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD2_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD2_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD2_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD2_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD2_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD2_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD2_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD2_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD2_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD2_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD2_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD2_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD2_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD2_HOLD = 0x80000000

	// TOUCH_PAD3
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD3_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD3_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD3_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD3_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD3_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD3_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD3_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD3_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD3_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD3_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD3_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD3_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD3_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD3_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD3_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD3_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD3_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD3_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD3_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD3_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD3_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD3_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD3_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD3_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD3_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD3_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD3_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD3_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD3_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD3_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD3_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD3_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD3_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD3_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD3_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD3_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD3_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD3_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD3_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD3_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD3_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD3_HOLD = 0x80000000

	// TOUCH_PAD4
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD4_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD4_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD4_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD4_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD4_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD4_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD4_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD4_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD4_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD4_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD4_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD4_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD4_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD4_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD4_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD4_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD4_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD4_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD4_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD4_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD4_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD4_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD4_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD4_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD4_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD4_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD4_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD4_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD4_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD4_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD4_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD4_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD4_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD4_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD4_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD4_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD4_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD4_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD4_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD4_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD4_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD4_HOLD = 0x80000000

	// TOUCH_PAD5
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD5_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD5_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD5_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD5_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD5_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD5_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD5_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD5_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD5_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD5_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD5_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD5_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD5_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD5_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD5_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD5_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD5_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD5_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD5_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD5_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD5_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD5_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD5_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD5_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD5_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD5_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD5_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD5_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD5_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD5_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD5_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD5_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD5_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD5_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD5_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD5_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD5_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD5_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD5_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD5_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD5_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD5_HOLD = 0x80000000

	// TOUCH_PAD6
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD6_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD6_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD6_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD6_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD6_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD6_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD6_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD6_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD6_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD6_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD6_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD6_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD6_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD6_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD6_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD6_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD6_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD6_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD6_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD6_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD6_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD6_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD6_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD6_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD6_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD6_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD6_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD6_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD6_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD6_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD6_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD6_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD6_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD6_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD6_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD6_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD6_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD6_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD6_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD6_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD6_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD6_HOLD = 0x80000000

	// TOUCH_PAD7
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD7_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD7_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD7_TO_GPIO = 0x1000
	// Position of FUN_IE field.
	RTC_GPIO_TOUCH_PAD7_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTC_GPIO_TOUCH_PAD7_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTC_GPIO_TOUCH_PAD7_FUN_IE = 0x2000
	// Position of SLP_OE field.
	RTC_GPIO_TOUCH_PAD7_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTC_GPIO_TOUCH_PAD7_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTC_GPIO_TOUCH_PAD7_SLP_OE = 0x4000
	// Position of SLP_IE field.
	RTC_GPIO_TOUCH_PAD7_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTC_GPIO_TOUCH_PAD7_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTC_GPIO_TOUCH_PAD7_SLP_IE = 0x8000
	// Position of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD7_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTC_GPIO_TOUCH_PAD7_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTC_GPIO_TOUCH_PAD7_SLP_SEL = 0x10000
	// Position of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD7_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTC_GPIO_TOUCH_PAD7_FUN_SEL_Msk = 0x60000
	// Position of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD7_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTC_GPIO_TOUCH_PAD7_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTC_GPIO_TOUCH_PAD7_MUX_SEL = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD7_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD7_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD7_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD7_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD7_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD7_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD7_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD7_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD7_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD7_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD7_DAC_Msk = 0x3800000
	// Position of RUE field.
	RTC_GPIO_TOUCH_PAD7_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTC_GPIO_TOUCH_PAD7_RUE_Msk = 0x8000000
	// Bit RUE.
	RTC_GPIO_TOUCH_PAD7_RUE = 0x8000000
	// Position of RDE field.
	RTC_GPIO_TOUCH_PAD7_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTC_GPIO_TOUCH_PAD7_RDE_Msk = 0x10000000
	// Bit RDE.
	RTC_GPIO_TOUCH_PAD7_RDE = 0x10000000
	// Position of DRV field.
	RTC_GPIO_TOUCH_PAD7_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTC_GPIO_TOUCH_PAD7_DRV_Msk = 0x60000000
	// Position of HOLD field.
	RTC_GPIO_TOUCH_PAD7_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTC_GPIO_TOUCH_PAD7_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTC_GPIO_TOUCH_PAD7_HOLD = 0x80000000

	// TOUCH_PAD8
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD8_TO_GPIO_Pos = 0x13
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD8_TO_GPIO_Msk = 0x80000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD8_TO_GPIO = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD8_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD8_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD8_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD8_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD8_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD8_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD8_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD8_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD8_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD8_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD8_DAC_Msk = 0x3800000

	// TOUCH_PAD9
	// Position of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD9_TO_GPIO_Pos = 0x13
	// Bit mask of TO_GPIO field.
	RTC_GPIO_TOUCH_PAD9_TO_GPIO_Msk = 0x80000
	// Bit TO_GPIO.
	RTC_GPIO_TOUCH_PAD9_TO_GPIO = 0x80000
	// Position of XPD field.
	RTC_GPIO_TOUCH_PAD9_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTC_GPIO_TOUCH_PAD9_XPD_Msk = 0x100000
	// Bit XPD.
	RTC_GPIO_TOUCH_PAD9_XPD = 0x100000
	// Position of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD9_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTC_GPIO_TOUCH_PAD9_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTC_GPIO_TOUCH_PAD9_TIE_OPT = 0x200000
	// Position of START field.
	RTC_GPIO_TOUCH_PAD9_START_Pos = 0x16
	// Bit mask of START field.
	RTC_GPIO_TOUCH_PAD9_START_Msk = 0x400000
	// Bit START.
	RTC_GPIO_TOUCH_PAD9_START = 0x400000
	// Position of DAC field.
	RTC_GPIO_TOUCH_PAD9_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTC_GPIO_TOUCH_PAD9_DAC_Msk = 0x3800000

	// EXT_WAKEUP0
	// Position of SEL field.
	RTC_GPIO_EXT_WAKEUP0_SEL_Pos = 0x1b
	// Bit mask of SEL field.
	RTC_GPIO_EXT_WAKEUP0_SEL_Msk = 0xf8000000

	// XTL_EXT_CTR
	// Position of SEL field.
	RTC_GPIO_XTL_EXT_CTR_SEL_Pos = 0x1b
	// Bit mask of SEL field.
	RTC_GPIO_XTL_EXT_CTR_SEL_Msk = 0xf8000000

	// SAR_I2C_IO
	// Position of SAR_DEBUG_BIT_SEL field.
	RTC_GPIO_SAR_I2C_IO_SAR_DEBUG_BIT_SEL_Pos = 0x17
	// Bit mask of SAR_DEBUG_BIT_SEL field.
	RTC_GPIO_SAR_I2C_IO_SAR_DEBUG_BIT_SEL_Msk = 0xf800000
	// Position of SAR_I2C_SCL_SEL field.
	RTC_GPIO_SAR_I2C_IO_SAR_I2C_SCL_SEL_Pos = 0x1c
	// Bit mask of SAR_I2C_SCL_SEL field.
	RTC_GPIO_SAR_I2C_IO_SAR_I2C_SCL_SEL_Msk = 0x30000000
	// Position of SAR_I2C_SDA_SEL field.
	RTC_GPIO_SAR_I2C_IO_SAR_I2C_SDA_SEL_Pos = 0x1e
	// Bit mask of SAR_I2C_SDA_SEL field.
	RTC_GPIO_SAR_I2C_IO_SAR_I2C_SDA_SEL_Msk = 0xc0000000

	// DATE
	// Position of IO_DATE field.
	RTC_GPIO_DATE_IO_DATE_Pos = 0x0
	// Bit mask of IO_DATE field.
	RTC_GPIO_DATE_IO_DATE_Msk = 0xfffffff
)

// Constants for RTC_I2C: Low-power I2C (Inter-Integrated Circuit) Controller
const (
	// SCL_LOW_PERIOD
	// Position of SCL_LOW_PERIOD field.
	RTC_I2C_SCL_LOW_PERIOD_SCL_LOW_PERIOD_Pos = 0x0
	// Bit mask of SCL_LOW_PERIOD field.
	RTC_I2C_SCL_LOW_PERIOD_SCL_LOW_PERIOD_Msk = 0x1ffffff

	// CTRL
	// Position of SDA_FORCE_OUT field.
	RTC_I2C_CTRL_SDA_FORCE_OUT_Pos = 0x0
	// Bit mask of SDA_FORCE_OUT field.
	RTC_I2C_CTRL_SDA_FORCE_OUT_Msk = 0x1
	// Bit SDA_FORCE_OUT.
	RTC_I2C_CTRL_SDA_FORCE_OUT = 0x1
	// Position of SCL_FORCE_OUT field.
	RTC_I2C_CTRL_SCL_FORCE_OUT_Pos = 0x1
	// Bit mask of SCL_FORCE_OUT field.
	RTC_I2C_CTRL_SCL_FORCE_OUT_Msk = 0x2
	// Bit SCL_FORCE_OUT.
	RTC_I2C_CTRL_SCL_FORCE_OUT = 0x2
	// Position of MS_MODE field.
	RTC_I2C_CTRL_MS_MODE_Pos = 0x4
	// Bit mask of MS_MODE field.
	RTC_I2C_CTRL_MS_MODE_Msk = 0x10
	// Bit MS_MODE.
	RTC_I2C_CTRL_MS_MODE = 0x10
	// Position of TRANS_START field.
	RTC_I2C_CTRL_TRANS_START_Pos = 0x5
	// Bit mask of TRANS_START field.
	RTC_I2C_CTRL_TRANS_START_Msk = 0x20
	// Bit TRANS_START.
	RTC_I2C_CTRL_TRANS_START = 0x20
	// Position of TX_LSB_FIRST field.
	RTC_I2C_CTRL_TX_LSB_FIRST_Pos = 0x6
	// Bit mask of TX_LSB_FIRST field.
	RTC_I2C_CTRL_TX_LSB_FIRST_Msk = 0x40
	// Bit TX_LSB_FIRST.
	RTC_I2C_CTRL_TX_LSB_FIRST = 0x40
	// Position of RX_LSB_FIRST field.
	RTC_I2C_CTRL_RX_LSB_FIRST_Pos = 0x7
	// Bit mask of RX_LSB_FIRST field.
	RTC_I2C_CTRL_RX_LSB_FIRST_Msk = 0x80
	// Bit RX_LSB_FIRST.
	RTC_I2C_CTRL_RX_LSB_FIRST = 0x80

	// DEBUG_STATUS
	// Position of ACK_VAL field.
	RTC_I2C_DEBUG_STATUS_ACK_VAL_Pos = 0x0
	// Bit mask of ACK_VAL field.
	RTC_I2C_DEBUG_STATUS_ACK_VAL_Msk = 0x1
	// Bit ACK_VAL.
	RTC_I2C_DEBUG_STATUS_ACK_VAL = 0x1
	// Position of SLAVE_RW field.
	RTC_I2C_DEBUG_STATUS_SLAVE_RW_Pos = 0x1
	// Bit mask of SLAVE_RW field.
	RTC_I2C_DEBUG_STATUS_SLAVE_RW_Msk = 0x2
	// Bit SLAVE_RW.
	RTC_I2C_DEBUG_STATUS_SLAVE_RW = 0x2
	// Position of TIMED_OUT field.
	RTC_I2C_DEBUG_STATUS_TIMED_OUT_Pos = 0x2
	// Bit mask of TIMED_OUT field.
	RTC_I2C_DEBUG_STATUS_TIMED_OUT_Msk = 0x4
	// Bit TIMED_OUT.
	RTC_I2C_DEBUG_STATUS_TIMED_OUT = 0x4
	// Position of ARB_LOST field.
	RTC_I2C_DEBUG_STATUS_ARB_LOST_Pos = 0x3
	// Bit mask of ARB_LOST field.
	RTC_I2C_DEBUG_STATUS_ARB_LOST_Msk = 0x8
	// Bit ARB_LOST.
	RTC_I2C_DEBUG_STATUS_ARB_LOST = 0x8
	// Position of BUS_BUSY field.
	RTC_I2C_DEBUG_STATUS_BUS_BUSY_Pos = 0x4
	// Bit mask of BUS_BUSY field.
	RTC_I2C_DEBUG_STATUS_BUS_BUSY_Msk = 0x10
	// Bit BUS_BUSY.
	RTC_I2C_DEBUG_STATUS_BUS_BUSY = 0x10
	// Position of SLAVE_ADDR_MATCH field.
	RTC_I2C_DEBUG_STATUS_SLAVE_ADDR_MATCH_Pos = 0x5
	// Bit mask of SLAVE_ADDR_MATCH field.
	RTC_I2C_DEBUG_STATUS_SLAVE_ADDR_MATCH_Msk = 0x20
	// Bit SLAVE_ADDR_MATCH.
	RTC_I2C_DEBUG_STATUS_SLAVE_ADDR_MATCH = 0x20
	// Position of BYTE_TRANS field.
	RTC_I2C_DEBUG_STATUS_BYTE_TRANS_Pos = 0x6
	// Bit mask of BYTE_TRANS field.
	RTC_I2C_DEBUG_STATUS_BYTE_TRANS_Msk = 0x40
	// Bit BYTE_TRANS.
	RTC_I2C_DEBUG_STATUS_BYTE_TRANS = 0x40
	// Position of MAIN_STATE field.
	RTC_I2C_DEBUG_STATUS_MAIN_STATE_Pos = 0x19
	// Bit mask of MAIN_STATE field.
	RTC_I2C_DEBUG_STATUS_MAIN_STATE_Msk = 0xe000000
	// Position of SCL_STATE field.
	RTC_I2C_DEBUG_STATUS_SCL_STATE_Pos = 0x1c
	// Bit mask of SCL_STATE field.
	RTC_I2C_DEBUG_STATUS_SCL_STATE_Msk = 0x70000000

	// TIMEOUT
	// Position of TIMEOUT field.
	RTC_I2C_TIMEOUT_TIMEOUT_Pos = 0x0
	// Bit mask of TIMEOUT field.
	RTC_I2C_TIMEOUT_TIMEOUT_Msk = 0xfffff

	// SLAVE_ADDR
	// Position of SLAVE_ADDR field.
	RTC_I2C_SLAVE_ADDR_SLAVE_ADDR_Pos = 0x0
	// Bit mask of SLAVE_ADDR field.
	RTC_I2C_SLAVE_ADDR_SLAVE_ADDR_Msk = 0x7fff
	// Position of _10BIT field.
	RTC_I2C_SLAVE_ADDR__10BIT_Pos = 0x1f
	// Bit mask of _10BIT field.
	RTC_I2C_SLAVE_ADDR__10BIT_Msk = 0x80000000
	// Bit _10BIT.
	RTC_I2C_SLAVE_ADDR__10BIT = 0x80000000

	// INT_RAW
	// Position of SLAVE_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW_Pos = 0x3
	// Bit mask of SLAVE_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW_Msk = 0x8
	// Bit SLAVE_TRANS_COMPLETE_INT_RAW.
	RTC_I2C_INT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW = 0x8
	// Position of ARBITRATION_LOST_INT_RAW field.
	RTC_I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Pos = 0x4
	// Bit mask of ARBITRATION_LOST_INT_RAW field.
	RTC_I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Msk = 0x10
	// Bit ARBITRATION_LOST_INT_RAW.
	RTC_I2C_INT_RAW_ARBITRATION_LOST_INT_RAW = 0x10
	// Position of MASTER_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_MASTER_TRANS_COMPLETE_INT_RAW_Pos = 0x5
	// Bit mask of MASTER_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_MASTER_TRANS_COMPLETE_INT_RAW_Msk = 0x20
	// Bit MASTER_TRANS_COMPLETE_INT_RAW.
	RTC_I2C_INT_RAW_MASTER_TRANS_COMPLETE_INT_RAW = 0x20
	// Position of TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Pos = 0x6
	// Bit mask of TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Msk = 0x40
	// Bit TRANS_COMPLETE_INT_RAW.
	RTC_I2C_INT_RAW_TRANS_COMPLETE_INT_RAW = 0x40
	// Position of TIME_OUT_INT_RAW field.
	RTC_I2C_INT_RAW_TIME_OUT_INT_RAW_Pos = 0x7
	// Bit mask of TIME_OUT_INT_RAW field.
	RTC_I2C_INT_RAW_TIME_OUT_INT_RAW_Msk = 0x80
	// Bit TIME_OUT_INT_RAW.
	RTC_I2C_INT_RAW_TIME_OUT_INT_RAW = 0x80

	// INT_CLR
	// Position of SLAVE_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR_Pos = 0x4
	// Bit mask of SLAVE_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR_Msk = 0x10
	// Bit SLAVE_TRANS_COMPLETE_INT_CLR.
	RTC_I2C_INT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR = 0x10
	// Position of ARBITRATION_LOST_INT_CLR field.
	RTC_I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_CLR field.
	RTC_I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_CLR.
	RTC_I2C_INT_CLR_ARBITRATION_LOST_INT_CLR = 0x20
	// Position of MASTER_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_MASTER_TRANS_COMPLETE_INT_CLR_Pos = 0x6
	// Bit mask of MASTER_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_MASTER_TRANS_COMPLETE_INT_CLR_Msk = 0x40
	// Bit MASTER_TRANS_COMPLETE_INT_CLR.
	RTC_I2C_INT_CLR_MASTER_TRANS_COMPLETE_INT_CLR = 0x40
	// Position of TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_CLR.
	RTC_I2C_INT_CLR_TRANS_COMPLETE_INT_CLR = 0x80
	// Position of TIME_OUT_INT_CLR field.
	RTC_I2C_INT_CLR_TIME_OUT_INT_CLR_Pos = 0x8
	// Bit mask of TIME_OUT_INT_CLR field.
	RTC_I2C_INT_CLR_TIME_OUT_INT_CLR_Msk = 0x100
	// Bit TIME_OUT_INT_CLR.
	RTC_I2C_INT_CLR_TIME_OUT_INT_CLR = 0x100

	// SDA_DUTY
	// Position of SDA_DUTY field.
	RTC_I2C_SDA_DUTY_SDA_DUTY_Pos = 0x0
	// Bit mask of SDA_DUTY field.
	RTC_I2C_SDA_DUTY_SDA_DUTY_Msk = 0xfffff

	// SCL_HIGH_PERIOD
	// Position of SCL_HIGH_PERIOD field.
	RTC_I2C_SCL_HIGH_PERIOD_SCL_HIGH_PERIOD_Pos = 0x0
	// Bit mask of SCL_HIGH_PERIOD field.
	RTC_I2C_SCL_HIGH_PERIOD_SCL_HIGH_PERIOD_Msk = 0xfffff

	// SCL_START_PERIOD
	// Position of SCL_START_PERIOD field.
	RTC_I2C_SCL_START_PERIOD_SCL_START_PERIOD_Pos = 0x0
	// Bit mask of SCL_START_PERIOD field.
	RTC_I2C_SCL_START_PERIOD_SCL_START_PERIOD_Msk = 0xfffff

	// SCL_STOP_PERIOD
	// Position of SCL_STOP_PERIOD field.
	RTC_I2C_SCL_STOP_PERIOD_SCL_STOP_PERIOD_Pos = 0x0
	// Bit mask of SCL_STOP_PERIOD field.
	RTC_I2C_SCL_STOP_PERIOD_SCL_STOP_PERIOD_Msk = 0xfffff

	// CMD
	// Position of VAL field.
	RTC_I2C_CMD_VAL_Pos = 0x0
	// Bit mask of VAL field.
	RTC_I2C_CMD_VAL_Msk = 0x3fff
	// Position of DONE field.
	RTC_I2C_CMD_DONE_Pos = 0x1f
	// Bit mask of DONE field.
	RTC_I2C_CMD_DONE_Msk = 0x80000000
	// Bit DONE.
	RTC_I2C_CMD_DONE = 0x80000000
)

// Constants for SDHOST: SD/MMC Host Controller
const (
	// CTRL: Control register
	// Position of CONTROLLER_RESET field.
	SDHOST_CTRL_CONTROLLER_RESET_Pos = 0x0
	// Bit mask of CONTROLLER_RESET field.
	SDHOST_CTRL_CONTROLLER_RESET_Msk = 0x1
	// Bit CONTROLLER_RESET.
	SDHOST_CTRL_CONTROLLER_RESET = 0x1
	// Position of FIFO_RESET field.
	SDHOST_CTRL_FIFO_RESET_Pos = 0x1
	// Bit mask of FIFO_RESET field.
	SDHOST_CTRL_FIFO_RESET_Msk = 0x2
	// Bit FIFO_RESET.
	SDHOST_CTRL_FIFO_RESET = 0x2
	// Position of DMA_RESET field.
	SDHOST_CTRL_DMA_RESET_Pos = 0x2
	// Bit mask of DMA_RESET field.
	SDHOST_CTRL_DMA_RESET_Msk = 0x4
	// Bit DMA_RESET.
	SDHOST_CTRL_DMA_RESET = 0x4
	// Position of INT_ENABLE field.
	SDHOST_CTRL_INT_ENABLE_Pos = 0x4
	// Bit mask of INT_ENABLE field.
	SDHOST_CTRL_INT_ENABLE_Msk = 0x10
	// Bit INT_ENABLE.
	SDHOST_CTRL_INT_ENABLE = 0x10
	// Position of READ_WAIT field.
	SDHOST_CTRL_READ_WAIT_Pos = 0x6
	// Bit mask of READ_WAIT field.
	SDHOST_CTRL_READ_WAIT_Msk = 0x40
	// Bit READ_WAIT.
	SDHOST_CTRL_READ_WAIT = 0x40
	// Position of SEND_IRQ_RESPONSE field.
	SDHOST_CTRL_SEND_IRQ_RESPONSE_Pos = 0x7
	// Bit mask of SEND_IRQ_RESPONSE field.
	SDHOST_CTRL_SEND_IRQ_RESPONSE_Msk = 0x80
	// Bit SEND_IRQ_RESPONSE.
	SDHOST_CTRL_SEND_IRQ_RESPONSE = 0x80
	// Position of ABORT_READ_DATA field.
	SDHOST_CTRL_ABORT_READ_DATA_Pos = 0x8
	// Bit mask of ABORT_READ_DATA field.
	SDHOST_CTRL_ABORT_READ_DATA_Msk = 0x100
	// Bit ABORT_READ_DATA.
	SDHOST_CTRL_ABORT_READ_DATA = 0x100
	// Position of SEND_CCSD field.
	SDHOST_CTRL_SEND_CCSD_Pos = 0x9
	// Bit mask of SEND_CCSD field.
	SDHOST_CTRL_SEND_CCSD_Msk = 0x200
	// Bit SEND_CCSD.
	SDHOST_CTRL_SEND_CCSD = 0x200
	// Position of SEND_AUTO_STOP_CCSD field.
	SDHOST_CTRL_SEND_AUTO_STOP_CCSD_Pos = 0xa
	// Bit mask of SEND_AUTO_STOP_CCSD field.
	SDHOST_CTRL_SEND_AUTO_STOP_CCSD_Msk = 0x400
	// Bit SEND_AUTO_STOP_CCSD.
	SDHOST_CTRL_SEND_AUTO_STOP_CCSD = 0x400
	// Position of CEATA_DEVICE_INTERRUPT_STATUS field.
	SDHOST_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_Pos = 0xb
	// Bit mask of CEATA_DEVICE_INTERRUPT_STATUS field.
	SDHOST_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_Msk = 0x800
	// Bit CEATA_DEVICE_INTERRUPT_STATUS.
	SDHOST_CTRL_CEATA_DEVICE_INTERRUPT_STATUS = 0x800

	// CLKDIV: Clock divider configuration register
	// Position of CLK_DIVIDER0 field.
	SDHOST_CLKDIV_CLK_DIVIDER0_Pos = 0x0
	// Bit mask of CLK_DIVIDER0 field.
	SDHOST_CLKDIV_CLK_DIVIDER0_Msk = 0xff
	// Position of CLK_DIVIDER1 field.
	SDHOST_CLKDIV_CLK_DIVIDER1_Pos = 0x8
	// Bit mask of CLK_DIVIDER1 field.
	SDHOST_CLKDIV_CLK_DIVIDER1_Msk = 0xff00
	// Position of CLK_DIVIDER2 field.
	SDHOST_CLKDIV_CLK_DIVIDER2_Pos = 0x10
	// Bit mask of CLK_DIVIDER2 field.
	SDHOST_CLKDIV_CLK_DIVIDER2_Msk = 0xff0000
	// Position of CLK_DIVIDER3 field.
	SDHOST_CLKDIV_CLK_DIVIDER3_Pos = 0x18
	// Bit mask of CLK_DIVIDER3 field.
	SDHOST_CLKDIV_CLK_DIVIDER3_Msk = 0xff000000

	// CLKSRC: Clock source selection register
	// Position of CLKSRC field.
	SDHOST_CLKSRC_CLKSRC_Pos = 0x0
	// Bit mask of CLKSRC field.
	SDHOST_CLKSRC_CLKSRC_Msk = 0xf

	// CLKENA: Clock enable register
	// Position of CCLK_ENABLE field.
	SDHOST_CLKENA_CCLK_ENABLE_Pos = 0x0
	// Bit mask of CCLK_ENABLE field.
	SDHOST_CLKENA_CCLK_ENABLE_Msk = 0x3
	// Position of LP_ENABLE field.
	SDHOST_CLKENA_LP_ENABLE_Pos = 0x10
	// Bit mask of LP_ENABLE field.
	SDHOST_CLKENA_LP_ENABLE_Msk = 0x30000

	// TMOUT: Data and response timeout configuration register
	// Position of RESPONSE_TIMEOUT field.
	SDHOST_TMOUT_RESPONSE_TIMEOUT_Pos = 0x0
	// Bit mask of RESPONSE_TIMEOUT field.
	SDHOST_TMOUT_RESPONSE_TIMEOUT_Msk = 0xff
	// Position of DATA_TIMEOUT field.
	SDHOST_TMOUT_DATA_TIMEOUT_Pos = 0x8
	// Bit mask of DATA_TIMEOUT field.
	SDHOST_TMOUT_DATA_TIMEOUT_Msk = 0xffffff00

	// CTYPE: Card bus width configuration register
	// Position of CARD_WIDTH4 field.
	SDHOST_CTYPE_CARD_WIDTH4_Pos = 0x0
	// Bit mask of CARD_WIDTH4 field.
	SDHOST_CTYPE_CARD_WIDTH4_Msk = 0x3
	// Position of CARD_WIDTH8 field.
	SDHOST_CTYPE_CARD_WIDTH8_Pos = 0x10
	// Bit mask of CARD_WIDTH8 field.
	SDHOST_CTYPE_CARD_WIDTH8_Msk = 0x30000

	// BLKSIZ: Card data block size configuration register
	// Position of BLOCK_SIZE field.
	SDHOST_BLKSIZ_BLOCK_SIZE_Pos = 0x0
	// Bit mask of BLOCK_SIZE field.
	SDHOST_BLKSIZ_BLOCK_SIZE_Msk = 0xffff

	// BYTCNT: Data transfer length configuration register
	// Position of BYTE_COUNT field.
	SDHOST_BYTCNT_BYTE_COUNT_Pos = 0x0
	// Bit mask of BYTE_COUNT field.
	SDHOST_BYTCNT_BYTE_COUNT_Msk = 0xffffffff

	// INTMASK: SDIO interrupt mask register
	// Position of INT_MASK field.
	SDHOST_INTMASK_INT_MASK_Pos = 0x0
	// Bit mask of INT_MASK field.
	SDHOST_INTMASK_INT_MASK_Msk = 0xffff
	// Position of SDIO_INT_MASK field.
	SDHOST_INTMASK_SDIO_INT_MASK_Pos = 0x10
	// Bit mask of SDIO_INT_MASK field.
	SDHOST_INTMASK_SDIO_INT_MASK_Msk = 0x30000

	// CMDARG: Command argument data register
	// Position of CMDARG field.
	SDHOST_CMDARG_CMDARG_Pos = 0x0
	// Bit mask of CMDARG field.
	SDHOST_CMDARG_CMDARG_Msk = 0xffffffff

	// CMD: Command and boot configuration register
	// Position of INDEX field.
	SDHOST_CMD_INDEX_Pos = 0x0
	// Bit mask of INDEX field.
	SDHOST_CMD_INDEX_Msk = 0x3f
	// Position of RESPONSE_EXPECT field.
	SDHOST_CMD_RESPONSE_EXPECT_Pos = 0x6
	// Bit mask of RESPONSE_EXPECT field.
	SDHOST_CMD_RESPONSE_EXPECT_Msk = 0x40
	// Bit RESPONSE_EXPECT.
	SDHOST_CMD_RESPONSE_EXPECT = 0x40
	// Position of RESPONSE_LENGTH field.
	SDHOST_CMD_RESPONSE_LENGTH_Pos = 0x7
	// Bit mask of RESPONSE_LENGTH field.
	SDHOST_CMD_RESPONSE_LENGTH_Msk = 0x80
	// Bit RESPONSE_LENGTH.
	SDHOST_CMD_RESPONSE_LENGTH = 0x80
	// Position of CHECK_RESPONSE_CRC field.
	SDHOST_CMD_CHECK_RESPONSE_CRC_Pos = 0x8
	// Bit mask of CHECK_RESPONSE_CRC field.
	SDHOST_CMD_CHECK_RESPONSE_CRC_Msk = 0x100
	// Bit CHECK_RESPONSE_CRC.
	SDHOST_CMD_CHECK_RESPONSE_CRC = 0x100
	// Position of DATA_EXPECTED field.
	SDHOST_CMD_DATA_EXPECTED_Pos = 0x9
	// Bit mask of DATA_EXPECTED field.
	SDHOST_CMD_DATA_EXPECTED_Msk = 0x200
	// Bit DATA_EXPECTED.
	SDHOST_CMD_DATA_EXPECTED = 0x200
	// Position of READ_WRITE field.
	SDHOST_CMD_READ_WRITE_Pos = 0xa
	// Bit mask of READ_WRITE field.
	SDHOST_CMD_READ_WRITE_Msk = 0x400
	// Bit READ_WRITE.
	SDHOST_CMD_READ_WRITE = 0x400
	// Position of TRANSFER_MODE field.
	SDHOST_CMD_TRANSFER_MODE_Pos = 0xb
	// Bit mask of TRANSFER_MODE field.
	SDHOST_CMD_TRANSFER_MODE_Msk = 0x800
	// Bit TRANSFER_MODE.
	SDHOST_CMD_TRANSFER_MODE = 0x800
	// Position of SEND_AUTO_STOP field.
	SDHOST_CMD_SEND_AUTO_STOP_Pos = 0xc
	// Bit mask of SEND_AUTO_STOP field.
	SDHOST_CMD_SEND_AUTO_STOP_Msk = 0x1000
	// Bit SEND_AUTO_STOP.
	SDHOST_CMD_SEND_AUTO_STOP = 0x1000
	// Position of WAIT_PRVDATA_COMPLETE field.
	SDHOST_CMD_WAIT_PRVDATA_COMPLETE_Pos = 0xd
	// Bit mask of WAIT_PRVDATA_COMPLETE field.
	SDHOST_CMD_WAIT_PRVDATA_COMPLETE_Msk = 0x2000
	// Bit WAIT_PRVDATA_COMPLETE.
	SDHOST_CMD_WAIT_PRVDATA_COMPLETE = 0x2000
	// Position of STOP_ABORT_CMD field.
	SDHOST_CMD_STOP_ABORT_CMD_Pos = 0xe
	// Bit mask of STOP_ABORT_CMD field.
	SDHOST_CMD_STOP_ABORT_CMD_Msk = 0x4000
	// Bit STOP_ABORT_CMD.
	SDHOST_CMD_STOP_ABORT_CMD = 0x4000
	// Position of SEND_INITIALIZATION field.
	SDHOST_CMD_SEND_INITIALIZATION_Pos = 0xf
	// Bit mask of SEND_INITIALIZATION field.
	SDHOST_CMD_SEND_INITIALIZATION_Msk = 0x8000
	// Bit SEND_INITIALIZATION.
	SDHOST_CMD_SEND_INITIALIZATION = 0x8000
	// Position of CARD_NUMBER field.
	SDHOST_CMD_CARD_NUMBER_Pos = 0x10
	// Bit mask of CARD_NUMBER field.
	SDHOST_CMD_CARD_NUMBER_Msk = 0x1f0000
	// Position of UPDATE_CLOCK_REGISTERS_ONLY field.
	SDHOST_CMD_UPDATE_CLOCK_REGISTERS_ONLY_Pos = 0x15
	// Bit mask of UPDATE_CLOCK_REGISTERS_ONLY field.
	SDHOST_CMD_UPDATE_CLOCK_REGISTERS_ONLY_Msk = 0x200000
	// Bit UPDATE_CLOCK_REGISTERS_ONLY.
	SDHOST_CMD_UPDATE_CLOCK_REGISTERS_ONLY = 0x200000
	// Position of READ_CEATA_DEVICE field.
	SDHOST_CMD_READ_CEATA_DEVICE_Pos = 0x16
	// Bit mask of READ_CEATA_DEVICE field.
	SDHOST_CMD_READ_CEATA_DEVICE_Msk = 0x400000
	// Bit READ_CEATA_DEVICE.
	SDHOST_CMD_READ_CEATA_DEVICE = 0x400000
	// Position of CCS_EXPECTED field.
	SDHOST_CMD_CCS_EXPECTED_Pos = 0x17
	// Bit mask of CCS_EXPECTED field.
	SDHOST_CMD_CCS_EXPECTED_Msk = 0x800000
	// Bit CCS_EXPECTED.
	SDHOST_CMD_CCS_EXPECTED = 0x800000
	// Position of USE_HOLE field.
	SDHOST_CMD_USE_HOLE_Pos = 0x1d
	// Bit mask of USE_HOLE field.
	SDHOST_CMD_USE_HOLE_Msk = 0x20000000
	// Bit USE_HOLE.
	SDHOST_CMD_USE_HOLE = 0x20000000
	// Position of START_CMD field.
	SDHOST_CMD_START_CMD_Pos = 0x1f
	// Bit mask of START_CMD field.
	SDHOST_CMD_START_CMD_Msk = 0x80000000
	// Bit START_CMD.
	SDHOST_CMD_START_CMD = 0x80000000

	// RESP0: Response data register
	// Position of RESPONSE0 field.
	SDHOST_RESP0_RESPONSE0_Pos = 0x0
	// Bit mask of RESPONSE0 field.
	SDHOST_RESP0_RESPONSE0_Msk = 0xffffffff

	// RESP1: Long response data register
	// Position of RESPONSE1 field.
	SDHOST_RESP1_RESPONSE1_Pos = 0x0
	// Bit mask of RESPONSE1 field.
	SDHOST_RESP1_RESPONSE1_Msk = 0xffffffff

	// RESP2: Long response data register
	// Position of RESPONSE2 field.
	SDHOST_RESP2_RESPONSE2_Pos = 0x0
	// Bit mask of RESPONSE2 field.
	SDHOST_RESP2_RESPONSE2_Msk = 0xffffffff

	// RESP3: Long response data register
	// Position of RESPONSE3 field.
	SDHOST_RESP3_RESPONSE3_Pos = 0x0
	// Bit mask of RESPONSE3 field.
	SDHOST_RESP3_RESPONSE3_Msk = 0xffffffff

	// MINTSTS: Masked interrupt status register
	// Position of INT_STATUS_MSK field.
	SDHOST_MINTSTS_INT_STATUS_MSK_Pos = 0x0
	// Bit mask of INT_STATUS_MSK field.
	SDHOST_MINTSTS_INT_STATUS_MSK_Msk = 0xffff
	// Position of SDIO_INTERRUPT_MSK field.
	SDHOST_MINTSTS_SDIO_INTERRUPT_MSK_Pos = 0x10
	// Bit mask of SDIO_INTERRUPT_MSK field.
	SDHOST_MINTSTS_SDIO_INTERRUPT_MSK_Msk = 0x30000

	// RINTSTS: Raw interrupt status register
	// Position of INT_STATUS_RAW field.
	SDHOST_RINTSTS_INT_STATUS_RAW_Pos = 0x0
	// Bit mask of INT_STATUS_RAW field.
	SDHOST_RINTSTS_INT_STATUS_RAW_Msk = 0xffff
	// Position of SDIO_INTERRUPT_RAW field.
	SDHOST_RINTSTS_SDIO_INTERRUPT_RAW_Pos = 0x10
	// Bit mask of SDIO_INTERRUPT_RAW field.
	SDHOST_RINTSTS_SDIO_INTERRUPT_RAW_Msk = 0x30000

	// STATUS: SD/MMC status register
	// Position of FIFO_RX_WATERMARK field.
	SDHOST_STATUS_FIFO_RX_WATERMARK_Pos = 0x0
	// Bit mask of FIFO_RX_WATERMARK field.
	SDHOST_STATUS_FIFO_RX_WATERMARK_Msk = 0x1
	// Bit FIFO_RX_WATERMARK.
	SDHOST_STATUS_FIFO_RX_WATERMARK = 0x1
	// Position of FIFO_TX_WATERMARK field.
	SDHOST_STATUS_FIFO_TX_WATERMARK_Pos = 0x1
	// Bit mask of FIFO_TX_WATERMARK field.
	SDHOST_STATUS_FIFO_TX_WATERMARK_Msk = 0x2
	// Bit FIFO_TX_WATERMARK.
	SDHOST_STATUS_FIFO_TX_WATERMARK = 0x2
	// Position of FIFO_EMPTY field.
	SDHOST_STATUS_FIFO_EMPTY_Pos = 0x2
	// Bit mask of FIFO_EMPTY field.
	SDHOST_STATUS_FIFO_EMPTY_Msk = 0x4
	// Bit FIFO_EMPTY.
	SDHOST_STATUS_FIFO_EMPTY = 0x4
	// Position of FIFO_FULL field.
	SDHOST_STATUS_FIFO_FULL_Pos = 0x3
	// Bit mask of FIFO_FULL field.
	SDHOST_STATUS_FIFO_FULL_Msk = 0x8
	// Bit FIFO_FULL.
	SDHOST_STATUS_FIFO_FULL = 0x8
	// Position of COMMAND_FSM_STATES field.
	SDHOST_STATUS_COMMAND_FSM_STATES_Pos = 0x4
	// Bit mask of COMMAND_FSM_STATES field.
	SDHOST_STATUS_COMMAND_FSM_STATES_Msk = 0xf0
	// Position of DATA_3_STATUS field.
	SDHOST_STATUS_DATA_3_STATUS_Pos = 0x8
	// Bit mask of DATA_3_STATUS field.
	SDHOST_STATUS_DATA_3_STATUS_Msk = 0x100
	// Bit DATA_3_STATUS.
	SDHOST_STATUS_DATA_3_STATUS = 0x100
	// Position of DATA_BUSY field.
	SDHOST_STATUS_DATA_BUSY_Pos = 0x9
	// Bit mask of DATA_BUSY field.
	SDHOST_STATUS_DATA_BUSY_Msk = 0x200
	// Bit DATA_BUSY.
	SDHOST_STATUS_DATA_BUSY = 0x200
	// Position of DATA_STATE_MC_BUSY field.
	SDHOST_STATUS_DATA_STATE_MC_BUSY_Pos = 0xa
	// Bit mask of DATA_STATE_MC_BUSY field.
	SDHOST_STATUS_DATA_STATE_MC_BUSY_Msk = 0x400
	// Bit DATA_STATE_MC_BUSY.
	SDHOST_STATUS_DATA_STATE_MC_BUSY = 0x400
	// Position of RESPONSE_INDEX field.
	SDHOST_STATUS_RESPONSE_INDEX_Pos = 0xb
	// Bit mask of RESPONSE_INDEX field.
	SDHOST_STATUS_RESPONSE_INDEX_Msk = 0x1f800
	// Position of FIFO_COUNT field.
	SDHOST_STATUS_FIFO_COUNT_Pos = 0x11
	// Bit mask of FIFO_COUNT field.
	SDHOST_STATUS_FIFO_COUNT_Msk = 0x3ffe0000

	// FIFOTH: FIFO configuration register
	// Position of TX_WMARK field.
	SDHOST_FIFOTH_TX_WMARK_Pos = 0x0
	// Bit mask of TX_WMARK field.
	SDHOST_FIFOTH_TX_WMARK_Msk = 0xfff
	// Position of RX_WMARK field.
	SDHOST_FIFOTH_RX_WMARK_Pos = 0x10
	// Bit mask of RX_WMARK field.
	SDHOST_FIFOTH_RX_WMARK_Msk = 0x7ff0000
	// Position of DMA_MULTIPLE_TRANSACTION_SIZE field.
	SDHOST_FIFOTH_DMA_MULTIPLE_TRANSACTION_SIZE_Pos = 0x1c
	// Bit mask of DMA_MULTIPLE_TRANSACTION_SIZE field.
	SDHOST_FIFOTH_DMA_MULTIPLE_TRANSACTION_SIZE_Msk = 0x70000000

	// CDETECT: Card detect register
	// Position of CARD_DETECT_N field.
	SDHOST_CDETECT_CARD_DETECT_N_Pos = 0x0
	// Bit mask of CARD_DETECT_N field.
	SDHOST_CDETECT_CARD_DETECT_N_Msk = 0x3

	// WRTPRT: Card write protection (WP) status register
	// Position of WRITE_PROTECT field.
	SDHOST_WRTPRT_WRITE_PROTECT_Pos = 0x0
	// Bit mask of WRITE_PROTECT field.
	SDHOST_WRTPRT_WRITE_PROTECT_Msk = 0x3

	// TCBCNT: Transferred byte count register
	// Position of TCBCNT field.
	SDHOST_TCBCNT_TCBCNT_Pos = 0x0
	// Bit mask of TCBCNT field.
	SDHOST_TCBCNT_TCBCNT_Msk = 0xffffffff

	// TBBCNT: Transferred byte count register
	// Position of TBBCNT field.
	SDHOST_TBBCNT_TBBCNT_Pos = 0x0
	// Bit mask of TBBCNT field.
	SDHOST_TBBCNT_TBBCNT_Msk = 0xffffffff

	// DEBNCE: Debounce filter time configuration register
	// Position of DEBOUNCE_COUNT field.
	SDHOST_DEBNCE_DEBOUNCE_COUNT_Pos = 0x0
	// Bit mask of DEBOUNCE_COUNT field.
	SDHOST_DEBNCE_DEBOUNCE_COUNT_Msk = 0xffffff

	// USRID: User ID (scratchpad) register
	// Position of USRID field.
	SDHOST_USRID_USRID_Pos = 0x0
	// Bit mask of USRID field.
	SDHOST_USRID_USRID_Msk = 0xffffffff

	// VERID: Version ID (scratchpad) register
	// Position of VERSIONID field.
	SDHOST_VERID_VERSIONID_Pos = 0x0
	// Bit mask of VERSIONID field.
	SDHOST_VERID_VERSIONID_Msk = 0xffffffff

	// HCON: Hardware feature register
	// Position of CARD_TYPE field.
	SDHOST_HCON_CARD_TYPE_Pos = 0x0
	// Bit mask of CARD_TYPE field.
	SDHOST_HCON_CARD_TYPE_Msk = 0x1
	// Bit CARD_TYPE.
	SDHOST_HCON_CARD_TYPE = 0x1
	// Position of CARD_NUM field.
	SDHOST_HCON_CARD_NUM_Pos = 0x1
	// Bit mask of CARD_NUM field.
	SDHOST_HCON_CARD_NUM_Msk = 0x3e
	// Position of BUS_TYPE field.
	SDHOST_HCON_BUS_TYPE_Pos = 0x6
	// Bit mask of BUS_TYPE field.
	SDHOST_HCON_BUS_TYPE_Msk = 0x40
	// Bit BUS_TYPE.
	SDHOST_HCON_BUS_TYPE = 0x40
	// Position of DATA_WIDTH field.
	SDHOST_HCON_DATA_WIDTH_Pos = 0x7
	// Bit mask of DATA_WIDTH field.
	SDHOST_HCON_DATA_WIDTH_Msk = 0x380
	// Position of ADDR_WIDTH field.
	SDHOST_HCON_ADDR_WIDTH_Pos = 0xa
	// Bit mask of ADDR_WIDTH field.
	SDHOST_HCON_ADDR_WIDTH_Msk = 0xfc00
	// Position of DMA_WIDTH field.
	SDHOST_HCON_DMA_WIDTH_Pos = 0x12
	// Bit mask of DMA_WIDTH field.
	SDHOST_HCON_DMA_WIDTH_Msk = 0x1c0000
	// Position of RAM_INDISE field.
	SDHOST_HCON_RAM_INDISE_Pos = 0x15
	// Bit mask of RAM_INDISE field.
	SDHOST_HCON_RAM_INDISE_Msk = 0x200000
	// Bit RAM_INDISE.
	SDHOST_HCON_RAM_INDISE = 0x200000
	// Position of HOLD field.
	SDHOST_HCON_HOLD_Pos = 0x16
	// Bit mask of HOLD field.
	SDHOST_HCON_HOLD_Msk = 0x400000
	// Bit HOLD.
	SDHOST_HCON_HOLD = 0x400000
	// Position of NUM_CLK_DIV field.
	SDHOST_HCON_NUM_CLK_DIV_Pos = 0x18
	// Bit mask of NUM_CLK_DIV field.
	SDHOST_HCON_NUM_CLK_DIV_Msk = 0x3000000

	// UHS: UHS-1 register
	// Position of DDR field.
	SDHOST_UHS_DDR_Pos = 0x10
	// Bit mask of DDR field.
	SDHOST_UHS_DDR_Msk = 0x30000

	// RST_N: Card reset register
	// Position of CARD_RESET field.
	SDHOST_RST_N_CARD_RESET_Pos = 0x0
	// Bit mask of CARD_RESET field.
	SDHOST_RST_N_CARD_RESET_Msk = 0x3

	// BMOD: Burst mode transfer configuration register
	// Position of SWR field.
	SDHOST_BMOD_SWR_Pos = 0x0
	// Bit mask of SWR field.
	SDHOST_BMOD_SWR_Msk = 0x1
	// Bit SWR.
	SDHOST_BMOD_SWR = 0x1
	// Position of FB field.
	SDHOST_BMOD_FB_Pos = 0x1
	// Bit mask of FB field.
	SDHOST_BMOD_FB_Msk = 0x2
	// Bit FB.
	SDHOST_BMOD_FB = 0x2
	// Position of DE field.
	SDHOST_BMOD_DE_Pos = 0x7
	// Bit mask of DE field.
	SDHOST_BMOD_DE_Msk = 0x80
	// Bit DE.
	SDHOST_BMOD_DE = 0x80
	// Position of PBL field.
	SDHOST_BMOD_PBL_Pos = 0x8
	// Bit mask of PBL field.
	SDHOST_BMOD_PBL_Msk = 0x700

	// PLDMND: Poll demand configuration register
	// Position of PD field.
	SDHOST_PLDMND_PD_Pos = 0x0
	// Bit mask of PD field.
	SDHOST_PLDMND_PD_Msk = 0xffffffff

	// DBADDR: Descriptor base address register
	// Position of DBADDR field.
	SDHOST_DBADDR_DBADDR_Pos = 0x0
	// Bit mask of DBADDR field.
	SDHOST_DBADDR_DBADDR_Msk = 0xffffffff

	// IDSTS: IDMAC status register
	// Position of TI field.
	SDHOST_IDSTS_TI_Pos = 0x0
	// Bit mask of TI field.
	SDHOST_IDSTS_TI_Msk = 0x1
	// Bit TI.
	SDHOST_IDSTS_TI = 0x1
	// Position of RI field.
	SDHOST_IDSTS_RI_Pos = 0x1
	// Bit mask of RI field.
	SDHOST_IDSTS_RI_Msk = 0x2
	// Bit RI.
	SDHOST_IDSTS_RI = 0x2
	// Position of FBE field.
	SDHOST_IDSTS_FBE_Pos = 0x2
	// Bit mask of FBE field.
	SDHOST_IDSTS_FBE_Msk = 0x4
	// Bit FBE.
	SDHOST_IDSTS_FBE = 0x4
	// Position of DU field.
	SDHOST_IDSTS_DU_Pos = 0x4
	// Bit mask of DU field.
	SDHOST_IDSTS_DU_Msk = 0x10
	// Bit DU.
	SDHOST_IDSTS_DU = 0x10
	// Position of CES field.
	SDHOST_IDSTS_CES_Pos = 0x5
	// Bit mask of CES field.
	SDHOST_IDSTS_CES_Msk = 0x20
	// Bit CES.
	SDHOST_IDSTS_CES = 0x20
	// Position of NIS field.
	SDHOST_IDSTS_NIS_Pos = 0x8
	// Bit mask of NIS field.
	SDHOST_IDSTS_NIS_Msk = 0x100
	// Bit NIS.
	SDHOST_IDSTS_NIS = 0x100
	// Position of AIS field.
	SDHOST_IDSTS_AIS_Pos = 0x9
	// Bit mask of AIS field.
	SDHOST_IDSTS_AIS_Msk = 0x200
	// Bit AIS.
	SDHOST_IDSTS_AIS = 0x200
	// Position of FBE_CODE field.
	SDHOST_IDSTS_FBE_CODE_Pos = 0xa
	// Bit mask of FBE_CODE field.
	SDHOST_IDSTS_FBE_CODE_Msk = 0x1c00
	// Position of FSM field.
	SDHOST_IDSTS_FSM_Pos = 0xd
	// Bit mask of FSM field.
	SDHOST_IDSTS_FSM_Msk = 0x1e000

	// IDINTEN: IDMAC interrupt enable register
	// Position of TI field.
	SDHOST_IDINTEN_TI_Pos = 0x0
	// Bit mask of TI field.
	SDHOST_IDINTEN_TI_Msk = 0x1
	// Bit TI.
	SDHOST_IDINTEN_TI = 0x1
	// Position of RI field.
	SDHOST_IDINTEN_RI_Pos = 0x1
	// Bit mask of RI field.
	SDHOST_IDINTEN_RI_Msk = 0x2
	// Bit RI.
	SDHOST_IDINTEN_RI = 0x2
	// Position of FBE field.
	SDHOST_IDINTEN_FBE_Pos = 0x2
	// Bit mask of FBE field.
	SDHOST_IDINTEN_FBE_Msk = 0x4
	// Bit FBE.
	SDHOST_IDINTEN_FBE = 0x4
	// Position of DU field.
	SDHOST_IDINTEN_DU_Pos = 0x4
	// Bit mask of DU field.
	SDHOST_IDINTEN_DU_Msk = 0x10
	// Bit DU.
	SDHOST_IDINTEN_DU = 0x10
	// Position of CES field.
	SDHOST_IDINTEN_CES_Pos = 0x5
	// Bit mask of CES field.
	SDHOST_IDINTEN_CES_Msk = 0x20
	// Bit CES.
	SDHOST_IDINTEN_CES = 0x20
	// Position of NI field.
	SDHOST_IDINTEN_NI_Pos = 0x8
	// Bit mask of NI field.
	SDHOST_IDINTEN_NI_Msk = 0x100
	// Bit NI.
	SDHOST_IDINTEN_NI = 0x100
	// Position of AI field.
	SDHOST_IDINTEN_AI_Pos = 0x9
	// Bit mask of AI field.
	SDHOST_IDINTEN_AI_Msk = 0x200
	// Bit AI.
	SDHOST_IDINTEN_AI = 0x200

	// DSCADDR: Host descriptor address pointer
	// Position of DSCADDR field.
	SDHOST_DSCADDR_DSCADDR_Pos = 0x0
	// Bit mask of DSCADDR field.
	SDHOST_DSCADDR_DSCADDR_Msk = 0xffffffff

	// BUFADDR: Host buffer address pointer register
	// Position of BUFADDR field.
	SDHOST_BUFADDR_BUFADDR_Pos = 0x0
	// Bit mask of BUFADDR field.
	SDHOST_BUFADDR_BUFADDR_Msk = 0xffffffff

	// CARDTHRCTL: Card Threshold Control register
	// Position of CARDRDTHREN field.
	SDHOST_CARDTHRCTL_CARDRDTHREN_Pos = 0x0
	// Bit mask of CARDRDTHREN field.
	SDHOST_CARDTHRCTL_CARDRDTHREN_Msk = 0x1
	// Bit CARDRDTHREN.
	SDHOST_CARDTHRCTL_CARDRDTHREN = 0x1
	// Position of CARDCLRINTEN field.
	SDHOST_CARDTHRCTL_CARDCLRINTEN_Pos = 0x1
	// Bit mask of CARDCLRINTEN field.
	SDHOST_CARDTHRCTL_CARDCLRINTEN_Msk = 0x2
	// Bit CARDCLRINTEN.
	SDHOST_CARDTHRCTL_CARDCLRINTEN = 0x2
	// Position of CARDWRTHREN field.
	SDHOST_CARDTHRCTL_CARDWRTHREN_Pos = 0x2
	// Bit mask of CARDWRTHREN field.
	SDHOST_CARDTHRCTL_CARDWRTHREN_Msk = 0x4
	// Bit CARDWRTHREN.
	SDHOST_CARDTHRCTL_CARDWRTHREN = 0x4
	// Position of CARDTHRESHOLD field.
	SDHOST_CARDTHRCTL_CARDTHRESHOLD_Pos = 0x10
	// Bit mask of CARDTHRESHOLD field.
	SDHOST_CARDTHRCTL_CARDTHRESHOLD_Msk = 0xffff0000

	// EMMCDDR: eMMC DDR register
	// Position of HALFSTARTBIT field.
	SDHOST_EMMCDDR_HALFSTARTBIT_Pos = 0x0
	// Bit mask of HALFSTARTBIT field.
	SDHOST_EMMCDDR_HALFSTARTBIT_Msk = 0x3
	// Position of HS400_MODE field.
	SDHOST_EMMCDDR_HS400_MODE_Pos = 0x1f
	// Bit mask of HS400_MODE field.
	SDHOST_EMMCDDR_HS400_MODE_Msk = 0x80000000
	// Bit HS400_MODE.
	SDHOST_EMMCDDR_HS400_MODE = 0x80000000

	// ENSHIFT: Enable Phase Shift register
	// Position of ENABLE_SHIFT field.
	SDHOST_ENSHIFT_ENABLE_SHIFT_Pos = 0x0
	// Bit mask of ENABLE_SHIFT field.
	SDHOST_ENSHIFT_ENABLE_SHIFT_Msk = 0xf

	// BUFFIFO: CPU write and read transmit data by FIFO
	// Position of BUFFIFO field.
	SDHOST_BUFFIFO_BUFFIFO_Pos = 0x0
	// Bit mask of BUFFIFO field.
	SDHOST_BUFFIFO_BUFFIFO_Msk = 0xffffffff

	// CLK_EDGE_SEL: SDIO control register.
	// Position of CCLKIN_EDGE_DRV_SEL field.
	SDHOST_CLK_EDGE_SEL_CCLKIN_EDGE_DRV_SEL_Pos = 0x0
	// Bit mask of CCLKIN_EDGE_DRV_SEL field.
	SDHOST_CLK_EDGE_SEL_CCLKIN_EDGE_DRV_SEL_Msk = 0x7
	// Position of CCLKIN_EDGE_SAM_SEL field.
	SDHOST_CLK_EDGE_SEL_CCLKIN_EDGE_SAM_SEL_Pos = 0x3
	// Bit mask of CCLKIN_EDGE_SAM_SEL field.
	SDHOST_CLK_EDGE_SEL_CCLKIN_EDGE_SAM_SEL_Msk = 0x38
	// Position of CCLKIN_EDGE_SLF_SEL field.
	SDHOST_CLK_EDGE_SEL_CCLKIN_EDGE_SLF_SEL_Pos = 0x6
	// Bit mask of CCLKIN_EDGE_SLF_SEL field.
	SDHOST_CLK_EDGE_SEL_CCLKIN_EDGE_SLF_SEL_Msk = 0x1c0
	// Position of CCLLKIN_EDGE_H field.
	SDHOST_CLK_EDGE_SEL_CCLLKIN_EDGE_H_Pos = 0x9
	// Bit mask of CCLLKIN_EDGE_H field.
	SDHOST_CLK_EDGE_SEL_CCLLKIN_EDGE_H_Msk = 0x1e00
	// Position of CCLLKIN_EDGE_L field.
	SDHOST_CLK_EDGE_SEL_CCLLKIN_EDGE_L_Pos = 0xd
	// Bit mask of CCLLKIN_EDGE_L field.
	SDHOST_CLK_EDGE_SEL_CCLLKIN_EDGE_L_Msk = 0x1e000
	// Position of CCLLKIN_EDGE_N field.
	SDHOST_CLK_EDGE_SEL_CCLLKIN_EDGE_N_Pos = 0x11
	// Bit mask of CCLLKIN_EDGE_N field.
	SDHOST_CLK_EDGE_SEL_CCLLKIN_EDGE_N_Msk = 0x1e0000
	// Position of ESDIO_MODE field.
	SDHOST_CLK_EDGE_SEL_ESDIO_MODE_Pos = 0x15
	// Bit mask of ESDIO_MODE field.
	SDHOST_CLK_EDGE_SEL_ESDIO_MODE_Msk = 0x200000
	// Bit ESDIO_MODE.
	SDHOST_CLK_EDGE_SEL_ESDIO_MODE = 0x200000
	// Position of ESD_MODE field.
	SDHOST_CLK_EDGE_SEL_ESD_MODE_Pos = 0x16
	// Bit mask of ESD_MODE field.
	SDHOST_CLK_EDGE_SEL_ESD_MODE_Msk = 0x400000
	// Bit ESD_MODE.
	SDHOST_CLK_EDGE_SEL_ESD_MODE = 0x400000
	// Position of CCLK_EN field.
	SDHOST_CLK_EDGE_SEL_CCLK_EN_Pos = 0x17
	// Bit mask of CCLK_EN field.
	SDHOST_CLK_EDGE_SEL_CCLK_EN_Msk = 0x800000
	// Bit CCLK_EN.
	SDHOST_CLK_EDGE_SEL_CCLK_EN = 0x800000
)

// Constants for SENS: SENS Peripheral
const (
	// SAR_READ_CTRL
	// Position of SAR1_CLK_DIV field.
	SENS_SAR_READ_CTRL_SAR1_CLK_DIV_Pos = 0x0
	// Bit mask of SAR1_CLK_DIV field.
	SENS_SAR_READ_CTRL_SAR1_CLK_DIV_Msk = 0xff
	// Position of SAR1_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_CYCLE_Pos = 0x8
	// Bit mask of SAR1_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_CYCLE_Msk = 0xff00
	// Position of SAR1_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_BIT_Pos = 0x10
	// Bit mask of SAR1_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_BIT_Msk = 0x30000
	// Position of SAR1_CLK_GATED field.
	SENS_SAR_READ_CTRL_SAR1_CLK_GATED_Pos = 0x12
	// Bit mask of SAR1_CLK_GATED field.
	SENS_SAR_READ_CTRL_SAR1_CLK_GATED_Msk = 0x40000
	// Bit SAR1_CLK_GATED.
	SENS_SAR_READ_CTRL_SAR1_CLK_GATED = 0x40000
	// Position of SAR1_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_NUM_Pos = 0x13
	// Bit mask of SAR1_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_NUM_Msk = 0x7f80000
	// Position of SAR1_DIG_FORCE field.
	SENS_SAR_READ_CTRL_SAR1_DIG_FORCE_Pos = 0x1b
	// Bit mask of SAR1_DIG_FORCE field.
	SENS_SAR_READ_CTRL_SAR1_DIG_FORCE_Msk = 0x8000000
	// Bit SAR1_DIG_FORCE.
	SENS_SAR_READ_CTRL_SAR1_DIG_FORCE = 0x8000000
	// Position of SAR1_DATA_INV field.
	SENS_SAR_READ_CTRL_SAR1_DATA_INV_Pos = 0x1c
	// Bit mask of SAR1_DATA_INV field.
	SENS_SAR_READ_CTRL_SAR1_DATA_INV_Msk = 0x10000000
	// Bit SAR1_DATA_INV.
	SENS_SAR_READ_CTRL_SAR1_DATA_INV = 0x10000000

	// SAR_READ_STATUS1
	// Position of SAR1_READER_STATUS field.
	SENS_SAR_READ_STATUS1_SAR1_READER_STATUS_Pos = 0x0
	// Bit mask of SAR1_READER_STATUS field.
	SENS_SAR_READ_STATUS1_SAR1_READER_STATUS_Msk = 0xffffffff

	// SAR_MEAS_WAIT1
	// Position of SAR_AMP_WAIT1 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT1_Pos = 0x0
	// Bit mask of SAR_AMP_WAIT1 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT1_Msk = 0xffff
	// Position of SAR_AMP_WAIT2 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT2_Pos = 0x10
	// Bit mask of SAR_AMP_WAIT2 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT2_Msk = 0xffff0000

	// SAR_MEAS_WAIT2
	// Position of FORCE_XPD_SAR_SW field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_SAR_SW_Pos = 0x0
	// Bit mask of FORCE_XPD_SAR_SW field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_SAR_SW_Msk = 0x1
	// Bit FORCE_XPD_SAR_SW.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_SAR_SW = 0x1
	// Position of SAR_AMP_WAIT3 field.
	SENS_SAR_MEAS_WAIT2_SAR_AMP_WAIT3_Pos = 0x0
	// Bit mask of SAR_AMP_WAIT3 field.
	SENS_SAR_MEAS_WAIT2_SAR_AMP_WAIT3_Msk = 0xffff
	// Position of FORCE_XPD_AMP field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_AMP_Pos = 0x10
	// Bit mask of FORCE_XPD_AMP field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_AMP_Msk = 0x30000
	// Position of FORCE_XPD_SAR field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_SAR_Pos = 0x12
	// Bit mask of FORCE_XPD_SAR field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_SAR_Msk = 0xc0000
	// Position of SAR2_RSTB_WAIT field.
	SENS_SAR_MEAS_WAIT2_SAR2_RSTB_WAIT_Pos = 0x14
	// Bit mask of SAR2_RSTB_WAIT field.
	SENS_SAR_MEAS_WAIT2_SAR2_RSTB_WAIT_Msk = 0xff00000

	// SAR_MEAS_CTRL
	// Position of XPD_SAR_AMP_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_AMP_FSM_Pos = 0x0
	// Bit mask of XPD_SAR_AMP_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_AMP_FSM_Msk = 0xf
	// Position of AMP_RST_FB_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_RST_FB_FSM_Pos = 0x4
	// Bit mask of AMP_RST_FB_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_RST_FB_FSM_Msk = 0xf0
	// Position of AMP_SHORT_REF_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_FSM_Pos = 0x8
	// Bit mask of AMP_SHORT_REF_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_FSM_Msk = 0xf00
	// Position of AMP_SHORT_REF_GND_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM_Pos = 0xc
	// Bit mask of AMP_SHORT_REF_GND_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM_Msk = 0xf000
	// Position of XPD_SAR_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_FSM_Pos = 0x10
	// Bit mask of XPD_SAR_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_FSM_Msk = 0xf0000
	// Position of SAR_RSTB_FSM field.
	SENS_SAR_MEAS_CTRL_SAR_RSTB_FSM_Pos = 0x14
	// Bit mask of SAR_RSTB_FSM field.
	SENS_SAR_MEAS_CTRL_SAR_RSTB_FSM_Msk = 0xf00000
	// Position of SAR2_XPD_WAIT field.
	SENS_SAR_MEAS_CTRL_SAR2_XPD_WAIT_Pos = 0x18
	// Bit mask of SAR2_XPD_WAIT field.
	SENS_SAR_MEAS_CTRL_SAR2_XPD_WAIT_Msk = 0xff000000

	// SAR_READ_STATUS2
	// Position of SAR2_READER_STATUS field.
	SENS_SAR_READ_STATUS2_SAR2_READER_STATUS_Pos = 0x0
	// Bit mask of SAR2_READER_STATUS field.
	SENS_SAR_READ_STATUS2_SAR2_READER_STATUS_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC0
	// Position of SLEEP_CYCLES_S0 field.
	SENS_ULP_CP_SLEEP_CYC0_SLEEP_CYCLES_S0_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S0 field.
	SENS_ULP_CP_SLEEP_CYC0_SLEEP_CYCLES_S0_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC1
	// Position of SLEEP_CYCLES_S1 field.
	SENS_ULP_CP_SLEEP_CYC1_SLEEP_CYCLES_S1_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S1 field.
	SENS_ULP_CP_SLEEP_CYC1_SLEEP_CYCLES_S1_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC2
	// Position of SLEEP_CYCLES_S2 field.
	SENS_ULP_CP_SLEEP_CYC2_SLEEP_CYCLES_S2_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S2 field.
	SENS_ULP_CP_SLEEP_CYC2_SLEEP_CYCLES_S2_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC3
	// Position of SLEEP_CYCLES_S3 field.
	SENS_ULP_CP_SLEEP_CYC3_SLEEP_CYCLES_S3_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S3 field.
	SENS_ULP_CP_SLEEP_CYC3_SLEEP_CYCLES_S3_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC4
	// Position of SLEEP_CYCLES_S4 field.
	SENS_ULP_CP_SLEEP_CYC4_SLEEP_CYCLES_S4_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S4 field.
	SENS_ULP_CP_SLEEP_CYC4_SLEEP_CYCLES_S4_Msk = 0xffffffff

	// SAR_START_FORCE
	// Position of SAR1_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR1_BIT_WIDTH_Pos = 0x0
	// Bit mask of SAR1_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR1_BIT_WIDTH_Msk = 0x3
	// Position of SAR2_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR2_BIT_WIDTH_Pos = 0x2
	// Bit mask of SAR2_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR2_BIT_WIDTH_Msk = 0xc
	// Position of SAR2_EN_TEST field.
	SENS_SAR_START_FORCE_SAR2_EN_TEST_Pos = 0x4
	// Bit mask of SAR2_EN_TEST field.
	SENS_SAR_START_FORCE_SAR2_EN_TEST_Msk = 0x10
	// Bit SAR2_EN_TEST.
	SENS_SAR_START_FORCE_SAR2_EN_TEST = 0x10
	// Position of SAR2_PWDET_CCT field.
	SENS_SAR_START_FORCE_SAR2_PWDET_CCT_Pos = 0x5
	// Bit mask of SAR2_PWDET_CCT field.
	SENS_SAR_START_FORCE_SAR2_PWDET_CCT_Msk = 0xe0
	// Position of ULP_CP_FORCE_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_FORCE_START_TOP_Pos = 0x8
	// Bit mask of ULP_CP_FORCE_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_FORCE_START_TOP_Msk = 0x100
	// Bit ULP_CP_FORCE_START_TOP.
	SENS_SAR_START_FORCE_ULP_CP_FORCE_START_TOP = 0x100
	// Position of ULP_CP_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_START_TOP_Pos = 0x9
	// Bit mask of ULP_CP_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_START_TOP_Msk = 0x200
	// Bit ULP_CP_START_TOP.
	SENS_SAR_START_FORCE_ULP_CP_START_TOP = 0x200
	// Position of SARCLK_EN field.
	SENS_SAR_START_FORCE_SARCLK_EN_Pos = 0xa
	// Bit mask of SARCLK_EN field.
	SENS_SAR_START_FORCE_SARCLK_EN_Msk = 0x400
	// Bit SARCLK_EN.
	SENS_SAR_START_FORCE_SARCLK_EN = 0x400
	// Position of PC_INIT field.
	SENS_SAR_START_FORCE_PC_INIT_Pos = 0xb
	// Bit mask of PC_INIT field.
	SENS_SAR_START_FORCE_PC_INIT_Msk = 0x3ff800
	// Position of SAR2_STOP field.
	SENS_SAR_START_FORCE_SAR2_STOP_Pos = 0x16
	// Bit mask of SAR2_STOP field.
	SENS_SAR_START_FORCE_SAR2_STOP_Msk = 0x400000
	// Bit SAR2_STOP.
	SENS_SAR_START_FORCE_SAR2_STOP = 0x400000
	// Position of SAR1_STOP field.
	SENS_SAR_START_FORCE_SAR1_STOP_Pos = 0x17
	// Bit mask of SAR1_STOP field.
	SENS_SAR_START_FORCE_SAR1_STOP_Msk = 0x800000
	// Bit SAR1_STOP.
	SENS_SAR_START_FORCE_SAR1_STOP = 0x800000
	// Position of SAR2_PWDET_EN field.
	SENS_SAR_START_FORCE_SAR2_PWDET_EN_Pos = 0x18
	// Bit mask of SAR2_PWDET_EN field.
	SENS_SAR_START_FORCE_SAR2_PWDET_EN_Msk = 0x1000000
	// Bit SAR2_PWDET_EN.
	SENS_SAR_START_FORCE_SAR2_PWDET_EN = 0x1000000

	// SAR_MEM_WR_CTRL
	// Position of MEM_WR_ADDR_INIT field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT_Pos = 0x0
	// Bit mask of MEM_WR_ADDR_INIT field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT_Msk = 0x7ff
	// Position of MEM_WR_ADDR_SIZE field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE_Pos = 0xb
	// Bit mask of MEM_WR_ADDR_SIZE field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE_Msk = 0x3ff800
	// Position of RTC_MEM_WR_OFFST_CLR field.
	SENS_SAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR_Pos = 0x16
	// Bit mask of RTC_MEM_WR_OFFST_CLR field.
	SENS_SAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR_Msk = 0x400000
	// Bit RTC_MEM_WR_OFFST_CLR.
	SENS_SAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR = 0x400000

	// SAR_ATTEN1
	// Position of SAR1_ATTEN field.
	SENS_SAR_ATTEN1_SAR1_ATTEN_Pos = 0x0
	// Bit mask of SAR1_ATTEN field.
	SENS_SAR_ATTEN1_SAR1_ATTEN_Msk = 0xffffffff

	// SAR_ATTEN2
	// Position of SAR2_ATTEN field.
	SENS_SAR_ATTEN2_SAR2_ATTEN_Pos = 0x0
	// Bit mask of SAR2_ATTEN field.
	SENS_SAR_ATTEN2_SAR2_ATTEN_Msk = 0xffffffff

	// SAR_SLAVE_ADDR1
	// Position of I2C_SLAVE_ADDR1 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR1 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1_Msk = 0x7ff
	// Position of I2C_SLAVE_ADDR0 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR0 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0_Msk = 0x3ff800
	// Position of MEAS_STATUS field.
	SENS_SAR_SLAVE_ADDR1_MEAS_STATUS_Pos = 0x16
	// Bit mask of MEAS_STATUS field.
	SENS_SAR_SLAVE_ADDR1_MEAS_STATUS_Msk = 0x3fc00000

	// SAR_SLAVE_ADDR2
	// Position of I2C_SLAVE_ADDR3 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR3 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3_Msk = 0x7ff
	// Position of I2C_SLAVE_ADDR2 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR2 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2_Msk = 0x3ff800

	// SAR_SLAVE_ADDR3
	// Position of I2C_SLAVE_ADDR5 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR5 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5_Msk = 0x7ff
	// Position of I2C_SLAVE_ADDR4 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR4 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4_Msk = 0x3ff800
	// Position of TSENS_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_OUT_Pos = 0x16
	// Bit mask of TSENS_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_OUT_Msk = 0x3fc00000
	// Position of TSENS_RDY_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_RDY_OUT_Pos = 0x1e
	// Bit mask of TSENS_RDY_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_RDY_OUT_Msk = 0x40000000
	// Bit TSENS_RDY_OUT.
	SENS_SAR_SLAVE_ADDR3_TSENS_RDY_OUT = 0x40000000

	// SAR_SLAVE_ADDR4
	// Position of I2C_SLAVE_ADDR7 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR7 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7_Msk = 0x7ff
	// Position of I2C_SLAVE_ADDR6 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR6 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6_Msk = 0x3ff800
	// Position of I2C_RDATA field.
	SENS_SAR_SLAVE_ADDR4_I2C_RDATA_Pos = 0x16
	// Bit mask of I2C_RDATA field.
	SENS_SAR_SLAVE_ADDR4_I2C_RDATA_Msk = 0x3fc00000
	// Position of I2C_DONE field.
	SENS_SAR_SLAVE_ADDR4_I2C_DONE_Pos = 0x1e
	// Bit mask of I2C_DONE field.
	SENS_SAR_SLAVE_ADDR4_I2C_DONE_Msk = 0x40000000
	// Bit I2C_DONE.
	SENS_SAR_SLAVE_ADDR4_I2C_DONE = 0x40000000

	// SAR_TSENS_CTRL
	// Position of TSENS_XPD_WAIT field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_WAIT_Pos = 0x0
	// Bit mask of TSENS_XPD_WAIT field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_WAIT_Msk = 0xfff
	// Position of TSENS_XPD_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_FORCE_Pos = 0xc
	// Bit mask of TSENS_XPD_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_FORCE_Msk = 0x1000
	// Bit TSENS_XPD_FORCE.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_FORCE = 0x1000
	// Position of TSENS_CLK_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_INV_Pos = 0xd
	// Bit mask of TSENS_CLK_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_INV_Msk = 0x2000
	// Bit TSENS_CLK_INV.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_INV = 0x2000
	// Position of TSENS_CLK_GATED field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_GATED_Pos = 0xe
	// Bit mask of TSENS_CLK_GATED field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_GATED_Msk = 0x4000
	// Bit TSENS_CLK_GATED.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_GATED = 0x4000
	// Position of TSENS_IN_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_IN_INV_Pos = 0xf
	// Bit mask of TSENS_IN_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_IN_INV_Msk = 0x8000
	// Bit TSENS_IN_INV.
	SENS_SAR_TSENS_CTRL_TSENS_IN_INV = 0x8000
	// Position of TSENS_CLK_DIV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_DIV_Pos = 0x10
	// Bit mask of TSENS_CLK_DIV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_DIV_Msk = 0xff0000
	// Position of TSENS_POWER_UP field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_Pos = 0x18
	// Bit mask of TSENS_POWER_UP field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_Msk = 0x1000000
	// Bit TSENS_POWER_UP.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP = 0x1000000
	// Position of TSENS_POWER_UP_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_FORCE_Pos = 0x19
	// Bit mask of TSENS_POWER_UP_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_FORCE_Msk = 0x2000000
	// Bit TSENS_POWER_UP_FORCE.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_FORCE = 0x2000000
	// Position of TSENS_DUMP_OUT field.
	SENS_SAR_TSENS_CTRL_TSENS_DUMP_OUT_Pos = 0x1a
	// Bit mask of TSENS_DUMP_OUT field.
	SENS_SAR_TSENS_CTRL_TSENS_DUMP_OUT_Msk = 0x4000000
	// Bit TSENS_DUMP_OUT.
	SENS_SAR_TSENS_CTRL_TSENS_DUMP_OUT = 0x4000000

	// SAR_I2C_CTRL
	// Position of SAR_I2C_CTRL field.
	SENS_SAR_I2C_CTRL_SAR_I2C_CTRL_Pos = 0x0
	// Bit mask of SAR_I2C_CTRL field.
	SENS_SAR_I2C_CTRL_SAR_I2C_CTRL_Msk = 0xfffffff
	// Position of SAR_I2C_START field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_Pos = 0x1c
	// Bit mask of SAR_I2C_START field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_Msk = 0x10000000
	// Bit SAR_I2C_START.
	SENS_SAR_I2C_CTRL_SAR_I2C_START = 0x10000000
	// Position of SAR_I2C_START_FORCE field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_FORCE_Pos = 0x1d
	// Bit mask of SAR_I2C_START_FORCE field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_FORCE_Msk = 0x20000000
	// Bit SAR_I2C_START_FORCE.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_FORCE = 0x20000000

	// SAR_MEAS_START1
	// Position of MEAS1_DATA_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DATA_SAR_Pos = 0x0
	// Bit mask of MEAS1_DATA_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DATA_SAR_Msk = 0xffff
	// Position of MEAS1_DONE_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DONE_SAR_Pos = 0x10
	// Bit mask of MEAS1_DONE_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DONE_SAR_Msk = 0x10000
	// Bit MEAS1_DONE_SAR.
	SENS_SAR_MEAS_START1_MEAS1_DONE_SAR = 0x10000
	// Position of MEAS1_START_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_START_SAR_Pos = 0x11
	// Bit mask of MEAS1_START_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_START_SAR_Msk = 0x20000
	// Bit MEAS1_START_SAR.
	SENS_SAR_MEAS_START1_MEAS1_START_SAR = 0x20000
	// Position of MEAS1_START_FORCE field.
	SENS_SAR_MEAS_START1_MEAS1_START_FORCE_Pos = 0x12
	// Bit mask of MEAS1_START_FORCE field.
	SENS_SAR_MEAS_START1_MEAS1_START_FORCE_Msk = 0x40000
	// Bit MEAS1_START_FORCE.
	SENS_SAR_MEAS_START1_MEAS1_START_FORCE = 0x40000
	// Position of SAR1_EN_PAD field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_Pos = 0x13
	// Bit mask of SAR1_EN_PAD field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_Msk = 0x7ff80000
	// Position of SAR1_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_FORCE_Pos = 0x1f
	// Bit mask of SAR1_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_FORCE_Msk = 0x80000000
	// Bit SAR1_EN_PAD_FORCE.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_FORCE = 0x80000000

	// SAR_TOUCH_CTRL1
	// Position of TOUCH_MEAS_DELAY field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY_Pos = 0x0
	// Bit mask of TOUCH_MEAS_DELAY field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY_Msk = 0xffff
	// Position of TOUCH_XPD_WAIT field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_XPD_WAIT_Pos = 0x10
	// Bit mask of TOUCH_XPD_WAIT field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_XPD_WAIT_Msk = 0xff0000
	// Position of TOUCH_OUT_SEL field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_SEL_Pos = 0x18
	// Bit mask of TOUCH_OUT_SEL field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_SEL_Msk = 0x1000000
	// Bit TOUCH_OUT_SEL.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_SEL = 0x1000000
	// Position of TOUCH_OUT_1EN field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_1EN_Pos = 0x19
	// Bit mask of TOUCH_OUT_1EN field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_1EN_Msk = 0x2000000
	// Bit TOUCH_OUT_1EN.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_1EN = 0x2000000
	// Position of XPD_HALL_FORCE field.
	SENS_SAR_TOUCH_CTRL1_XPD_HALL_FORCE_Pos = 0x1a
	// Bit mask of XPD_HALL_FORCE field.
	SENS_SAR_TOUCH_CTRL1_XPD_HALL_FORCE_Msk = 0x4000000
	// Bit XPD_HALL_FORCE.
	SENS_SAR_TOUCH_CTRL1_XPD_HALL_FORCE = 0x4000000
	// Position of HALL_PHASE_FORCE field.
	SENS_SAR_TOUCH_CTRL1_HALL_PHASE_FORCE_Pos = 0x1b
	// Bit mask of HALL_PHASE_FORCE field.
	SENS_SAR_TOUCH_CTRL1_HALL_PHASE_FORCE_Msk = 0x8000000
	// Bit HALL_PHASE_FORCE.
	SENS_SAR_TOUCH_CTRL1_HALL_PHASE_FORCE = 0x8000000

	// SAR_TOUCH_THRES1
	// Position of TOUCH_OUT_TH1 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH1_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH1 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH1_Msk = 0xffff
	// Position of TOUCH_OUT_TH0 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH0_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH0 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH0_Msk = 0xffff0000

	// SAR_TOUCH_THRES2
	// Position of TOUCH_OUT_TH3 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH3_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH3 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH3_Msk = 0xffff
	// Position of TOUCH_OUT_TH2 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH2_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH2 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH2_Msk = 0xffff0000

	// SAR_TOUCH_THRES3
	// Position of TOUCH_OUT_TH5 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH5_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH5 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH5_Msk = 0xffff
	// Position of TOUCH_OUT_TH4 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH4_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH4 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH4_Msk = 0xffff0000

	// SAR_TOUCH_THRES4
	// Position of TOUCH_OUT_TH7 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH7_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH7 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH7_Msk = 0xffff
	// Position of TOUCH_OUT_TH6 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH6_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH6 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH6_Msk = 0xffff0000

	// SAR_TOUCH_THRES5
	// Position of TOUCH_OUT_TH9 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH9_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH9 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH9_Msk = 0xffff
	// Position of TOUCH_OUT_TH8 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH8_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH8 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH8_Msk = 0xffff0000

	// SAR_TOUCH_OUT1
	// Position of TOUCH_MEAS_OUT1 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT1_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT1 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT1_Msk = 0xffff
	// Position of TOUCH_MEAS_OUT0 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT0_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT0 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT0_Msk = 0xffff0000

	// SAR_TOUCH_OUT2
	// Position of TOUCH_MEAS_OUT3 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT3_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT3 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT3_Msk = 0xffff
	// Position of TOUCH_MEAS_OUT2 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT2_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT2 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT2_Msk = 0xffff0000

	// SAR_TOUCH_OUT3
	// Position of TOUCH_MEAS_OUT5 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT5_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT5 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT5_Msk = 0xffff
	// Position of TOUCH_MEAS_OUT4 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT4_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT4 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT4_Msk = 0xffff0000

	// SAR_TOUCH_OUT4
	// Position of TOUCH_MEAS_OUT7 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT7_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT7 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT7_Msk = 0xffff
	// Position of TOUCH_MEAS_OUT6 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT6_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT6 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT6_Msk = 0xffff0000

	// SAR_TOUCH_OUT5
	// Position of TOUCH_MEAS_OUT9 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT9_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT9 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT9_Msk = 0xffff
	// Position of TOUCH_MEAS_OUT8 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT8_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT8 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT8_Msk = 0xffff0000

	// SAR_TOUCH_CTRL2
	// Position of TOUCH_MEAS_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_Pos = 0x0
	// Bit mask of TOUCH_MEAS_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_Msk = 0x3ff
	// Position of TOUCH_MEAS_DONE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_DONE_Pos = 0xa
	// Bit mask of TOUCH_MEAS_DONE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_DONE_Msk = 0x400
	// Bit TOUCH_MEAS_DONE.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_DONE = 0x400
	// Position of TOUCH_START_FSM_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FSM_EN_Pos = 0xb
	// Bit mask of TOUCH_START_FSM_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FSM_EN_Msk = 0x800
	// Bit TOUCH_START_FSM_EN.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FSM_EN = 0x800
	// Position of TOUCH_START_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_EN_Pos = 0xc
	// Bit mask of TOUCH_START_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_EN_Msk = 0x1000
	// Bit TOUCH_START_EN.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_EN = 0x1000
	// Position of TOUCH_START_FORCE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FORCE_Pos = 0xd
	// Bit mask of TOUCH_START_FORCE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FORCE_Msk = 0x2000
	// Bit TOUCH_START_FORCE.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FORCE = 0x2000
	// Position of TOUCH_SLEEP_CYCLES field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES_Pos = 0xe
	// Bit mask of TOUCH_SLEEP_CYCLES field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES_Msk = 0x3fffc000
	// Position of TOUCH_MEAS_EN_CLR field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR_Pos = 0x1e
	// Bit mask of TOUCH_MEAS_EN_CLR field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR_Msk = 0x40000000
	// Bit TOUCH_MEAS_EN_CLR.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR = 0x40000000

	// SAR_TOUCH_ENABLE
	// Position of TOUCH_PAD_WORKEN field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN_Pos = 0x0
	// Bit mask of TOUCH_PAD_WORKEN field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN_Msk = 0x3ff
	// Position of TOUCH_PAD_OUTEN2 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2_Pos = 0xa
	// Bit mask of TOUCH_PAD_OUTEN2 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2_Msk = 0xffc00
	// Position of TOUCH_PAD_OUTEN1 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1_Pos = 0x14
	// Bit mask of TOUCH_PAD_OUTEN1 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1_Msk = 0x3ff00000

	// SAR_READ_CTRL2
	// Position of SAR2_CLK_DIV field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_DIV_Pos = 0x0
	// Bit mask of SAR2_CLK_DIV field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_DIV_Msk = 0xff
	// Position of SAR2_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_CYCLE_Pos = 0x8
	// Bit mask of SAR2_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_CYCLE_Msk = 0xff00
	// Position of SAR2_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_BIT_Pos = 0x10
	// Bit mask of SAR2_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_BIT_Msk = 0x30000
	// Position of SAR2_CLK_GATED field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_GATED_Pos = 0x12
	// Bit mask of SAR2_CLK_GATED field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_GATED_Msk = 0x40000
	// Bit SAR2_CLK_GATED.
	SENS_SAR_READ_CTRL2_SAR2_CLK_GATED = 0x40000
	// Position of SAR2_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_NUM_Pos = 0x13
	// Bit mask of SAR2_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_NUM_Msk = 0x7f80000
	// Position of SAR2_PWDET_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_PWDET_FORCE_Pos = 0x1b
	// Bit mask of SAR2_PWDET_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_PWDET_FORCE_Msk = 0x8000000
	// Bit SAR2_PWDET_FORCE.
	SENS_SAR_READ_CTRL2_SAR2_PWDET_FORCE = 0x8000000
	// Position of SAR2_DIG_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_DIG_FORCE_Pos = 0x1c
	// Bit mask of SAR2_DIG_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_DIG_FORCE_Msk = 0x10000000
	// Bit SAR2_DIG_FORCE.
	SENS_SAR_READ_CTRL2_SAR2_DIG_FORCE = 0x10000000
	// Position of SAR2_DATA_INV field.
	SENS_SAR_READ_CTRL2_SAR2_DATA_INV_Pos = 0x1d
	// Bit mask of SAR2_DATA_INV field.
	SENS_SAR_READ_CTRL2_SAR2_DATA_INV_Msk = 0x20000000
	// Bit SAR2_DATA_INV.
	SENS_SAR_READ_CTRL2_SAR2_DATA_INV = 0x20000000

	// SAR_MEAS_START2
	// Position of MEAS2_DATA_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DATA_SAR_Pos = 0x0
	// Bit mask of MEAS2_DATA_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DATA_SAR_Msk = 0xffff
	// Position of MEAS2_DONE_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DONE_SAR_Pos = 0x10
	// Bit mask of MEAS2_DONE_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DONE_SAR_Msk = 0x10000
	// Bit MEAS2_DONE_SAR.
	SENS_SAR_MEAS_START2_MEAS2_DONE_SAR = 0x10000
	// Position of MEAS2_START_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_START_SAR_Pos = 0x11
	// Bit mask of MEAS2_START_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_START_SAR_Msk = 0x20000
	// Bit MEAS2_START_SAR.
	SENS_SAR_MEAS_START2_MEAS2_START_SAR = 0x20000
	// Position of MEAS2_START_FORCE field.
	SENS_SAR_MEAS_START2_MEAS2_START_FORCE_Pos = 0x12
	// Bit mask of MEAS2_START_FORCE field.
	SENS_SAR_MEAS_START2_MEAS2_START_FORCE_Msk = 0x40000
	// Bit MEAS2_START_FORCE.
	SENS_SAR_MEAS_START2_MEAS2_START_FORCE = 0x40000
	// Position of SAR2_EN_PAD field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_Pos = 0x13
	// Bit mask of SAR2_EN_PAD field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_Msk = 0x7ff80000
	// Position of SAR2_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_FORCE_Pos = 0x1f
	// Bit mask of SAR2_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_FORCE_Msk = 0x80000000
	// Bit SAR2_EN_PAD_FORCE.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_FORCE = 0x80000000

	// SAR_DAC_CTRL1
	// Position of SW_FSTEP field.
	SENS_SAR_DAC_CTRL1_SW_FSTEP_Pos = 0x0
	// Bit mask of SW_FSTEP field.
	SENS_SAR_DAC_CTRL1_SW_FSTEP_Msk = 0xffff
	// Position of SW_TONE_EN field.
	SENS_SAR_DAC_CTRL1_SW_TONE_EN_Pos = 0x10
	// Bit mask of SW_TONE_EN field.
	SENS_SAR_DAC_CTRL1_SW_TONE_EN_Msk = 0x10000
	// Bit SW_TONE_EN.
	SENS_SAR_DAC_CTRL1_SW_TONE_EN = 0x10000
	// Position of DEBUG_BIT_SEL field.
	SENS_SAR_DAC_CTRL1_DEBUG_BIT_SEL_Pos = 0x11
	// Bit mask of DEBUG_BIT_SEL field.
	SENS_SAR_DAC_CTRL1_DEBUG_BIT_SEL_Msk = 0x3e0000
	// Position of DAC_DIG_FORCE field.
	SENS_SAR_DAC_CTRL1_DAC_DIG_FORCE_Pos = 0x16
	// Bit mask of DAC_DIG_FORCE field.
	SENS_SAR_DAC_CTRL1_DAC_DIG_FORCE_Msk = 0x400000
	// Bit DAC_DIG_FORCE.
	SENS_SAR_DAC_CTRL1_DAC_DIG_FORCE = 0x400000
	// Position of DAC_CLK_FORCE_LOW field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_LOW_Pos = 0x17
	// Bit mask of DAC_CLK_FORCE_LOW field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_LOW_Msk = 0x800000
	// Bit DAC_CLK_FORCE_LOW.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_LOW = 0x800000
	// Position of DAC_CLK_FORCE_HIGH field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH_Pos = 0x18
	// Bit mask of DAC_CLK_FORCE_HIGH field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH_Msk = 0x1000000
	// Bit DAC_CLK_FORCE_HIGH.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH = 0x1000000
	// Position of DAC_CLK_INV field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_INV_Pos = 0x19
	// Bit mask of DAC_CLK_INV field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_INV_Msk = 0x2000000
	// Bit DAC_CLK_INV.
	SENS_SAR_DAC_CTRL1_DAC_CLK_INV = 0x2000000

	// SAR_DAC_CTRL2
	// Position of DAC_DC1 field.
	SENS_SAR_DAC_CTRL2_DAC_DC1_Pos = 0x0
	// Bit mask of DAC_DC1 field.
	SENS_SAR_DAC_CTRL2_DAC_DC1_Msk = 0xff
	// Position of DAC_DC2 field.
	SENS_SAR_DAC_CTRL2_DAC_DC2_Pos = 0x8
	// Bit mask of DAC_DC2 field.
	SENS_SAR_DAC_CTRL2_DAC_DC2_Msk = 0xff00
	// Position of DAC_SCALE1 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE1_Pos = 0x10
	// Bit mask of DAC_SCALE1 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE1_Msk = 0x30000
	// Position of DAC_SCALE2 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE2_Pos = 0x12
	// Bit mask of DAC_SCALE2 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE2_Msk = 0xc0000
	// Position of DAC_INV1 field.
	SENS_SAR_DAC_CTRL2_DAC_INV1_Pos = 0x14
	// Bit mask of DAC_INV1 field.
	SENS_SAR_DAC_CTRL2_DAC_INV1_Msk = 0x300000
	// Position of DAC_INV2 field.
	SENS_SAR_DAC_CTRL2_DAC_INV2_Pos = 0x16
	// Bit mask of DAC_INV2 field.
	SENS_SAR_DAC_CTRL2_DAC_INV2_Msk = 0xc00000
	// Position of DAC_CW_EN1 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN1_Pos = 0x18
	// Bit mask of DAC_CW_EN1 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN1_Msk = 0x1000000
	// Bit DAC_CW_EN1.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN1 = 0x1000000
	// Position of DAC_CW_EN2 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN2_Pos = 0x19
	// Bit mask of DAC_CW_EN2 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN2_Msk = 0x2000000
	// Bit DAC_CW_EN2.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN2 = 0x2000000

	// SAR_MEAS_CTRL2
	// Position of SAR1_DAC_XPD_FSM field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_Pos = 0x0
	// Bit mask of SAR1_DAC_XPD_FSM field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_Msk = 0xf
	// Position of SAR1_DAC_XPD_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE_Pos = 0x4
	// Bit mask of SAR1_DAC_XPD_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE_Msk = 0x10
	// Bit SAR1_DAC_XPD_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE = 0x10
	// Position of XPD_SAR_AMP_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE_Pos = 0x5
	// Bit mask of XPD_SAR_AMP_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE_Msk = 0x20
	// Bit XPD_SAR_AMP_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE = 0x20
	// Position of AMP_RST_FB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE_Pos = 0x6
	// Bit mask of AMP_RST_FB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE_Msk = 0x40
	// Bit AMP_RST_FB_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE = 0x40
	// Position of AMP_SHORT_REF_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE_Pos = 0x7
	// Bit mask of AMP_SHORT_REF_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE_Msk = 0x80
	// Bit AMP_SHORT_REF_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE = 0x80
	// Position of AMP_SHORT_REF_GND_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE_Pos = 0x8
	// Bit mask of AMP_SHORT_REF_GND_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE_Msk = 0x100
	// Bit AMP_SHORT_REF_GND_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE = 0x100
	// Position of XPD_SAR_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE_Pos = 0x9
	// Bit mask of XPD_SAR_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE_Msk = 0x200
	// Bit XPD_SAR_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE = 0x200
	// Position of SAR_RSTB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE_Pos = 0xa
	// Bit mask of SAR_RSTB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE_Msk = 0x400
	// Bit SAR_RSTB_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE = 0x400
	// Position of SAR2_RSTB_FORCE field.
	SENS_SAR_MEAS_CTRL2_SAR2_RSTB_FORCE_Pos = 0xb
	// Bit mask of SAR2_RSTB_FORCE field.
	SENS_SAR_MEAS_CTRL2_SAR2_RSTB_FORCE_Msk = 0x1800
	// Position of AMP_RST_FB_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FORCE_Pos = 0xd
	// Bit mask of AMP_RST_FB_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FORCE_Msk = 0x6000
	// Position of AMP_SHORT_REF_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE_Pos = 0xf
	// Bit mask of AMP_SHORT_REF_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE_Msk = 0x18000
	// Position of AMP_SHORT_REF_GND_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE_Pos = 0x11
	// Bit mask of AMP_SHORT_REF_GND_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE_Msk = 0x60000

	// SAR_NOUSE
	// Position of SAR_NOUSE field.
	SENS_SAR_NOUSE_SAR_NOUSE_Pos = 0x0
	// Bit mask of SAR_NOUSE field.
	SENS_SAR_NOUSE_SAR_NOUSE_Msk = 0xffffffff

	// SARDATE
	// Position of SAR_DATE field.
	SENS_SARDATE_SAR_DATE_Pos = 0x0
	// Bit mask of SAR_DATE field.
	SENS_SARDATE_SAR_DATE_Msk = 0xfffffff
)

// Constants for SHA: SHA (Secure Hash Algorithm) Accelerator
const (
	// TEXT0
	// Position of TEXT field.
	SHA_TEXT_TEXT_Pos = 0x0
	// Bit mask of TEXT field.
	SHA_TEXT_TEXT_Msk = 0xffffffff

	// SHA1_START
	// Position of SHA1_START field.
	SHA_SHA1_START_SHA1_START_Pos = 0x0
	// Bit mask of SHA1_START field.
	SHA_SHA1_START_SHA1_START_Msk = 0x1
	// Bit SHA1_START.
	SHA_SHA1_START_SHA1_START = 0x1

	// SHA1_CONTINUE
	// Position of SHA1_CONTINUE field.
	SHA_SHA1_CONTINUE_SHA1_CONTINUE_Pos = 0x0
	// Bit mask of SHA1_CONTINUE field.
	SHA_SHA1_CONTINUE_SHA1_CONTINUE_Msk = 0x1
	// Bit SHA1_CONTINUE.
	SHA_SHA1_CONTINUE_SHA1_CONTINUE = 0x1

	// SHA1_LOAD
	// Position of SHA1_LOAD field.
	SHA_SHA1_LOAD_SHA1_LOAD_Pos = 0x0
	// Bit mask of SHA1_LOAD field.
	SHA_SHA1_LOAD_SHA1_LOAD_Msk = 0x1
	// Bit SHA1_LOAD.
	SHA_SHA1_LOAD_SHA1_LOAD = 0x1

	// SHA1_BUSY
	// Position of SHA1_BUSY field.
	SHA_SHA1_BUSY_SHA1_BUSY_Pos = 0x0
	// Bit mask of SHA1_BUSY field.
	SHA_SHA1_BUSY_SHA1_BUSY_Msk = 0x1
	// Bit SHA1_BUSY.
	SHA_SHA1_BUSY_SHA1_BUSY = 0x1

	// SHA256_START
	// Position of SHA256_START field.
	SHA_SHA256_START_SHA256_START_Pos = 0x0
	// Bit mask of SHA256_START field.
	SHA_SHA256_START_SHA256_START_Msk = 0x1
	// Bit SHA256_START.
	SHA_SHA256_START_SHA256_START = 0x1

	// SHA256_CONTINUE
	// Position of SHA256_CONTINUE field.
	SHA_SHA256_CONTINUE_SHA256_CONTINUE_Pos = 0x0
	// Bit mask of SHA256_CONTINUE field.
	SHA_SHA256_CONTINUE_SHA256_CONTINUE_Msk = 0x1
	// Bit SHA256_CONTINUE.
	SHA_SHA256_CONTINUE_SHA256_CONTINUE = 0x1

	// SHA256_LOAD
	// Position of SHA256_LOAD field.
	SHA_SHA256_LOAD_SHA256_LOAD_Pos = 0x0
	// Bit mask of SHA256_LOAD field.
	SHA_SHA256_LOAD_SHA256_LOAD_Msk = 0x1
	// Bit SHA256_LOAD.
	SHA_SHA256_LOAD_SHA256_LOAD = 0x1

	// SHA256_BUSY
	// Position of SHA256_BUSY field.
	SHA_SHA256_BUSY_SHA256_BUSY_Pos = 0x0
	// Bit mask of SHA256_BUSY field.
	SHA_SHA256_BUSY_SHA256_BUSY_Msk = 0x1
	// Bit SHA256_BUSY.
	SHA_SHA256_BUSY_SHA256_BUSY = 0x1

	// SHA384_START
	// Position of SHA384_START field.
	SHA_SHA384_START_SHA384_START_Pos = 0x0
	// Bit mask of SHA384_START field.
	SHA_SHA384_START_SHA384_START_Msk = 0x1
	// Bit SHA384_START.
	SHA_SHA384_START_SHA384_START = 0x1

	// SHA384_CONTINUE
	// Position of SHA384_CONTINUE field.
	SHA_SHA384_CONTINUE_SHA384_CONTINUE_Pos = 0x0
	// Bit mask of SHA384_CONTINUE field.
	SHA_SHA384_CONTINUE_SHA384_CONTINUE_Msk = 0x1
	// Bit SHA384_CONTINUE.
	SHA_SHA384_CONTINUE_SHA384_CONTINUE = 0x1

	// SHA384_LOAD
	// Position of SHA384_LOAD field.
	SHA_SHA384_LOAD_SHA384_LOAD_Pos = 0x0
	// Bit mask of SHA384_LOAD field.
	SHA_SHA384_LOAD_SHA384_LOAD_Msk = 0x1
	// Bit SHA384_LOAD.
	SHA_SHA384_LOAD_SHA384_LOAD = 0x1

	// SHA384_BUSY
	// Position of SHA384_BUSY field.
	SHA_SHA384_BUSY_SHA384_BUSY_Pos = 0x0
	// Bit mask of SHA384_BUSY field.
	SHA_SHA384_BUSY_SHA384_BUSY_Msk = 0x1
	// Bit SHA384_BUSY.
	SHA_SHA384_BUSY_SHA384_BUSY = 0x1

	// SHA512_START
	// Position of SHA512_START field.
	SHA_SHA512_START_SHA512_START_Pos = 0x0
	// Bit mask of SHA512_START field.
	SHA_SHA512_START_SHA512_START_Msk = 0x1
	// Bit SHA512_START.
	SHA_SHA512_START_SHA512_START = 0x1

	// SHA512_CONTINUE
	// Position of SHA512_CONTINUE field.
	SHA_SHA512_CONTINUE_SHA512_CONTINUE_Pos = 0x0
	// Bit mask of SHA512_CONTINUE field.
	SHA_SHA512_CONTINUE_SHA512_CONTINUE_Msk = 0x1
	// Bit SHA512_CONTINUE.
	SHA_SHA512_CONTINUE_SHA512_CONTINUE = 0x1

	// SHA512_LOAD
	// Position of SHA512_LOAD field.
	SHA_SHA512_LOAD_SHA512_LOAD_Pos = 0x0
	// Bit mask of SHA512_LOAD field.
	SHA_SHA512_LOAD_SHA512_LOAD_Msk = 0x1
	// Bit SHA512_LOAD.
	SHA_SHA512_LOAD_SHA512_LOAD = 0x1

	// SHA512_BUSY
	// Position of SHA512_BUSY field.
	SHA_SHA512_BUSY_SHA512_BUSY_Pos = 0x0
	// Bit mask of SHA512_BUSY field.
	SHA_SHA512_BUSY_SHA512_BUSY_Msk = 0x1
	// Bit SHA512_BUSY.
	SHA_SHA512_BUSY_SHA512_BUSY = 0x1
)

// Constants for SLC: SLC Peripheral
const (
	// CONF0
	// Position of SLC0_TX_RST field.
	SLC_CONF0_SLC0_TX_RST_Pos = 0x0
	// Bit mask of SLC0_TX_RST field.
	SLC_CONF0_SLC0_TX_RST_Msk = 0x1
	// Bit SLC0_TX_RST.
	SLC_CONF0_SLC0_TX_RST = 0x1
	// Position of SLC0_RX_RST field.
	SLC_CONF0_SLC0_RX_RST_Pos = 0x1
	// Bit mask of SLC0_RX_RST field.
	SLC_CONF0_SLC0_RX_RST_Msk = 0x2
	// Bit SLC0_RX_RST.
	SLC_CONF0_SLC0_RX_RST = 0x2
	// Position of AHBM_FIFO_RST field.
	SLC_CONF0_AHBM_FIFO_RST_Pos = 0x2
	// Bit mask of AHBM_FIFO_RST field.
	SLC_CONF0_AHBM_FIFO_RST_Msk = 0x4
	// Bit AHBM_FIFO_RST.
	SLC_CONF0_AHBM_FIFO_RST = 0x4
	// Position of AHBM_RST field.
	SLC_CONF0_AHBM_RST_Pos = 0x3
	// Bit mask of AHBM_RST field.
	SLC_CONF0_AHBM_RST_Msk = 0x8
	// Bit AHBM_RST.
	SLC_CONF0_AHBM_RST = 0x8
	// Position of SLC0_TX_LOOP_TEST field.
	SLC_CONF0_SLC0_TX_LOOP_TEST_Pos = 0x4
	// Bit mask of SLC0_TX_LOOP_TEST field.
	SLC_CONF0_SLC0_TX_LOOP_TEST_Msk = 0x10
	// Bit SLC0_TX_LOOP_TEST.
	SLC_CONF0_SLC0_TX_LOOP_TEST = 0x10
	// Position of SLC0_RX_LOOP_TEST field.
	SLC_CONF0_SLC0_RX_LOOP_TEST_Pos = 0x5
	// Bit mask of SLC0_RX_LOOP_TEST field.
	SLC_CONF0_SLC0_RX_LOOP_TEST_Msk = 0x20
	// Bit SLC0_RX_LOOP_TEST.
	SLC_CONF0_SLC0_RX_LOOP_TEST = 0x20
	// Position of SLC0_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC0_RX_AUTO_WRBACK_Pos = 0x6
	// Bit mask of SLC0_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC0_RX_AUTO_WRBACK_Msk = 0x40
	// Bit SLC0_RX_AUTO_WRBACK.
	SLC_CONF0_SLC0_RX_AUTO_WRBACK = 0x40
	// Position of SLC0_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC0_RX_NO_RESTART_CLR_Pos = 0x7
	// Bit mask of SLC0_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC0_RX_NO_RESTART_CLR_Msk = 0x80
	// Bit SLC0_RX_NO_RESTART_CLR.
	SLC_CONF0_SLC0_RX_NO_RESTART_CLR = 0x80
	// Position of SLC0_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_RXDSCR_BURST_EN_Pos = 0x8
	// Bit mask of SLC0_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_RXDSCR_BURST_EN_Msk = 0x100
	// Bit SLC0_RXDSCR_BURST_EN.
	SLC_CONF0_SLC0_RXDSCR_BURST_EN = 0x100
	// Position of SLC0_RXDATA_BURST_EN field.
	SLC_CONF0_SLC0_RXDATA_BURST_EN_Pos = 0x9
	// Bit mask of SLC0_RXDATA_BURST_EN field.
	SLC_CONF0_SLC0_RXDATA_BURST_EN_Msk = 0x200
	// Bit SLC0_RXDATA_BURST_EN.
	SLC_CONF0_SLC0_RXDATA_BURST_EN = 0x200
	// Position of SLC0_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_RXLINK_AUTO_RET_Pos = 0xa
	// Bit mask of SLC0_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_RXLINK_AUTO_RET_Msk = 0x400
	// Bit SLC0_RXLINK_AUTO_RET.
	SLC_CONF0_SLC0_RXLINK_AUTO_RET = 0x400
	// Position of SLC0_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_TXLINK_AUTO_RET_Pos = 0xb
	// Bit mask of SLC0_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_TXLINK_AUTO_RET_Msk = 0x800
	// Bit SLC0_TXLINK_AUTO_RET.
	SLC_CONF0_SLC0_TXLINK_AUTO_RET = 0x800
	// Position of SLC0_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_TXDSCR_BURST_EN_Pos = 0xc
	// Bit mask of SLC0_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_TXDSCR_BURST_EN_Msk = 0x1000
	// Bit SLC0_TXDSCR_BURST_EN.
	SLC_CONF0_SLC0_TXDSCR_BURST_EN = 0x1000
	// Position of SLC0_TXDATA_BURST_EN field.
	SLC_CONF0_SLC0_TXDATA_BURST_EN_Pos = 0xd
	// Bit mask of SLC0_TXDATA_BURST_EN field.
	SLC_CONF0_SLC0_TXDATA_BURST_EN_Msk = 0x2000
	// Bit SLC0_TXDATA_BURST_EN.
	SLC_CONF0_SLC0_TXDATA_BURST_EN = 0x2000
	// Position of SLC0_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC0_TOKEN_AUTO_CLR_Pos = 0xe
	// Bit mask of SLC0_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC0_TOKEN_AUTO_CLR_Msk = 0x4000
	// Bit SLC0_TOKEN_AUTO_CLR.
	SLC_CONF0_SLC0_TOKEN_AUTO_CLR = 0x4000
	// Position of SLC0_TOKEN_SEL field.
	SLC_CONF0_SLC0_TOKEN_SEL_Pos = 0xf
	// Bit mask of SLC0_TOKEN_SEL field.
	SLC_CONF0_SLC0_TOKEN_SEL_Msk = 0x8000
	// Bit SLC0_TOKEN_SEL.
	SLC_CONF0_SLC0_TOKEN_SEL = 0x8000
	// Position of SLC1_TX_RST field.
	SLC_CONF0_SLC1_TX_RST_Pos = 0x10
	// Bit mask of SLC1_TX_RST field.
	SLC_CONF0_SLC1_TX_RST_Msk = 0x10000
	// Bit SLC1_TX_RST.
	SLC_CONF0_SLC1_TX_RST = 0x10000
	// Position of SLC1_RX_RST field.
	SLC_CONF0_SLC1_RX_RST_Pos = 0x11
	// Bit mask of SLC1_RX_RST field.
	SLC_CONF0_SLC1_RX_RST_Msk = 0x20000
	// Bit SLC1_RX_RST.
	SLC_CONF0_SLC1_RX_RST = 0x20000
	// Position of SLC0_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC0_WR_RETRY_MASK_EN_Pos = 0x12
	// Bit mask of SLC0_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC0_WR_RETRY_MASK_EN_Msk = 0x40000
	// Bit SLC0_WR_RETRY_MASK_EN.
	SLC_CONF0_SLC0_WR_RETRY_MASK_EN = 0x40000
	// Position of SLC1_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC1_WR_RETRY_MASK_EN_Pos = 0x13
	// Bit mask of SLC1_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC1_WR_RETRY_MASK_EN_Msk = 0x80000
	// Bit SLC1_WR_RETRY_MASK_EN.
	SLC_CONF0_SLC1_WR_RETRY_MASK_EN = 0x80000
	// Position of SLC1_TX_LOOP_TEST field.
	SLC_CONF0_SLC1_TX_LOOP_TEST_Pos = 0x14
	// Bit mask of SLC1_TX_LOOP_TEST field.
	SLC_CONF0_SLC1_TX_LOOP_TEST_Msk = 0x100000
	// Bit SLC1_TX_LOOP_TEST.
	SLC_CONF0_SLC1_TX_LOOP_TEST = 0x100000
	// Position of SLC1_RX_LOOP_TEST field.
	SLC_CONF0_SLC1_RX_LOOP_TEST_Pos = 0x15
	// Bit mask of SLC1_RX_LOOP_TEST field.
	SLC_CONF0_SLC1_RX_LOOP_TEST_Msk = 0x200000
	// Bit SLC1_RX_LOOP_TEST.
	SLC_CONF0_SLC1_RX_LOOP_TEST = 0x200000
	// Position of SLC1_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC1_RX_AUTO_WRBACK_Pos = 0x16
	// Bit mask of SLC1_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC1_RX_AUTO_WRBACK_Msk = 0x400000
	// Bit SLC1_RX_AUTO_WRBACK.
	SLC_CONF0_SLC1_RX_AUTO_WRBACK = 0x400000
	// Position of SLC1_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC1_RX_NO_RESTART_CLR_Pos = 0x17
	// Bit mask of SLC1_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC1_RX_NO_RESTART_CLR_Msk = 0x800000
	// Bit SLC1_RX_NO_RESTART_CLR.
	SLC_CONF0_SLC1_RX_NO_RESTART_CLR = 0x800000
	// Position of SLC1_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_RXDSCR_BURST_EN_Pos = 0x18
	// Bit mask of SLC1_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_RXDSCR_BURST_EN_Msk = 0x1000000
	// Bit SLC1_RXDSCR_BURST_EN.
	SLC_CONF0_SLC1_RXDSCR_BURST_EN = 0x1000000
	// Position of SLC1_RXDATA_BURST_EN field.
	SLC_CONF0_SLC1_RXDATA_BURST_EN_Pos = 0x19
	// Bit mask of SLC1_RXDATA_BURST_EN field.
	SLC_CONF0_SLC1_RXDATA_BURST_EN_Msk = 0x2000000
	// Bit SLC1_RXDATA_BURST_EN.
	SLC_CONF0_SLC1_RXDATA_BURST_EN = 0x2000000
	// Position of SLC1_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_RXLINK_AUTO_RET_Pos = 0x1a
	// Bit mask of SLC1_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_RXLINK_AUTO_RET_Msk = 0x4000000
	// Bit SLC1_RXLINK_AUTO_RET.
	SLC_CONF0_SLC1_RXLINK_AUTO_RET = 0x4000000
	// Position of SLC1_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_TXLINK_AUTO_RET_Pos = 0x1b
	// Bit mask of SLC1_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_TXLINK_AUTO_RET_Msk = 0x8000000
	// Bit SLC1_TXLINK_AUTO_RET.
	SLC_CONF0_SLC1_TXLINK_AUTO_RET = 0x8000000
	// Position of SLC1_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_TXDSCR_BURST_EN_Pos = 0x1c
	// Bit mask of SLC1_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_TXDSCR_BURST_EN_Msk = 0x10000000
	// Bit SLC1_TXDSCR_BURST_EN.
	SLC_CONF0_SLC1_TXDSCR_BURST_EN = 0x10000000
	// Position of SLC1_TXDATA_BURST_EN field.
	SLC_CONF0_SLC1_TXDATA_BURST_EN_Pos = 0x1d
	// Bit mask of SLC1_TXDATA_BURST_EN field.
	SLC_CONF0_SLC1_TXDATA_BURST_EN_Msk = 0x20000000
	// Bit SLC1_TXDATA_BURST_EN.
	SLC_CONF0_SLC1_TXDATA_BURST_EN = 0x20000000
	// Position of SLC1_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC1_TOKEN_AUTO_CLR_Pos = 0x1e
	// Bit mask of SLC1_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC1_TOKEN_AUTO_CLR_Msk = 0x40000000
	// Bit SLC1_TOKEN_AUTO_CLR.
	SLC_CONF0_SLC1_TOKEN_AUTO_CLR = 0x40000000
	// Position of SLC1_TOKEN_SEL field.
	SLC_CONF0_SLC1_TOKEN_SEL_Pos = 0x1f
	// Bit mask of SLC1_TOKEN_SEL field.
	SLC_CONF0_SLC1_TOKEN_SEL_Msk = 0x80000000
	// Bit SLC1_TOKEN_SEL.
	SLC_CONF0_SLC1_TOKEN_SEL = 0x80000000

	// _0INT_RAW
	// Position of FRHOST_BIT0_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT0_INT_RAW_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT0_INT_RAW_Msk = 0x1
	// Bit FRHOST_BIT0_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT0_INT_RAW = 0x1
	// Position of FRHOST_BIT1_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT1_INT_RAW_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT1_INT_RAW_Msk = 0x2
	// Bit FRHOST_BIT1_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT1_INT_RAW = 0x2
	// Position of FRHOST_BIT2_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT2_INT_RAW_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT2_INT_RAW_Msk = 0x4
	// Bit FRHOST_BIT2_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT2_INT_RAW = 0x4
	// Position of FRHOST_BIT3_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT3_INT_RAW_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT3_INT_RAW_Msk = 0x8
	// Bit FRHOST_BIT3_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT3_INT_RAW = 0x8
	// Position of FRHOST_BIT4_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT4_INT_RAW_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT4_INT_RAW_Msk = 0x10
	// Bit FRHOST_BIT4_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT4_INT_RAW = 0x10
	// Position of FRHOST_BIT5_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT5_INT_RAW_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT5_INT_RAW_Msk = 0x20
	// Bit FRHOST_BIT5_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT5_INT_RAW = 0x20
	// Position of FRHOST_BIT6_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT6_INT_RAW_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT6_INT_RAW_Msk = 0x40
	// Bit FRHOST_BIT6_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT6_INT_RAW = 0x40
	// Position of FRHOST_BIT7_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT7_INT_RAW_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT7_INT_RAW_Msk = 0x80
	// Bit FRHOST_BIT7_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT7_INT_RAW = 0x80
	// Position of SLC0_RX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_START_INT_RAW_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_START_INT_RAW_Msk = 0x100
	// Bit SLC0_RX_START_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_START_INT_RAW = 0x100
	// Position of SLC0_TX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_START_INT_RAW_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_START_INT_RAW_Msk = 0x200
	// Bit SLC0_TX_START_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_START_INT_RAW = 0x200
	// Position of SLC0_RX_UDF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_UDF_INT_RAW_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_UDF_INT_RAW_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_UDF_INT_RAW = 0x400
	// Position of SLC0_TX_OVF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_OVF_INT_RAW_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_OVF_INT_RAW_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_OVF_INT_RAW = 0x800
	// Position of SLC0_TOKEN0_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_RAW.
	SLC__0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW = 0x1000
	// Position of SLC0_TOKEN1_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_RAW.
	SLC__0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW = 0x2000
	// Position of SLC0_TX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DONE_INT_RAW_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DONE_INT_RAW_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_DONE_INT_RAW = 0x4000
	// Position of SLC0_TX_SUC_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW = 0x8000
	// Position of SLC0_RX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DONE_INT_RAW_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DONE_INT_RAW_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_DONE_INT_RAW = 0x10000
	// Position of SLC0_RX_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_EOF_INT_RAW_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_EOF_INT_RAW_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_EOF_INT_RAW = 0x20000
	// Position of SLC0_TOHOST_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOHOST_INT_RAW_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOHOST_INT_RAW_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_RAW.
	SLC__0INT_RAW_SLC0_TOHOST_INT_RAW = 0x40000
	// Position of SLC0_TX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW = 0x80000
	// Position of SLC0_RX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW = 0x100000
	// Position of SLC0_TX_DSCR_EMPTY_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW = 0x200000
	// Position of SLC0_HOST_RD_ACK_INT_RAW field.
	SLC__0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_RAW field.
	SLC__0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_RAW.
	SLC__0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW = 0x400000
	// Position of SLC0_WR_RETRY_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_RAW.
	SLC__0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW = 0x800000
	// Position of SLC0_TX_ERR_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW = 0x1000000
	// Position of CMD_DTC_INT_RAW field.
	SLC__0INT_RAW_CMD_DTC_INT_RAW_Pos = 0x19
	// Bit mask of CMD_DTC_INT_RAW field.
	SLC__0INT_RAW_CMD_DTC_INT_RAW_Msk = 0x2000000
	// Bit CMD_DTC_INT_RAW.
	SLC__0INT_RAW_CMD_DTC_INT_RAW = 0x2000000
	// Position of SLC0_RX_QUICK_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW = 0x4000000

	// _0INT_ST
	// Position of FRHOST_BIT0_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT0_INT_ST_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT0_INT_ST_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ST.
	SLC__0INT_ST_FRHOST_BIT0_INT_ST = 0x1
	// Position of FRHOST_BIT1_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT1_INT_ST_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT1_INT_ST_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ST.
	SLC__0INT_ST_FRHOST_BIT1_INT_ST = 0x2
	// Position of FRHOST_BIT2_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT2_INT_ST_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT2_INT_ST_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ST.
	SLC__0INT_ST_FRHOST_BIT2_INT_ST = 0x4
	// Position of FRHOST_BIT3_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT3_INT_ST_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT3_INT_ST_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ST.
	SLC__0INT_ST_FRHOST_BIT3_INT_ST = 0x8
	// Position of FRHOST_BIT4_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT4_INT_ST_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT4_INT_ST_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ST.
	SLC__0INT_ST_FRHOST_BIT4_INT_ST = 0x10
	// Position of FRHOST_BIT5_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT5_INT_ST_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT5_INT_ST_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ST.
	SLC__0INT_ST_FRHOST_BIT5_INT_ST = 0x20
	// Position of FRHOST_BIT6_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT6_INT_ST_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT6_INT_ST_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ST.
	SLC__0INT_ST_FRHOST_BIT6_INT_ST = 0x40
	// Position of FRHOST_BIT7_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT7_INT_ST_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT7_INT_ST_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ST.
	SLC__0INT_ST_FRHOST_BIT7_INT_ST = 0x80
	// Position of SLC0_RX_START_INT_ST field.
	SLC__0INT_ST_SLC0_RX_START_INT_ST_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ST field.
	SLC__0INT_ST_SLC0_RX_START_INT_ST_Msk = 0x100
	// Bit SLC0_RX_START_INT_ST.
	SLC__0INT_ST_SLC0_RX_START_INT_ST = 0x100
	// Position of SLC0_TX_START_INT_ST field.
	SLC__0INT_ST_SLC0_TX_START_INT_ST_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ST field.
	SLC__0INT_ST_SLC0_TX_START_INT_ST_Msk = 0x200
	// Bit SLC0_TX_START_INT_ST.
	SLC__0INT_ST_SLC0_TX_START_INT_ST = 0x200
	// Position of SLC0_RX_UDF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_UDF_INT_ST_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_UDF_INT_ST_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ST.
	SLC__0INT_ST_SLC0_RX_UDF_INT_ST = 0x400
	// Position of SLC0_TX_OVF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_OVF_INT_ST_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_OVF_INT_ST_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ST.
	SLC__0INT_ST_SLC0_TX_OVF_INT_ST = 0x800
	// Position of SLC0_TOKEN0_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN0_1TO0_INT_ST_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN0_1TO0_INT_ST_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ST.
	SLC__0INT_ST_SLC0_TOKEN0_1TO0_INT_ST = 0x1000
	// Position of SLC0_TOKEN1_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN1_1TO0_INT_ST_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN1_1TO0_INT_ST_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ST.
	SLC__0INT_ST_SLC0_TOKEN1_1TO0_INT_ST = 0x2000
	// Position of SLC0_TX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DONE_INT_ST_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DONE_INT_ST_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ST.
	SLC__0INT_ST_SLC0_TX_DONE_INT_ST = 0x4000
	// Position of SLC0_TX_SUC_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_SUC_EOF_INT_ST_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_SUC_EOF_INT_ST_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ST.
	SLC__0INT_ST_SLC0_TX_SUC_EOF_INT_ST = 0x8000
	// Position of SLC0_RX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DONE_INT_ST_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DONE_INT_ST_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ST.
	SLC__0INT_ST_SLC0_RX_DONE_INT_ST = 0x10000
	// Position of SLC0_RX_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_EOF_INT_ST_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_EOF_INT_ST_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ST.
	SLC__0INT_ST_SLC0_RX_EOF_INT_ST = 0x20000
	// Position of SLC0_TOHOST_INT_ST field.
	SLC__0INT_ST_SLC0_TOHOST_INT_ST_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ST field.
	SLC__0INT_ST_SLC0_TOHOST_INT_ST_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ST.
	SLC__0INT_ST_SLC0_TOHOST_INT_ST = 0x40000
	// Position of SLC0_TX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_ERR_INT_ST_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_ERR_INT_ST_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ST.
	SLC__0INT_ST_SLC0_TX_DSCR_ERR_INT_ST = 0x80000
	// Position of SLC0_RX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DSCR_ERR_INT_ST_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DSCR_ERR_INT_ST_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ST.
	SLC__0INT_ST_SLC0_RX_DSCR_ERR_INT_ST = 0x100000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ST.
	SLC__0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST = 0x200000
	// Position of SLC0_HOST_RD_ACK_INT_ST field.
	SLC__0INT_ST_SLC0_HOST_RD_ACK_INT_ST_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ST field.
	SLC__0INT_ST_SLC0_HOST_RD_ACK_INT_ST_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ST.
	SLC__0INT_ST_SLC0_HOST_RD_ACK_INT_ST = 0x400000
	// Position of SLC0_WR_RETRY_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_WR_RETRY_DONE_INT_ST_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_WR_RETRY_DONE_INT_ST_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ST.
	SLC__0INT_ST_SLC0_WR_RETRY_DONE_INT_ST = 0x800000
	// Position of SLC0_TX_ERR_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_ERR_EOF_INT_ST_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_ERR_EOF_INT_ST_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ST.
	SLC__0INT_ST_SLC0_TX_ERR_EOF_INT_ST = 0x1000000
	// Position of CMD_DTC_INT_ST field.
	SLC__0INT_ST_CMD_DTC_INT_ST_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ST field.
	SLC__0INT_ST_CMD_DTC_INT_ST_Msk = 0x2000000
	// Bit CMD_DTC_INT_ST.
	SLC__0INT_ST_CMD_DTC_INT_ST = 0x2000000
	// Position of SLC0_RX_QUICK_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_QUICK_EOF_INT_ST_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_QUICK_EOF_INT_ST_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ST.
	SLC__0INT_ST_SLC0_RX_QUICK_EOF_INT_ST = 0x4000000

	// _0INT_ENA
	// Position of FRHOST_BIT0_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT0_INT_ENA = 0x1
	// Position of FRHOST_BIT1_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT1_INT_ENA = 0x2
	// Position of FRHOST_BIT2_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT2_INT_ENA = 0x4
	// Position of FRHOST_BIT3_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT3_INT_ENA = 0x8
	// Position of FRHOST_BIT4_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT4_INT_ENA = 0x10
	// Position of FRHOST_BIT5_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT5_INT_ENA = 0x20
	// Position of FRHOST_BIT6_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT6_INT_ENA = 0x40
	// Position of FRHOST_BIT7_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT7_INT_ENA = 0x80
	// Position of SLC0_RX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_START_INT_ENA_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_START_INT_ENA_Msk = 0x100
	// Bit SLC0_RX_START_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_START_INT_ENA = 0x100
	// Position of SLC0_TX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_START_INT_ENA_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_START_INT_ENA_Msk = 0x200
	// Bit SLC0_TX_START_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_START_INT_ENA = 0x200
	// Position of SLC0_RX_UDF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_UDF_INT_ENA_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_UDF_INT_ENA_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_UDF_INT_ENA = 0x400
	// Position of SLC0_TX_OVF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_OVF_INT_ENA_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_OVF_INT_ENA_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_OVF_INT_ENA = 0x800
	// Position of SLC0_TOKEN0_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ENA.
	SLC__0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA = 0x1000
	// Position of SLC0_TOKEN1_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ENA.
	SLC__0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA = 0x2000
	// Position of SLC0_TX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DONE_INT_ENA_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DONE_INT_ENA_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_DONE_INT_ENA = 0x4000
	// Position of SLC0_TX_SUC_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA = 0x8000
	// Position of SLC0_RX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DONE_INT_ENA_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DONE_INT_ENA_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_DONE_INT_ENA = 0x10000
	// Position of SLC0_RX_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_EOF_INT_ENA_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_EOF_INT_ENA_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_EOF_INT_ENA = 0x20000
	// Position of SLC0_TOHOST_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOHOST_INT_ENA_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOHOST_INT_ENA_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ENA.
	SLC__0INT_ENA_SLC0_TOHOST_INT_ENA = 0x40000
	// Position of SLC0_TX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA = 0x80000
	// Position of SLC0_RX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA = 0x100000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA = 0x200000
	// Position of SLC0_HOST_RD_ACK_INT_ENA field.
	SLC__0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ENA field.
	SLC__0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ENA.
	SLC__0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA = 0x400000
	// Position of SLC0_WR_RETRY_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ENA.
	SLC__0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA = 0x800000
	// Position of SLC0_TX_ERR_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA = 0x1000000
	// Position of CMD_DTC_INT_ENA field.
	SLC__0INT_ENA_CMD_DTC_INT_ENA_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ENA field.
	SLC__0INT_ENA_CMD_DTC_INT_ENA_Msk = 0x2000000
	// Bit CMD_DTC_INT_ENA.
	SLC__0INT_ENA_CMD_DTC_INT_ENA = 0x2000000
	// Position of SLC0_RX_QUICK_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA = 0x4000000

	// _0INT_CLR
	// Position of FRHOST_BIT0_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT0_INT_CLR_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT0_INT_CLR_Msk = 0x1
	// Bit FRHOST_BIT0_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT0_INT_CLR = 0x1
	// Position of FRHOST_BIT1_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT1_INT_CLR_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT1_INT_CLR_Msk = 0x2
	// Bit FRHOST_BIT1_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT1_INT_CLR = 0x2
	// Position of FRHOST_BIT2_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT2_INT_CLR_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT2_INT_CLR_Msk = 0x4
	// Bit FRHOST_BIT2_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT2_INT_CLR = 0x4
	// Position of FRHOST_BIT3_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT3_INT_CLR_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT3_INT_CLR_Msk = 0x8
	// Bit FRHOST_BIT3_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT3_INT_CLR = 0x8
	// Position of FRHOST_BIT4_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT4_INT_CLR_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT4_INT_CLR_Msk = 0x10
	// Bit FRHOST_BIT4_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT4_INT_CLR = 0x10
	// Position of FRHOST_BIT5_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT5_INT_CLR_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT5_INT_CLR_Msk = 0x20
	// Bit FRHOST_BIT5_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT5_INT_CLR = 0x20
	// Position of FRHOST_BIT6_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT6_INT_CLR_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT6_INT_CLR_Msk = 0x40
	// Bit FRHOST_BIT6_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT6_INT_CLR = 0x40
	// Position of FRHOST_BIT7_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT7_INT_CLR_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT7_INT_CLR_Msk = 0x80
	// Bit FRHOST_BIT7_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT7_INT_CLR = 0x80
	// Position of SLC0_RX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_START_INT_CLR_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_START_INT_CLR_Msk = 0x100
	// Bit SLC0_RX_START_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_START_INT_CLR = 0x100
	// Position of SLC0_TX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_START_INT_CLR_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_START_INT_CLR_Msk = 0x200
	// Bit SLC0_TX_START_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_START_INT_CLR = 0x200
	// Position of SLC0_RX_UDF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_UDF_INT_CLR_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_UDF_INT_CLR_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_UDF_INT_CLR = 0x400
	// Position of SLC0_TX_OVF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_OVF_INT_CLR_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_OVF_INT_CLR_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_OVF_INT_CLR = 0x800
	// Position of SLC0_TOKEN0_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_CLR.
	SLC__0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR = 0x1000
	// Position of SLC0_TOKEN1_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_CLR.
	SLC__0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR = 0x2000
	// Position of SLC0_TX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DONE_INT_CLR_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DONE_INT_CLR_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_DONE_INT_CLR = 0x4000
	// Position of SLC0_TX_SUC_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR = 0x8000
	// Position of SLC0_RX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DONE_INT_CLR_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DONE_INT_CLR_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_DONE_INT_CLR = 0x10000
	// Position of SLC0_RX_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_EOF_INT_CLR_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_EOF_INT_CLR_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_EOF_INT_CLR = 0x20000
	// Position of SLC0_TOHOST_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOHOST_INT_CLR_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOHOST_INT_CLR_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_CLR.
	SLC__0INT_CLR_SLC0_TOHOST_INT_CLR = 0x40000
	// Position of SLC0_TX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR = 0x80000
	// Position of SLC0_RX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR = 0x100000
	// Position of SLC0_TX_DSCR_EMPTY_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR = 0x200000
	// Position of SLC0_HOST_RD_ACK_INT_CLR field.
	SLC__0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_CLR field.
	SLC__0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_CLR.
	SLC__0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR = 0x400000
	// Position of SLC0_WR_RETRY_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_CLR.
	SLC__0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR = 0x800000
	// Position of SLC0_TX_ERR_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR = 0x1000000
	// Position of CMD_DTC_INT_CLR field.
	SLC__0INT_CLR_CMD_DTC_INT_CLR_Pos = 0x19
	// Bit mask of CMD_DTC_INT_CLR field.
	SLC__0INT_CLR_CMD_DTC_INT_CLR_Msk = 0x2000000
	// Bit CMD_DTC_INT_CLR.
	SLC__0INT_CLR_CMD_DTC_INT_CLR = 0x2000000
	// Position of SLC0_RX_QUICK_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR = 0x4000000

	// _1INT_RAW
	// Position of FRHOST_BIT8_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT8_INT_RAW_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT8_INT_RAW_Msk = 0x1
	// Bit FRHOST_BIT8_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT8_INT_RAW = 0x1
	// Position of FRHOST_BIT9_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT9_INT_RAW_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT9_INT_RAW_Msk = 0x2
	// Bit FRHOST_BIT9_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT9_INT_RAW = 0x2
	// Position of FRHOST_BIT10_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT10_INT_RAW_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT10_INT_RAW_Msk = 0x4
	// Bit FRHOST_BIT10_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT10_INT_RAW = 0x4
	// Position of FRHOST_BIT11_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT11_INT_RAW_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT11_INT_RAW_Msk = 0x8
	// Bit FRHOST_BIT11_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT11_INT_RAW = 0x8
	// Position of FRHOST_BIT12_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT12_INT_RAW_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT12_INT_RAW_Msk = 0x10
	// Bit FRHOST_BIT12_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT12_INT_RAW = 0x10
	// Position of FRHOST_BIT13_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT13_INT_RAW_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT13_INT_RAW_Msk = 0x20
	// Bit FRHOST_BIT13_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT13_INT_RAW = 0x20
	// Position of FRHOST_BIT14_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT14_INT_RAW_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT14_INT_RAW_Msk = 0x40
	// Bit FRHOST_BIT14_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT14_INT_RAW = 0x40
	// Position of FRHOST_BIT15_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT15_INT_RAW_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT15_INT_RAW_Msk = 0x80
	// Bit FRHOST_BIT15_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT15_INT_RAW = 0x80
	// Position of SLC1_RX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_START_INT_RAW_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_START_INT_RAW_Msk = 0x100
	// Bit SLC1_RX_START_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_START_INT_RAW = 0x100
	// Position of SLC1_TX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_START_INT_RAW_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_START_INT_RAW_Msk = 0x200
	// Bit SLC1_TX_START_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_START_INT_RAW = 0x200
	// Position of SLC1_RX_UDF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_UDF_INT_RAW_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_UDF_INT_RAW_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_UDF_INT_RAW = 0x400
	// Position of SLC1_TX_OVF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_OVF_INT_RAW_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_OVF_INT_RAW_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_OVF_INT_RAW = 0x800
	// Position of SLC1_TOKEN0_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_RAW.
	SLC__1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW = 0x1000
	// Position of SLC1_TOKEN1_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_RAW.
	SLC__1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW = 0x2000
	// Position of SLC1_TX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DONE_INT_RAW_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DONE_INT_RAW_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_DONE_INT_RAW = 0x4000
	// Position of SLC1_TX_SUC_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW = 0x8000
	// Position of SLC1_RX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DONE_INT_RAW_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DONE_INT_RAW_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_DONE_INT_RAW = 0x10000
	// Position of SLC1_RX_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_EOF_INT_RAW_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_EOF_INT_RAW_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_EOF_INT_RAW = 0x20000
	// Position of SLC1_TOHOST_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOHOST_INT_RAW_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOHOST_INT_RAW_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_RAW.
	SLC__1INT_RAW_SLC1_TOHOST_INT_RAW = 0x40000
	// Position of SLC1_TX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW = 0x80000
	// Position of SLC1_RX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW = 0x100000
	// Position of SLC1_TX_DSCR_EMPTY_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW = 0x200000
	// Position of SLC1_HOST_RD_ACK_INT_RAW field.
	SLC__1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_RAW field.
	SLC__1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_RAW.
	SLC__1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW = 0x400000
	// Position of SLC1_WR_RETRY_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_RAW.
	SLC__1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW = 0x800000
	// Position of SLC1_TX_ERR_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW = 0x1000000

	// _1INT_ST
	// Position of FRHOST_BIT8_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT8_INT_ST_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT8_INT_ST_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ST.
	SLC__1INT_ST_FRHOST_BIT8_INT_ST = 0x1
	// Position of FRHOST_BIT9_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT9_INT_ST_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT9_INT_ST_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ST.
	SLC__1INT_ST_FRHOST_BIT9_INT_ST = 0x2
	// Position of FRHOST_BIT10_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT10_INT_ST_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT10_INT_ST_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ST.
	SLC__1INT_ST_FRHOST_BIT10_INT_ST = 0x4
	// Position of FRHOST_BIT11_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT11_INT_ST_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT11_INT_ST_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ST.
	SLC__1INT_ST_FRHOST_BIT11_INT_ST = 0x8
	// Position of FRHOST_BIT12_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT12_INT_ST_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT12_INT_ST_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ST.
	SLC__1INT_ST_FRHOST_BIT12_INT_ST = 0x10
	// Position of FRHOST_BIT13_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT13_INT_ST_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT13_INT_ST_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ST.
	SLC__1INT_ST_FRHOST_BIT13_INT_ST = 0x20
	// Position of FRHOST_BIT14_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT14_INT_ST_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT14_INT_ST_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ST.
	SLC__1INT_ST_FRHOST_BIT14_INT_ST = 0x40
	// Position of FRHOST_BIT15_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT15_INT_ST_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT15_INT_ST_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ST.
	SLC__1INT_ST_FRHOST_BIT15_INT_ST = 0x80
	// Position of SLC1_RX_START_INT_ST field.
	SLC__1INT_ST_SLC1_RX_START_INT_ST_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ST field.
	SLC__1INT_ST_SLC1_RX_START_INT_ST_Msk = 0x100
	// Bit SLC1_RX_START_INT_ST.
	SLC__1INT_ST_SLC1_RX_START_INT_ST = 0x100
	// Position of SLC1_TX_START_INT_ST field.
	SLC__1INT_ST_SLC1_TX_START_INT_ST_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ST field.
	SLC__1INT_ST_SLC1_TX_START_INT_ST_Msk = 0x200
	// Bit SLC1_TX_START_INT_ST.
	SLC__1INT_ST_SLC1_TX_START_INT_ST = 0x200
	// Position of SLC1_RX_UDF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_UDF_INT_ST_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_UDF_INT_ST_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ST.
	SLC__1INT_ST_SLC1_RX_UDF_INT_ST = 0x400
	// Position of SLC1_TX_OVF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_OVF_INT_ST_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_OVF_INT_ST_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ST.
	SLC__1INT_ST_SLC1_TX_OVF_INT_ST = 0x800
	// Position of SLC1_TOKEN0_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN0_1TO0_INT_ST_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN0_1TO0_INT_ST_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ST.
	SLC__1INT_ST_SLC1_TOKEN0_1TO0_INT_ST = 0x1000
	// Position of SLC1_TOKEN1_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN1_1TO0_INT_ST_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN1_1TO0_INT_ST_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ST.
	SLC__1INT_ST_SLC1_TOKEN1_1TO0_INT_ST = 0x2000
	// Position of SLC1_TX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DONE_INT_ST_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DONE_INT_ST_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ST.
	SLC__1INT_ST_SLC1_TX_DONE_INT_ST = 0x4000
	// Position of SLC1_TX_SUC_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_SUC_EOF_INT_ST_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_SUC_EOF_INT_ST_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ST.
	SLC__1INT_ST_SLC1_TX_SUC_EOF_INT_ST = 0x8000
	// Position of SLC1_RX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DONE_INT_ST_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DONE_INT_ST_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ST.
	SLC__1INT_ST_SLC1_RX_DONE_INT_ST = 0x10000
	// Position of SLC1_RX_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_EOF_INT_ST_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_EOF_INT_ST_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ST.
	SLC__1INT_ST_SLC1_RX_EOF_INT_ST = 0x20000
	// Position of SLC1_TOHOST_INT_ST field.
	SLC__1INT_ST_SLC1_TOHOST_INT_ST_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ST field.
	SLC__1INT_ST_SLC1_TOHOST_INT_ST_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ST.
	SLC__1INT_ST_SLC1_TOHOST_INT_ST = 0x40000
	// Position of SLC1_TX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_ERR_INT_ST_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_ERR_INT_ST_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ST.
	SLC__1INT_ST_SLC1_TX_DSCR_ERR_INT_ST = 0x80000
	// Position of SLC1_RX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DSCR_ERR_INT_ST_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DSCR_ERR_INT_ST_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ST.
	SLC__1INT_ST_SLC1_RX_DSCR_ERR_INT_ST = 0x100000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ST.
	SLC__1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST = 0x200000
	// Position of SLC1_HOST_RD_ACK_INT_ST field.
	SLC__1INT_ST_SLC1_HOST_RD_ACK_INT_ST_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ST field.
	SLC__1INT_ST_SLC1_HOST_RD_ACK_INT_ST_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ST.
	SLC__1INT_ST_SLC1_HOST_RD_ACK_INT_ST = 0x400000
	// Position of SLC1_WR_RETRY_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_WR_RETRY_DONE_INT_ST_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_WR_RETRY_DONE_INT_ST_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ST.
	SLC__1INT_ST_SLC1_WR_RETRY_DONE_INT_ST = 0x800000
	// Position of SLC1_TX_ERR_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_ERR_EOF_INT_ST_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_ERR_EOF_INT_ST_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ST.
	SLC__1INT_ST_SLC1_TX_ERR_EOF_INT_ST = 0x1000000

	// _1INT_ENA
	// Position of FRHOST_BIT8_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT8_INT_ENA_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT8_INT_ENA_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT8_INT_ENA = 0x1
	// Position of FRHOST_BIT9_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT9_INT_ENA_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT9_INT_ENA_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT9_INT_ENA = 0x2
	// Position of FRHOST_BIT10_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT10_INT_ENA_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT10_INT_ENA_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT10_INT_ENA = 0x4
	// Position of FRHOST_BIT11_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT11_INT_ENA_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT11_INT_ENA_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT11_INT_ENA = 0x8
	// Position of FRHOST_BIT12_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT12_INT_ENA_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT12_INT_ENA_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT12_INT_ENA = 0x10
	// Position of FRHOST_BIT13_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT13_INT_ENA_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT13_INT_ENA_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT13_INT_ENA = 0x20
	// Position of FRHOST_BIT14_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT14_INT_ENA_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT14_INT_ENA_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT14_INT_ENA = 0x40
	// Position of FRHOST_BIT15_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT15_INT_ENA_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT15_INT_ENA_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT15_INT_ENA = 0x80
	// Position of SLC1_RX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_START_INT_ENA_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_START_INT_ENA_Msk = 0x100
	// Bit SLC1_RX_START_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_START_INT_ENA = 0x100
	// Position of SLC1_TX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_START_INT_ENA_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_START_INT_ENA_Msk = 0x200
	// Bit SLC1_TX_START_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_START_INT_ENA = 0x200
	// Position of SLC1_RX_UDF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_UDF_INT_ENA_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_UDF_INT_ENA_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_UDF_INT_ENA = 0x400
	// Position of SLC1_TX_OVF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_OVF_INT_ENA_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_OVF_INT_ENA_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_OVF_INT_ENA = 0x800
	// Position of SLC1_TOKEN0_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ENA.
	SLC__1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA = 0x1000
	// Position of SLC1_TOKEN1_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ENA.
	SLC__1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA = 0x2000
	// Position of SLC1_TX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DONE_INT_ENA_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DONE_INT_ENA_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_DONE_INT_ENA = 0x4000
	// Position of SLC1_TX_SUC_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA = 0x8000
	// Position of SLC1_RX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DONE_INT_ENA_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DONE_INT_ENA_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_DONE_INT_ENA = 0x10000
	// Position of SLC1_RX_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_EOF_INT_ENA_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_EOF_INT_ENA_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_EOF_INT_ENA = 0x20000
	// Position of SLC1_TOHOST_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOHOST_INT_ENA_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOHOST_INT_ENA_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ENA.
	SLC__1INT_ENA_SLC1_TOHOST_INT_ENA = 0x40000
	// Position of SLC1_TX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA = 0x80000
	// Position of SLC1_RX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA = 0x100000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA = 0x200000
	// Position of SLC1_HOST_RD_ACK_INT_ENA field.
	SLC__1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ENA field.
	SLC__1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ENA.
	SLC__1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA = 0x400000
	// Position of SLC1_WR_RETRY_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ENA.
	SLC__1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA = 0x800000
	// Position of SLC1_TX_ERR_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA = 0x1000000

	// _1INT_CLR
	// Position of FRHOST_BIT8_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT8_INT_CLR_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT8_INT_CLR_Msk = 0x1
	// Bit FRHOST_BIT8_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT8_INT_CLR = 0x1
	// Position of FRHOST_BIT9_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT9_INT_CLR_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT9_INT_CLR_Msk = 0x2
	// Bit FRHOST_BIT9_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT9_INT_CLR = 0x2
	// Position of FRHOST_BIT10_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT10_INT_CLR_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT10_INT_CLR_Msk = 0x4
	// Bit FRHOST_BIT10_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT10_INT_CLR = 0x4
	// Position of FRHOST_BIT11_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT11_INT_CLR_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT11_INT_CLR_Msk = 0x8
	// Bit FRHOST_BIT11_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT11_INT_CLR = 0x8
	// Position of FRHOST_BIT12_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT12_INT_CLR_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT12_INT_CLR_Msk = 0x10
	// Bit FRHOST_BIT12_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT12_INT_CLR = 0x10
	// Position of FRHOST_BIT13_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT13_INT_CLR_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT13_INT_CLR_Msk = 0x20
	// Bit FRHOST_BIT13_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT13_INT_CLR = 0x20
	// Position of FRHOST_BIT14_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT14_INT_CLR_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT14_INT_CLR_Msk = 0x40
	// Bit FRHOST_BIT14_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT14_INT_CLR = 0x40
	// Position of FRHOST_BIT15_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT15_INT_CLR_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT15_INT_CLR_Msk = 0x80
	// Bit FRHOST_BIT15_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT15_INT_CLR = 0x80
	// Position of SLC1_RX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_START_INT_CLR_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_START_INT_CLR_Msk = 0x100
	// Bit SLC1_RX_START_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_START_INT_CLR = 0x100
	// Position of SLC1_TX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_START_INT_CLR_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_START_INT_CLR_Msk = 0x200
	// Bit SLC1_TX_START_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_START_INT_CLR = 0x200
	// Position of SLC1_RX_UDF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_UDF_INT_CLR_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_UDF_INT_CLR_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_UDF_INT_CLR = 0x400
	// Position of SLC1_TX_OVF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_OVF_INT_CLR_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_OVF_INT_CLR_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_OVF_INT_CLR = 0x800
	// Position of SLC1_TOKEN0_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_CLR.
	SLC__1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR = 0x1000
	// Position of SLC1_TOKEN1_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_CLR.
	SLC__1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR = 0x2000
	// Position of SLC1_TX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DONE_INT_CLR_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DONE_INT_CLR_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_DONE_INT_CLR = 0x4000
	// Position of SLC1_TX_SUC_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR = 0x8000
	// Position of SLC1_RX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DONE_INT_CLR_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DONE_INT_CLR_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_DONE_INT_CLR = 0x10000
	// Position of SLC1_RX_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_EOF_INT_CLR_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_EOF_INT_CLR_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_EOF_INT_CLR = 0x20000
	// Position of SLC1_TOHOST_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOHOST_INT_CLR_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOHOST_INT_CLR_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_CLR.
	SLC__1INT_CLR_SLC1_TOHOST_INT_CLR = 0x40000
	// Position of SLC1_TX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR = 0x80000
	// Position of SLC1_RX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR = 0x100000
	// Position of SLC1_TX_DSCR_EMPTY_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR = 0x200000
	// Position of SLC1_HOST_RD_ACK_INT_CLR field.
	SLC__1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_CLR field.
	SLC__1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_CLR.
	SLC__1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR = 0x400000
	// Position of SLC1_WR_RETRY_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_CLR.
	SLC__1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR = 0x800000
	// Position of SLC1_TX_ERR_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR = 0x1000000

	// RX_STATUS
	// Position of SLC0_RX_FULL field.
	SLC_RX_STATUS_SLC0_RX_FULL_Pos = 0x0
	// Bit mask of SLC0_RX_FULL field.
	SLC_RX_STATUS_SLC0_RX_FULL_Msk = 0x1
	// Bit SLC0_RX_FULL.
	SLC_RX_STATUS_SLC0_RX_FULL = 0x1
	// Position of SLC0_RX_EMPTY field.
	SLC_RX_STATUS_SLC0_RX_EMPTY_Pos = 0x1
	// Bit mask of SLC0_RX_EMPTY field.
	SLC_RX_STATUS_SLC0_RX_EMPTY_Msk = 0x2
	// Bit SLC0_RX_EMPTY.
	SLC_RX_STATUS_SLC0_RX_EMPTY = 0x2
	// Position of SLC1_RX_FULL field.
	SLC_RX_STATUS_SLC1_RX_FULL_Pos = 0x10
	// Bit mask of SLC1_RX_FULL field.
	SLC_RX_STATUS_SLC1_RX_FULL_Msk = 0x10000
	// Bit SLC1_RX_FULL.
	SLC_RX_STATUS_SLC1_RX_FULL = 0x10000
	// Position of SLC1_RX_EMPTY field.
	SLC_RX_STATUS_SLC1_RX_EMPTY_Pos = 0x11
	// Bit mask of SLC1_RX_EMPTY field.
	SLC_RX_STATUS_SLC1_RX_EMPTY_Msk = 0x20000
	// Bit SLC1_RX_EMPTY.
	SLC_RX_STATUS_SLC1_RX_EMPTY = 0x20000

	// _0RXFIFO_PUSH
	// Position of SLC0_RXFIFO_WDATA field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_WDATA_Pos = 0x0
	// Bit mask of SLC0_RXFIFO_WDATA field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_WDATA_Msk = 0x1ff
	// Position of SLC0_RXFIFO_PUSH field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_PUSH_Pos = 0x10
	// Bit mask of SLC0_RXFIFO_PUSH field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_PUSH_Msk = 0x10000
	// Bit SLC0_RXFIFO_PUSH.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_PUSH = 0x10000

	// _1RXFIFO_PUSH
	// Position of SLC1_RXFIFO_WDATA field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_WDATA_Pos = 0x0
	// Bit mask of SLC1_RXFIFO_WDATA field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_WDATA_Msk = 0x1ff
	// Position of SLC1_RXFIFO_PUSH field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_PUSH_Pos = 0x10
	// Bit mask of SLC1_RXFIFO_PUSH field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_PUSH_Msk = 0x10000
	// Bit SLC1_RXFIFO_PUSH.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_PUSH = 0x10000

	// TX_STATUS
	// Position of SLC0_TX_FULL field.
	SLC_TX_STATUS_SLC0_TX_FULL_Pos = 0x0
	// Bit mask of SLC0_TX_FULL field.
	SLC_TX_STATUS_SLC0_TX_FULL_Msk = 0x1
	// Bit SLC0_TX_FULL.
	SLC_TX_STATUS_SLC0_TX_FULL = 0x1
	// Position of SLC0_TX_EMPTY field.
	SLC_TX_STATUS_SLC0_TX_EMPTY_Pos = 0x1
	// Bit mask of SLC0_TX_EMPTY field.
	SLC_TX_STATUS_SLC0_TX_EMPTY_Msk = 0x2
	// Bit SLC0_TX_EMPTY.
	SLC_TX_STATUS_SLC0_TX_EMPTY = 0x2
	// Position of SLC1_TX_FULL field.
	SLC_TX_STATUS_SLC1_TX_FULL_Pos = 0x10
	// Bit mask of SLC1_TX_FULL field.
	SLC_TX_STATUS_SLC1_TX_FULL_Msk = 0x10000
	// Bit SLC1_TX_FULL.
	SLC_TX_STATUS_SLC1_TX_FULL = 0x10000
	// Position of SLC1_TX_EMPTY field.
	SLC_TX_STATUS_SLC1_TX_EMPTY_Pos = 0x11
	// Bit mask of SLC1_TX_EMPTY field.
	SLC_TX_STATUS_SLC1_TX_EMPTY_Msk = 0x20000
	// Bit SLC1_TX_EMPTY.
	SLC_TX_STATUS_SLC1_TX_EMPTY = 0x20000

	// _0TXFIFO_POP
	// Position of SLC0_TXFIFO_RDATA field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_RDATA_Pos = 0x0
	// Bit mask of SLC0_TXFIFO_RDATA field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_RDATA_Msk = 0x7ff
	// Position of SLC0_TXFIFO_POP field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_POP_Pos = 0x10
	// Bit mask of SLC0_TXFIFO_POP field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_POP_Msk = 0x10000
	// Bit SLC0_TXFIFO_POP.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_POP = 0x10000

	// _1TXFIFO_POP
	// Position of SLC1_TXFIFO_RDATA field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_RDATA_Pos = 0x0
	// Bit mask of SLC1_TXFIFO_RDATA field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_RDATA_Msk = 0x7ff
	// Position of SLC1_TXFIFO_POP field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_POP_Pos = 0x10
	// Bit mask of SLC1_TXFIFO_POP field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_POP_Msk = 0x10000
	// Bit SLC1_TXFIFO_POP.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_POP = 0x10000

	// _0RX_LINK
	// Position of SLC0_RXLINK_ADDR field.
	SLC__0RX_LINK_SLC0_RXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC0_RXLINK_ADDR field.
	SLC__0RX_LINK_SLC0_RXLINK_ADDR_Msk = 0xfffff
	// Position of SLC0_RXLINK_STOP field.
	SLC__0RX_LINK_SLC0_RXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC0_RXLINK_STOP field.
	SLC__0RX_LINK_SLC0_RXLINK_STOP_Msk = 0x10000000
	// Bit SLC0_RXLINK_STOP.
	SLC__0RX_LINK_SLC0_RXLINK_STOP = 0x10000000
	// Position of SLC0_RXLINK_START field.
	SLC__0RX_LINK_SLC0_RXLINK_START_Pos = 0x1d
	// Bit mask of SLC0_RXLINK_START field.
	SLC__0RX_LINK_SLC0_RXLINK_START_Msk = 0x20000000
	// Bit SLC0_RXLINK_START.
	SLC__0RX_LINK_SLC0_RXLINK_START = 0x20000000
	// Position of SLC0_RXLINK_RESTART field.
	SLC__0RX_LINK_SLC0_RXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC0_RXLINK_RESTART field.
	SLC__0RX_LINK_SLC0_RXLINK_RESTART_Msk = 0x40000000
	// Bit SLC0_RXLINK_RESTART.
	SLC__0RX_LINK_SLC0_RXLINK_RESTART = 0x40000000
	// Position of SLC0_RXLINK_PARK field.
	SLC__0RX_LINK_SLC0_RXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC0_RXLINK_PARK field.
	SLC__0RX_LINK_SLC0_RXLINK_PARK_Msk = 0x80000000
	// Bit SLC0_RXLINK_PARK.
	SLC__0RX_LINK_SLC0_RXLINK_PARK = 0x80000000

	// _0TX_LINK
	// Position of SLC0_TXLINK_ADDR field.
	SLC__0TX_LINK_SLC0_TXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC0_TXLINK_ADDR field.
	SLC__0TX_LINK_SLC0_TXLINK_ADDR_Msk = 0xfffff
	// Position of SLC0_TXLINK_STOP field.
	SLC__0TX_LINK_SLC0_TXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC0_TXLINK_STOP field.
	SLC__0TX_LINK_SLC0_TXLINK_STOP_Msk = 0x10000000
	// Bit SLC0_TXLINK_STOP.
	SLC__0TX_LINK_SLC0_TXLINK_STOP = 0x10000000
	// Position of SLC0_TXLINK_START field.
	SLC__0TX_LINK_SLC0_TXLINK_START_Pos = 0x1d
	// Bit mask of SLC0_TXLINK_START field.
	SLC__0TX_LINK_SLC0_TXLINK_START_Msk = 0x20000000
	// Bit SLC0_TXLINK_START.
	SLC__0TX_LINK_SLC0_TXLINK_START = 0x20000000
	// Position of SLC0_TXLINK_RESTART field.
	SLC__0TX_LINK_SLC0_TXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC0_TXLINK_RESTART field.
	SLC__0TX_LINK_SLC0_TXLINK_RESTART_Msk = 0x40000000
	// Bit SLC0_TXLINK_RESTART.
	SLC__0TX_LINK_SLC0_TXLINK_RESTART = 0x40000000
	// Position of SLC0_TXLINK_PARK field.
	SLC__0TX_LINK_SLC0_TXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC0_TXLINK_PARK field.
	SLC__0TX_LINK_SLC0_TXLINK_PARK_Msk = 0x80000000
	// Bit SLC0_TXLINK_PARK.
	SLC__0TX_LINK_SLC0_TXLINK_PARK = 0x80000000

	// _1RX_LINK
	// Position of SLC1_RXLINK_ADDR field.
	SLC__1RX_LINK_SLC1_RXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC1_RXLINK_ADDR field.
	SLC__1RX_LINK_SLC1_RXLINK_ADDR_Msk = 0xfffff
	// Position of SLC1_BT_PACKET field.
	SLC__1RX_LINK_SLC1_BT_PACKET_Pos = 0x14
	// Bit mask of SLC1_BT_PACKET field.
	SLC__1RX_LINK_SLC1_BT_PACKET_Msk = 0x100000
	// Bit SLC1_BT_PACKET.
	SLC__1RX_LINK_SLC1_BT_PACKET = 0x100000
	// Position of SLC1_RXLINK_STOP field.
	SLC__1RX_LINK_SLC1_RXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC1_RXLINK_STOP field.
	SLC__1RX_LINK_SLC1_RXLINK_STOP_Msk = 0x10000000
	// Bit SLC1_RXLINK_STOP.
	SLC__1RX_LINK_SLC1_RXLINK_STOP = 0x10000000
	// Position of SLC1_RXLINK_START field.
	SLC__1RX_LINK_SLC1_RXLINK_START_Pos = 0x1d
	// Bit mask of SLC1_RXLINK_START field.
	SLC__1RX_LINK_SLC1_RXLINK_START_Msk = 0x20000000
	// Bit SLC1_RXLINK_START.
	SLC__1RX_LINK_SLC1_RXLINK_START = 0x20000000
	// Position of SLC1_RXLINK_RESTART field.
	SLC__1RX_LINK_SLC1_RXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC1_RXLINK_RESTART field.
	SLC__1RX_LINK_SLC1_RXLINK_RESTART_Msk = 0x40000000
	// Bit SLC1_RXLINK_RESTART.
	SLC__1RX_LINK_SLC1_RXLINK_RESTART = 0x40000000
	// Position of SLC1_RXLINK_PARK field.
	SLC__1RX_LINK_SLC1_RXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC1_RXLINK_PARK field.
	SLC__1RX_LINK_SLC1_RXLINK_PARK_Msk = 0x80000000
	// Bit SLC1_RXLINK_PARK.
	SLC__1RX_LINK_SLC1_RXLINK_PARK = 0x80000000

	// _1TX_LINK
	// Position of SLC1_TXLINK_ADDR field.
	SLC__1TX_LINK_SLC1_TXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC1_TXLINK_ADDR field.
	SLC__1TX_LINK_SLC1_TXLINK_ADDR_Msk = 0xfffff
	// Position of SLC1_TXLINK_STOP field.
	SLC__1TX_LINK_SLC1_TXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC1_TXLINK_STOP field.
	SLC__1TX_LINK_SLC1_TXLINK_STOP_Msk = 0x10000000
	// Bit SLC1_TXLINK_STOP.
	SLC__1TX_LINK_SLC1_TXLINK_STOP = 0x10000000
	// Position of SLC1_TXLINK_START field.
	SLC__1TX_LINK_SLC1_TXLINK_START_Pos = 0x1d
	// Bit mask of SLC1_TXLINK_START field.
	SLC__1TX_LINK_SLC1_TXLINK_START_Msk = 0x20000000
	// Bit SLC1_TXLINK_START.
	SLC__1TX_LINK_SLC1_TXLINK_START = 0x20000000
	// Position of SLC1_TXLINK_RESTART field.
	SLC__1TX_LINK_SLC1_TXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC1_TXLINK_RESTART field.
	SLC__1TX_LINK_SLC1_TXLINK_RESTART_Msk = 0x40000000
	// Bit SLC1_TXLINK_RESTART.
	SLC__1TX_LINK_SLC1_TXLINK_RESTART = 0x40000000
	// Position of SLC1_TXLINK_PARK field.
	SLC__1TX_LINK_SLC1_TXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC1_TXLINK_PARK field.
	SLC__1TX_LINK_SLC1_TXLINK_PARK_Msk = 0x80000000
	// Bit SLC1_TXLINK_PARK.
	SLC__1TX_LINK_SLC1_TXLINK_PARK = 0x80000000

	// INTVEC_TOHOST
	// Position of SLC0_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC0_TOHOST_INTVEC_Pos = 0x0
	// Bit mask of SLC0_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC0_TOHOST_INTVEC_Msk = 0xff
	// Position of SLC1_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC1_TOHOST_INTVEC_Pos = 0x10
	// Bit mask of SLC1_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC1_TOHOST_INTVEC_Msk = 0xff0000

	// _0TOKEN0
	// Position of SLC0_TOKEN0_WDATA field.
	SLC__0TOKEN0_SLC0_TOKEN0_WDATA_Pos = 0x0
	// Bit mask of SLC0_TOKEN0_WDATA field.
	SLC__0TOKEN0_SLC0_TOKEN0_WDATA_Msk = 0xfff
	// Position of SLC0_TOKEN0_WR field.
	SLC__0TOKEN0_SLC0_TOKEN0_WR_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_WR field.
	SLC__0TOKEN0_SLC0_TOKEN0_WR_Msk = 0x1000
	// Bit SLC0_TOKEN0_WR.
	SLC__0TOKEN0_SLC0_TOKEN0_WR = 0x1000
	// Position of SLC0_TOKEN0_INC field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_Pos = 0xd
	// Bit mask of SLC0_TOKEN0_INC field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_Msk = 0x2000
	// Bit SLC0_TOKEN0_INC.
	SLC__0TOKEN0_SLC0_TOKEN0_INC = 0x2000
	// Position of SLC0_TOKEN0_INC_MORE field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_MORE_Pos = 0xe
	// Bit mask of SLC0_TOKEN0_INC_MORE field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_MORE_Msk = 0x4000
	// Bit SLC0_TOKEN0_INC_MORE.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_MORE = 0x4000
	// Position of SLC0_TOKEN0 field.
	SLC__0TOKEN0_SLC0_TOKEN0_Pos = 0x10
	// Bit mask of SLC0_TOKEN0 field.
	SLC__0TOKEN0_SLC0_TOKEN0_Msk = 0xfff0000

	// _0TOKEN1
	// Position of SLC0_TOKEN1_WDATA field.
	SLC__0TOKEN1_SLC0_TOKEN1_WDATA_Pos = 0x0
	// Bit mask of SLC0_TOKEN1_WDATA field.
	SLC__0TOKEN1_SLC0_TOKEN1_WDATA_Msk = 0xfff
	// Position of SLC0_TOKEN1_WR field.
	SLC__0TOKEN1_SLC0_TOKEN1_WR_Pos = 0xc
	// Bit mask of SLC0_TOKEN1_WR field.
	SLC__0TOKEN1_SLC0_TOKEN1_WR_Msk = 0x1000
	// Bit SLC0_TOKEN1_WR.
	SLC__0TOKEN1_SLC0_TOKEN1_WR = 0x1000
	// Position of SLC0_TOKEN1_INC field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_INC field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_Msk = 0x2000
	// Bit SLC0_TOKEN1_INC.
	SLC__0TOKEN1_SLC0_TOKEN1_INC = 0x2000
	// Position of SLC0_TOKEN1_INC_MORE field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_MORE_Pos = 0xe
	// Bit mask of SLC0_TOKEN1_INC_MORE field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_MORE_Msk = 0x4000
	// Bit SLC0_TOKEN1_INC_MORE.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_MORE = 0x4000
	// Position of SLC0_TOKEN1 field.
	SLC__0TOKEN1_SLC0_TOKEN1_Pos = 0x10
	// Bit mask of SLC0_TOKEN1 field.
	SLC__0TOKEN1_SLC0_TOKEN1_Msk = 0xfff0000

	// _1TOKEN0
	// Position of SLC1_TOKEN0_WDATA field.
	SLC__1TOKEN0_SLC1_TOKEN0_WDATA_Pos = 0x0
	// Bit mask of SLC1_TOKEN0_WDATA field.
	SLC__1TOKEN0_SLC1_TOKEN0_WDATA_Msk = 0xfff
	// Position of SLC1_TOKEN0_WR field.
	SLC__1TOKEN0_SLC1_TOKEN0_WR_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_WR field.
	SLC__1TOKEN0_SLC1_TOKEN0_WR_Msk = 0x1000
	// Bit SLC1_TOKEN0_WR.
	SLC__1TOKEN0_SLC1_TOKEN0_WR = 0x1000
	// Position of SLC1_TOKEN0_INC field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_Pos = 0xd
	// Bit mask of SLC1_TOKEN0_INC field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_Msk = 0x2000
	// Bit SLC1_TOKEN0_INC.
	SLC__1TOKEN0_SLC1_TOKEN0_INC = 0x2000
	// Position of SLC1_TOKEN0_INC_MORE field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_MORE_Pos = 0xe
	// Bit mask of SLC1_TOKEN0_INC_MORE field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_MORE_Msk = 0x4000
	// Bit SLC1_TOKEN0_INC_MORE.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_MORE = 0x4000
	// Position of SLC1_TOKEN0 field.
	SLC__1TOKEN0_SLC1_TOKEN0_Pos = 0x10
	// Bit mask of SLC1_TOKEN0 field.
	SLC__1TOKEN0_SLC1_TOKEN0_Msk = 0xfff0000

	// _1TOKEN1
	// Position of SLC1_TOKEN1_WDATA field.
	SLC__1TOKEN1_SLC1_TOKEN1_WDATA_Pos = 0x0
	// Bit mask of SLC1_TOKEN1_WDATA field.
	SLC__1TOKEN1_SLC1_TOKEN1_WDATA_Msk = 0xfff
	// Position of SLC1_TOKEN1_WR field.
	SLC__1TOKEN1_SLC1_TOKEN1_WR_Pos = 0xc
	// Bit mask of SLC1_TOKEN1_WR field.
	SLC__1TOKEN1_SLC1_TOKEN1_WR_Msk = 0x1000
	// Bit SLC1_TOKEN1_WR.
	SLC__1TOKEN1_SLC1_TOKEN1_WR = 0x1000
	// Position of SLC1_TOKEN1_INC field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_INC field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_Msk = 0x2000
	// Bit SLC1_TOKEN1_INC.
	SLC__1TOKEN1_SLC1_TOKEN1_INC = 0x2000
	// Position of SLC1_TOKEN1_INC_MORE field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_MORE_Pos = 0xe
	// Bit mask of SLC1_TOKEN1_INC_MORE field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_MORE_Msk = 0x4000
	// Bit SLC1_TOKEN1_INC_MORE.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_MORE = 0x4000
	// Position of SLC1_TOKEN1 field.
	SLC__1TOKEN1_SLC1_TOKEN1_Pos = 0x10
	// Bit mask of SLC1_TOKEN1 field.
	SLC__1TOKEN1_SLC1_TOKEN1_Msk = 0xfff0000

	// CONF1
	// Position of SLC0_CHECK_OWNER field.
	SLC_CONF1_SLC0_CHECK_OWNER_Pos = 0x0
	// Bit mask of SLC0_CHECK_OWNER field.
	SLC_CONF1_SLC0_CHECK_OWNER_Msk = 0x1
	// Bit SLC0_CHECK_OWNER.
	SLC_CONF1_SLC0_CHECK_OWNER = 0x1
	// Position of SLC0_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_TX_CHECK_SUM_EN_Pos = 0x1
	// Bit mask of SLC0_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_TX_CHECK_SUM_EN_Msk = 0x2
	// Bit SLC0_TX_CHECK_SUM_EN.
	SLC_CONF1_SLC0_TX_CHECK_SUM_EN = 0x2
	// Position of SLC0_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_RX_CHECK_SUM_EN_Pos = 0x2
	// Bit mask of SLC0_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_RX_CHECK_SUM_EN_Msk = 0x4
	// Bit SLC0_RX_CHECK_SUM_EN.
	SLC_CONF1_SLC0_RX_CHECK_SUM_EN = 0x4
	// Position of CMD_HOLD_EN field.
	SLC_CONF1_CMD_HOLD_EN_Pos = 0x3
	// Bit mask of CMD_HOLD_EN field.
	SLC_CONF1_CMD_HOLD_EN_Msk = 0x8
	// Bit CMD_HOLD_EN.
	SLC_CONF1_CMD_HOLD_EN = 0x8
	// Position of SLC0_LEN_AUTO_CLR field.
	SLC_CONF1_SLC0_LEN_AUTO_CLR_Pos = 0x4
	// Bit mask of SLC0_LEN_AUTO_CLR field.
	SLC_CONF1_SLC0_LEN_AUTO_CLR_Msk = 0x10
	// Bit SLC0_LEN_AUTO_CLR.
	SLC_CONF1_SLC0_LEN_AUTO_CLR = 0x10
	// Position of SLC0_TX_STITCH_EN field.
	SLC_CONF1_SLC0_TX_STITCH_EN_Pos = 0x5
	// Bit mask of SLC0_TX_STITCH_EN field.
	SLC_CONF1_SLC0_TX_STITCH_EN_Msk = 0x20
	// Bit SLC0_TX_STITCH_EN.
	SLC_CONF1_SLC0_TX_STITCH_EN = 0x20
	// Position of SLC0_RX_STITCH_EN field.
	SLC_CONF1_SLC0_RX_STITCH_EN_Pos = 0x6
	// Bit mask of SLC0_RX_STITCH_EN field.
	SLC_CONF1_SLC0_RX_STITCH_EN_Msk = 0x40
	// Bit SLC0_RX_STITCH_EN.
	SLC_CONF1_SLC0_RX_STITCH_EN = 0x40
	// Position of SLC1_CHECK_OWNER field.
	SLC_CONF1_SLC1_CHECK_OWNER_Pos = 0x10
	// Bit mask of SLC1_CHECK_OWNER field.
	SLC_CONF1_SLC1_CHECK_OWNER_Msk = 0x10000
	// Bit SLC1_CHECK_OWNER.
	SLC_CONF1_SLC1_CHECK_OWNER = 0x10000
	// Position of SLC1_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_TX_CHECK_SUM_EN_Pos = 0x11
	// Bit mask of SLC1_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_TX_CHECK_SUM_EN_Msk = 0x20000
	// Bit SLC1_TX_CHECK_SUM_EN.
	SLC_CONF1_SLC1_TX_CHECK_SUM_EN = 0x20000
	// Position of SLC1_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_RX_CHECK_SUM_EN_Pos = 0x12
	// Bit mask of SLC1_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_RX_CHECK_SUM_EN_Msk = 0x40000
	// Bit SLC1_RX_CHECK_SUM_EN.
	SLC_CONF1_SLC1_RX_CHECK_SUM_EN = 0x40000
	// Position of HOST_INT_LEVEL_SEL field.
	SLC_CONF1_HOST_INT_LEVEL_SEL_Pos = 0x13
	// Bit mask of HOST_INT_LEVEL_SEL field.
	SLC_CONF1_HOST_INT_LEVEL_SEL_Msk = 0x80000
	// Bit HOST_INT_LEVEL_SEL.
	SLC_CONF1_HOST_INT_LEVEL_SEL = 0x80000
	// Position of SLC1_TX_STITCH_EN field.
	SLC_CONF1_SLC1_TX_STITCH_EN_Pos = 0x14
	// Bit mask of SLC1_TX_STITCH_EN field.
	SLC_CONF1_SLC1_TX_STITCH_EN_Msk = 0x100000
	// Bit SLC1_TX_STITCH_EN.
	SLC_CONF1_SLC1_TX_STITCH_EN = 0x100000
	// Position of SLC1_RX_STITCH_EN field.
	SLC_CONF1_SLC1_RX_STITCH_EN_Pos = 0x15
	// Bit mask of SLC1_RX_STITCH_EN field.
	SLC_CONF1_SLC1_RX_STITCH_EN_Msk = 0x200000
	// Bit SLC1_RX_STITCH_EN.
	SLC_CONF1_SLC1_RX_STITCH_EN = 0x200000
	// Position of CLK_EN field.
	SLC_CONF1_CLK_EN_Pos = 0x16
	// Bit mask of CLK_EN field.
	SLC_CONF1_CLK_EN_Msk = 0x400000
	// Bit CLK_EN.
	SLC_CONF1_CLK_EN = 0x400000

	// _0_STATE0
	// Position of SLC0_STATE0 field.
	SLC__0_STATE0_SLC0_STATE0_Pos = 0x0
	// Bit mask of SLC0_STATE0 field.
	SLC__0_STATE0_SLC0_STATE0_Msk = 0xffffffff

	// _0_STATE1
	// Position of SLC0_STATE1 field.
	SLC__0_STATE1_SLC0_STATE1_Pos = 0x0
	// Bit mask of SLC0_STATE1 field.
	SLC__0_STATE1_SLC0_STATE1_Msk = 0xffffffff

	// _1_STATE0
	// Position of SLC1_STATE0 field.
	SLC__1_STATE0_SLC1_STATE0_Pos = 0x0
	// Bit mask of SLC1_STATE0 field.
	SLC__1_STATE0_SLC1_STATE0_Msk = 0xffffffff

	// _1_STATE1
	// Position of SLC1_STATE1 field.
	SLC__1_STATE1_SLC1_STATE1_Pos = 0x0
	// Bit mask of SLC1_STATE1 field.
	SLC__1_STATE1_SLC1_STATE1_Msk = 0xffffffff

	// BRIDGE_CONF
	// Position of TXEOF_ENA field.
	SLC_BRIDGE_CONF_TXEOF_ENA_Pos = 0x0
	// Bit mask of TXEOF_ENA field.
	SLC_BRIDGE_CONF_TXEOF_ENA_Msk = 0x3f
	// Position of FIFO_MAP_ENA field.
	SLC_BRIDGE_CONF_FIFO_MAP_ENA_Pos = 0x8
	// Bit mask of FIFO_MAP_ENA field.
	SLC_BRIDGE_CONF_FIFO_MAP_ENA_Msk = 0xf00
	// Position of SLC0_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC0_TX_DUMMY_MODE_Pos = 0xc
	// Bit mask of SLC0_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC0_TX_DUMMY_MODE_Msk = 0x1000
	// Bit SLC0_TX_DUMMY_MODE.
	SLC_BRIDGE_CONF_SLC0_TX_DUMMY_MODE = 0x1000
	// Position of HDA_MAP_128K field.
	SLC_BRIDGE_CONF_HDA_MAP_128K_Pos = 0xd
	// Bit mask of HDA_MAP_128K field.
	SLC_BRIDGE_CONF_HDA_MAP_128K_Msk = 0x2000
	// Bit HDA_MAP_128K.
	SLC_BRIDGE_CONF_HDA_MAP_128K = 0x2000
	// Position of SLC1_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC1_TX_DUMMY_MODE_Pos = 0xe
	// Bit mask of SLC1_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC1_TX_DUMMY_MODE_Msk = 0x4000
	// Bit SLC1_TX_DUMMY_MODE.
	SLC_BRIDGE_CONF_SLC1_TX_DUMMY_MODE = 0x4000
	// Position of TX_PUSH_IDLE_NUM field.
	SLC_BRIDGE_CONF_TX_PUSH_IDLE_NUM_Pos = 0x10
	// Bit mask of TX_PUSH_IDLE_NUM field.
	SLC_BRIDGE_CONF_TX_PUSH_IDLE_NUM_Msk = 0xffff0000

	// _0_TO_EOF_DES_ADDR
	// Position of SLC0_TO_EOF_DES_ADDR field.
	SLC__0_TO_EOF_DES_ADDR_SLC0_TO_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TO_EOF_DES_ADDR field.
	SLC__0_TO_EOF_DES_ADDR_SLC0_TO_EOF_DES_ADDR_Msk = 0xffffffff

	// _0_TX_EOF_DES_ADDR
	// Position of SLC0_TX_SUC_EOF_DES_ADDR field.
	SLC__0_TX_EOF_DES_ADDR_SLC0_TX_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_SUC_EOF_DES_ADDR field.
	SLC__0_TX_EOF_DES_ADDR_SLC0_TX_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// _0_TO_EOF_BFR_DES_ADDR
	// Position of SLC0_TO_EOF_BFR_DES_ADDR field.
	SLC__0_TO_EOF_BFR_DES_ADDR_SLC0_TO_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TO_EOF_BFR_DES_ADDR field.
	SLC__0_TO_EOF_BFR_DES_ADDR_SLC0_TO_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// _1_TO_EOF_DES_ADDR
	// Position of SLC1_TO_EOF_DES_ADDR field.
	SLC__1_TO_EOF_DES_ADDR_SLC1_TO_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TO_EOF_DES_ADDR field.
	SLC__1_TO_EOF_DES_ADDR_SLC1_TO_EOF_DES_ADDR_Msk = 0xffffffff

	// _1_TX_EOF_DES_ADDR
	// Position of SLC1_TX_SUC_EOF_DES_ADDR field.
	SLC__1_TX_EOF_DES_ADDR_SLC1_TX_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TX_SUC_EOF_DES_ADDR field.
	SLC__1_TX_EOF_DES_ADDR_SLC1_TX_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// _1_TO_EOF_BFR_DES_ADDR
	// Position of SLC1_TO_EOF_BFR_DES_ADDR field.
	SLC__1_TO_EOF_BFR_DES_ADDR_SLC1_TO_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TO_EOF_BFR_DES_ADDR field.
	SLC__1_TO_EOF_BFR_DES_ADDR_SLC1_TO_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// AHB_TEST
	// Position of AHB_TESTMODE field.
	SLC_AHB_TEST_AHB_TESTMODE_Pos = 0x0
	// Bit mask of AHB_TESTMODE field.
	SLC_AHB_TEST_AHB_TESTMODE_Msk = 0x7
	// Position of AHB_TESTADDR field.
	SLC_AHB_TEST_AHB_TESTADDR_Pos = 0x4
	// Bit mask of AHB_TESTADDR field.
	SLC_AHB_TEST_AHB_TESTADDR_Msk = 0x30

	// SDIO_ST
	// Position of CMD_ST field.
	SLC_SDIO_ST_CMD_ST_Pos = 0x0
	// Bit mask of CMD_ST field.
	SLC_SDIO_ST_CMD_ST_Msk = 0x7
	// Position of FUNC_ST field.
	SLC_SDIO_ST_FUNC_ST_Pos = 0x4
	// Bit mask of FUNC_ST field.
	SLC_SDIO_ST_FUNC_ST_Msk = 0xf0
	// Position of SDIO_WAKEUP field.
	SLC_SDIO_ST_SDIO_WAKEUP_Pos = 0x8
	// Bit mask of SDIO_WAKEUP field.
	SLC_SDIO_ST_SDIO_WAKEUP_Msk = 0x100
	// Bit SDIO_WAKEUP.
	SLC_SDIO_ST_SDIO_WAKEUP = 0x100
	// Position of BUS_ST field.
	SLC_SDIO_ST_BUS_ST_Pos = 0xc
	// Bit mask of BUS_ST field.
	SLC_SDIO_ST_BUS_ST_Msk = 0x7000
	// Position of FUNC1_ACC_STATE field.
	SLC_SDIO_ST_FUNC1_ACC_STATE_Pos = 0x10
	// Bit mask of FUNC1_ACC_STATE field.
	SLC_SDIO_ST_FUNC1_ACC_STATE_Msk = 0x1f0000
	// Position of FUNC2_ACC_STATE field.
	SLC_SDIO_ST_FUNC2_ACC_STATE_Pos = 0x18
	// Bit mask of FUNC2_ACC_STATE field.
	SLC_SDIO_ST_FUNC2_ACC_STATE_Msk = 0x1f000000

	// RX_DSCR_CONF
	// Position of SLC0_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE_Pos = 0x0
	// Bit mask of SLC0_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE_Msk = 0x1
	// Bit SLC0_TOKEN_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE = 0x1
	// Position of SLC0_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_INFOR_NO_REPLACE_Pos = 0x1
	// Bit mask of SLC0_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_INFOR_NO_REPLACE_Msk = 0x2
	// Bit SLC0_INFOR_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC0_INFOR_NO_REPLACE = 0x2
	// Position of SLC0_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_MODE_Pos = 0x2
	// Bit mask of SLC0_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_MODE_Msk = 0x4
	// Bit SLC0_RX_FILL_MODE.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_MODE = 0x4
	// Position of SLC0_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_EOF_MODE_Pos = 0x3
	// Bit mask of SLC0_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_EOF_MODE_Msk = 0x8
	// Bit SLC0_RX_EOF_MODE.
	SLC_RX_DSCR_CONF_SLC0_RX_EOF_MODE = 0x8
	// Position of SLC0_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_EN_Pos = 0x4
	// Bit mask of SLC0_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_EN_Msk = 0x10
	// Bit SLC0_RX_FILL_EN.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_EN = 0x10
	// Position of SLC0_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD_Pos = 0x5
	// Bit mask of SLC0_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD_Msk = 0xffe0
	// Position of SLC1_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE_Pos = 0x10
	// Bit mask of SLC1_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE_Msk = 0x10000
	// Bit SLC1_TOKEN_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE = 0x10000
	// Position of SLC1_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_INFOR_NO_REPLACE_Pos = 0x11
	// Bit mask of SLC1_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_INFOR_NO_REPLACE_Msk = 0x20000
	// Bit SLC1_INFOR_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC1_INFOR_NO_REPLACE = 0x20000
	// Position of SLC1_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_MODE_Pos = 0x12
	// Bit mask of SLC1_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_MODE_Msk = 0x40000
	// Bit SLC1_RX_FILL_MODE.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_MODE = 0x40000
	// Position of SLC1_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_EOF_MODE_Pos = 0x13
	// Bit mask of SLC1_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_EOF_MODE_Msk = 0x80000
	// Bit SLC1_RX_EOF_MODE.
	SLC_RX_DSCR_CONF_SLC1_RX_EOF_MODE = 0x80000
	// Position of SLC1_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_EN_Pos = 0x14
	// Bit mask of SLC1_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_EN_Msk = 0x100000
	// Bit SLC1_RX_FILL_EN.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_EN = 0x100000
	// Position of SLC1_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD_Pos = 0x15
	// Bit mask of SLC1_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD_Msk = 0xffe00000

	// _0_TXLINK_DSCR
	// Position of SLC0_TXLINK_DSCR field.
	SLC__0_TXLINK_DSCR_SLC0_TXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC0_TXLINK_DSCR field.
	SLC__0_TXLINK_DSCR_SLC0_TXLINK_DSCR_Msk = 0xffffffff

	// _0_TXLINK_DSCR_BF0
	// Position of SLC0_TXLINK_DSCR_BF0 field.
	SLC__0_TXLINK_DSCR_BF0_SLC0_TXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC0_TXLINK_DSCR_BF0 field.
	SLC__0_TXLINK_DSCR_BF0_SLC0_TXLINK_DSCR_BF0_Msk = 0xffffffff

	// _0_TXLINK_DSCR_BF1
	// Position of SLC0_TXLINK_DSCR_BF1 field.
	SLC__0_TXLINK_DSCR_BF1_SLC0_TXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC0_TXLINK_DSCR_BF1 field.
	SLC__0_TXLINK_DSCR_BF1_SLC0_TXLINK_DSCR_BF1_Msk = 0xffffffff

	// _0_RXLINK_DSCR
	// Position of SLC0_RXLINK_DSCR field.
	SLC__0_RXLINK_DSCR_SLC0_RXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC0_RXLINK_DSCR field.
	SLC__0_RXLINK_DSCR_SLC0_RXLINK_DSCR_Msk = 0xffffffff

	// _0_RXLINK_DSCR_BF0
	// Position of SLC0_RXLINK_DSCR_BF0 field.
	SLC__0_RXLINK_DSCR_BF0_SLC0_RXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC0_RXLINK_DSCR_BF0 field.
	SLC__0_RXLINK_DSCR_BF0_SLC0_RXLINK_DSCR_BF0_Msk = 0xffffffff

	// _0_RXLINK_DSCR_BF1
	// Position of SLC0_RXLINK_DSCR_BF1 field.
	SLC__0_RXLINK_DSCR_BF1_SLC0_RXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC0_RXLINK_DSCR_BF1 field.
	SLC__0_RXLINK_DSCR_BF1_SLC0_RXLINK_DSCR_BF1_Msk = 0xffffffff

	// _1_TXLINK_DSCR
	// Position of SLC1_TXLINK_DSCR field.
	SLC__1_TXLINK_DSCR_SLC1_TXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC1_TXLINK_DSCR field.
	SLC__1_TXLINK_DSCR_SLC1_TXLINK_DSCR_Msk = 0xffffffff

	// _1_TXLINK_DSCR_BF0
	// Position of SLC1_TXLINK_DSCR_BF0 field.
	SLC__1_TXLINK_DSCR_BF0_SLC1_TXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC1_TXLINK_DSCR_BF0 field.
	SLC__1_TXLINK_DSCR_BF0_SLC1_TXLINK_DSCR_BF0_Msk = 0xffffffff

	// _1_TXLINK_DSCR_BF1
	// Position of SLC1_TXLINK_DSCR_BF1 field.
	SLC__1_TXLINK_DSCR_BF1_SLC1_TXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC1_TXLINK_DSCR_BF1 field.
	SLC__1_TXLINK_DSCR_BF1_SLC1_TXLINK_DSCR_BF1_Msk = 0xffffffff

	// _1_RXLINK_DSCR
	// Position of SLC1_RXLINK_DSCR field.
	SLC__1_RXLINK_DSCR_SLC1_RXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC1_RXLINK_DSCR field.
	SLC__1_RXLINK_DSCR_SLC1_RXLINK_DSCR_Msk = 0xffffffff

	// _1_RXLINK_DSCR_BF0
	// Position of SLC1_RXLINK_DSCR_BF0 field.
	SLC__1_RXLINK_DSCR_BF0_SLC1_RXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC1_RXLINK_DSCR_BF0 field.
	SLC__1_RXLINK_DSCR_BF0_SLC1_RXLINK_DSCR_BF0_Msk = 0xffffffff

	// _1_RXLINK_DSCR_BF1
	// Position of SLC1_RXLINK_DSCR_BF1 field.
	SLC__1_RXLINK_DSCR_BF1_SLC1_RXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC1_RXLINK_DSCR_BF1 field.
	SLC__1_RXLINK_DSCR_BF1_SLC1_RXLINK_DSCR_BF1_Msk = 0xffffffff

	// _0_TX_ERREOF_DES_ADDR
	// Position of SLC0_TX_ERR_EOF_DES_ADDR field.
	SLC__0_TX_ERREOF_DES_ADDR_SLC0_TX_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_ERR_EOF_DES_ADDR field.
	SLC__0_TX_ERREOF_DES_ADDR_SLC0_TX_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// _1_TX_ERREOF_DES_ADDR
	// Position of SLC1_TX_ERR_EOF_DES_ADDR field.
	SLC__1_TX_ERREOF_DES_ADDR_SLC1_TX_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TX_ERR_EOF_DES_ADDR field.
	SLC__1_TX_ERREOF_DES_ADDR_SLC1_TX_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// TOKEN_LAT
	// Position of SLC0_TOKEN field.
	SLC_TOKEN_LAT_SLC0_TOKEN_Pos = 0x0
	// Bit mask of SLC0_TOKEN field.
	SLC_TOKEN_LAT_SLC0_TOKEN_Msk = 0xfff
	// Position of SLC1_TOKEN field.
	SLC_TOKEN_LAT_SLC1_TOKEN_Pos = 0x10
	// Bit mask of SLC1_TOKEN field.
	SLC_TOKEN_LAT_SLC1_TOKEN_Msk = 0xfff0000

	// TX_DSCR_CONF
	// Position of WR_RETRY_THRESHOLD field.
	SLC_TX_DSCR_CONF_WR_RETRY_THRESHOLD_Pos = 0x0
	// Bit mask of WR_RETRY_THRESHOLD field.
	SLC_TX_DSCR_CONF_WR_RETRY_THRESHOLD_Msk = 0x7ff

	// CMD_INFOR0
	// Position of CMD_CONTENT0 field.
	SLC_CMD_INFOR0_CMD_CONTENT0_Pos = 0x0
	// Bit mask of CMD_CONTENT0 field.
	SLC_CMD_INFOR0_CMD_CONTENT0_Msk = 0xffffffff

	// CMD_INFOR1
	// Position of CMD_CONTENT1 field.
	SLC_CMD_INFOR1_CMD_CONTENT1_Pos = 0x0
	// Bit mask of CMD_CONTENT1 field.
	SLC_CMD_INFOR1_CMD_CONTENT1_Msk = 0xffffffff

	// _0_LEN_CONF
	// Position of SLC0_LEN_WDATA field.
	SLC__0_LEN_CONF_SLC0_LEN_WDATA_Pos = 0x0
	// Bit mask of SLC0_LEN_WDATA field.
	SLC__0_LEN_CONF_SLC0_LEN_WDATA_Msk = 0xfffff
	// Position of SLC0_LEN_WR field.
	SLC__0_LEN_CONF_SLC0_LEN_WR_Pos = 0x14
	// Bit mask of SLC0_LEN_WR field.
	SLC__0_LEN_CONF_SLC0_LEN_WR_Msk = 0x100000
	// Bit SLC0_LEN_WR.
	SLC__0_LEN_CONF_SLC0_LEN_WR = 0x100000
	// Position of SLC0_LEN_INC field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_Pos = 0x15
	// Bit mask of SLC0_LEN_INC field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_Msk = 0x200000
	// Bit SLC0_LEN_INC.
	SLC__0_LEN_CONF_SLC0_LEN_INC = 0x200000
	// Position of SLC0_LEN_INC_MORE field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_MORE_Pos = 0x16
	// Bit mask of SLC0_LEN_INC_MORE field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_MORE_Msk = 0x400000
	// Bit SLC0_LEN_INC_MORE.
	SLC__0_LEN_CONF_SLC0_LEN_INC_MORE = 0x400000
	// Position of SLC0_RX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN_Pos = 0x17
	// Bit mask of SLC0_RX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN_Msk = 0x800000
	// Bit SLC0_RX_PACKET_LOAD_EN.
	SLC__0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN = 0x800000
	// Position of SLC0_TX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN_Pos = 0x18
	// Bit mask of SLC0_TX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN_Msk = 0x1000000
	// Bit SLC0_TX_PACKET_LOAD_EN.
	SLC__0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN = 0x1000000
	// Position of SLC0_RX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_RX_GET_USED_DSCR_Pos = 0x19
	// Bit mask of SLC0_RX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_RX_GET_USED_DSCR_Msk = 0x2000000
	// Bit SLC0_RX_GET_USED_DSCR.
	SLC__0_LEN_CONF_SLC0_RX_GET_USED_DSCR = 0x2000000
	// Position of SLC0_TX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_TX_GET_USED_DSCR_Pos = 0x1a
	// Bit mask of SLC0_TX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_TX_GET_USED_DSCR_Msk = 0x4000000
	// Bit SLC0_TX_GET_USED_DSCR.
	SLC__0_LEN_CONF_SLC0_TX_GET_USED_DSCR = 0x4000000
	// Position of SLC0_RX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_RX_NEW_PKT_IND_Pos = 0x1b
	// Bit mask of SLC0_RX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_RX_NEW_PKT_IND_Msk = 0x8000000
	// Bit SLC0_RX_NEW_PKT_IND.
	SLC__0_LEN_CONF_SLC0_RX_NEW_PKT_IND = 0x8000000
	// Position of SLC0_TX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_TX_NEW_PKT_IND_Pos = 0x1c
	// Bit mask of SLC0_TX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_TX_NEW_PKT_IND_Msk = 0x10000000
	// Bit SLC0_TX_NEW_PKT_IND.
	SLC__0_LEN_CONF_SLC0_TX_NEW_PKT_IND = 0x10000000

	// _0_LENGTH
	// Position of SLC0_LEN field.
	SLC__0_LENGTH_SLC0_LEN_Pos = 0x0
	// Bit mask of SLC0_LEN field.
	SLC__0_LENGTH_SLC0_LEN_Msk = 0xfffff

	// _0_TXPKT_H_DSCR
	// Position of SLC0_TX_PKT_H_DSCR_ADDR field.
	SLC__0_TXPKT_H_DSCR_SLC0_TX_PKT_H_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_H_DSCR_ADDR field.
	SLC__0_TXPKT_H_DSCR_SLC0_TX_PKT_H_DSCR_ADDR_Msk = 0xffffffff

	// _0_TXPKT_E_DSCR
	// Position of SLC0_TX_PKT_E_DSCR_ADDR field.
	SLC__0_TXPKT_E_DSCR_SLC0_TX_PKT_E_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_E_DSCR_ADDR field.
	SLC__0_TXPKT_E_DSCR_SLC0_TX_PKT_E_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKT_H_DSCR
	// Position of SLC0_RX_PKT_H_DSCR_ADDR field.
	SLC__0_RXPKT_H_DSCR_SLC0_RX_PKT_H_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_H_DSCR_ADDR field.
	SLC__0_RXPKT_H_DSCR_SLC0_RX_PKT_H_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKT_E_DSCR
	// Position of SLC0_RX_PKT_E_DSCR_ADDR field.
	SLC__0_RXPKT_E_DSCR_SLC0_RX_PKT_E_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_E_DSCR_ADDR field.
	SLC__0_RXPKT_E_DSCR_SLC0_RX_PKT_E_DSCR_ADDR_Msk = 0xffffffff

	// _0_TXPKTU_H_DSCR
	// Position of SLC0_TX_PKT_START_DSCR_ADDR field.
	SLC__0_TXPKTU_H_DSCR_SLC0_TX_PKT_START_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_START_DSCR_ADDR field.
	SLC__0_TXPKTU_H_DSCR_SLC0_TX_PKT_START_DSCR_ADDR_Msk = 0xffffffff

	// _0_TXPKTU_E_DSCR
	// Position of SLC0_TX_PKT_END_DSCR_ADDR field.
	SLC__0_TXPKTU_E_DSCR_SLC0_TX_PKT_END_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_END_DSCR_ADDR field.
	SLC__0_TXPKTU_E_DSCR_SLC0_TX_PKT_END_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKTU_H_DSCR
	// Position of SLC0_RX_PKT_START_DSCR_ADDR field.
	SLC__0_RXPKTU_H_DSCR_SLC0_RX_PKT_START_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_START_DSCR_ADDR field.
	SLC__0_RXPKTU_H_DSCR_SLC0_RX_PKT_START_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKTU_E_DSCR
	// Position of SLC0_RX_PKT_END_DSCR_ADDR field.
	SLC__0_RXPKTU_E_DSCR_SLC0_RX_PKT_END_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_END_DSCR_ADDR field.
	SLC__0_RXPKTU_E_DSCR_SLC0_RX_PKT_END_DSCR_ADDR_Msk = 0xffffffff

	// SEQ_POSITION
	// Position of SLC0_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC0_SEQ_POSITION_Pos = 0x0
	// Bit mask of SLC0_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC0_SEQ_POSITION_Msk = 0xff
	// Position of SLC1_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC1_SEQ_POSITION_Pos = 0x8
	// Bit mask of SLC1_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC1_SEQ_POSITION_Msk = 0xff00

	// _0_DSCR_REC_CONF
	// Position of SLC0_RX_DSCR_REC_LIM field.
	SLC__0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM_Pos = 0x0
	// Bit mask of SLC0_RX_DSCR_REC_LIM field.
	SLC__0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM_Msk = 0x3ff

	// SDIO_CRC_ST0
	// Position of DAT0_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT0_CRC_ERR_CNT_Pos = 0x0
	// Bit mask of DAT0_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT0_CRC_ERR_CNT_Msk = 0xff
	// Position of DAT1_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT1_CRC_ERR_CNT_Pos = 0x8
	// Bit mask of DAT1_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT1_CRC_ERR_CNT_Msk = 0xff00
	// Position of DAT2_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT2_CRC_ERR_CNT_Pos = 0x10
	// Bit mask of DAT2_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT2_CRC_ERR_CNT_Msk = 0xff0000
	// Position of DAT3_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT3_CRC_ERR_CNT_Pos = 0x18
	// Bit mask of DAT3_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT3_CRC_ERR_CNT_Msk = 0xff000000

	// SDIO_CRC_ST1
	// Position of CMD_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST1_CMD_CRC_ERR_CNT_Pos = 0x0
	// Bit mask of CMD_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST1_CMD_CRC_ERR_CNT_Msk = 0xff
	// Position of ERR_CNT_CLR field.
	SLC_SDIO_CRC_ST1_ERR_CNT_CLR_Pos = 0x1f
	// Bit mask of ERR_CNT_CLR field.
	SLC_SDIO_CRC_ST1_ERR_CNT_CLR_Msk = 0x80000000
	// Bit ERR_CNT_CLR.
	SLC_SDIO_CRC_ST1_ERR_CNT_CLR = 0x80000000

	// _0_EOF_START_DES
	// Position of SLC0_EOF_START_DES_ADDR field.
	SLC__0_EOF_START_DES_SLC0_EOF_START_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_EOF_START_DES_ADDR field.
	SLC__0_EOF_START_DES_SLC0_EOF_START_DES_ADDR_Msk = 0xffffffff

	// _0_PUSH_DSCR_ADDR
	// Position of SLC0_RX_PUSH_DSCR_ADDR field.
	SLC__0_PUSH_DSCR_ADDR_SLC0_RX_PUSH_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PUSH_DSCR_ADDR field.
	SLC__0_PUSH_DSCR_ADDR_SLC0_RX_PUSH_DSCR_ADDR_Msk = 0xffffffff

	// _0_DONE_DSCR_ADDR
	// Position of SLC0_RX_DONE_DSCR_ADDR field.
	SLC__0_DONE_DSCR_ADDR_SLC0_RX_DONE_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_DONE_DSCR_ADDR field.
	SLC__0_DONE_DSCR_ADDR_SLC0_RX_DONE_DSCR_ADDR_Msk = 0xffffffff

	// _0_SUB_START_DES
	// Position of SLC0_SUB_PAC_START_DSCR_ADDR field.
	SLC__0_SUB_START_DES_SLC0_SUB_PAC_START_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_SUB_PAC_START_DSCR_ADDR field.
	SLC__0_SUB_START_DES_SLC0_SUB_PAC_START_DSCR_ADDR_Msk = 0xffffffff

	// _0_DSCR_CNT
	// Position of SLC0_RX_DSCR_CNT_LAT field.
	SLC__0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT_Pos = 0x0
	// Bit mask of SLC0_RX_DSCR_CNT_LAT field.
	SLC__0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT_Msk = 0x3ff
	// Position of SLC0_RX_GET_EOF_OCC field.
	SLC__0_DSCR_CNT_SLC0_RX_GET_EOF_OCC_Pos = 0x10
	// Bit mask of SLC0_RX_GET_EOF_OCC field.
	SLC__0_DSCR_CNT_SLC0_RX_GET_EOF_OCC_Msk = 0x10000
	// Bit SLC0_RX_GET_EOF_OCC.
	SLC__0_DSCR_CNT_SLC0_RX_GET_EOF_OCC = 0x10000

	// _0_LEN_LIM_CONF
	// Position of SLC0_LEN_LIM field.
	SLC__0_LEN_LIM_CONF_SLC0_LEN_LIM_Pos = 0x0
	// Bit mask of SLC0_LEN_LIM field.
	SLC__0_LEN_LIM_CONF_SLC0_LEN_LIM_Msk = 0xfffff

	// _0INT_ST1
	// Position of FRHOST_BIT0_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT0_INT_ST1_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT0_INT_ST1_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT0_INT_ST1 = 0x1
	// Position of FRHOST_BIT1_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT1_INT_ST1_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT1_INT_ST1_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT1_INT_ST1 = 0x2
	// Position of FRHOST_BIT2_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT2_INT_ST1_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT2_INT_ST1_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT2_INT_ST1 = 0x4
	// Position of FRHOST_BIT3_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT3_INT_ST1_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT3_INT_ST1_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT3_INT_ST1 = 0x8
	// Position of FRHOST_BIT4_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT4_INT_ST1_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT4_INT_ST1_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT4_INT_ST1 = 0x10
	// Position of FRHOST_BIT5_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT5_INT_ST1_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT5_INT_ST1_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT5_INT_ST1 = 0x20
	// Position of FRHOST_BIT6_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT6_INT_ST1_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT6_INT_ST1_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT6_INT_ST1 = 0x40
	// Position of FRHOST_BIT7_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT7_INT_ST1_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT7_INT_ST1_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT7_INT_ST1 = 0x80
	// Position of SLC0_RX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_START_INT_ST1_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_START_INT_ST1_Msk = 0x100
	// Bit SLC0_RX_START_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_START_INT_ST1 = 0x100
	// Position of SLC0_TX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_START_INT_ST1_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_START_INT_ST1_Msk = 0x200
	// Bit SLC0_TX_START_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_START_INT_ST1 = 0x200
	// Position of SLC0_RX_UDF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_UDF_INT_ST1_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_UDF_INT_ST1_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_UDF_INT_ST1 = 0x400
	// Position of SLC0_TX_OVF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_OVF_INT_ST1_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_OVF_INT_ST1_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_OVF_INT_ST1 = 0x800
	// Position of SLC0_TOKEN0_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ST1.
	SLC__0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1 = 0x1000
	// Position of SLC0_TOKEN1_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ST1.
	SLC__0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1 = 0x2000
	// Position of SLC0_TX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DONE_INT_ST1_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DONE_INT_ST1_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_DONE_INT_ST1 = 0x4000
	// Position of SLC0_TX_SUC_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1 = 0x8000
	// Position of SLC0_RX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DONE_INT_ST1_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DONE_INT_ST1_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_DONE_INT_ST1 = 0x10000
	// Position of SLC0_RX_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_EOF_INT_ST1_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_EOF_INT_ST1_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_EOF_INT_ST1 = 0x20000
	// Position of SLC0_TOHOST_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOHOST_INT_ST1_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOHOST_INT_ST1_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ST1.
	SLC__0INT_ST1_SLC0_TOHOST_INT_ST1 = 0x40000
	// Position of SLC0_TX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1 = 0x80000
	// Position of SLC0_RX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1 = 0x100000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1 = 0x200000
	// Position of SLC0_HOST_RD_ACK_INT_ST1 field.
	SLC__0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ST1 field.
	SLC__0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ST1.
	SLC__0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1 = 0x400000
	// Position of SLC0_WR_RETRY_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ST1.
	SLC__0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1 = 0x800000
	// Position of SLC0_TX_ERR_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1 = 0x1000000
	// Position of CMD_DTC_INT_ST1 field.
	SLC__0INT_ST1_CMD_DTC_INT_ST1_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ST1 field.
	SLC__0INT_ST1_CMD_DTC_INT_ST1_Msk = 0x2000000
	// Bit CMD_DTC_INT_ST1.
	SLC__0INT_ST1_CMD_DTC_INT_ST1 = 0x2000000
	// Position of SLC0_RX_QUICK_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1 = 0x4000000

	// _0INT_ENA1
	// Position of FRHOST_BIT0_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT0_INT_ENA1_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT0_INT_ENA1_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT0_INT_ENA1 = 0x1
	// Position of FRHOST_BIT1_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT1_INT_ENA1_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT1_INT_ENA1_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT1_INT_ENA1 = 0x2
	// Position of FRHOST_BIT2_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT2_INT_ENA1_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT2_INT_ENA1_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT2_INT_ENA1 = 0x4
	// Position of FRHOST_BIT3_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT3_INT_ENA1_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT3_INT_ENA1_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT3_INT_ENA1 = 0x8
	// Position of FRHOST_BIT4_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT4_INT_ENA1_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT4_INT_ENA1_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT4_INT_ENA1 = 0x10
	// Position of FRHOST_BIT5_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT5_INT_ENA1_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT5_INT_ENA1_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT5_INT_ENA1 = 0x20
	// Position of FRHOST_BIT6_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT6_INT_ENA1_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT6_INT_ENA1_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT6_INT_ENA1 = 0x40
	// Position of FRHOST_BIT7_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT7_INT_ENA1_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT7_INT_ENA1_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT7_INT_ENA1 = 0x80
	// Position of SLC0_RX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_START_INT_ENA1_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_START_INT_ENA1_Msk = 0x100
	// Bit SLC0_RX_START_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_START_INT_ENA1 = 0x100
	// Position of SLC0_TX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_START_INT_ENA1_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_START_INT_ENA1_Msk = 0x200
	// Bit SLC0_TX_START_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_START_INT_ENA1 = 0x200
	// Position of SLC0_RX_UDF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_UDF_INT_ENA1_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_UDF_INT_ENA1_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_UDF_INT_ENA1 = 0x400
	// Position of SLC0_TX_OVF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_OVF_INT_ENA1_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_OVF_INT_ENA1_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_OVF_INT_ENA1 = 0x800
	// Position of SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1 = 0x1000
	// Position of SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1 = 0x2000
	// Position of SLC0_TX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DONE_INT_ENA1_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DONE_INT_ENA1_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_DONE_INT_ENA1 = 0x4000
	// Position of SLC0_TX_SUC_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1 = 0x8000
	// Position of SLC0_RX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DONE_INT_ENA1_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DONE_INT_ENA1_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_DONE_INT_ENA1 = 0x10000
	// Position of SLC0_RX_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_EOF_INT_ENA1_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_EOF_INT_ENA1_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_EOF_INT_ENA1 = 0x20000
	// Position of SLC0_TOHOST_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOHOST_INT_ENA1_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOHOST_INT_ENA1_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TOHOST_INT_ENA1 = 0x40000
	// Position of SLC0_TX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1 = 0x80000
	// Position of SLC0_RX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1 = 0x100000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1 = 0x200000
	// Position of SLC0_HOST_RD_ACK_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ENA1.
	SLC__0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1 = 0x400000
	// Position of SLC0_WR_RETRY_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ENA1.
	SLC__0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1 = 0x800000
	// Position of SLC0_TX_ERR_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1 = 0x1000000
	// Position of CMD_DTC_INT_ENA1 field.
	SLC__0INT_ENA1_CMD_DTC_INT_ENA1_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ENA1 field.
	SLC__0INT_ENA1_CMD_DTC_INT_ENA1_Msk = 0x2000000
	// Bit CMD_DTC_INT_ENA1.
	SLC__0INT_ENA1_CMD_DTC_INT_ENA1 = 0x2000000
	// Position of SLC0_RX_QUICK_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1 = 0x4000000

	// _1INT_ST1
	// Position of FRHOST_BIT8_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT8_INT_ST1_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT8_INT_ST1_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT8_INT_ST1 = 0x1
	// Position of FRHOST_BIT9_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT9_INT_ST1_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT9_INT_ST1_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT9_INT_ST1 = 0x2
	// Position of FRHOST_BIT10_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT10_INT_ST1_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT10_INT_ST1_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT10_INT_ST1 = 0x4
	// Position of FRHOST_BIT11_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT11_INT_ST1_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT11_INT_ST1_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT11_INT_ST1 = 0x8
	// Position of FRHOST_BIT12_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT12_INT_ST1_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT12_INT_ST1_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT12_INT_ST1 = 0x10
	// Position of FRHOST_BIT13_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT13_INT_ST1_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT13_INT_ST1_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT13_INT_ST1 = 0x20
	// Position of FRHOST_BIT14_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT14_INT_ST1_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT14_INT_ST1_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT14_INT_ST1 = 0x40
	// Position of FRHOST_BIT15_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT15_INT_ST1_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT15_INT_ST1_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT15_INT_ST1 = 0x80
	// Position of SLC1_RX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_START_INT_ST1_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_START_INT_ST1_Msk = 0x100
	// Bit SLC1_RX_START_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_START_INT_ST1 = 0x100
	// Position of SLC1_TX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_START_INT_ST1_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_START_INT_ST1_Msk = 0x200
	// Bit SLC1_TX_START_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_START_INT_ST1 = 0x200
	// Position of SLC1_RX_UDF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_UDF_INT_ST1_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_UDF_INT_ST1_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_UDF_INT_ST1 = 0x400
	// Position of SLC1_TX_OVF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_OVF_INT_ST1_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_OVF_INT_ST1_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_OVF_INT_ST1 = 0x800
	// Position of SLC1_TOKEN0_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ST1.
	SLC__1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1 = 0x1000
	// Position of SLC1_TOKEN1_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ST1.
	SLC__1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1 = 0x2000
	// Position of SLC1_TX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DONE_INT_ST1_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DONE_INT_ST1_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_DONE_INT_ST1 = 0x4000
	// Position of SLC1_TX_SUC_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1 = 0x8000
	// Position of SLC1_RX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DONE_INT_ST1_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DONE_INT_ST1_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_DONE_INT_ST1 = 0x10000
	// Position of SLC1_RX_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_EOF_INT_ST1_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_EOF_INT_ST1_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_EOF_INT_ST1 = 0x20000
	// Position of SLC1_TOHOST_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOHOST_INT_ST1_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOHOST_INT_ST1_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ST1.
	SLC__1INT_ST1_SLC1_TOHOST_INT_ST1 = 0x40000
	// Position of SLC1_TX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1 = 0x80000
	// Position of SLC1_RX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1 = 0x100000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1 = 0x200000
	// Position of SLC1_HOST_RD_ACK_INT_ST1 field.
	SLC__1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ST1 field.
	SLC__1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ST1.
	SLC__1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1 = 0x400000
	// Position of SLC1_WR_RETRY_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ST1.
	SLC__1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1 = 0x800000
	// Position of SLC1_TX_ERR_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1 = 0x1000000

	// _1INT_ENA1
	// Position of FRHOST_BIT8_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT8_INT_ENA1_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT8_INT_ENA1_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT8_INT_ENA1 = 0x1
	// Position of FRHOST_BIT9_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT9_INT_ENA1_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT9_INT_ENA1_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT9_INT_ENA1 = 0x2
	// Position of FRHOST_BIT10_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT10_INT_ENA1_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT10_INT_ENA1_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT10_INT_ENA1 = 0x4
	// Position of FRHOST_BIT11_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT11_INT_ENA1_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT11_INT_ENA1_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT11_INT_ENA1 = 0x8
	// Position of FRHOST_BIT12_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT12_INT_ENA1_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT12_INT_ENA1_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT12_INT_ENA1 = 0x10
	// Position of FRHOST_BIT13_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT13_INT_ENA1_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT13_INT_ENA1_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT13_INT_ENA1 = 0x20
	// Position of FRHOST_BIT14_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT14_INT_ENA1_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT14_INT_ENA1_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT14_INT_ENA1 = 0x40
	// Position of FRHOST_BIT15_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT15_INT_ENA1_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT15_INT_ENA1_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT15_INT_ENA1 = 0x80
	// Position of SLC1_RX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_START_INT_ENA1_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_START_INT_ENA1_Msk = 0x100
	// Bit SLC1_RX_START_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_START_INT_ENA1 = 0x100
	// Position of SLC1_TX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_START_INT_ENA1_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_START_INT_ENA1_Msk = 0x200
	// Bit SLC1_TX_START_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_START_INT_ENA1 = 0x200
	// Position of SLC1_RX_UDF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_UDF_INT_ENA1_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_UDF_INT_ENA1_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_UDF_INT_ENA1 = 0x400
	// Position of SLC1_TX_OVF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_OVF_INT_ENA1_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_OVF_INT_ENA1_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_OVF_INT_ENA1 = 0x800
	// Position of SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1 = 0x1000
	// Position of SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1 = 0x2000
	// Position of SLC1_TX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DONE_INT_ENA1_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DONE_INT_ENA1_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_DONE_INT_ENA1 = 0x4000
	// Position of SLC1_TX_SUC_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1 = 0x8000
	// Position of SLC1_RX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DONE_INT_ENA1_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DONE_INT_ENA1_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_DONE_INT_ENA1 = 0x10000
	// Position of SLC1_RX_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_EOF_INT_ENA1_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_EOF_INT_ENA1_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_EOF_INT_ENA1 = 0x20000
	// Position of SLC1_TOHOST_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOHOST_INT_ENA1_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOHOST_INT_ENA1_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TOHOST_INT_ENA1 = 0x40000
	// Position of SLC1_TX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1 = 0x80000
	// Position of SLC1_RX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1 = 0x100000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1 = 0x200000
	// Position of SLC1_HOST_RD_ACK_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ENA1.
	SLC__1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1 = 0x400000
	// Position of SLC1_WR_RETRY_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ENA1.
	SLC__1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1 = 0x800000
	// Position of SLC1_TX_ERR_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1 = 0x1000000

	// DATE
	// Position of DATE field.
	SLC_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	SLC_DATE_DATE_Msk = 0xffffffff

	// ID
	// Position of ID field.
	SLC_ID_ID_Pos = 0x0
	// Bit mask of ID field.
	SLC_ID_ID_Msk = 0xffffffff
)

// Constants for SLCHOST: SLCHOST Peripheral
const (
	// HOST_SLCHOST_FUNC2_0
	// Position of HOST_SLC_FUNC2_INT field.
	SLCHOST_HOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT_Pos = 0x18
	// Bit mask of HOST_SLC_FUNC2_INT field.
	SLCHOST_HOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT_Msk = 0x1000000
	// Bit HOST_SLC_FUNC2_INT.
	SLCHOST_HOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT = 0x1000000

	// HOST_SLCHOST_FUNC2_1
	// Position of HOST_SLC_FUNC2_INT_EN field.
	SLCHOST_HOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN_Pos = 0x0
	// Bit mask of HOST_SLC_FUNC2_INT_EN field.
	SLCHOST_HOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN_Msk = 0x1
	// Bit HOST_SLC_FUNC2_INT_EN.
	SLCHOST_HOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN = 0x1

	// HOST_SLCHOST_FUNC2_2
	// Position of HOST_SLC_FUNC1_MDSTAT field.
	SLCHOST_HOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT_Pos = 0x0
	// Bit mask of HOST_SLC_FUNC1_MDSTAT field.
	SLCHOST_HOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT_Msk = 0x1
	// Bit HOST_SLC_FUNC1_MDSTAT.
	SLCHOST_HOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT = 0x1

	// HOST_SLCHOST_GPIO_STATUS0
	// Position of HOST_GPIO_SDIO_INT0 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS0_HOST_GPIO_SDIO_INT0_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_INT0 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS0_HOST_GPIO_SDIO_INT0_Msk = 0xffffffff

	// HOST_SLCHOST_GPIO_STATUS1
	// Position of HOST_GPIO_SDIO_INT1 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_INT1 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1_Msk = 0xff

	// HOST_SLCHOST_GPIO_IN0
	// Position of HOST_GPIO_SDIO_IN0 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN0_HOST_GPIO_SDIO_IN0_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_IN0 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN0_HOST_GPIO_SDIO_IN0_Msk = 0xffffffff

	// HOST_SLCHOST_GPIO_IN1
	// Position of HOST_GPIO_SDIO_IN1 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_IN1 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1_Msk = 0xff

	// HOST_SLC0HOST_TOKEN_RDATA
	// Position of HOST_SLC0_TOKEN0 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0_Pos = 0x0
	// Bit mask of HOST_SLC0_TOKEN0 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0_Msk = 0xfff
	// Position of HOST_SLC0_RX_PF_VALID field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID_Pos = 0xc
	// Bit mask of HOST_SLC0_RX_PF_VALID field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID_Msk = 0x1000
	// Bit HOST_SLC0_RX_PF_VALID.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID = 0x1000
	// Position of HOST_HOSTSLC0_TOKEN1 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1_Pos = 0x10
	// Bit mask of HOST_HOSTSLC0_TOKEN1 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1_Msk = 0xfff0000
	// Position of HOST_SLC0_RX_PF_EOF field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF_Pos = 0x1c
	// Bit mask of HOST_SLC0_RX_PF_EOF field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF_Msk = 0xf0000000

	// HOST_SLC0_HOST_PF
	// Position of HOST_SLC0_PF_DATA field.
	SLCHOST_HOST_SLC0_HOST_PF_HOST_SLC0_PF_DATA_Pos = 0x0
	// Bit mask of HOST_SLC0_PF_DATA field.
	SLCHOST_HOST_SLC0_HOST_PF_HOST_SLC0_PF_DATA_Msk = 0xffffffff

	// HOST_SLC1_HOST_PF
	// Position of HOST_SLC1_PF_DATA field.
	SLCHOST_HOST_SLC1_HOST_PF_HOST_SLC1_PF_DATA_Pos = 0x0
	// Bit mask of HOST_SLC1_PF_DATA field.
	SLCHOST_HOST_SLC1_HOST_PF_HOST_SLC1_PF_DATA_Msk = 0xffffffff

	// HOST_SLC0HOST_INT_RAW
	// Position of HOST_SLC0_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW = 0x1
	// Position of HOST_SLC0_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW = 0x2
	// Position of HOST_SLC0_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW = 0x4
	// Position of HOST_SLC0_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW = 0x8
	// Position of HOST_SLC0_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW = 0x10
	// Position of HOST_SLC0_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW = 0x20
	// Position of HOST_SLC0_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW = 0x40
	// Position of HOST_SLC0_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW = 0x80
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW = 0x100
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW = 0x200
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW = 0x400
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW = 0x800
	// Position of HOST_SLC0HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW = 0x1000
	// Position of HOST_SLC0HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW = 0x2000
	// Position of HOST_SLC0HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW = 0x4000
	// Position of HOST_SLC0HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW = 0x8000
	// Position of HOST_SLC0_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW = 0x10000
	// Position of HOST_SLC0_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW = 0x20000
	// Position of HOST_SLC0_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW = 0x40000
	// Position of HOST_SLC0_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW = 0x80000
	// Position of HOST_SLC0_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW = 0x100000
	// Position of HOST_SLC0_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW = 0x200000
	// Position of HOST_SLC0_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW = 0x400000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW = 0x800000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW = 0x1000000
	// Position of HOST_GPIO_SDIO_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW = 0x2000000

	// HOST_SLC1HOST_INT_RAW
	// Position of HOST_SLC1_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW = 0x1
	// Position of HOST_SLC1_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW = 0x2
	// Position of HOST_SLC1_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW = 0x4
	// Position of HOST_SLC1_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW = 0x8
	// Position of HOST_SLC1_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW = 0x10
	// Position of HOST_SLC1_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW = 0x20
	// Position of HOST_SLC1_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW = 0x40
	// Position of HOST_SLC1_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW = 0x80
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW = 0x100
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW = 0x200
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW = 0x400
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW = 0x800
	// Position of HOST_SLC1HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW = 0x1000
	// Position of HOST_SLC1HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW = 0x2000
	// Position of HOST_SLC1HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW = 0x4000
	// Position of HOST_SLC1HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW = 0x8000
	// Position of HOST_SLC1_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW = 0x10000
	// Position of HOST_SLC1_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW = 0x20000
	// Position of HOST_SLC1_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW = 0x40000
	// Position of HOST_SLC1_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW = 0x80000
	// Position of HOST_SLC1_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW = 0x100000
	// Position of HOST_SLC1_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW = 0x200000
	// Position of HOST_SLC1_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW = 0x400000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW = 0x800000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW = 0x1000000
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW = 0x2000000

	// HOST_SLC0HOST_INT_ST
	// Position of HOST_SLC0_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST = 0x1
	// Position of HOST_SLC0_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST = 0x2
	// Position of HOST_SLC0_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST = 0x4
	// Position of HOST_SLC0_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST = 0x8
	// Position of HOST_SLC0_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST = 0x10
	// Position of HOST_SLC0_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST = 0x20
	// Position of HOST_SLC0_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST = 0x40
	// Position of HOST_SLC0_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST = 0x80
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST = 0x100
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST = 0x200
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST = 0x400
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST = 0x800
	// Position of HOST_SLC0HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST = 0x1000
	// Position of HOST_SLC0HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST = 0x2000
	// Position of HOST_SLC0HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST = 0x4000
	// Position of HOST_SLC0HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST = 0x8000
	// Position of HOST_SLC0_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST = 0x10000
	// Position of HOST_SLC0_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST = 0x20000
	// Position of HOST_SLC0_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST = 0x40000
	// Position of HOST_SLC0_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST = 0x80000
	// Position of HOST_SLC0_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST = 0x100000
	// Position of HOST_SLC0_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST = 0x200000
	// Position of HOST_SLC0_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST = 0x400000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST = 0x800000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST = 0x1000000
	// Position of HOST_GPIO_SDIO_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST = 0x2000000

	// HOST_SLC1HOST_INT_ST
	// Position of HOST_SLC1_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST = 0x1
	// Position of HOST_SLC1_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST = 0x2
	// Position of HOST_SLC1_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST = 0x4
	// Position of HOST_SLC1_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST = 0x8
	// Position of HOST_SLC1_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST = 0x10
	// Position of HOST_SLC1_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST = 0x20
	// Position of HOST_SLC1_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST = 0x40
	// Position of HOST_SLC1_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST = 0x80
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST = 0x100
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST = 0x200
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST = 0x400
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST = 0x800
	// Position of HOST_SLC1HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST = 0x1000
	// Position of HOST_SLC1HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST = 0x2000
	// Position of HOST_SLC1HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST = 0x4000
	// Position of HOST_SLC1HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST = 0x8000
	// Position of HOST_SLC1_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST = 0x10000
	// Position of HOST_SLC1_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST = 0x20000
	// Position of HOST_SLC1_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST = 0x40000
	// Position of HOST_SLC1_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST = 0x80000
	// Position of HOST_SLC1_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST = 0x100000
	// Position of HOST_SLC1_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST = 0x200000
	// Position of HOST_SLC1_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST = 0x400000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST = 0x800000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST = 0x1000000
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST = 0x2000000

	// HOST_SLCHOST_PKT_LEN
	// Position of HOST_HOSTSLC0_LEN field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_Msk = 0xfffff
	// Position of HOST_HOSTSLC0_LEN_CHECK field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK_Pos = 0x14
	// Bit mask of HOST_HOSTSLC0_LEN_CHECK field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK_Msk = 0xfff00000

	// HOST_SLCHOST_STATE_W0
	// Position of HOST_SLCHOST_STATE0 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0_Pos = 0x0
	// Bit mask of HOST_SLCHOST_STATE0 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0_Msk = 0xff
	// Position of HOST_SLCHOST_STATE1 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1_Pos = 0x8
	// Bit mask of HOST_SLCHOST_STATE1 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1_Msk = 0xff00
	// Position of HOST_SLCHOST_STATE2 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2_Pos = 0x10
	// Bit mask of HOST_SLCHOST_STATE2 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2_Msk = 0xff0000
	// Position of HOST_SLCHOST_STATE3 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3_Pos = 0x18
	// Bit mask of HOST_SLCHOST_STATE3 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3_Msk = 0xff000000

	// HOST_SLCHOST_STATE_W1
	// Position of HOST_SLCHOST_STATE4 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4_Pos = 0x0
	// Bit mask of HOST_SLCHOST_STATE4 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4_Msk = 0xff
	// Position of HOST_SLCHOST_STATE5 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5_Pos = 0x8
	// Bit mask of HOST_SLCHOST_STATE5 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5_Msk = 0xff00
	// Position of HOST_SLCHOST_STATE6 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6_Pos = 0x10
	// Bit mask of HOST_SLCHOST_STATE6 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6_Msk = 0xff0000
	// Position of HOST_SLCHOST_STATE7 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7_Pos = 0x18
	// Bit mask of HOST_SLCHOST_STATE7 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W0
	// Position of HOST_SLCHOST_CONF0 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF0 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0_Msk = 0xff
	// Position of HOST_SLCHOST_CONF1 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF1 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF2 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF2 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF3 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF3 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W1
	// Position of HOST_SLCHOST_CONF4 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF4 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4_Msk = 0xff
	// Position of HOST_SLCHOST_CONF5 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF5 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF6 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF6 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF7 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF7 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W2
	// Position of HOST_SLCHOST_CONF8 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF8 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8_Msk = 0xff
	// Position of HOST_SLCHOST_CONF9 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF9 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF10 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF10 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF11 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF11 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W3
	// Position of HOST_SLCHOST_CONF12 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF12 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12_Msk = 0xff
	// Position of HOST_SLCHOST_CONF13 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF13 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF14 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF14 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF15 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF15 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W4
	// Position of HOST_SLCHOST_CONF16 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF16 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16_Msk = 0xff
	// Position of HOST_SLCHOST_CONF17 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF17 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF18 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF18 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF19 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF19 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W5
	// Position of HOST_SLCHOST_CONF20 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF20 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20_Msk = 0xff
	// Position of HOST_SLCHOST_CONF21 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF21 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF22 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF22 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF23 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF23 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W6
	// Position of HOST_SLCHOST_CONF24 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF24 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24_Msk = 0xff
	// Position of HOST_SLCHOST_CONF25 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF25 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF26 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF26 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF27 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF27 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W7
	// Position of HOST_SLCHOST_CONF28 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF28 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28_Msk = 0xff
	// Position of HOST_SLCHOST_CONF29 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF29 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF30 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF30 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF31 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF31 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31_Msk = 0xff000000

	// HOST_SLCHOST_PKT_LEN0
	// Position of HOST_HOSTSLC0_LEN0 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN0 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0_Msk = 0xfffff

	// HOST_SLCHOST_PKT_LEN1
	// Position of HOST_HOSTSLC0_LEN1 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN1 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1_Msk = 0xfffff

	// HOST_SLCHOST_PKT_LEN2
	// Position of HOST_HOSTSLC0_LEN2 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN2 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2_Msk = 0xfffff

	// HOST_SLCHOST_CONF_W8
	// Position of HOST_SLCHOST_CONF32 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF32 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32_Msk = 0xff
	// Position of HOST_SLCHOST_CONF33 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF33 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF34 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF34 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF35 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF35 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W9
	// Position of HOST_SLCHOST_CONF36 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF36 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36_Msk = 0xff
	// Position of HOST_SLCHOST_CONF37 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF37 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF38 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF38 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF39 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF39 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W10
	// Position of HOST_SLCHOST_CONF40 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF40 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40_Msk = 0xff
	// Position of HOST_SLCHOST_CONF41 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF41 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF42 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF42 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF43 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF43 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W11
	// Position of HOST_SLCHOST_CONF44 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF44 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44_Msk = 0xff
	// Position of HOST_SLCHOST_CONF45 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF45 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF46 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF46 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF47 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF47 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W12
	// Position of HOST_SLCHOST_CONF48 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF48 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48_Msk = 0xff
	// Position of HOST_SLCHOST_CONF49 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF49 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF50 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF50 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF51 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF51 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W13
	// Position of HOST_SLCHOST_CONF52 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF52 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52_Msk = 0xff
	// Position of HOST_SLCHOST_CONF53 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF53 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF54 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF54 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF55 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF55 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W14
	// Position of HOST_SLCHOST_CONF56 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF56 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56_Msk = 0xff
	// Position of HOST_SLCHOST_CONF57 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF57 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF58 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF58 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF59 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF59 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59_Msk = 0xff000000

	// HOST_SLCHOST_CONF_W15
	// Position of HOST_SLCHOST_CONF60 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF60 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60_Msk = 0xff
	// Position of HOST_SLCHOST_CONF61 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF61 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF62 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF62 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF63 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF63 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63_Msk = 0xff000000

	// HOST_SLCHOST_CHECK_SUM0
	// Position of HOST_SLCHOST_CHECK_SUM0 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM0_HOST_SLCHOST_CHECK_SUM0_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CHECK_SUM0 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM0_HOST_SLCHOST_CHECK_SUM0_Msk = 0xffffffff

	// HOST_SLCHOST_CHECK_SUM1
	// Position of HOST_SLCHOST_CHECK_SUM1 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM1_HOST_SLCHOST_CHECK_SUM1_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CHECK_SUM1 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM1_HOST_SLCHOST_CHECK_SUM1_Msk = 0xffffffff

	// HOST_SLC1HOST_TOKEN_RDATA
	// Position of HOST_SLC1_TOKEN0 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0_Pos = 0x0
	// Bit mask of HOST_SLC1_TOKEN0 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0_Msk = 0xfff
	// Position of HOST_SLC1_RX_PF_VALID field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID_Pos = 0xc
	// Bit mask of HOST_SLC1_RX_PF_VALID field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID_Msk = 0x1000
	// Bit HOST_SLC1_RX_PF_VALID.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID = 0x1000
	// Position of HOST_HOSTSLC1_TOKEN1 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1_Pos = 0x10
	// Bit mask of HOST_HOSTSLC1_TOKEN1 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1_Msk = 0xfff0000
	// Position of HOST_SLC1_RX_PF_EOF field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF_Pos = 0x1c
	// Bit mask of HOST_SLC1_RX_PF_EOF field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF_Msk = 0xf0000000

	// HOST_SLC0HOST_TOKEN_WDATA
	// Position of HOST_SLC0HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD_Msk = 0xfff
	// Position of HOST_SLC0HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD_Pos = 0x10
	// Bit mask of HOST_SLC0HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD_Msk = 0xfff0000

	// HOST_SLC1HOST_TOKEN_WDATA
	// Position of HOST_SLC1HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD_Pos = 0x0
	// Bit mask of HOST_SLC1HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD_Msk = 0xfff
	// Position of HOST_SLC1HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD_Pos = 0x10
	// Bit mask of HOST_SLC1HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD_Msk = 0xfff0000

	// HOST_SLCHOST_TOKEN_CON
	// Position of HOST_SLC0HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC_Msk = 0x1
	// Bit HOST_SLC0HOST_TOKEN0_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC = 0x1
	// Position of HOST_SLC0HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC_Pos = 0x1
	// Bit mask of HOST_SLC0HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC_Msk = 0x2
	// Bit HOST_SLC0HOST_TOKEN1_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC = 0x2
	// Position of HOST_SLC0HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR_Pos = 0x2
	// Bit mask of HOST_SLC0HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR_Msk = 0x4
	// Bit HOST_SLC0HOST_TOKEN0_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR = 0x4
	// Position of HOST_SLC0HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR_Pos = 0x3
	// Bit mask of HOST_SLC0HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR_Msk = 0x8
	// Bit HOST_SLC0HOST_TOKEN1_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR = 0x8
	// Position of HOST_SLC1HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC_Pos = 0x4
	// Bit mask of HOST_SLC1HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC_Msk = 0x10
	// Bit HOST_SLC1HOST_TOKEN0_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC = 0x10
	// Position of HOST_SLC1HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC_Pos = 0x5
	// Bit mask of HOST_SLC1HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC_Msk = 0x20
	// Bit HOST_SLC1HOST_TOKEN1_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC = 0x20
	// Position of HOST_SLC1HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR_Pos = 0x6
	// Bit mask of HOST_SLC1HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR_Msk = 0x40
	// Bit HOST_SLC1HOST_TOKEN0_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR = 0x40
	// Position of HOST_SLC1HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR_Pos = 0x7
	// Bit mask of HOST_SLC1HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR_Msk = 0x80
	// Bit HOST_SLC1HOST_TOKEN1_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR = 0x80
	// Position of HOST_SLC0HOST_LEN_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR_Pos = 0x8
	// Bit mask of HOST_SLC0HOST_LEN_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR_Msk = 0x100
	// Bit HOST_SLC0HOST_LEN_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR = 0x100

	// HOST_SLC0HOST_INT_CLR
	// Position of HOST_SLC0_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR = 0x1
	// Position of HOST_SLC0_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR = 0x2
	// Position of HOST_SLC0_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR = 0x4
	// Position of HOST_SLC0_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR = 0x8
	// Position of HOST_SLC0_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR = 0x10
	// Position of HOST_SLC0_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR = 0x20
	// Position of HOST_SLC0_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR = 0x40
	// Position of HOST_SLC0_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR = 0x80
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR = 0x100
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR = 0x200
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR = 0x400
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR = 0x800
	// Position of HOST_SLC0HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR = 0x1000
	// Position of HOST_SLC0HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR = 0x2000
	// Position of HOST_SLC0HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR = 0x4000
	// Position of HOST_SLC0HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR = 0x8000
	// Position of HOST_SLC0_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR = 0x10000
	// Position of HOST_SLC0_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR = 0x20000
	// Position of HOST_SLC0_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR = 0x40000
	// Position of HOST_SLC0_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR = 0x80000
	// Position of HOST_SLC0_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR = 0x100000
	// Position of HOST_SLC0_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR = 0x200000
	// Position of HOST_SLC0_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR = 0x400000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR = 0x800000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR = 0x1000000
	// Position of HOST_GPIO_SDIO_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR = 0x2000000

	// HOST_SLC1HOST_INT_CLR
	// Position of HOST_SLC1_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR = 0x1
	// Position of HOST_SLC1_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR = 0x2
	// Position of HOST_SLC1_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR = 0x4
	// Position of HOST_SLC1_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR = 0x8
	// Position of HOST_SLC1_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR = 0x10
	// Position of HOST_SLC1_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR = 0x20
	// Position of HOST_SLC1_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR = 0x40
	// Position of HOST_SLC1_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR = 0x80
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR = 0x100
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR = 0x200
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR = 0x400
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR = 0x800
	// Position of HOST_SLC1HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR = 0x1000
	// Position of HOST_SLC1HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR = 0x2000
	// Position of HOST_SLC1HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR = 0x4000
	// Position of HOST_SLC1HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR = 0x8000
	// Position of HOST_SLC1_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR = 0x10000
	// Position of HOST_SLC1_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR = 0x20000
	// Position of HOST_SLC1_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR = 0x40000
	// Position of HOST_SLC1_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR = 0x80000
	// Position of HOST_SLC1_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR = 0x100000
	// Position of HOST_SLC1_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR = 0x200000
	// Position of HOST_SLC1_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR = 0x400000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR = 0x800000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR = 0x1000000
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR = 0x2000000

	// HOST_SLC0HOST_FUNC1_INT_ENA
	// Position of HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA = 0x1
	// Position of HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN1_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN1_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN1_SLC0HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN1_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN1_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN1_SLC0HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN1_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN1_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN1_SLC0HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN1_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN1_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN1_SLC0HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN1_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN1_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN1_SLC0_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN1_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN1_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN1_SLC0_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN1_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN1_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN1_SLC0_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN1_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN1_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN1_SLC0_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN1_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN1_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN1_SLC0_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN1_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN1_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN1_SLC0_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN1_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN1_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN1_SLC0_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN1_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN1_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN1_GPIO_SDIO_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA = 0x2000000

	// HOST_SLC1HOST_FUNC1_INT_ENA
	// Position of HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA = 0x1
	// Position of HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN1_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN1_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN1_SLC1HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN1_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN1_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN1_SLC1HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN1_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN1_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN1_SLC1HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN1_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN1_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN1_SLC1HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN1_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN1_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN1_SLC1_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN1_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN1_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN1_SLC1_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN1_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN1_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN1_SLC1_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN1_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN1_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN1_SLC1_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN1_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN1_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN1_SLC1_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN1_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN1_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN1_SLC1_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN1_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN1_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN1_SLC1_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA = 0x2000000

	// HOST_SLC0HOST_FUNC2_INT_ENA
	// Position of HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA = 0x1
	// Position of HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN2_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN2_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN2_SLC0HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN2_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN2_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN2_SLC0HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN2_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN2_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN2_SLC0HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN2_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN2_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN2_SLC0HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN2_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN2_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN2_SLC0_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN2_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN2_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN2_SLC0_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN2_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN2_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN2_SLC0_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN2_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN2_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN2_SLC0_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN2_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN2_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN2_SLC0_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN2_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN2_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN2_SLC0_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN2_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN2_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN2_SLC0_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN2_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN2_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN2_GPIO_SDIO_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA = 0x2000000

	// HOST_SLC1HOST_FUNC2_INT_ENA
	// Position of HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA = 0x1
	// Position of HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN2_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN2_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN2_SLC1HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN2_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN2_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN2_SLC1HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN2_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN2_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN2_SLC1HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN2_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN2_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN2_SLC1HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN2_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN2_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN2_SLC1_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN2_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN2_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN2_SLC1_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN2_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN2_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN2_SLC1_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN2_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN2_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN2_SLC1_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN2_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN2_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN2_SLC1_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN2_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN2_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN2_SLC1_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN2_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN2_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN2_SLC1_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA = 0x2000000

	// HOST_SLC0HOST_INT_ENA
	// Position of HOST_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA = 0x1
	// Position of HOST_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA = 0x2000000

	// HOST_SLC1HOST_INT_ENA
	// Position of HOST_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA = 0x1
	// Position of HOST_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA = 0x2000000

	// HOST_SLC0HOST_RX_INFOR
	// Position of HOST_SLC0HOST_RX_INFOR field.
	SLCHOST_HOST_SLC0HOST_RX_INFOR_HOST_SLC0HOST_RX_INFOR_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_RX_INFOR field.
	SLCHOST_HOST_SLC0HOST_RX_INFOR_HOST_SLC0HOST_RX_INFOR_Msk = 0xfffff

	// HOST_SLC1HOST_RX_INFOR
	// Position of HOST_SLC1HOST_RX_INFOR field.
	SLCHOST_HOST_SLC1HOST_RX_INFOR_HOST_SLC1HOST_RX_INFOR_Pos = 0x0
	// Bit mask of HOST_SLC1HOST_RX_INFOR field.
	SLCHOST_HOST_SLC1HOST_RX_INFOR_HOST_SLC1HOST_RX_INFOR_Msk = 0xfffff

	// HOST_SLC0HOST_LEN_WD
	// Position of HOST_SLC0HOST_LEN_WD field.
	SLCHOST_HOST_SLC0HOST_LEN_WD_HOST_SLC0HOST_LEN_WD_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_LEN_WD field.
	SLCHOST_HOST_SLC0HOST_LEN_WD_HOST_SLC0HOST_LEN_WD_Msk = 0xffffffff

	// HOST_SLC_APBWIN_WDATA
	// Position of HOST_SLC_APBWIN_WDATA field.
	SLCHOST_HOST_SLC_APBWIN_WDATA_HOST_SLC_APBWIN_WDATA_Pos = 0x0
	// Bit mask of HOST_SLC_APBWIN_WDATA field.
	SLCHOST_HOST_SLC_APBWIN_WDATA_HOST_SLC_APBWIN_WDATA_Msk = 0xffffffff

	// HOST_SLC_APBWIN_CONF
	// Position of HOST_SLC_APBWIN_ADDR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR_Pos = 0x0
	// Bit mask of HOST_SLC_APBWIN_ADDR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR_Msk = 0xfffffff
	// Position of HOST_SLC_APBWIN_WR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR_Pos = 0x1c
	// Bit mask of HOST_SLC_APBWIN_WR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR_Msk = 0x10000000
	// Bit HOST_SLC_APBWIN_WR.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR = 0x10000000
	// Position of HOST_SLC_APBWIN_START field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START_Pos = 0x1d
	// Bit mask of HOST_SLC_APBWIN_START field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START_Msk = 0x20000000
	// Bit HOST_SLC_APBWIN_START.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START = 0x20000000

	// HOST_SLC_APBWIN_RDATA
	// Position of HOST_SLC_APBWIN_RDATA field.
	SLCHOST_HOST_SLC_APBWIN_RDATA_HOST_SLC_APBWIN_RDATA_Pos = 0x0
	// Bit mask of HOST_SLC_APBWIN_RDATA field.
	SLCHOST_HOST_SLC_APBWIN_RDATA_HOST_SLC_APBWIN_RDATA_Msk = 0xffffffff

	// HOST_SLCHOST_RDCLR0
	// Position of HOST_SLCHOST_SLC0_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR_Pos = 0x0
	// Bit mask of HOST_SLCHOST_SLC0_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR_Msk = 0x1ff
	// Position of HOST_SLCHOST_SLC0_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR_Pos = 0x9
	// Bit mask of HOST_SLCHOST_SLC0_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR_Msk = 0x3fe00

	// HOST_SLCHOST_RDCLR1
	// Position of HOST_SLCHOST_SLC1_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR_Pos = 0x0
	// Bit mask of HOST_SLCHOST_SLC1_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR_Msk = 0x1ff
	// Position of HOST_SLCHOST_SLC1_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR_Pos = 0x9
	// Bit mask of HOST_SLCHOST_SLC1_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR_Msk = 0x3fe00

	// HOST_SLC0HOST_INT_ENA1
	// Position of HOST_SLC0_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1 = 0x1
	// Position of HOST_SLC0_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1 = 0x2
	// Position of HOST_SLC0_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1 = 0x4
	// Position of HOST_SLC0_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1 = 0x8
	// Position of HOST_SLC0_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1 = 0x10
	// Position of HOST_SLC0_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1 = 0x20
	// Position of HOST_SLC0_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1 = 0x40
	// Position of HOST_SLC0_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1 = 0x80
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1 = 0x100
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1 = 0x200
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1 = 0x400
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1 = 0x800
	// Position of HOST_SLC0HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1 = 0x1000
	// Position of HOST_SLC0HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1 = 0x2000
	// Position of HOST_SLC0HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1 = 0x4000
	// Position of HOST_SLC0HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1 = 0x8000
	// Position of HOST_SLC0_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1 = 0x10000
	// Position of HOST_SLC0_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1 = 0x20000
	// Position of HOST_SLC0_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1 = 0x40000
	// Position of HOST_SLC0_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1 = 0x80000
	// Position of HOST_SLC0_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1 = 0x100000
	// Position of HOST_SLC0_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1 = 0x200000
	// Position of HOST_SLC0_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1 = 0x400000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1 = 0x800000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1 = 0x1000000
	// Position of HOST_GPIO_SDIO_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1 = 0x2000000

	// HOST_SLC1HOST_INT_ENA1
	// Position of HOST_SLC1_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1 = 0x1
	// Position of HOST_SLC1_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1 = 0x2
	// Position of HOST_SLC1_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1 = 0x4
	// Position of HOST_SLC1_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1 = 0x8
	// Position of HOST_SLC1_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1 = 0x10
	// Position of HOST_SLC1_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1 = 0x20
	// Position of HOST_SLC1_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1 = 0x40
	// Position of HOST_SLC1_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1 = 0x80
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1 = 0x100
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1 = 0x200
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1 = 0x400
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1 = 0x800
	// Position of HOST_SLC1HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1 = 0x1000
	// Position of HOST_SLC1HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1 = 0x2000
	// Position of HOST_SLC1HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1 = 0x4000
	// Position of HOST_SLC1HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1 = 0x8000
	// Position of HOST_SLC1_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1 = 0x10000
	// Position of HOST_SLC1_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1 = 0x20000
	// Position of HOST_SLC1_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1 = 0x40000
	// Position of HOST_SLC1_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1 = 0x80000
	// Position of HOST_SLC1_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1 = 0x100000
	// Position of HOST_SLC1_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1 = 0x200000
	// Position of HOST_SLC1_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1 = 0x400000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1 = 0x800000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1 = 0x1000000
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1 = 0x2000000

	// HOST_SLCHOSTDATE
	// Position of HOST_SLCHOST_DATE field.
	SLCHOST_HOST_SLCHOSTDATE_HOST_SLCHOST_DATE_Pos = 0x0
	// Bit mask of HOST_SLCHOST_DATE field.
	SLCHOST_HOST_SLCHOSTDATE_HOST_SLCHOST_DATE_Msk = 0xffffffff

	// HOST_SLCHOSTID
	// Position of HOST_SLCHOST_ID field.
	SLCHOST_HOST_SLCHOSTID_HOST_SLCHOST_ID_Pos = 0x0
	// Bit mask of HOST_SLCHOST_ID field.
	SLCHOST_HOST_SLCHOSTID_HOST_SLCHOST_ID_Msk = 0xffffffff

	// HOST_SLCHOST_CONF
	// Position of HOST_FRC_SDIO11 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO11_Pos = 0x0
	// Bit mask of HOST_FRC_SDIO11 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO11_Msk = 0x1f
	// Position of HOST_FRC_SDIO20 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO20_Pos = 0x5
	// Bit mask of HOST_FRC_SDIO20 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO20_Msk = 0x3e0
	// Position of HOST_FRC_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP_Pos = 0xa
	// Bit mask of HOST_FRC_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP_Msk = 0x7c00
	// Position of HOST_FRC_POS_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_POS_SAMP_Pos = 0xf
	// Bit mask of HOST_FRC_POS_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_POS_SAMP_Msk = 0xf8000
	// Position of HOST_FRC_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_QUICK_IN_Pos = 0x14
	// Bit mask of HOST_FRC_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_QUICK_IN_Msk = 0x1f00000
	// Position of HOST_SDIO20_INT_DELAY field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY_Pos = 0x19
	// Bit mask of HOST_SDIO20_INT_DELAY field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY_Msk = 0x2000000
	// Bit HOST_SDIO20_INT_DELAY.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY = 0x2000000
	// Position of HOST_SDIO_PAD_PULLUP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP_Pos = 0x1a
	// Bit mask of HOST_SDIO_PAD_PULLUP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP_Msk = 0x4000000
	// Bit HOST_SDIO_PAD_PULLUP.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP = 0x4000000
	// Position of HOST_HSPEED_CON_EN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_HSPEED_CON_EN_Pos = 0x1b
	// Bit mask of HOST_HSPEED_CON_EN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_HSPEED_CON_EN_Msk = 0x8000000
	// Bit HOST_HSPEED_CON_EN.
	SLCHOST_HOST_SLCHOST_CONF_HOST_HSPEED_CON_EN = 0x8000000

	// HOST_SLCHOST_INF_ST
	// Position of HOST_SDIO20_MODE field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO20_MODE_Pos = 0x0
	// Bit mask of HOST_SDIO20_MODE field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO20_MODE_Msk = 0x1f
	// Position of HOST_SDIO_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP_Pos = 0x5
	// Bit mask of HOST_SDIO_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP_Msk = 0x3e0
	// Position of HOST_SDIO_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN_Pos = 0xa
	// Bit mask of HOST_SDIO_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN_Msk = 0x7c00
)

// Constants for SPI0: SPI (Serial Peripheral Interface) Controller 0
const (
	// CMD
	// Position of FLASH_PER field.
	SPI_CMD_FLASH_PER_Pos = 0x10
	// Bit mask of FLASH_PER field.
	SPI_CMD_FLASH_PER_Msk = 0x10000
	// Bit FLASH_PER.
	SPI_CMD_FLASH_PER = 0x10000
	// Position of FLASH_PES field.
	SPI_CMD_FLASH_PES_Pos = 0x11
	// Bit mask of FLASH_PES field.
	SPI_CMD_FLASH_PES_Msk = 0x20000
	// Bit FLASH_PES.
	SPI_CMD_FLASH_PES = 0x20000
	// Position of USR field.
	SPI_CMD_USR_Pos = 0x12
	// Bit mask of USR field.
	SPI_CMD_USR_Msk = 0x40000
	// Bit USR.
	SPI_CMD_USR = 0x40000
	// Position of FLASH_HPM field.
	SPI_CMD_FLASH_HPM_Pos = 0x13
	// Bit mask of FLASH_HPM field.
	SPI_CMD_FLASH_HPM_Msk = 0x80000
	// Bit FLASH_HPM.
	SPI_CMD_FLASH_HPM = 0x80000
	// Position of FLASH_RES field.
	SPI_CMD_FLASH_RES_Pos = 0x14
	// Bit mask of FLASH_RES field.
	SPI_CMD_FLASH_RES_Msk = 0x100000
	// Bit FLASH_RES.
	SPI_CMD_FLASH_RES = 0x100000
	// Position of FLASH_DP field.
	SPI_CMD_FLASH_DP_Pos = 0x15
	// Bit mask of FLASH_DP field.
	SPI_CMD_FLASH_DP_Msk = 0x200000
	// Bit FLASH_DP.
	SPI_CMD_FLASH_DP = 0x200000
	// Position of FLASH_CE field.
	SPI_CMD_FLASH_CE_Pos = 0x16
	// Bit mask of FLASH_CE field.
	SPI_CMD_FLASH_CE_Msk = 0x400000
	// Bit FLASH_CE.
	SPI_CMD_FLASH_CE = 0x400000
	// Position of FLASH_BE field.
	SPI_CMD_FLASH_BE_Pos = 0x17
	// Bit mask of FLASH_BE field.
	SPI_CMD_FLASH_BE_Msk = 0x800000
	// Bit FLASH_BE.
	SPI_CMD_FLASH_BE = 0x800000
	// Position of FLASH_SE field.
	SPI_CMD_FLASH_SE_Pos = 0x18
	// Bit mask of FLASH_SE field.
	SPI_CMD_FLASH_SE_Msk = 0x1000000
	// Bit FLASH_SE.
	SPI_CMD_FLASH_SE = 0x1000000
	// Position of FLASH_PP field.
	SPI_CMD_FLASH_PP_Pos = 0x19
	// Bit mask of FLASH_PP field.
	SPI_CMD_FLASH_PP_Msk = 0x2000000
	// Bit FLASH_PP.
	SPI_CMD_FLASH_PP = 0x2000000
	// Position of FLASH_WRSR field.
	SPI_CMD_FLASH_WRSR_Pos = 0x1a
	// Bit mask of FLASH_WRSR field.
	SPI_CMD_FLASH_WRSR_Msk = 0x4000000
	// Bit FLASH_WRSR.
	SPI_CMD_FLASH_WRSR = 0x4000000
	// Position of FLASH_RDSR field.
	SPI_CMD_FLASH_RDSR_Pos = 0x1b
	// Bit mask of FLASH_RDSR field.
	SPI_CMD_FLASH_RDSR_Msk = 0x8000000
	// Bit FLASH_RDSR.
	SPI_CMD_FLASH_RDSR = 0x8000000
	// Position of FLASH_RDID field.
	SPI_CMD_FLASH_RDID_Pos = 0x1c
	// Bit mask of FLASH_RDID field.
	SPI_CMD_FLASH_RDID_Msk = 0x10000000
	// Bit FLASH_RDID.
	SPI_CMD_FLASH_RDID = 0x10000000
	// Position of FLASH_WRDI field.
	SPI_CMD_FLASH_WRDI_Pos = 0x1d
	// Bit mask of FLASH_WRDI field.
	SPI_CMD_FLASH_WRDI_Msk = 0x20000000
	// Bit FLASH_WRDI.
	SPI_CMD_FLASH_WRDI = 0x20000000
	// Position of FLASH_WREN field.
	SPI_CMD_FLASH_WREN_Pos = 0x1e
	// Bit mask of FLASH_WREN field.
	SPI_CMD_FLASH_WREN_Msk = 0x40000000
	// Bit FLASH_WREN.
	SPI_CMD_FLASH_WREN = 0x40000000
	// Position of FLASH_READ field.
	SPI_CMD_FLASH_READ_Pos = 0x1f
	// Bit mask of FLASH_READ field.
	SPI_CMD_FLASH_READ_Msk = 0x80000000
	// Bit FLASH_READ.
	SPI_CMD_FLASH_READ = 0x80000000

	// CTRL
	// Position of FCS_CRC_EN field.
	SPI_CTRL_FCS_CRC_EN_Pos = 0xa
	// Bit mask of FCS_CRC_EN field.
	SPI_CTRL_FCS_CRC_EN_Msk = 0x400
	// Bit FCS_CRC_EN.
	SPI_CTRL_FCS_CRC_EN = 0x400
	// Position of TX_CRC_EN field.
	SPI_CTRL_TX_CRC_EN_Pos = 0xb
	// Bit mask of TX_CRC_EN field.
	SPI_CTRL_TX_CRC_EN_Msk = 0x800
	// Bit TX_CRC_EN.
	SPI_CTRL_TX_CRC_EN = 0x800
	// Position of WAIT_FLASH_IDLE_EN field.
	SPI_CTRL_WAIT_FLASH_IDLE_EN_Pos = 0xc
	// Bit mask of WAIT_FLASH_IDLE_EN field.
	SPI_CTRL_WAIT_FLASH_IDLE_EN_Msk = 0x1000
	// Bit WAIT_FLASH_IDLE_EN.
	SPI_CTRL_WAIT_FLASH_IDLE_EN = 0x1000
	// Position of FASTRD_MODE field.
	SPI_CTRL_FASTRD_MODE_Pos = 0xd
	// Bit mask of FASTRD_MODE field.
	SPI_CTRL_FASTRD_MODE_Msk = 0x2000
	// Bit FASTRD_MODE.
	SPI_CTRL_FASTRD_MODE = 0x2000
	// Position of FREAD_DUAL field.
	SPI_CTRL_FREAD_DUAL_Pos = 0xe
	// Bit mask of FREAD_DUAL field.
	SPI_CTRL_FREAD_DUAL_Msk = 0x4000
	// Bit FREAD_DUAL.
	SPI_CTRL_FREAD_DUAL = 0x4000
	// Position of RESANDRES field.
	SPI_CTRL_RESANDRES_Pos = 0xf
	// Bit mask of RESANDRES field.
	SPI_CTRL_RESANDRES_Msk = 0x8000
	// Bit RESANDRES.
	SPI_CTRL_RESANDRES = 0x8000
	// Position of FREAD_QUAD field.
	SPI_CTRL_FREAD_QUAD_Pos = 0x14
	// Bit mask of FREAD_QUAD field.
	SPI_CTRL_FREAD_QUAD_Msk = 0x100000
	// Bit FREAD_QUAD.
	SPI_CTRL_FREAD_QUAD = 0x100000
	// Position of WP field.
	SPI_CTRL_WP_Pos = 0x15
	// Bit mask of WP field.
	SPI_CTRL_WP_Msk = 0x200000
	// Bit WP.
	SPI_CTRL_WP = 0x200000
	// Position of WRSR_2B field.
	SPI_CTRL_WRSR_2B_Pos = 0x16
	// Bit mask of WRSR_2B field.
	SPI_CTRL_WRSR_2B_Msk = 0x400000
	// Bit WRSR_2B.
	SPI_CTRL_WRSR_2B = 0x400000
	// Position of FREAD_DIO field.
	SPI_CTRL_FREAD_DIO_Pos = 0x17
	// Bit mask of FREAD_DIO field.
	SPI_CTRL_FREAD_DIO_Msk = 0x800000
	// Bit FREAD_DIO.
	SPI_CTRL_FREAD_DIO = 0x800000
	// Position of FREAD_QIO field.
	SPI_CTRL_FREAD_QIO_Pos = 0x18
	// Bit mask of FREAD_QIO field.
	SPI_CTRL_FREAD_QIO_Msk = 0x1000000
	// Bit FREAD_QIO.
	SPI_CTRL_FREAD_QIO = 0x1000000
	// Position of RD_BIT_ORDER field.
	SPI_CTRL_RD_BIT_ORDER_Pos = 0x19
	// Bit mask of RD_BIT_ORDER field.
	SPI_CTRL_RD_BIT_ORDER_Msk = 0x2000000
	// Bit RD_BIT_ORDER.
	SPI_CTRL_RD_BIT_ORDER = 0x2000000
	// Position of WR_BIT_ORDER field.
	SPI_CTRL_WR_BIT_ORDER_Pos = 0x1a
	// Bit mask of WR_BIT_ORDER field.
	SPI_CTRL_WR_BIT_ORDER_Msk = 0x4000000
	// Bit WR_BIT_ORDER.
	SPI_CTRL_WR_BIT_ORDER = 0x4000000

	// CTRL1
	// Position of CS_HOLD_DELAY_RES field.
	SPI_CTRL1_CS_HOLD_DELAY_RES_Pos = 0x10
	// Bit mask of CS_HOLD_DELAY_RES field.
	SPI_CTRL1_CS_HOLD_DELAY_RES_Msk = 0xfff0000
	// Position of CS_HOLD_DELAY field.
	SPI_CTRL1_CS_HOLD_DELAY_Pos = 0x1c
	// Bit mask of CS_HOLD_DELAY field.
	SPI_CTRL1_CS_HOLD_DELAY_Msk = 0xf0000000

	// RD_STATUS
	// Position of STATUS field.
	SPI_RD_STATUS_STATUS_Pos = 0x0
	// Bit mask of STATUS field.
	SPI_RD_STATUS_STATUS_Msk = 0xffff
	// Position of WB_MODE field.
	SPI_RD_STATUS_WB_MODE_Pos = 0x10
	// Bit mask of WB_MODE field.
	SPI_RD_STATUS_WB_MODE_Msk = 0xff0000
	// Position of STATUS_EXT field.
	SPI_RD_STATUS_STATUS_EXT_Pos = 0x18
	// Bit mask of STATUS_EXT field.
	SPI_RD_STATUS_STATUS_EXT_Msk = 0xff000000

	// CTRL2
	// Position of SETUP_TIME field.
	SPI_CTRL2_SETUP_TIME_Pos = 0x0
	// Bit mask of SETUP_TIME field.
	SPI_CTRL2_SETUP_TIME_Msk = 0xf
	// Position of HOLD_TIME field.
	SPI_CTRL2_HOLD_TIME_Pos = 0x4
	// Bit mask of HOLD_TIME field.
	SPI_CTRL2_HOLD_TIME_Msk = 0xf0
	// Position of CK_OUT_LOW_MODE field.
	SPI_CTRL2_CK_OUT_LOW_MODE_Pos = 0x8
	// Bit mask of CK_OUT_LOW_MODE field.
	SPI_CTRL2_CK_OUT_LOW_MODE_Msk = 0xf00
	// Position of CK_OUT_HIGH_MODE field.
	SPI_CTRL2_CK_OUT_HIGH_MODE_Pos = 0xc
	// Bit mask of CK_OUT_HIGH_MODE field.
	SPI_CTRL2_CK_OUT_HIGH_MODE_Msk = 0xf000
	// Position of MISO_DELAY_MODE field.
	SPI_CTRL2_MISO_DELAY_MODE_Pos = 0x10
	// Bit mask of MISO_DELAY_MODE field.
	SPI_CTRL2_MISO_DELAY_MODE_Msk = 0x30000
	// Position of MISO_DELAY_NUM field.
	SPI_CTRL2_MISO_DELAY_NUM_Pos = 0x12
	// Bit mask of MISO_DELAY_NUM field.
	SPI_CTRL2_MISO_DELAY_NUM_Msk = 0x1c0000
	// Position of MOSI_DELAY_MODE field.
	SPI_CTRL2_MOSI_DELAY_MODE_Pos = 0x15
	// Bit mask of MOSI_DELAY_MODE field.
	SPI_CTRL2_MOSI_DELAY_MODE_Msk = 0x600000
	// Position of MOSI_DELAY_NUM field.
	SPI_CTRL2_MOSI_DELAY_NUM_Pos = 0x17
	// Bit mask of MOSI_DELAY_NUM field.
	SPI_CTRL2_MOSI_DELAY_NUM_Msk = 0x3800000
	// Position of CS_DELAY_MODE field.
	SPI_CTRL2_CS_DELAY_MODE_Pos = 0x1a
	// Bit mask of CS_DELAY_MODE field.
	SPI_CTRL2_CS_DELAY_MODE_Msk = 0xc000000
	// Position of CS_DELAY_NUM field.
	SPI_CTRL2_CS_DELAY_NUM_Pos = 0x1c
	// Bit mask of CS_DELAY_NUM field.
	SPI_CTRL2_CS_DELAY_NUM_Msk = 0xf0000000

	// CLOCK
	// Position of CLKCNT_L field.
	SPI_CLOCK_CLKCNT_L_Pos = 0x0
	// Bit mask of CLKCNT_L field.
	SPI_CLOCK_CLKCNT_L_Msk = 0x3f
	// Position of CLKCNT_H field.
	SPI_CLOCK_CLKCNT_H_Pos = 0x6
	// Bit mask of CLKCNT_H field.
	SPI_CLOCK_CLKCNT_H_Msk = 0xfc0
	// Position of CLKCNT_N field.
	SPI_CLOCK_CLKCNT_N_Pos = 0xc
	// Bit mask of CLKCNT_N field.
	SPI_CLOCK_CLKCNT_N_Msk = 0x3f000
	// Position of CLKDIV_PRE field.
	SPI_CLOCK_CLKDIV_PRE_Pos = 0x12
	// Bit mask of CLKDIV_PRE field.
	SPI_CLOCK_CLKDIV_PRE_Msk = 0x7ffc0000
	// Position of CLK_EQU_SYSCLK field.
	SPI_CLOCK_CLK_EQU_SYSCLK_Pos = 0x1f
	// Bit mask of CLK_EQU_SYSCLK field.
	SPI_CLOCK_CLK_EQU_SYSCLK_Msk = 0x80000000
	// Bit CLK_EQU_SYSCLK.
	SPI_CLOCK_CLK_EQU_SYSCLK = 0x80000000

	// USER
	// Position of DOUTDIN field.
	SPI_USER_DOUTDIN_Pos = 0x0
	// Bit mask of DOUTDIN field.
	SPI_USER_DOUTDIN_Msk = 0x1
	// Bit DOUTDIN.
	SPI_USER_DOUTDIN = 0x1
	// Position of CS_HOLD field.
	SPI_USER_CS_HOLD_Pos = 0x4
	// Bit mask of CS_HOLD field.
	SPI_USER_CS_HOLD_Msk = 0x10
	// Bit CS_HOLD.
	SPI_USER_CS_HOLD = 0x10
	// Position of CS_SETUP field.
	SPI_USER_CS_SETUP_Pos = 0x5
	// Bit mask of CS_SETUP field.
	SPI_USER_CS_SETUP_Msk = 0x20
	// Bit CS_SETUP.
	SPI_USER_CS_SETUP = 0x20
	// Position of CK_I_EDGE field.
	SPI_USER_CK_I_EDGE_Pos = 0x6
	// Bit mask of CK_I_EDGE field.
	SPI_USER_CK_I_EDGE_Msk = 0x40
	// Bit CK_I_EDGE.
	SPI_USER_CK_I_EDGE = 0x40
	// Position of CK_OUT_EDGE field.
	SPI_USER_CK_OUT_EDGE_Pos = 0x7
	// Bit mask of CK_OUT_EDGE field.
	SPI_USER_CK_OUT_EDGE_Msk = 0x80
	// Bit CK_OUT_EDGE.
	SPI_USER_CK_OUT_EDGE = 0x80
	// Position of RD_BYTE_ORDER field.
	SPI_USER_RD_BYTE_ORDER_Pos = 0xa
	// Bit mask of RD_BYTE_ORDER field.
	SPI_USER_RD_BYTE_ORDER_Msk = 0x400
	// Bit RD_BYTE_ORDER.
	SPI_USER_RD_BYTE_ORDER = 0x400
	// Position of WR_BYTE_ORDER field.
	SPI_USER_WR_BYTE_ORDER_Pos = 0xb
	// Bit mask of WR_BYTE_ORDER field.
	SPI_USER_WR_BYTE_ORDER_Msk = 0x800
	// Bit WR_BYTE_ORDER.
	SPI_USER_WR_BYTE_ORDER = 0x800
	// Position of FWRITE_DUAL field.
	SPI_USER_FWRITE_DUAL_Pos = 0xc
	// Bit mask of FWRITE_DUAL field.
	SPI_USER_FWRITE_DUAL_Msk = 0x1000
	// Bit FWRITE_DUAL.
	SPI_USER_FWRITE_DUAL = 0x1000
	// Position of FWRITE_QUAD field.
	SPI_USER_FWRITE_QUAD_Pos = 0xd
	// Bit mask of FWRITE_QUAD field.
	SPI_USER_FWRITE_QUAD_Msk = 0x2000
	// Bit FWRITE_QUAD.
	SPI_USER_FWRITE_QUAD = 0x2000
	// Position of FWRITE_DIO field.
	SPI_USER_FWRITE_DIO_Pos = 0xe
	// Bit mask of FWRITE_DIO field.
	SPI_USER_FWRITE_DIO_Msk = 0x4000
	// Bit FWRITE_DIO.
	SPI_USER_FWRITE_DIO = 0x4000
	// Position of FWRITE_QIO field.
	SPI_USER_FWRITE_QIO_Pos = 0xf
	// Bit mask of FWRITE_QIO field.
	SPI_USER_FWRITE_QIO_Msk = 0x8000
	// Bit FWRITE_QIO.
	SPI_USER_FWRITE_QIO = 0x8000
	// Position of SIO field.
	SPI_USER_SIO_Pos = 0x10
	// Bit mask of SIO field.
	SPI_USER_SIO_Msk = 0x10000
	// Bit SIO.
	SPI_USER_SIO = 0x10000
	// Position of USR_HOLD_POL field.
	SPI_USER_USR_HOLD_POL_Pos = 0x11
	// Bit mask of USR_HOLD_POL field.
	SPI_USER_USR_HOLD_POL_Msk = 0x20000
	// Bit USR_HOLD_POL.
	SPI_USER_USR_HOLD_POL = 0x20000
	// Position of USR_DOUT_HOLD field.
	SPI_USER_USR_DOUT_HOLD_Pos = 0x12
	// Bit mask of USR_DOUT_HOLD field.
	SPI_USER_USR_DOUT_HOLD_Msk = 0x40000
	// Bit USR_DOUT_HOLD.
	SPI_USER_USR_DOUT_HOLD = 0x40000
	// Position of USR_DIN_HOLD field.
	SPI_USER_USR_DIN_HOLD_Pos = 0x13
	// Bit mask of USR_DIN_HOLD field.
	SPI_USER_USR_DIN_HOLD_Msk = 0x80000
	// Bit USR_DIN_HOLD.
	SPI_USER_USR_DIN_HOLD = 0x80000
	// Position of USR_DUMMY_HOLD field.
	SPI_USER_USR_DUMMY_HOLD_Pos = 0x14
	// Bit mask of USR_DUMMY_HOLD field.
	SPI_USER_USR_DUMMY_HOLD_Msk = 0x100000
	// Bit USR_DUMMY_HOLD.
	SPI_USER_USR_DUMMY_HOLD = 0x100000
	// Position of USR_ADDR_HOLD field.
	SPI_USER_USR_ADDR_HOLD_Pos = 0x15
	// Bit mask of USR_ADDR_HOLD field.
	SPI_USER_USR_ADDR_HOLD_Msk = 0x200000
	// Bit USR_ADDR_HOLD.
	SPI_USER_USR_ADDR_HOLD = 0x200000
	// Position of USR_CMD_HOLD field.
	SPI_USER_USR_CMD_HOLD_Pos = 0x16
	// Bit mask of USR_CMD_HOLD field.
	SPI_USER_USR_CMD_HOLD_Msk = 0x400000
	// Bit USR_CMD_HOLD.
	SPI_USER_USR_CMD_HOLD = 0x400000
	// Position of USR_PREP_HOLD field.
	SPI_USER_USR_PREP_HOLD_Pos = 0x17
	// Bit mask of USR_PREP_HOLD field.
	SPI_USER_USR_PREP_HOLD_Msk = 0x800000
	// Bit USR_PREP_HOLD.
	SPI_USER_USR_PREP_HOLD = 0x800000
	// Position of USR_MISO_HIGHPART field.
	SPI_USER_USR_MISO_HIGHPART_Pos = 0x18
	// Bit mask of USR_MISO_HIGHPART field.
	SPI_USER_USR_MISO_HIGHPART_Msk = 0x1000000
	// Bit USR_MISO_HIGHPART.
	SPI_USER_USR_MISO_HIGHPART = 0x1000000
	// Position of USR_MOSI_HIGHPART field.
	SPI_USER_USR_MOSI_HIGHPART_Pos = 0x19
	// Bit mask of USR_MOSI_HIGHPART field.
	SPI_USER_USR_MOSI_HIGHPART_Msk = 0x2000000
	// Bit USR_MOSI_HIGHPART.
	SPI_USER_USR_MOSI_HIGHPART = 0x2000000
	// Position of USR_DUMMY_IDLE field.
	SPI_USER_USR_DUMMY_IDLE_Pos = 0x1a
	// Bit mask of USR_DUMMY_IDLE field.
	SPI_USER_USR_DUMMY_IDLE_Msk = 0x4000000
	// Bit USR_DUMMY_IDLE.
	SPI_USER_USR_DUMMY_IDLE = 0x4000000
	// Position of USR_MOSI field.
	SPI_USER_USR_MOSI_Pos = 0x1b
	// Bit mask of USR_MOSI field.
	SPI_USER_USR_MOSI_Msk = 0x8000000
	// Bit USR_MOSI.
	SPI_USER_USR_MOSI = 0x8000000
	// Position of USR_MISO field.
	SPI_USER_USR_MISO_Pos = 0x1c
	// Bit mask of USR_MISO field.
	SPI_USER_USR_MISO_Msk = 0x10000000
	// Bit USR_MISO.
	SPI_USER_USR_MISO = 0x10000000
	// Position of USR_DUMMY field.
	SPI_USER_USR_DUMMY_Pos = 0x1d
	// Bit mask of USR_DUMMY field.
	SPI_USER_USR_DUMMY_Msk = 0x20000000
	// Bit USR_DUMMY.
	SPI_USER_USR_DUMMY = 0x20000000
	// Position of USR_ADDR field.
	SPI_USER_USR_ADDR_Pos = 0x1e
	// Bit mask of USR_ADDR field.
	SPI_USER_USR_ADDR_Msk = 0x40000000
	// Bit USR_ADDR.
	SPI_USER_USR_ADDR = 0x40000000
	// Position of USR_COMMAND field.
	SPI_USER_USR_COMMAND_Pos = 0x1f
	// Bit mask of USR_COMMAND field.
	SPI_USER_USR_COMMAND_Msk = 0x80000000
	// Bit USR_COMMAND.
	SPI_USER_USR_COMMAND = 0x80000000

	// USER1
	// Position of USR_DUMMY_CYCLELEN field.
	SPI_USER1_USR_DUMMY_CYCLELEN_Pos = 0x0
	// Bit mask of USR_DUMMY_CYCLELEN field.
	SPI_USER1_USR_DUMMY_CYCLELEN_Msk = 0xff
	// Position of USR_ADDR_BITLEN field.
	SPI_USER1_USR_ADDR_BITLEN_Pos = 0x1a
	// Bit mask of USR_ADDR_BITLEN field.
	SPI_USER1_USR_ADDR_BITLEN_Msk = 0xfc000000

	// USER2
	// Position of USR_COMMAND_VALUE field.
	SPI_USER2_USR_COMMAND_VALUE_Pos = 0x0
	// Bit mask of USR_COMMAND_VALUE field.
	SPI_USER2_USR_COMMAND_VALUE_Msk = 0xffff
	// Position of USR_COMMAND_BITLEN field.
	SPI_USER2_USR_COMMAND_BITLEN_Pos = 0x1c
	// Bit mask of USR_COMMAND_BITLEN field.
	SPI_USER2_USR_COMMAND_BITLEN_Msk = 0xf0000000

	// MOSI_DLEN
	// Position of USR_MOSI_DBITLEN field.
	SPI_MOSI_DLEN_USR_MOSI_DBITLEN_Pos = 0x0
	// Bit mask of USR_MOSI_DBITLEN field.
	SPI_MOSI_DLEN_USR_MOSI_DBITLEN_Msk = 0xffffff

	// MISO_DLEN
	// Position of USR_MISO_DBITLEN field.
	SPI_MISO_DLEN_USR_MISO_DBITLEN_Pos = 0x0
	// Bit mask of USR_MISO_DBITLEN field.
	SPI_MISO_DLEN_USR_MISO_DBITLEN_Msk = 0xffffff

	// SLV_WR_STATUS
	// Position of SLV_WR_ST field.
	SPI_SLV_WR_STATUS_SLV_WR_ST_Pos = 0x0
	// Bit mask of SLV_WR_ST field.
	SPI_SLV_WR_STATUS_SLV_WR_ST_Msk = 0xffffffff

	// PIN
	// Position of CS0_DIS field.
	SPI_PIN_CS0_DIS_Pos = 0x0
	// Bit mask of CS0_DIS field.
	SPI_PIN_CS0_DIS_Msk = 0x1
	// Bit CS0_DIS.
	SPI_PIN_CS0_DIS = 0x1
	// Position of CS1_DIS field.
	SPI_PIN_CS1_DIS_Pos = 0x1
	// Bit mask of CS1_DIS field.
	SPI_PIN_CS1_DIS_Msk = 0x2
	// Bit CS1_DIS.
	SPI_PIN_CS1_DIS = 0x2
	// Position of CS2_DIS field.
	SPI_PIN_CS2_DIS_Pos = 0x2
	// Bit mask of CS2_DIS field.
	SPI_PIN_CS2_DIS_Msk = 0x4
	// Bit CS2_DIS.
	SPI_PIN_CS2_DIS = 0x4
	// Position of CK_DIS field.
	SPI_PIN_CK_DIS_Pos = 0x5
	// Bit mask of CK_DIS field.
	SPI_PIN_CK_DIS_Msk = 0x20
	// Bit CK_DIS.
	SPI_PIN_CK_DIS = 0x20
	// Position of MASTER_CS_POL field.
	SPI_PIN_MASTER_CS_POL_Pos = 0x6
	// Bit mask of MASTER_CS_POL field.
	SPI_PIN_MASTER_CS_POL_Msk = 0x1c0
	// Position of MASTER_CK_SEL field.
	SPI_PIN_MASTER_CK_SEL_Pos = 0xb
	// Bit mask of MASTER_CK_SEL field.
	SPI_PIN_MASTER_CK_SEL_Msk = 0x3800
	// Position of CK_IDLE_EDGE field.
	SPI_PIN_CK_IDLE_EDGE_Pos = 0x1d
	// Bit mask of CK_IDLE_EDGE field.
	SPI_PIN_CK_IDLE_EDGE_Msk = 0x20000000
	// Bit CK_IDLE_EDGE.
	SPI_PIN_CK_IDLE_EDGE = 0x20000000
	// Position of CS_KEEP_ACTIVE field.
	SPI_PIN_CS_KEEP_ACTIVE_Pos = 0x1e
	// Bit mask of CS_KEEP_ACTIVE field.
	SPI_PIN_CS_KEEP_ACTIVE_Msk = 0x40000000
	// Bit CS_KEEP_ACTIVE.
	SPI_PIN_CS_KEEP_ACTIVE = 0x40000000

	// SLAVE
	// Position of SLV_RD_BUF_DONE field.
	SPI_SLAVE_SLV_RD_BUF_DONE_Pos = 0x0
	// Bit mask of SLV_RD_BUF_DONE field.
	SPI_SLAVE_SLV_RD_BUF_DONE_Msk = 0x1
	// Bit SLV_RD_BUF_DONE.
	SPI_SLAVE_SLV_RD_BUF_DONE = 0x1
	// Position of SLV_WR_BUF_DONE field.
	SPI_SLAVE_SLV_WR_BUF_DONE_Pos = 0x1
	// Bit mask of SLV_WR_BUF_DONE field.
	SPI_SLAVE_SLV_WR_BUF_DONE_Msk = 0x2
	// Bit SLV_WR_BUF_DONE.
	SPI_SLAVE_SLV_WR_BUF_DONE = 0x2
	// Position of SLV_RD_STA_DONE field.
	SPI_SLAVE_SLV_RD_STA_DONE_Pos = 0x2
	// Bit mask of SLV_RD_STA_DONE field.
	SPI_SLAVE_SLV_RD_STA_DONE_Msk = 0x4
	// Bit SLV_RD_STA_DONE.
	SPI_SLAVE_SLV_RD_STA_DONE = 0x4
	// Position of SLV_WR_STA_DONE field.
	SPI_SLAVE_SLV_WR_STA_DONE_Pos = 0x3
	// Bit mask of SLV_WR_STA_DONE field.
	SPI_SLAVE_SLV_WR_STA_DONE_Msk = 0x8
	// Bit SLV_WR_STA_DONE.
	SPI_SLAVE_SLV_WR_STA_DONE = 0x8
	// Position of TRANS_DONE field.
	SPI_SLAVE_TRANS_DONE_Pos = 0x4
	// Bit mask of TRANS_DONE field.
	SPI_SLAVE_TRANS_DONE_Msk = 0x10
	// Bit TRANS_DONE.
	SPI_SLAVE_TRANS_DONE = 0x10
	// Position of INT_EN field.
	SPI_SLAVE_INT_EN_Pos = 0x5
	// Bit mask of INT_EN field.
	SPI_SLAVE_INT_EN_Msk = 0x3e0
	// Position of CS_I_MODE field.
	SPI_SLAVE_CS_I_MODE_Pos = 0xa
	// Bit mask of CS_I_MODE field.
	SPI_SLAVE_CS_I_MODE_Msk = 0xc00
	// Position of SLV_LAST_COMMAND field.
	SPI_SLAVE_SLV_LAST_COMMAND_Pos = 0x11
	// Bit mask of SLV_LAST_COMMAND field.
	SPI_SLAVE_SLV_LAST_COMMAND_Msk = 0xe0000
	// Position of SLV_LAST_STATE field.
	SPI_SLAVE_SLV_LAST_STATE_Pos = 0x14
	// Bit mask of SLV_LAST_STATE field.
	SPI_SLAVE_SLV_LAST_STATE_Msk = 0x700000
	// Position of TRANS_CNT field.
	SPI_SLAVE_TRANS_CNT_Pos = 0x17
	// Bit mask of TRANS_CNT field.
	SPI_SLAVE_TRANS_CNT_Msk = 0x7800000
	// Position of SLV_CMD_DEFINE field.
	SPI_SLAVE_SLV_CMD_DEFINE_Pos = 0x1b
	// Bit mask of SLV_CMD_DEFINE field.
	SPI_SLAVE_SLV_CMD_DEFINE_Msk = 0x8000000
	// Bit SLV_CMD_DEFINE.
	SPI_SLAVE_SLV_CMD_DEFINE = 0x8000000
	// Position of SLV_WR_RD_STA_EN field.
	SPI_SLAVE_SLV_WR_RD_STA_EN_Pos = 0x1c
	// Bit mask of SLV_WR_RD_STA_EN field.
	SPI_SLAVE_SLV_WR_RD_STA_EN_Msk = 0x10000000
	// Bit SLV_WR_RD_STA_EN.
	SPI_SLAVE_SLV_WR_RD_STA_EN = 0x10000000
	// Position of SLV_WR_RD_BUF_EN field.
	SPI_SLAVE_SLV_WR_RD_BUF_EN_Pos = 0x1d
	// Bit mask of SLV_WR_RD_BUF_EN field.
	SPI_SLAVE_SLV_WR_RD_BUF_EN_Msk = 0x20000000
	// Bit SLV_WR_RD_BUF_EN.
	SPI_SLAVE_SLV_WR_RD_BUF_EN = 0x20000000
	// Position of MODE field.
	SPI_SLAVE_MODE_Pos = 0x1e
	// Bit mask of MODE field.
	SPI_SLAVE_MODE_Msk = 0x40000000
	// Bit MODE.
	SPI_SLAVE_MODE = 0x40000000
	// Position of SYNC_RESET field.
	SPI_SLAVE_SYNC_RESET_Pos = 0x1f
	// Bit mask of SYNC_RESET field.
	SPI_SLAVE_SYNC_RESET_Msk = 0x80000000
	// Bit SYNC_RESET.
	SPI_SLAVE_SYNC_RESET = 0x80000000

	// SLAVE1
	// Position of SLV_RDBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDBUF_DUMMY_EN_Pos = 0x0
	// Bit mask of SLV_RDBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDBUF_DUMMY_EN_Msk = 0x1
	// Bit SLV_RDBUF_DUMMY_EN.
	SPI_SLAVE1_SLV_RDBUF_DUMMY_EN = 0x1
	// Position of SLV_WRBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRBUF_DUMMY_EN_Pos = 0x1
	// Bit mask of SLV_WRBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRBUF_DUMMY_EN_Msk = 0x2
	// Bit SLV_WRBUF_DUMMY_EN.
	SPI_SLAVE1_SLV_WRBUF_DUMMY_EN = 0x2
	// Position of SLV_RDSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDSTA_DUMMY_EN_Pos = 0x2
	// Bit mask of SLV_RDSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDSTA_DUMMY_EN_Msk = 0x4
	// Bit SLV_RDSTA_DUMMY_EN.
	SPI_SLAVE1_SLV_RDSTA_DUMMY_EN = 0x4
	// Position of SLV_WRSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRSTA_DUMMY_EN_Pos = 0x3
	// Bit mask of SLV_WRSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRSTA_DUMMY_EN_Msk = 0x8
	// Bit SLV_WRSTA_DUMMY_EN.
	SPI_SLAVE1_SLV_WRSTA_DUMMY_EN = 0x8
	// Position of SLV_WR_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_WR_ADDR_BITLEN_Pos = 0x4
	// Bit mask of SLV_WR_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_WR_ADDR_BITLEN_Msk = 0x3f0
	// Position of SLV_RD_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_RD_ADDR_BITLEN_Pos = 0xa
	// Bit mask of SLV_RD_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_RD_ADDR_BITLEN_Msk = 0xfc00
	// Position of SLV_STATUS_READBACK field.
	SPI_SLAVE1_SLV_STATUS_READBACK_Pos = 0x19
	// Bit mask of SLV_STATUS_READBACK field.
	SPI_SLAVE1_SLV_STATUS_READBACK_Msk = 0x2000000
	// Bit SLV_STATUS_READBACK.
	SPI_SLAVE1_SLV_STATUS_READBACK = 0x2000000
	// Position of SLV_STATUS_FAST_EN field.
	SPI_SLAVE1_SLV_STATUS_FAST_EN_Pos = 0x1a
	// Bit mask of SLV_STATUS_FAST_EN field.
	SPI_SLAVE1_SLV_STATUS_FAST_EN_Msk = 0x4000000
	// Bit SLV_STATUS_FAST_EN.
	SPI_SLAVE1_SLV_STATUS_FAST_EN = 0x4000000
	// Position of SLV_STATUS_BITLEN field.
	SPI_SLAVE1_SLV_STATUS_BITLEN_Pos = 0x1b
	// Bit mask of SLV_STATUS_BITLEN field.
	SPI_SLAVE1_SLV_STATUS_BITLEN_Msk = 0xf8000000

	// SLAVE2
	// Position of SLV_RDSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDSTA_DUMMY_CYCLELEN_Pos = 0x0
	// Bit mask of SLV_RDSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDSTA_DUMMY_CYCLELEN_Msk = 0xff
	// Position of SLV_WRSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRSTA_DUMMY_CYCLELEN_Pos = 0x8
	// Bit mask of SLV_WRSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRSTA_DUMMY_CYCLELEN_Msk = 0xff00
	// Position of SLV_RDBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDBUF_DUMMY_CYCLELEN_Pos = 0x10
	// Bit mask of SLV_RDBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDBUF_DUMMY_CYCLELEN_Msk = 0xff0000
	// Position of SLV_WRBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRBUF_DUMMY_CYCLELEN_Pos = 0x18
	// Bit mask of SLV_WRBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRBUF_DUMMY_CYCLELEN_Msk = 0xff000000

	// SLAVE3
	// Position of SLV_RDBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDBUF_CMD_VALUE_Pos = 0x0
	// Bit mask of SLV_RDBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDBUF_CMD_VALUE_Msk = 0xff
	// Position of SLV_WRBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRBUF_CMD_VALUE_Pos = 0x8
	// Bit mask of SLV_WRBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRBUF_CMD_VALUE_Msk = 0xff00
	// Position of SLV_RDSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDSTA_CMD_VALUE_Pos = 0x10
	// Bit mask of SLV_RDSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDSTA_CMD_VALUE_Msk = 0xff0000
	// Position of SLV_WRSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRSTA_CMD_VALUE_Pos = 0x18
	// Bit mask of SLV_WRSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRSTA_CMD_VALUE_Msk = 0xff000000

	// SLV_WRBUF_DLEN
	// Position of SLV_WRBUF_DBITLEN field.
	SPI_SLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN_Pos = 0x0
	// Bit mask of SLV_WRBUF_DBITLEN field.
	SPI_SLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN_Msk = 0xffffff

	// SLV_RDBUF_DLEN
	// Position of SLV_RDBUF_DBITLEN field.
	SPI_SLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN_Pos = 0x0
	// Bit mask of SLV_RDBUF_DBITLEN field.
	SPI_SLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN_Msk = 0xffffff

	// CACHE_FCTRL
	// Position of CACHE_REQ_EN field.
	SPI_CACHE_FCTRL_CACHE_REQ_EN_Pos = 0x0
	// Bit mask of CACHE_REQ_EN field.
	SPI_CACHE_FCTRL_CACHE_REQ_EN_Msk = 0x1
	// Bit CACHE_REQ_EN.
	SPI_CACHE_FCTRL_CACHE_REQ_EN = 0x1
	// Position of CACHE_USR_CMD_4BYTE field.
	SPI_CACHE_FCTRL_CACHE_USR_CMD_4BYTE_Pos = 0x1
	// Bit mask of CACHE_USR_CMD_4BYTE field.
	SPI_CACHE_FCTRL_CACHE_USR_CMD_4BYTE_Msk = 0x2
	// Bit CACHE_USR_CMD_4BYTE.
	SPI_CACHE_FCTRL_CACHE_USR_CMD_4BYTE = 0x2
	// Position of CACHE_FLASH_USR_CMD field.
	SPI_CACHE_FCTRL_CACHE_FLASH_USR_CMD_Pos = 0x2
	// Bit mask of CACHE_FLASH_USR_CMD field.
	SPI_CACHE_FCTRL_CACHE_FLASH_USR_CMD_Msk = 0x4
	// Bit CACHE_FLASH_USR_CMD.
	SPI_CACHE_FCTRL_CACHE_FLASH_USR_CMD = 0x4
	// Position of CACHE_FLASH_PES_EN field.
	SPI_CACHE_FCTRL_CACHE_FLASH_PES_EN_Pos = 0x3
	// Bit mask of CACHE_FLASH_PES_EN field.
	SPI_CACHE_FCTRL_CACHE_FLASH_PES_EN_Msk = 0x8
	// Bit CACHE_FLASH_PES_EN.
	SPI_CACHE_FCTRL_CACHE_FLASH_PES_EN = 0x8

	// CACHE_SCTRL
	// Position of USR_SRAM_DIO field.
	SPI_CACHE_SCTRL_USR_SRAM_DIO_Pos = 0x1
	// Bit mask of USR_SRAM_DIO field.
	SPI_CACHE_SCTRL_USR_SRAM_DIO_Msk = 0x2
	// Bit USR_SRAM_DIO.
	SPI_CACHE_SCTRL_USR_SRAM_DIO = 0x2
	// Position of USR_SRAM_QIO field.
	SPI_CACHE_SCTRL_USR_SRAM_QIO_Pos = 0x2
	// Bit mask of USR_SRAM_QIO field.
	SPI_CACHE_SCTRL_USR_SRAM_QIO_Msk = 0x4
	// Bit USR_SRAM_QIO.
	SPI_CACHE_SCTRL_USR_SRAM_QIO = 0x4
	// Position of USR_WR_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_WR_SRAM_DUMMY_Pos = 0x3
	// Bit mask of USR_WR_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_WR_SRAM_DUMMY_Msk = 0x8
	// Bit USR_WR_SRAM_DUMMY.
	SPI_CACHE_SCTRL_USR_WR_SRAM_DUMMY = 0x8
	// Position of USR_RD_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_RD_SRAM_DUMMY_Pos = 0x4
	// Bit mask of USR_RD_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_RD_SRAM_DUMMY_Msk = 0x10
	// Bit USR_RD_SRAM_DUMMY.
	SPI_CACHE_SCTRL_USR_RD_SRAM_DUMMY = 0x10
	// Position of CACHE_SRAM_USR_RCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_RCMD_Pos = 0x5
	// Bit mask of CACHE_SRAM_USR_RCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_RCMD_Msk = 0x20
	// Bit CACHE_SRAM_USR_RCMD.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_RCMD = 0x20
	// Position of SRAM_BYTES_LEN field.
	SPI_CACHE_SCTRL_SRAM_BYTES_LEN_Pos = 0x6
	// Bit mask of SRAM_BYTES_LEN field.
	SPI_CACHE_SCTRL_SRAM_BYTES_LEN_Msk = 0x3fc0
	// Position of SRAM_DUMMY_CYCLELEN field.
	SPI_CACHE_SCTRL_SRAM_DUMMY_CYCLELEN_Pos = 0xe
	// Bit mask of SRAM_DUMMY_CYCLELEN field.
	SPI_CACHE_SCTRL_SRAM_DUMMY_CYCLELEN_Msk = 0x3fc000
	// Position of SRAM_ADDR_BITLEN field.
	SPI_CACHE_SCTRL_SRAM_ADDR_BITLEN_Pos = 0x16
	// Bit mask of SRAM_ADDR_BITLEN field.
	SPI_CACHE_SCTRL_SRAM_ADDR_BITLEN_Msk = 0xfc00000
	// Position of CACHE_SRAM_USR_WCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_WCMD_Pos = 0x1c
	// Bit mask of CACHE_SRAM_USR_WCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_WCMD_Msk = 0x10000000
	// Bit CACHE_SRAM_USR_WCMD.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_WCMD = 0x10000000

	// SRAM_CMD
	// Position of SRAM_DIO field.
	SPI_SRAM_CMD_SRAM_DIO_Pos = 0x0
	// Bit mask of SRAM_DIO field.
	SPI_SRAM_CMD_SRAM_DIO_Msk = 0x1
	// Bit SRAM_DIO.
	SPI_SRAM_CMD_SRAM_DIO = 0x1
	// Position of SRAM_QIO field.
	SPI_SRAM_CMD_SRAM_QIO_Pos = 0x1
	// Bit mask of SRAM_QIO field.
	SPI_SRAM_CMD_SRAM_QIO_Msk = 0x2
	// Bit SRAM_QIO.
	SPI_SRAM_CMD_SRAM_QIO = 0x2
	// Position of SRAM_RSTIO field.
	SPI_SRAM_CMD_SRAM_RSTIO_Pos = 0x4
	// Bit mask of SRAM_RSTIO field.
	SPI_SRAM_CMD_SRAM_RSTIO_Msk = 0x10
	// Bit SRAM_RSTIO.
	SPI_SRAM_CMD_SRAM_RSTIO = 0x10

	// SRAM_DRD_CMD
	// Position of CACHE_SRAM_USR_RD_CMD_VALUE field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE_Pos = 0x0
	// Bit mask of CACHE_SRAM_USR_RD_CMD_VALUE field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE_Msk = 0xffff
	// Position of CACHE_SRAM_USR_RD_CMD_BITLEN field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN_Pos = 0x1c
	// Bit mask of CACHE_SRAM_USR_RD_CMD_BITLEN field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN_Msk = 0xf0000000

	// SRAM_DWR_CMD
	// Position of CACHE_SRAM_USR_WR_CMD_VALUE field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE_Pos = 0x0
	// Bit mask of CACHE_SRAM_USR_WR_CMD_VALUE field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE_Msk = 0xffff
	// Position of CACHE_SRAM_USR_WR_CMD_BITLEN field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN_Pos = 0x1c
	// Bit mask of CACHE_SRAM_USR_WR_CMD_BITLEN field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN_Msk = 0xf0000000

	// SLV_RD_BIT
	// Position of SLV_RDATA_BIT field.
	SPI_SLV_RD_BIT_SLV_RDATA_BIT_Pos = 0x0
	// Bit mask of SLV_RDATA_BIT field.
	SPI_SLV_RD_BIT_SLV_RDATA_BIT_Msk = 0xffffff

	// W0
	// Position of BUF0 field.
	SPI_W0_BUF0_Pos = 0x0
	// Bit mask of BUF0 field.
	SPI_W0_BUF0_Msk = 0xffffffff

	// W1
	// Position of BUF1 field.
	SPI_W1_BUF1_Pos = 0x0
	// Bit mask of BUF1 field.
	SPI_W1_BUF1_Msk = 0xffffffff

	// W2
	// Position of BUF2 field.
	SPI_W2_BUF2_Pos = 0x0
	// Bit mask of BUF2 field.
	SPI_W2_BUF2_Msk = 0xffffffff

	// W3
	// Position of BUF3 field.
	SPI_W3_BUF3_Pos = 0x0
	// Bit mask of BUF3 field.
	SPI_W3_BUF3_Msk = 0xffffffff

	// W4
	// Position of BUF4 field.
	SPI_W4_BUF4_Pos = 0x0
	// Bit mask of BUF4 field.
	SPI_W4_BUF4_Msk = 0xffffffff

	// W5
	// Position of BUF5 field.
	SPI_W5_BUF5_Pos = 0x0
	// Bit mask of BUF5 field.
	SPI_W5_BUF5_Msk = 0xffffffff

	// W6
	// Position of BUF6 field.
	SPI_W6_BUF6_Pos = 0x0
	// Bit mask of BUF6 field.
	SPI_W6_BUF6_Msk = 0xffffffff

	// W7
	// Position of BUF7 field.
	SPI_W7_BUF7_Pos = 0x0
	// Bit mask of BUF7 field.
	SPI_W7_BUF7_Msk = 0xffffffff

	// W8
	// Position of BUF8 field.
	SPI_W8_BUF8_Pos = 0x0
	// Bit mask of BUF8 field.
	SPI_W8_BUF8_Msk = 0xffffffff

	// W9
	// Position of BUF9 field.
	SPI_W9_BUF9_Pos = 0x0
	// Bit mask of BUF9 field.
	SPI_W9_BUF9_Msk = 0xffffffff

	// W10
	// Position of BUF10 field.
	SPI_W10_BUF10_Pos = 0x0
	// Bit mask of BUF10 field.
	SPI_W10_BUF10_Msk = 0xffffffff

	// W11
	// Position of BUF11 field.
	SPI_W11_BUF11_Pos = 0x0
	// Bit mask of BUF11 field.
	SPI_W11_BUF11_Msk = 0xffffffff

	// W12
	// Position of BUF12 field.
	SPI_W12_BUF12_Pos = 0x0
	// Bit mask of BUF12 field.
	SPI_W12_BUF12_Msk = 0xffffffff

	// W13
	// Position of BUF13 field.
	SPI_W13_BUF13_Pos = 0x0
	// Bit mask of BUF13 field.
	SPI_W13_BUF13_Msk = 0xffffffff

	// W14
	// Position of BUF14 field.
	SPI_W14_BUF14_Pos = 0x0
	// Bit mask of BUF14 field.
	SPI_W14_BUF14_Msk = 0xffffffff

	// W15
	// Position of BUF15 field.
	SPI_W15_BUF15_Pos = 0x0
	// Bit mask of BUF15 field.
	SPI_W15_BUF15_Msk = 0xffffffff

	// TX_CRC
	// Position of DATA field.
	SPI_TX_CRC_DATA_Pos = 0x0
	// Bit mask of DATA field.
	SPI_TX_CRC_DATA_Msk = 0xffffffff

	// EXT0
	// Position of T_PP_TIME field.
	SPI_EXT0_T_PP_TIME_Pos = 0x0
	// Bit mask of T_PP_TIME field.
	SPI_EXT0_T_PP_TIME_Msk = 0xfff
	// Position of T_PP_SHIFT field.
	SPI_EXT0_T_PP_SHIFT_Pos = 0x10
	// Bit mask of T_PP_SHIFT field.
	SPI_EXT0_T_PP_SHIFT_Msk = 0xf0000
	// Position of T_PP_ENA field.
	SPI_EXT0_T_PP_ENA_Pos = 0x1f
	// Bit mask of T_PP_ENA field.
	SPI_EXT0_T_PP_ENA_Msk = 0x80000000
	// Bit T_PP_ENA.
	SPI_EXT0_T_PP_ENA = 0x80000000

	// EXT1
	// Position of T_ERASE_TIME field.
	SPI_EXT1_T_ERASE_TIME_Pos = 0x0
	// Bit mask of T_ERASE_TIME field.
	SPI_EXT1_T_ERASE_TIME_Msk = 0xfff
	// Position of T_ERASE_SHIFT field.
	SPI_EXT1_T_ERASE_SHIFT_Pos = 0x10
	// Bit mask of T_ERASE_SHIFT field.
	SPI_EXT1_T_ERASE_SHIFT_Msk = 0xf0000
	// Position of T_ERASE_ENA field.
	SPI_EXT1_T_ERASE_ENA_Pos = 0x1f
	// Bit mask of T_ERASE_ENA field.
	SPI_EXT1_T_ERASE_ENA_Msk = 0x80000000
	// Bit T_ERASE_ENA.
	SPI_EXT1_T_ERASE_ENA = 0x80000000

	// EXT2
	// Position of ST field.
	SPI_EXT2_ST_Pos = 0x0
	// Bit mask of ST field.
	SPI_EXT2_ST_Msk = 0x7

	// EXT3
	// Position of INT_HOLD_ENA field.
	SPI_EXT3_INT_HOLD_ENA_Pos = 0x0
	// Bit mask of INT_HOLD_ENA field.
	SPI_EXT3_INT_HOLD_ENA_Msk = 0x3

	// DMA_CONF
	// Position of IN_RST field.
	SPI_DMA_CONF_IN_RST_Pos = 0x2
	// Bit mask of IN_RST field.
	SPI_DMA_CONF_IN_RST_Msk = 0x4
	// Bit IN_RST.
	SPI_DMA_CONF_IN_RST = 0x4
	// Position of OUT_RST field.
	SPI_DMA_CONF_OUT_RST_Pos = 0x3
	// Bit mask of OUT_RST field.
	SPI_DMA_CONF_OUT_RST_Msk = 0x8
	// Bit OUT_RST.
	SPI_DMA_CONF_OUT_RST = 0x8
	// Position of AHBM_FIFO_RST field.
	SPI_DMA_CONF_AHBM_FIFO_RST_Pos = 0x4
	// Bit mask of AHBM_FIFO_RST field.
	SPI_DMA_CONF_AHBM_FIFO_RST_Msk = 0x10
	// Bit AHBM_FIFO_RST.
	SPI_DMA_CONF_AHBM_FIFO_RST = 0x10
	// Position of AHBM_RST field.
	SPI_DMA_CONF_AHBM_RST_Pos = 0x5
	// Bit mask of AHBM_RST field.
	SPI_DMA_CONF_AHBM_RST_Msk = 0x20
	// Bit AHBM_RST.
	SPI_DMA_CONF_AHBM_RST = 0x20
	// Position of IN_LOOP_TEST field.
	SPI_DMA_CONF_IN_LOOP_TEST_Pos = 0x6
	// Bit mask of IN_LOOP_TEST field.
	SPI_DMA_CONF_IN_LOOP_TEST_Msk = 0x40
	// Bit IN_LOOP_TEST.
	SPI_DMA_CONF_IN_LOOP_TEST = 0x40
	// Position of OUT_LOOP_TEST field.
	SPI_DMA_CONF_OUT_LOOP_TEST_Pos = 0x7
	// Bit mask of OUT_LOOP_TEST field.
	SPI_DMA_CONF_OUT_LOOP_TEST_Msk = 0x80
	// Bit OUT_LOOP_TEST.
	SPI_DMA_CONF_OUT_LOOP_TEST = 0x80
	// Position of OUT_AUTO_WRBACK field.
	SPI_DMA_CONF_OUT_AUTO_WRBACK_Pos = 0x8
	// Bit mask of OUT_AUTO_WRBACK field.
	SPI_DMA_CONF_OUT_AUTO_WRBACK_Msk = 0x100
	// Bit OUT_AUTO_WRBACK.
	SPI_DMA_CONF_OUT_AUTO_WRBACK = 0x100
	// Position of OUT_EOF_MODE field.
	SPI_DMA_CONF_OUT_EOF_MODE_Pos = 0x9
	// Bit mask of OUT_EOF_MODE field.
	SPI_DMA_CONF_OUT_EOF_MODE_Msk = 0x200
	// Bit OUT_EOF_MODE.
	SPI_DMA_CONF_OUT_EOF_MODE = 0x200
	// Position of OUTDSCR_BURST_EN field.
	SPI_DMA_CONF_OUTDSCR_BURST_EN_Pos = 0xa
	// Bit mask of OUTDSCR_BURST_EN field.
	SPI_DMA_CONF_OUTDSCR_BURST_EN_Msk = 0x400
	// Bit OUTDSCR_BURST_EN.
	SPI_DMA_CONF_OUTDSCR_BURST_EN = 0x400
	// Position of INDSCR_BURST_EN field.
	SPI_DMA_CONF_INDSCR_BURST_EN_Pos = 0xb
	// Bit mask of INDSCR_BURST_EN field.
	SPI_DMA_CONF_INDSCR_BURST_EN_Msk = 0x800
	// Bit INDSCR_BURST_EN.
	SPI_DMA_CONF_INDSCR_BURST_EN = 0x800
	// Position of OUT_DATA_BURST_EN field.
	SPI_DMA_CONF_OUT_DATA_BURST_EN_Pos = 0xc
	// Bit mask of OUT_DATA_BURST_EN field.
	SPI_DMA_CONF_OUT_DATA_BURST_EN_Msk = 0x1000
	// Bit OUT_DATA_BURST_EN.
	SPI_DMA_CONF_OUT_DATA_BURST_EN = 0x1000
	// Position of DMA_RX_STOP field.
	SPI_DMA_CONF_DMA_RX_STOP_Pos = 0xe
	// Bit mask of DMA_RX_STOP field.
	SPI_DMA_CONF_DMA_RX_STOP_Msk = 0x4000
	// Bit DMA_RX_STOP.
	SPI_DMA_CONF_DMA_RX_STOP = 0x4000
	// Position of DMA_TX_STOP field.
	SPI_DMA_CONF_DMA_TX_STOP_Pos = 0xf
	// Bit mask of DMA_TX_STOP field.
	SPI_DMA_CONF_DMA_TX_STOP_Msk = 0x8000
	// Bit DMA_TX_STOP.
	SPI_DMA_CONF_DMA_TX_STOP = 0x8000
	// Position of DMA_CONTINUE field.
	SPI_DMA_CONF_DMA_CONTINUE_Pos = 0x10
	// Bit mask of DMA_CONTINUE field.
	SPI_DMA_CONF_DMA_CONTINUE_Msk = 0x10000
	// Bit DMA_CONTINUE.
	SPI_DMA_CONF_DMA_CONTINUE = 0x10000

	// DMA_OUT_LINK
	// Position of OUTLINK_ADDR field.
	SPI_DMA_OUT_LINK_OUTLINK_ADDR_Pos = 0x0
	// Bit mask of OUTLINK_ADDR field.
	SPI_DMA_OUT_LINK_OUTLINK_ADDR_Msk = 0xfffff
	// Position of OUTLINK_STOP field.
	SPI_DMA_OUT_LINK_OUTLINK_STOP_Pos = 0x1c
	// Bit mask of OUTLINK_STOP field.
	SPI_DMA_OUT_LINK_OUTLINK_STOP_Msk = 0x10000000
	// Bit OUTLINK_STOP.
	SPI_DMA_OUT_LINK_OUTLINK_STOP = 0x10000000
	// Position of OUTLINK_START field.
	SPI_DMA_OUT_LINK_OUTLINK_START_Pos = 0x1d
	// Bit mask of OUTLINK_START field.
	SPI_DMA_OUT_LINK_OUTLINK_START_Msk = 0x20000000
	// Bit OUTLINK_START.
	SPI_DMA_OUT_LINK_OUTLINK_START = 0x20000000
	// Position of OUTLINK_RESTART field.
	SPI_DMA_OUT_LINK_OUTLINK_RESTART_Pos = 0x1e
	// Bit mask of OUTLINK_RESTART field.
	SPI_DMA_OUT_LINK_OUTLINK_RESTART_Msk = 0x40000000
	// Bit OUTLINK_RESTART.
	SPI_DMA_OUT_LINK_OUTLINK_RESTART = 0x40000000

	// DMA_IN_LINK
	// Position of INLINK_ADDR field.
	SPI_DMA_IN_LINK_INLINK_ADDR_Pos = 0x0
	// Bit mask of INLINK_ADDR field.
	SPI_DMA_IN_LINK_INLINK_ADDR_Msk = 0xfffff
	// Position of INLINK_AUTO_RET field.
	SPI_DMA_IN_LINK_INLINK_AUTO_RET_Pos = 0x14
	// Bit mask of INLINK_AUTO_RET field.
	SPI_DMA_IN_LINK_INLINK_AUTO_RET_Msk = 0x100000
	// Bit INLINK_AUTO_RET.
	SPI_DMA_IN_LINK_INLINK_AUTO_RET = 0x100000
	// Position of INLINK_STOP field.
	SPI_DMA_IN_LINK_INLINK_STOP_Pos = 0x1c
	// Bit mask of INLINK_STOP field.
	SPI_DMA_IN_LINK_INLINK_STOP_Msk = 0x10000000
	// Bit INLINK_STOP.
	SPI_DMA_IN_LINK_INLINK_STOP = 0x10000000
	// Position of INLINK_START field.
	SPI_DMA_IN_LINK_INLINK_START_Pos = 0x1d
	// Bit mask of INLINK_START field.
	SPI_DMA_IN_LINK_INLINK_START_Msk = 0x20000000
	// Bit INLINK_START.
	SPI_DMA_IN_LINK_INLINK_START = 0x20000000
	// Position of INLINK_RESTART field.
	SPI_DMA_IN_LINK_INLINK_RESTART_Pos = 0x1e
	// Bit mask of INLINK_RESTART field.
	SPI_DMA_IN_LINK_INLINK_RESTART_Msk = 0x40000000
	// Bit INLINK_RESTART.
	SPI_DMA_IN_LINK_INLINK_RESTART = 0x40000000

	// DMA_STATUS
	// Position of DMA_RX_EN field.
	SPI_DMA_STATUS_DMA_RX_EN_Pos = 0x0
	// Bit mask of DMA_RX_EN field.
	SPI_DMA_STATUS_DMA_RX_EN_Msk = 0x1
	// Bit DMA_RX_EN.
	SPI_DMA_STATUS_DMA_RX_EN = 0x1
	// Position of DMA_TX_EN field.
	SPI_DMA_STATUS_DMA_TX_EN_Pos = 0x1
	// Bit mask of DMA_TX_EN field.
	SPI_DMA_STATUS_DMA_TX_EN_Msk = 0x2
	// Bit DMA_TX_EN.
	SPI_DMA_STATUS_DMA_TX_EN = 0x2

	// DMA_INT_ENA
	// Position of INLINK_DSCR_EMPTY_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_ENA.
	SPI_DMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA = 0x1
	// Position of OUTLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_ENA.
	SPI_DMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA = 0x2
	// Position of INLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_ENA.
	SPI_DMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA = 0x4
	// Position of IN_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_IN_DONE_INT_ENA_Pos = 0x3
	// Bit mask of IN_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_IN_DONE_INT_ENA_Msk = 0x8
	// Bit IN_DONE_INT_ENA.
	SPI_DMA_INT_ENA_IN_DONE_INT_ENA = 0x8
	// Position of IN_ERR_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_ERR_EOF_INT_ENA_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_ERR_EOF_INT_ENA_Msk = 0x10
	// Bit IN_ERR_EOF_INT_ENA.
	SPI_DMA_INT_ENA_IN_ERR_EOF_INT_ENA = 0x10
	// Position of IN_SUC_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_SUC_EOF_INT_ENA_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_SUC_EOF_INT_ENA_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ENA.
	SPI_DMA_INT_ENA_IN_SUC_EOF_INT_ENA = 0x20
	// Position of OUT_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_DONE_INT_ENA_Pos = 0x6
	// Bit mask of OUT_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_DONE_INT_ENA_Msk = 0x40
	// Bit OUT_DONE_INT_ENA.
	SPI_DMA_INT_ENA_OUT_DONE_INT_ENA = 0x40
	// Position of OUT_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_EOF_INT_ENA_Pos = 0x7
	// Bit mask of OUT_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_EOF_INT_ENA_Msk = 0x80
	// Bit OUT_EOF_INT_ENA.
	SPI_DMA_INT_ENA_OUT_EOF_INT_ENA = 0x80
	// Position of OUT_TOTAL_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_ENA.
	SPI_DMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA = 0x100

	// DMA_INT_RAW
	// Position of INLINK_DSCR_EMPTY_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_RAW.
	SPI_DMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW = 0x1
	// Position of OUTLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_RAW.
	SPI_DMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW = 0x2
	// Position of INLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_RAW.
	SPI_DMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW = 0x4
	// Position of IN_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_IN_DONE_INT_RAW_Pos = 0x3
	// Bit mask of IN_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_IN_DONE_INT_RAW_Msk = 0x8
	// Bit IN_DONE_INT_RAW.
	SPI_DMA_INT_RAW_IN_DONE_INT_RAW = 0x8
	// Position of IN_ERR_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_ERR_EOF_INT_RAW_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_ERR_EOF_INT_RAW_Msk = 0x10
	// Bit IN_ERR_EOF_INT_RAW.
	SPI_DMA_INT_RAW_IN_ERR_EOF_INT_RAW = 0x10
	// Position of IN_SUC_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_SUC_EOF_INT_RAW_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_SUC_EOF_INT_RAW_Msk = 0x20
	// Bit IN_SUC_EOF_INT_RAW.
	SPI_DMA_INT_RAW_IN_SUC_EOF_INT_RAW = 0x20
	// Position of OUT_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_DONE_INT_RAW_Pos = 0x6
	// Bit mask of OUT_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_DONE_INT_RAW_Msk = 0x40
	// Bit OUT_DONE_INT_RAW.
	SPI_DMA_INT_RAW_OUT_DONE_INT_RAW = 0x40
	// Position of OUT_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_EOF_INT_RAW_Pos = 0x7
	// Bit mask of OUT_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_EOF_INT_RAW_Msk = 0x80
	// Bit OUT_EOF_INT_RAW.
	SPI_DMA_INT_RAW_OUT_EOF_INT_RAW = 0x80
	// Position of OUT_TOTAL_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_RAW.
	SPI_DMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW = 0x100

	// DMA_INT_ST
	// Position of INLINK_DSCR_EMPTY_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_ST.
	SPI_DMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST = 0x1
	// Position of OUTLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_ST.
	SPI_DMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST = 0x2
	// Position of INLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_ERROR_INT_ST_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_ERROR_INT_ST_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_ST.
	SPI_DMA_INT_ST_INLINK_DSCR_ERROR_INT_ST = 0x4
	// Position of IN_DONE_INT_ST field.
	SPI_DMA_INT_ST_IN_DONE_INT_ST_Pos = 0x3
	// Bit mask of IN_DONE_INT_ST field.
	SPI_DMA_INT_ST_IN_DONE_INT_ST_Msk = 0x8
	// Bit IN_DONE_INT_ST.
	SPI_DMA_INT_ST_IN_DONE_INT_ST = 0x8
	// Position of IN_ERR_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_ERR_EOF_INT_ST_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_ERR_EOF_INT_ST_Msk = 0x10
	// Bit IN_ERR_EOF_INT_ST.
	SPI_DMA_INT_ST_IN_ERR_EOF_INT_ST = 0x10
	// Position of IN_SUC_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_SUC_EOF_INT_ST_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_SUC_EOF_INT_ST_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ST.
	SPI_DMA_INT_ST_IN_SUC_EOF_INT_ST = 0x20
	// Position of OUT_DONE_INT_ST field.
	SPI_DMA_INT_ST_OUT_DONE_INT_ST_Pos = 0x6
	// Bit mask of OUT_DONE_INT_ST field.
	SPI_DMA_INT_ST_OUT_DONE_INT_ST_Msk = 0x40
	// Bit OUT_DONE_INT_ST.
	SPI_DMA_INT_ST_OUT_DONE_INT_ST = 0x40
	// Position of OUT_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_EOF_INT_ST_Pos = 0x7
	// Bit mask of OUT_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_EOF_INT_ST_Msk = 0x80
	// Bit OUT_EOF_INT_ST.
	SPI_DMA_INT_ST_OUT_EOF_INT_ST = 0x80
	// Position of OUT_TOTAL_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_TOTAL_EOF_INT_ST_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_TOTAL_EOF_INT_ST_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_ST.
	SPI_DMA_INT_ST_OUT_TOTAL_EOF_INT_ST = 0x100

	// DMA_INT_CLR
	// Position of INLINK_DSCR_EMPTY_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_CLR.
	SPI_DMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR = 0x1
	// Position of OUTLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_CLR.
	SPI_DMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR = 0x2
	// Position of INLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_CLR.
	SPI_DMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR = 0x4
	// Position of IN_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_IN_DONE_INT_CLR_Pos = 0x3
	// Bit mask of IN_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_IN_DONE_INT_CLR_Msk = 0x8
	// Bit IN_DONE_INT_CLR.
	SPI_DMA_INT_CLR_IN_DONE_INT_CLR = 0x8
	// Position of IN_ERR_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_ERR_EOF_INT_CLR_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_ERR_EOF_INT_CLR_Msk = 0x10
	// Bit IN_ERR_EOF_INT_CLR.
	SPI_DMA_INT_CLR_IN_ERR_EOF_INT_CLR = 0x10
	// Position of IN_SUC_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_SUC_EOF_INT_CLR_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_SUC_EOF_INT_CLR_Msk = 0x20
	// Bit IN_SUC_EOF_INT_CLR.
	SPI_DMA_INT_CLR_IN_SUC_EOF_INT_CLR = 0x20
	// Position of OUT_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_DONE_INT_CLR_Pos = 0x6
	// Bit mask of OUT_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_DONE_INT_CLR_Msk = 0x40
	// Bit OUT_DONE_INT_CLR.
	SPI_DMA_INT_CLR_OUT_DONE_INT_CLR = 0x40
	// Position of OUT_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_EOF_INT_CLR_Pos = 0x7
	// Bit mask of OUT_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_EOF_INT_CLR_Msk = 0x80
	// Bit OUT_EOF_INT_CLR.
	SPI_DMA_INT_CLR_OUT_EOF_INT_CLR = 0x80
	// Position of OUT_TOTAL_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_CLR.
	SPI_DMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR = 0x100

	// IN_ERR_EOF_DES_ADDR
	// Position of DMA_IN_ERR_EOF_DES_ADDR field.
	SPI_IN_ERR_EOF_DES_ADDR_DMA_IN_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_IN_ERR_EOF_DES_ADDR field.
	SPI_IN_ERR_EOF_DES_ADDR_DMA_IN_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// IN_SUC_EOF_DES_ADDR
	// Position of DMA_IN_SUC_EOF_DES_ADDR field.
	SPI_IN_SUC_EOF_DES_ADDR_DMA_IN_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_IN_SUC_EOF_DES_ADDR field.
	SPI_IN_SUC_EOF_DES_ADDR_DMA_IN_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// INLINK_DSCR
	// Position of DMA_INLINK_DSCR field.
	SPI_INLINK_DSCR_DMA_INLINK_DSCR_Pos = 0x0
	// Bit mask of DMA_INLINK_DSCR field.
	SPI_INLINK_DSCR_DMA_INLINK_DSCR_Msk = 0xffffffff

	// INLINK_DSCR_BF0
	// Position of DMA_INLINK_DSCR_BF0 field.
	SPI_INLINK_DSCR_BF0_DMA_INLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of DMA_INLINK_DSCR_BF0 field.
	SPI_INLINK_DSCR_BF0_DMA_INLINK_DSCR_BF0_Msk = 0xffffffff

	// INLINK_DSCR_BF1
	// Position of DMA_INLINK_DSCR_BF1 field.
	SPI_INLINK_DSCR_BF1_DMA_INLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of DMA_INLINK_DSCR_BF1 field.
	SPI_INLINK_DSCR_BF1_DMA_INLINK_DSCR_BF1_Msk = 0xffffffff

	// OUT_EOF_BFR_DES_ADDR
	// Position of DMA_OUT_EOF_BFR_DES_ADDR field.
	SPI_OUT_EOF_BFR_DES_ADDR_DMA_OUT_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_OUT_EOF_BFR_DES_ADDR field.
	SPI_OUT_EOF_BFR_DES_ADDR_DMA_OUT_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// OUT_EOF_DES_ADDR
	// Position of DMA_OUT_EOF_DES_ADDR field.
	SPI_OUT_EOF_DES_ADDR_DMA_OUT_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_OUT_EOF_DES_ADDR field.
	SPI_OUT_EOF_DES_ADDR_DMA_OUT_EOF_DES_ADDR_Msk = 0xffffffff

	// OUTLINK_DSCR
	// Position of DMA_OUTLINK_DSCR field.
	SPI_OUTLINK_DSCR_DMA_OUTLINK_DSCR_Pos = 0x0
	// Bit mask of DMA_OUTLINK_DSCR field.
	SPI_OUTLINK_DSCR_DMA_OUTLINK_DSCR_Msk = 0xffffffff

	// OUTLINK_DSCR_BF0
	// Position of DMA_OUTLINK_DSCR_BF0 field.
	SPI_OUTLINK_DSCR_BF0_DMA_OUTLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of DMA_OUTLINK_DSCR_BF0 field.
	SPI_OUTLINK_DSCR_BF0_DMA_OUTLINK_DSCR_BF0_Msk = 0xffffffff

	// OUTLINK_DSCR_BF1
	// Position of DMA_OUTLINK_DSCR_BF1 field.
	SPI_OUTLINK_DSCR_BF1_DMA_OUTLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of DMA_OUTLINK_DSCR_BF1 field.
	SPI_OUTLINK_DSCR_BF1_DMA_OUTLINK_DSCR_BF1_Msk = 0xffffffff

	// DMA_RSTATUS
	// Position of DMA_OUT_STATUS field.
	SPI_DMA_RSTATUS_DMA_OUT_STATUS_Pos = 0x0
	// Bit mask of DMA_OUT_STATUS field.
	SPI_DMA_RSTATUS_DMA_OUT_STATUS_Msk = 0xffffffff

	// DMA_TSTATUS
	// Position of DMA_IN_STATUS field.
	SPI_DMA_TSTATUS_DMA_IN_STATUS_Pos = 0x0
	// Bit mask of DMA_IN_STATUS field.
	SPI_DMA_TSTATUS_DMA_IN_STATUS_Msk = 0xffffffff

	// DATE
	// Position of DATE field.
	SPI_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	SPI_DATE_DATE_Msk = 0xfffffff
)

// Constants for TIMG0: Timer Group 0
const (
	// T0CONFIG
	// Position of ALARM_EN field.
	TIMG_T0CONFIG_ALARM_EN_Pos = 0xa
	// Bit mask of ALARM_EN field.
	TIMG_T0CONFIG_ALARM_EN_Msk = 0x400
	// Bit ALARM_EN.
	TIMG_T0CONFIG_ALARM_EN = 0x400
	// Position of LEVEL_INT_EN field.
	TIMG_T0CONFIG_LEVEL_INT_EN_Pos = 0xb
	// Bit mask of LEVEL_INT_EN field.
	TIMG_T0CONFIG_LEVEL_INT_EN_Msk = 0x800
	// Bit LEVEL_INT_EN.
	TIMG_T0CONFIG_LEVEL_INT_EN = 0x800
	// Position of EDGE_INT_EN field.
	TIMG_T0CONFIG_EDGE_INT_EN_Pos = 0xc
	// Bit mask of EDGE_INT_EN field.
	TIMG_T0CONFIG_EDGE_INT_EN_Msk = 0x1000
	// Bit EDGE_INT_EN.
	TIMG_T0CONFIG_EDGE_INT_EN = 0x1000
	// Position of DIVIDER field.
	TIMG_T0CONFIG_DIVIDER_Pos = 0xd
	// Bit mask of DIVIDER field.
	TIMG_T0CONFIG_DIVIDER_Msk = 0x1fffe000
	// Position of AUTORELOAD field.
	TIMG_T0CONFIG_AUTORELOAD_Pos = 0x1d
	// Bit mask of AUTORELOAD field.
	TIMG_T0CONFIG_AUTORELOAD_Msk = 0x20000000
	// Bit AUTORELOAD.
	TIMG_T0CONFIG_AUTORELOAD = 0x20000000
	// Position of INCREASE field.
	TIMG_T0CONFIG_INCREASE_Pos = 0x1e
	// Bit mask of INCREASE field.
	TIMG_T0CONFIG_INCREASE_Msk = 0x40000000
	// Bit INCREASE.
	TIMG_T0CONFIG_INCREASE = 0x40000000
	// Position of EN field.
	TIMG_T0CONFIG_EN_Pos = 0x1f
	// Bit mask of EN field.
	TIMG_T0CONFIG_EN_Msk = 0x80000000
	// Bit EN.
	TIMG_T0CONFIG_EN = 0x80000000

	// T0LO
	// Position of LO field.
	TIMG_T0LO_LO_Pos = 0x0
	// Bit mask of LO field.
	TIMG_T0LO_LO_Msk = 0xffffffff

	// T0HI
	// Position of HI field.
	TIMG_T0HI_HI_Pos = 0x0
	// Bit mask of HI field.
	TIMG_T0HI_HI_Msk = 0xffffffff

	// T0UPDATE
	// Position of UPDATE field.
	TIMG_T0UPDATE_UPDATE_Pos = 0x0
	// Bit mask of UPDATE field.
	TIMG_T0UPDATE_UPDATE_Msk = 0xffffffff

	// T0ALARMLO
	// Position of ALARM_LO field.
	TIMG_T0ALARMLO_ALARM_LO_Pos = 0x0
	// Bit mask of ALARM_LO field.
	TIMG_T0ALARMLO_ALARM_LO_Msk = 0xffffffff

	// T0ALARMHI
	// Position of ALARM_HI field.
	TIMG_T0ALARMHI_ALARM_HI_Pos = 0x0
	// Bit mask of ALARM_HI field.
	TIMG_T0ALARMHI_ALARM_HI_Msk = 0xffffffff

	// T0LOADLO
	// Position of LOAD_LO field.
	TIMG_T0LOADLO_LOAD_LO_Pos = 0x0
	// Bit mask of LOAD_LO field.
	TIMG_T0LOADLO_LOAD_LO_Msk = 0xffffffff

	// T0LOADHI
	// Position of LOAD_HI field.
	TIMG_T0LOADHI_LOAD_HI_Pos = 0x0
	// Bit mask of LOAD_HI field.
	TIMG_T0LOADHI_LOAD_HI_Msk = 0xffffffff

	// T0LOAD
	// Position of LOAD field.
	TIMG_T0LOAD_LOAD_Pos = 0x0
	// Bit mask of LOAD field.
	TIMG_T0LOAD_LOAD_Msk = 0xffffffff

	// T1CONFIG
	// Position of ALARM_EN field.
	TIMG_T1CONFIG_ALARM_EN_Pos = 0xa
	// Bit mask of ALARM_EN field.
	TIMG_T1CONFIG_ALARM_EN_Msk = 0x400
	// Bit ALARM_EN.
	TIMG_T1CONFIG_ALARM_EN = 0x400
	// Position of LEVEL_INT_EN field.
	TIMG_T1CONFIG_LEVEL_INT_EN_Pos = 0xb
	// Bit mask of LEVEL_INT_EN field.
	TIMG_T1CONFIG_LEVEL_INT_EN_Msk = 0x800
	// Bit LEVEL_INT_EN.
	TIMG_T1CONFIG_LEVEL_INT_EN = 0x800
	// Position of EDGE_INT_EN field.
	TIMG_T1CONFIG_EDGE_INT_EN_Pos = 0xc
	// Bit mask of EDGE_INT_EN field.
	TIMG_T1CONFIG_EDGE_INT_EN_Msk = 0x1000
	// Bit EDGE_INT_EN.
	TIMG_T1CONFIG_EDGE_INT_EN = 0x1000
	// Position of DIVIDER field.
	TIMG_T1CONFIG_DIVIDER_Pos = 0xd
	// Bit mask of DIVIDER field.
	TIMG_T1CONFIG_DIVIDER_Msk = 0x1fffe000
	// Position of AUTORELOAD field.
	TIMG_T1CONFIG_AUTORELOAD_Pos = 0x1d
	// Bit mask of AUTORELOAD field.
	TIMG_T1CONFIG_AUTORELOAD_Msk = 0x20000000
	// Bit AUTORELOAD.
	TIMG_T1CONFIG_AUTORELOAD = 0x20000000
	// Position of INCREASE field.
	TIMG_T1CONFIG_INCREASE_Pos = 0x1e
	// Bit mask of INCREASE field.
	TIMG_T1CONFIG_INCREASE_Msk = 0x40000000
	// Bit INCREASE.
	TIMG_T1CONFIG_INCREASE = 0x40000000
	// Position of EN field.
	TIMG_T1CONFIG_EN_Pos = 0x1f
	// Bit mask of EN field.
	TIMG_T1CONFIG_EN_Msk = 0x80000000
	// Bit EN.
	TIMG_T1CONFIG_EN = 0x80000000

	// T1LO
	// Position of LO field.
	TIMG_T1LO_LO_Pos = 0x0
	// Bit mask of LO field.
	TIMG_T1LO_LO_Msk = 0xffffffff

	// T1HI
	// Position of HI field.
	TIMG_T1HI_HI_Pos = 0x0
	// Bit mask of HI field.
	TIMG_T1HI_HI_Msk = 0xffffffff

	// T1UPDATE
	// Position of UPDATE field.
	TIMG_T1UPDATE_UPDATE_Pos = 0x0
	// Bit mask of UPDATE field.
	TIMG_T1UPDATE_UPDATE_Msk = 0xffffffff

	// T1ALARMLO
	// Position of ALARM_LO field.
	TIMG_T1ALARMLO_ALARM_LO_Pos = 0x0
	// Bit mask of ALARM_LO field.
	TIMG_T1ALARMLO_ALARM_LO_Msk = 0xffffffff

	// T1ALARMHI
	// Position of ALARM_HI field.
	TIMG_T1ALARMHI_ALARM_HI_Pos = 0x0
	// Bit mask of ALARM_HI field.
	TIMG_T1ALARMHI_ALARM_HI_Msk = 0xffffffff

	// T1LOADLO
	// Position of LOAD_LO field.
	TIMG_T1LOADLO_LOAD_LO_Pos = 0x0
	// Bit mask of LOAD_LO field.
	TIMG_T1LOADLO_LOAD_LO_Msk = 0xffffffff

	// T1LOADHI
	// Position of LOAD_HI field.
	TIMG_T1LOADHI_LOAD_HI_Pos = 0x0
	// Bit mask of LOAD_HI field.
	TIMG_T1LOADHI_LOAD_HI_Msk = 0xffffffff

	// T1LOAD
	// Position of LOAD field.
	TIMG_T1LOAD_LOAD_Pos = 0x0
	// Bit mask of LOAD field.
	TIMG_T1LOAD_LOAD_Msk = 0xffffffff

	// WDTCONFIG0
	// Position of WDT_FLASHBOOT_MOD_EN field.
	TIMG_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Pos = 0xe
	// Bit mask of WDT_FLASHBOOT_MOD_EN field.
	TIMG_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Msk = 0x4000
	// Bit WDT_FLASHBOOT_MOD_EN.
	TIMG_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN = 0x4000
	// Position of WDT_SYS_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Pos = 0xf
	// Bit mask of WDT_SYS_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Msk = 0x38000
	// 100ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS100 = 0x0
	// 200ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS200 = 0x1
	// 300ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS300 = 0x2
	// 400ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS400 = 0x3
	// 500ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS500 = 0x4
	// 800ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS800 = 0x5
	// 1.6us
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS1600 = 0x6
	// 3.2us
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_NS3200 = 0x7
	// Position of WDT_CPU_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Pos = 0x12
	// Bit mask of WDT_CPU_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Msk = 0x1c0000
	// 100ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS100 = 0x0
	// 200ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS200 = 0x1
	// 300ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS300 = 0x2
	// 400ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS400 = 0x3
	// 500ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS500 = 0x4
	// 800ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS800 = 0x5
	// 1.6us
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS1600 = 0x6
	// 3.2us
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_NS3200 = 0x7
	// Position of WDT_LEVEL_INT_EN field.
	TIMG_WDTCONFIG0_WDT_LEVEL_INT_EN_Pos = 0x15
	// Bit mask of WDT_LEVEL_INT_EN field.
	TIMG_WDTCONFIG0_WDT_LEVEL_INT_EN_Msk = 0x200000
	// Bit WDT_LEVEL_INT_EN.
	TIMG_WDTCONFIG0_WDT_LEVEL_INT_EN = 0x200000
	// Position of WDT_EDGE_INT_EN field.
	TIMG_WDTCONFIG0_WDT_EDGE_INT_EN_Pos = 0x16
	// Bit mask of WDT_EDGE_INT_EN field.
	TIMG_WDTCONFIG0_WDT_EDGE_INT_EN_Msk = 0x400000
	// Bit WDT_EDGE_INT_EN.
	TIMG_WDTCONFIG0_WDT_EDGE_INT_EN = 0x400000
	// Position of WDT_STG3 field.
	TIMG_WDTCONFIG0_WDT_STG3_Pos = 0x17
	// Bit mask of WDT_STG3 field.
	TIMG_WDTCONFIG0_WDT_STG3_Msk = 0x1800000
	// Off
	TIMG_WDTCONFIG0_WDT_STG3_OFF = 0x0
	// Interrupt
	TIMG_WDTCONFIG0_WDT_STG3_INTERRUPT = 0x1
	// Reset CPU
	TIMG_WDTCONFIG0_WDT_STG3_RESET = 0x2
	// Reset system
	TIMG_WDTCONFIG0_WDT_STG3_RESET_SYS = 0x3
	// Position of WDT_STG2 field.
	TIMG_WDTCONFIG0_WDT_STG2_Pos = 0x19
	// Bit mask of WDT_STG2 field.
	TIMG_WDTCONFIG0_WDT_STG2_Msk = 0x6000000
	// Off
	TIMG_WDTCONFIG0_WDT_STG2_OFF = 0x0
	// Interrupt
	TIMG_WDTCONFIG0_WDT_STG2_INTERRUPT = 0x1
	// Reset CPU
	TIMG_WDTCONFIG0_WDT_STG2_RESET = 0x2
	// Reset system
	TIMG_WDTCONFIG0_WDT_STG2_RESET_SYS = 0x3
	// Position of WDT_STG1 field.
	TIMG_WDTCONFIG0_WDT_STG1_Pos = 0x1b
	// Bit mask of WDT_STG1 field.
	TIMG_WDTCONFIG0_WDT_STG1_Msk = 0x18000000
	// Off
	TIMG_WDTCONFIG0_WDT_STG1_OFF = 0x0
	// Interrupt
	TIMG_WDTCONFIG0_WDT_STG1_INTERRUPT = 0x1
	// Reset CPU
	TIMG_WDTCONFIG0_WDT_STG1_RESET = 0x2
	// Reset system
	TIMG_WDTCONFIG0_WDT_STG1_RESET_SYS = 0x3
	// Position of WDT_STG0 field.
	TIMG_WDTCONFIG0_WDT_STG0_Pos = 0x1d
	// Bit mask of WDT_STG0 field.
	TIMG_WDTCONFIG0_WDT_STG0_Msk = 0x60000000
	// Off
	TIMG_WDTCONFIG0_WDT_STG0_OFF = 0x0
	// Interrupt
	TIMG_WDTCONFIG0_WDT_STG0_INTERRUPT = 0x1
	// Reset CPU
	TIMG_WDTCONFIG0_WDT_STG0_RESET = 0x2
	// Reset system
	TIMG_WDTCONFIG0_WDT_STG0_RESET_SYS = 0x3
	// Position of WDT_EN field.
	TIMG_WDTCONFIG0_WDT_EN_Pos = 0x1f
	// Bit mask of WDT_EN field.
	TIMG_WDTCONFIG0_WDT_EN_Msk = 0x80000000
	// Bit WDT_EN.
	TIMG_WDTCONFIG0_WDT_EN = 0x80000000

	// WDTCONFIG1
	// Position of WDT_CLK_PRESCALE field.
	TIMG_WDTCONFIG1_WDT_CLK_PRESCALE_Pos = 0x10
	// Bit mask of WDT_CLK_PRESCALE field.
	TIMG_WDTCONFIG1_WDT_CLK_PRESCALE_Msk = 0xffff0000

	// WDTCONFIG2
	// Position of WDT_STG0_HOLD field.
	TIMG_WDTCONFIG2_WDT_STG0_HOLD_Pos = 0x0
	// Bit mask of WDT_STG0_HOLD field.
	TIMG_WDTCONFIG2_WDT_STG0_HOLD_Msk = 0xffffffff

	// WDTCONFIG3
	// Position of WDT_STG1_HOLD field.
	TIMG_WDTCONFIG3_WDT_STG1_HOLD_Pos = 0x0
	// Bit mask of WDT_STG1_HOLD field.
	TIMG_WDTCONFIG3_WDT_STG1_HOLD_Msk = 0xffffffff

	// WDTCONFIG4
	// Position of WDT_STG2_HOLD field.
	TIMG_WDTCONFIG4_WDT_STG2_HOLD_Pos = 0x0
	// Bit mask of WDT_STG2_HOLD field.
	TIMG_WDTCONFIG4_WDT_STG2_HOLD_Msk = 0xffffffff

	// WDTCONFIG5
	// Position of WDT_STG3_HOLD field.
	TIMG_WDTCONFIG5_WDT_STG3_HOLD_Pos = 0x0
	// Bit mask of WDT_STG3_HOLD field.
	TIMG_WDTCONFIG5_WDT_STG3_HOLD_Msk = 0xffffffff

	// WDTFEED
	// Position of WDT_FEED field.
	TIMG_WDTFEED_WDT_FEED_Pos = 0x0
	// Bit mask of WDT_FEED field.
	TIMG_WDTFEED_WDT_FEED_Msk = 0xffffffff

	// WDTWPROTECT
	// Position of WDT_WKEY field.
	TIMG_WDTWPROTECT_WDT_WKEY_Pos = 0x0
	// Bit mask of WDT_WKEY field.
	TIMG_WDTWPROTECT_WDT_WKEY_Msk = 0xffffffff

	// RTCCALICFG
	// Position of RTC_CALI_START_CYCLING field.
	TIMG_RTCCALICFG_RTC_CALI_START_CYCLING_Pos = 0xc
	// Bit mask of RTC_CALI_START_CYCLING field.
	TIMG_RTCCALICFG_RTC_CALI_START_CYCLING_Msk = 0x1000
	// Bit RTC_CALI_START_CYCLING.
	TIMG_RTCCALICFG_RTC_CALI_START_CYCLING = 0x1000
	// Position of RTC_CALI_CLK_SEL field.
	TIMG_RTCCALICFG_RTC_CALI_CLK_SEL_Pos = 0xd
	// Bit mask of RTC_CALI_CLK_SEL field.
	TIMG_RTCCALICFG_RTC_CALI_CLK_SEL_Msk = 0x6000
	// Position of RTC_CALI_RDY field.
	TIMG_RTCCALICFG_RTC_CALI_RDY_Pos = 0xf
	// Bit mask of RTC_CALI_RDY field.
	TIMG_RTCCALICFG_RTC_CALI_RDY_Msk = 0x8000
	// Bit RTC_CALI_RDY.
	TIMG_RTCCALICFG_RTC_CALI_RDY = 0x8000
	// Position of RTC_CALI_MAX field.
	TIMG_RTCCALICFG_RTC_CALI_MAX_Pos = 0x10
	// Bit mask of RTC_CALI_MAX field.
	TIMG_RTCCALICFG_RTC_CALI_MAX_Msk = 0x7fff0000
	// Position of RTC_CALI_START field.
	TIMG_RTCCALICFG_RTC_CALI_START_Pos = 0x1f
	// Bit mask of RTC_CALI_START field.
	TIMG_RTCCALICFG_RTC_CALI_START_Msk = 0x80000000
	// Bit RTC_CALI_START.
	TIMG_RTCCALICFG_RTC_CALI_START = 0x80000000

	// RTCCALICFG1
	// Position of RTC_CALI_VALUE field.
	TIMG_RTCCALICFG1_RTC_CALI_VALUE_Pos = 0x7
	// Bit mask of RTC_CALI_VALUE field.
	TIMG_RTCCALICFG1_RTC_CALI_VALUE_Msk = 0xffffff80

	// LACTCONFIG
	// Position of LACT_RTC_ONLY field.
	TIMG_LACTCONFIG_LACT_RTC_ONLY_Pos = 0x7
	// Bit mask of LACT_RTC_ONLY field.
	TIMG_LACTCONFIG_LACT_RTC_ONLY_Msk = 0x80
	// Bit LACT_RTC_ONLY.
	TIMG_LACTCONFIG_LACT_RTC_ONLY = 0x80
	// Position of LACT_CPST_EN field.
	TIMG_LACTCONFIG_LACT_CPST_EN_Pos = 0x8
	// Bit mask of LACT_CPST_EN field.
	TIMG_LACTCONFIG_LACT_CPST_EN_Msk = 0x100
	// Bit LACT_CPST_EN.
	TIMG_LACTCONFIG_LACT_CPST_EN = 0x100
	// Position of LACT_LAC_EN field.
	TIMG_LACTCONFIG_LACT_LAC_EN_Pos = 0x9
	// Bit mask of LACT_LAC_EN field.
	TIMG_LACTCONFIG_LACT_LAC_EN_Msk = 0x200
	// Bit LACT_LAC_EN.
	TIMG_LACTCONFIG_LACT_LAC_EN = 0x200
	// Position of LACT_ALARM_EN field.
	TIMG_LACTCONFIG_LACT_ALARM_EN_Pos = 0xa
	// Bit mask of LACT_ALARM_EN field.
	TIMG_LACTCONFIG_LACT_ALARM_EN_Msk = 0x400
	// Bit LACT_ALARM_EN.
	TIMG_LACTCONFIG_LACT_ALARM_EN = 0x400
	// Position of LACT_LEVEL_INT_EN field.
	TIMG_LACTCONFIG_LACT_LEVEL_INT_EN_Pos = 0xb
	// Bit mask of LACT_LEVEL_INT_EN field.
	TIMG_LACTCONFIG_LACT_LEVEL_INT_EN_Msk = 0x800
	// Bit LACT_LEVEL_INT_EN.
	TIMG_LACTCONFIG_LACT_LEVEL_INT_EN = 0x800
	// Position of LACT_EDGE_INT_EN field.
	TIMG_LACTCONFIG_LACT_EDGE_INT_EN_Pos = 0xc
	// Bit mask of LACT_EDGE_INT_EN field.
	TIMG_LACTCONFIG_LACT_EDGE_INT_EN_Msk = 0x1000
	// Bit LACT_EDGE_INT_EN.
	TIMG_LACTCONFIG_LACT_EDGE_INT_EN = 0x1000
	// Position of LACT_DIVIDER field.
	TIMG_LACTCONFIG_LACT_DIVIDER_Pos = 0xd
	// Bit mask of LACT_DIVIDER field.
	TIMG_LACTCONFIG_LACT_DIVIDER_Msk = 0x1fffe000
	// Position of LACT_AUTORELOAD field.
	TIMG_LACTCONFIG_LACT_AUTORELOAD_Pos = 0x1d
	// Bit mask of LACT_AUTORELOAD field.
	TIMG_LACTCONFIG_LACT_AUTORELOAD_Msk = 0x20000000
	// Bit LACT_AUTORELOAD.
	TIMG_LACTCONFIG_LACT_AUTORELOAD = 0x20000000
	// Position of LACT_INCREASE field.
	TIMG_LACTCONFIG_LACT_INCREASE_Pos = 0x1e
	// Bit mask of LACT_INCREASE field.
	TIMG_LACTCONFIG_LACT_INCREASE_Msk = 0x40000000
	// Bit LACT_INCREASE.
	TIMG_LACTCONFIG_LACT_INCREASE = 0x40000000
	// Position of LACT_EN field.
	TIMG_LACTCONFIG_LACT_EN_Pos = 0x1f
	// Bit mask of LACT_EN field.
	TIMG_LACTCONFIG_LACT_EN_Msk = 0x80000000
	// Bit LACT_EN.
	TIMG_LACTCONFIG_LACT_EN = 0x80000000

	// LACTRTC
	// Position of LACT_RTC_STEP_LEN field.
	TIMG_LACTRTC_LACT_RTC_STEP_LEN_Pos = 0x6
	// Bit mask of LACT_RTC_STEP_LEN field.
	TIMG_LACTRTC_LACT_RTC_STEP_LEN_Msk = 0xffffffc0

	// LACTLO
	// Position of LACT_LO field.
	TIMG_LACTLO_LACT_LO_Pos = 0x0
	// Bit mask of LACT_LO field.
	TIMG_LACTLO_LACT_LO_Msk = 0xffffffff

	// LACTHI
	// Position of LACT_HI field.
	TIMG_LACTHI_LACT_HI_Pos = 0x0
	// Bit mask of LACT_HI field.
	TIMG_LACTHI_LACT_HI_Msk = 0xffffffff

	// LACTUPDATE
	// Position of LACT_UPDATE field.
	TIMG_LACTUPDATE_LACT_UPDATE_Pos = 0x0
	// Bit mask of LACT_UPDATE field.
	TIMG_LACTUPDATE_LACT_UPDATE_Msk = 0xffffffff

	// LACTALARMLO
	// Position of LACT_ALARM_LO field.
	TIMG_LACTALARMLO_LACT_ALARM_LO_Pos = 0x0
	// Bit mask of LACT_ALARM_LO field.
	TIMG_LACTALARMLO_LACT_ALARM_LO_Msk = 0xffffffff

	// LACTALARMHI
	// Position of LACT_ALARM_HI field.
	TIMG_LACTALARMHI_LACT_ALARM_HI_Pos = 0x0
	// Bit mask of LACT_ALARM_HI field.
	TIMG_LACTALARMHI_LACT_ALARM_HI_Msk = 0xffffffff

	// LACTLOADLO
	// Position of LACT_LOAD_LO field.
	TIMG_LACTLOADLO_LACT_LOAD_LO_Pos = 0x0
	// Bit mask of LACT_LOAD_LO field.
	TIMG_LACTLOADLO_LACT_LOAD_LO_Msk = 0xffffffff

	// LACTLOADHI
	// Position of LACT_LOAD_HI field.
	TIMG_LACTLOADHI_LACT_LOAD_HI_Pos = 0x0
	// Bit mask of LACT_LOAD_HI field.
	TIMG_LACTLOADHI_LACT_LOAD_HI_Msk = 0xffffffff

	// LACTLOAD
	// Position of LACT_LOAD field.
	TIMG_LACTLOAD_LACT_LOAD_Pos = 0x0
	// Bit mask of LACT_LOAD field.
	TIMG_LACTLOAD_LACT_LOAD_Msk = 0xffffffff

	// INT_ENA_TIMERS
	// Position of T0_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T0_INT_ENA_Pos = 0x0
	// Bit mask of T0_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T0_INT_ENA_Msk = 0x1
	// Bit T0_INT_ENA.
	TIMG_INT_ENA_TIMERS_T0_INT_ENA = 0x1
	// Position of T1_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T1_INT_ENA_Pos = 0x1
	// Bit mask of T1_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T1_INT_ENA_Msk = 0x2
	// Bit T1_INT_ENA.
	TIMG_INT_ENA_TIMERS_T1_INT_ENA = 0x2
	// Position of WDT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_WDT_INT_ENA_Pos = 0x2
	// Bit mask of WDT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_WDT_INT_ENA_Msk = 0x4
	// Bit WDT_INT_ENA.
	TIMG_INT_ENA_TIMERS_WDT_INT_ENA = 0x4
	// Position of LACT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_LACT_INT_ENA_Pos = 0x3
	// Bit mask of LACT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_LACT_INT_ENA_Msk = 0x8
	// Bit LACT_INT_ENA.
	TIMG_INT_ENA_TIMERS_LACT_INT_ENA = 0x8

	// INT_RAW_TIMERS
	// Position of T0_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T0_INT_RAW_Pos = 0x0
	// Bit mask of T0_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T0_INT_RAW_Msk = 0x1
	// Bit T0_INT_RAW.
	TIMG_INT_RAW_TIMERS_T0_INT_RAW = 0x1
	// Position of T1_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T1_INT_RAW_Pos = 0x1
	// Bit mask of T1_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T1_INT_RAW_Msk = 0x2
	// Bit T1_INT_RAW.
	TIMG_INT_RAW_TIMERS_T1_INT_RAW = 0x2
	// Position of WDT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_WDT_INT_RAW_Pos = 0x2
	// Bit mask of WDT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_WDT_INT_RAW_Msk = 0x4
	// Bit WDT_INT_RAW.
	TIMG_INT_RAW_TIMERS_WDT_INT_RAW = 0x4
	// Position of LACT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_LACT_INT_RAW_Pos = 0x3
	// Bit mask of LACT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_LACT_INT_RAW_Msk = 0x8
	// Bit LACT_INT_RAW.
	TIMG_INT_RAW_TIMERS_LACT_INT_RAW = 0x8

	// INT_ST_TIMERS
	// Position of T0_INT_ST field.
	TIMG_INT_ST_TIMERS_T0_INT_ST_Pos = 0x0
	// Bit mask of T0_INT_ST field.
	TIMG_INT_ST_TIMERS_T0_INT_ST_Msk = 0x1
	// Bit T0_INT_ST.
	TIMG_INT_ST_TIMERS_T0_INT_ST = 0x1
	// Position of T1_INT_ST field.
	TIMG_INT_ST_TIMERS_T1_INT_ST_Pos = 0x1
	// Bit mask of T1_INT_ST field.
	TIMG_INT_ST_TIMERS_T1_INT_ST_Msk = 0x2
	// Bit T1_INT_ST.
	TIMG_INT_ST_TIMERS_T1_INT_ST = 0x2
	// Position of WDT_INT_ST field.
	TIMG_INT_ST_TIMERS_WDT_INT_ST_Pos = 0x2
	// Bit mask of WDT_INT_ST field.
	TIMG_INT_ST_TIMERS_WDT_INT_ST_Msk = 0x4
	// Bit WDT_INT_ST.
	TIMG_INT_ST_TIMERS_WDT_INT_ST = 0x4
	// Position of LACT_INT_ST field.
	TIMG_INT_ST_TIMERS_LACT_INT_ST_Pos = 0x3
	// Bit mask of LACT_INT_ST field.
	TIMG_INT_ST_TIMERS_LACT_INT_ST_Msk = 0x8
	// Bit LACT_INT_ST.
	TIMG_INT_ST_TIMERS_LACT_INT_ST = 0x8

	// INT_CLR_TIMERS
	// Position of T0_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T0_INT_CLR_Pos = 0x0
	// Bit mask of T0_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T0_INT_CLR_Msk = 0x1
	// Bit T0_INT_CLR.
	TIMG_INT_CLR_TIMERS_T0_INT_CLR = 0x1
	// Position of T1_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T1_INT_CLR_Pos = 0x1
	// Bit mask of T1_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T1_INT_CLR_Msk = 0x2
	// Bit T1_INT_CLR.
	TIMG_INT_CLR_TIMERS_T1_INT_CLR = 0x2
	// Position of WDT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_WDT_INT_CLR_Pos = 0x2
	// Bit mask of WDT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_WDT_INT_CLR_Msk = 0x4
	// Bit WDT_INT_CLR.
	TIMG_INT_CLR_TIMERS_WDT_INT_CLR = 0x4
	// Position of LACT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_LACT_INT_CLR_Pos = 0x3
	// Bit mask of LACT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_LACT_INT_CLR_Msk = 0x8
	// Bit LACT_INT_CLR.
	TIMG_INT_CLR_TIMERS_LACT_INT_CLR = 0x8

	// NTIMERS_DATE
	// Position of NTIMERS_DATE field.
	TIMG_NTIMERS_DATE_NTIMERS_DATE_Pos = 0x0
	// Bit mask of NTIMERS_DATE field.
	TIMG_NTIMERS_DATE_NTIMERS_DATE_Msk = 0xfffffff

	// TIMGCLK
	// Position of CLK_EN field.
	TIMG_TIMGCLK_CLK_EN_Pos = 0x1f
	// Bit mask of CLK_EN field.
	TIMG_TIMGCLK_CLK_EN_Msk = 0x80000000
	// Bit CLK_EN.
	TIMG_TIMGCLK_CLK_EN = 0x80000000
)

// Constants for TWAI0: Two-Wire Automotive Interface
const (
	// MODE: Mode Register
	// Position of RESET_MODE field.
	TWAI_MODE_RESET_MODE_Pos = 0x0
	// Bit mask of RESET_MODE field.
	TWAI_MODE_RESET_MODE_Msk = 0x1
	// Bit RESET_MODE.
	TWAI_MODE_RESET_MODE = 0x1
	// Position of LISTEN_ONLY_MODE field.
	TWAI_MODE_LISTEN_ONLY_MODE_Pos = 0x1
	// Bit mask of LISTEN_ONLY_MODE field.
	TWAI_MODE_LISTEN_ONLY_MODE_Msk = 0x2
	// Bit LISTEN_ONLY_MODE.
	TWAI_MODE_LISTEN_ONLY_MODE = 0x2
	// Position of SELF_TEST_MODE field.
	TWAI_MODE_SELF_TEST_MODE_Pos = 0x2
	// Bit mask of SELF_TEST_MODE field.
	TWAI_MODE_SELF_TEST_MODE_Msk = 0x4
	// Bit SELF_TEST_MODE.
	TWAI_MODE_SELF_TEST_MODE = 0x4
	// Position of RX_FILTER_MODE field.
	TWAI_MODE_RX_FILTER_MODE_Pos = 0x3
	// Bit mask of RX_FILTER_MODE field.
	TWAI_MODE_RX_FILTER_MODE_Msk = 0x8
	// Bit RX_FILTER_MODE.
	TWAI_MODE_RX_FILTER_MODE = 0x8

	// CMD: Command Register
	// Position of TX_REQ field.
	TWAI_CMD_TX_REQ_Pos = 0x0
	// Bit mask of TX_REQ field.
	TWAI_CMD_TX_REQ_Msk = 0x1
	// Bit TX_REQ.
	TWAI_CMD_TX_REQ = 0x1
	// Position of ABORT_TX field.
	TWAI_CMD_ABORT_TX_Pos = 0x1
	// Bit mask of ABORT_TX field.
	TWAI_CMD_ABORT_TX_Msk = 0x2
	// Bit ABORT_TX.
	TWAI_CMD_ABORT_TX = 0x2
	// Position of RELEASE_BUF field.
	TWAI_CMD_RELEASE_BUF_Pos = 0x2
	// Bit mask of RELEASE_BUF field.
	TWAI_CMD_RELEASE_BUF_Msk = 0x4
	// Bit RELEASE_BUF.
	TWAI_CMD_RELEASE_BUF = 0x4
	// Position of CLR_OVERRUN field.
	TWAI_CMD_CLR_OVERRUN_Pos = 0x3
	// Bit mask of CLR_OVERRUN field.
	TWAI_CMD_CLR_OVERRUN_Msk = 0x8
	// Bit CLR_OVERRUN.
	TWAI_CMD_CLR_OVERRUN = 0x8
	// Position of SELF_RX_REQ field.
	TWAI_CMD_SELF_RX_REQ_Pos = 0x4
	// Bit mask of SELF_RX_REQ field.
	TWAI_CMD_SELF_RX_REQ_Msk = 0x10
	// Bit SELF_RX_REQ.
	TWAI_CMD_SELF_RX_REQ = 0x10

	// STATUS: Status register
	// Position of RX_BUF_ST field.
	TWAI_STATUS_RX_BUF_ST_Pos = 0x0
	// Bit mask of RX_BUF_ST field.
	TWAI_STATUS_RX_BUF_ST_Msk = 0x1
	// Bit RX_BUF_ST.
	TWAI_STATUS_RX_BUF_ST = 0x1
	// Position of OVERRUN_ST field.
	TWAI_STATUS_OVERRUN_ST_Pos = 0x1
	// Bit mask of OVERRUN_ST field.
	TWAI_STATUS_OVERRUN_ST_Msk = 0x2
	// Bit OVERRUN_ST.
	TWAI_STATUS_OVERRUN_ST = 0x2
	// Position of TX_BUF_ST field.
	TWAI_STATUS_TX_BUF_ST_Pos = 0x2
	// Bit mask of TX_BUF_ST field.
	TWAI_STATUS_TX_BUF_ST_Msk = 0x4
	// Bit TX_BUF_ST.
	TWAI_STATUS_TX_BUF_ST = 0x4
	// Position of TX_COMPLETE field.
	TWAI_STATUS_TX_COMPLETE_Pos = 0x3
	// Bit mask of TX_COMPLETE field.
	TWAI_STATUS_TX_COMPLETE_Msk = 0x8
	// Bit TX_COMPLETE.
	TWAI_STATUS_TX_COMPLETE = 0x8
	// Position of RX_ST field.
	TWAI_STATUS_RX_ST_Pos = 0x4
	// Bit mask of RX_ST field.
	TWAI_STATUS_RX_ST_Msk = 0x10
	// Bit RX_ST.
	TWAI_STATUS_RX_ST = 0x10
	// Position of TX_ST field.
	TWAI_STATUS_TX_ST_Pos = 0x5
	// Bit mask of TX_ST field.
	TWAI_STATUS_TX_ST_Msk = 0x20
	// Bit TX_ST.
	TWAI_STATUS_TX_ST = 0x20
	// Position of ERR_ST field.
	TWAI_STATUS_ERR_ST_Pos = 0x6
	// Bit mask of ERR_ST field.
	TWAI_STATUS_ERR_ST_Msk = 0x40
	// Bit ERR_ST.
	TWAI_STATUS_ERR_ST = 0x40
	// Position of BUS_OFF_ST field.
	TWAI_STATUS_BUS_OFF_ST_Pos = 0x7
	// Bit mask of BUS_OFF_ST field.
	TWAI_STATUS_BUS_OFF_ST_Msk = 0x80
	// Bit BUS_OFF_ST.
	TWAI_STATUS_BUS_OFF_ST = 0x80
	// Position of MISS_ST field.
	TWAI_STATUS_MISS_ST_Pos = 0x8
	// Bit mask of MISS_ST field.
	TWAI_STATUS_MISS_ST_Msk = 0x100
	// Bit MISS_ST.
	TWAI_STATUS_MISS_ST = 0x100

	// INT_RAW: Interrupt Register
	// Position of RX_INT_ST field.
	TWAI_INT_RAW_RX_INT_ST_Pos = 0x0
	// Bit mask of RX_INT_ST field.
	TWAI_INT_RAW_RX_INT_ST_Msk = 0x1
	// Bit RX_INT_ST.
	TWAI_INT_RAW_RX_INT_ST = 0x1
	// Position of TX_INT_ST field.
	TWAI_INT_RAW_TX_INT_ST_Pos = 0x1
	// Bit mask of TX_INT_ST field.
	TWAI_INT_RAW_TX_INT_ST_Msk = 0x2
	// Bit TX_INT_ST.
	TWAI_INT_RAW_TX_INT_ST = 0x2
	// Position of ERR_WARN_INT_ST field.
	TWAI_INT_RAW_ERR_WARN_INT_ST_Pos = 0x2
	// Bit mask of ERR_WARN_INT_ST field.
	TWAI_INT_RAW_ERR_WARN_INT_ST_Msk = 0x4
	// Bit ERR_WARN_INT_ST.
	TWAI_INT_RAW_ERR_WARN_INT_ST = 0x4
	// Position of OVERRUN_INT_ST field.
	TWAI_INT_RAW_OVERRUN_INT_ST_Pos = 0x3
	// Bit mask of OVERRUN_INT_ST field.
	TWAI_INT_RAW_OVERRUN_INT_ST_Msk = 0x8
	// Bit OVERRUN_INT_ST.
	TWAI_INT_RAW_OVERRUN_INT_ST = 0x8
	// Position of ERR_PASSIVE_INT_ST field.
	TWAI_INT_RAW_ERR_PASSIVE_INT_ST_Pos = 0x5
	// Bit mask of ERR_PASSIVE_INT_ST field.
	TWAI_INT_RAW_ERR_PASSIVE_INT_ST_Msk = 0x20
	// Bit ERR_PASSIVE_INT_ST.
	TWAI_INT_RAW_ERR_PASSIVE_INT_ST = 0x20
	// Position of ARB_LOST_INT_ST field.
	TWAI_INT_RAW_ARB_LOST_INT_ST_Pos = 0x6
	// Bit mask of ARB_LOST_INT_ST field.
	TWAI_INT_RAW_ARB_LOST_INT_ST_Msk = 0x40
	// Bit ARB_LOST_INT_ST.
	TWAI_INT_RAW_ARB_LOST_INT_ST = 0x40
	// Position of BUS_ERR_INT_ST field.
	TWAI_INT_RAW_BUS_ERR_INT_ST_Pos = 0x7
	// Bit mask of BUS_ERR_INT_ST field.
	TWAI_INT_RAW_BUS_ERR_INT_ST_Msk = 0x80
	// Bit BUS_ERR_INT_ST.
	TWAI_INT_RAW_BUS_ERR_INT_ST = 0x80

	// INT_ENA: Interrupt Enable Register
	// Position of RX_INT_ENA field.
	TWAI_INT_ENA_RX_INT_ENA_Pos = 0x0
	// Bit mask of RX_INT_ENA field.
	TWAI_INT_ENA_RX_INT_ENA_Msk = 0x1
	// Bit RX_INT_ENA.
	TWAI_INT_ENA_RX_INT_ENA = 0x1
	// Position of TX_INT_ENA field.
	TWAI_INT_ENA_TX_INT_ENA_Pos = 0x1
	// Bit mask of TX_INT_ENA field.
	TWAI_INT_ENA_TX_INT_ENA_Msk = 0x2
	// Bit TX_INT_ENA.
	TWAI_INT_ENA_TX_INT_ENA = 0x2
	// Position of ERR_WARN_INT_ENA field.
	TWAI_INT_ENA_ERR_WARN_INT_ENA_Pos = 0x2
	// Bit mask of ERR_WARN_INT_ENA field.
	TWAI_INT_ENA_ERR_WARN_INT_ENA_Msk = 0x4
	// Bit ERR_WARN_INT_ENA.
	TWAI_INT_ENA_ERR_WARN_INT_ENA = 0x4
	// Position of OVERRUN_INT_ENA field.
	TWAI_INT_ENA_OVERRUN_INT_ENA_Pos = 0x3
	// Bit mask of OVERRUN_INT_ENA field.
	TWAI_INT_ENA_OVERRUN_INT_ENA_Msk = 0x8
	// Bit OVERRUN_INT_ENA.
	TWAI_INT_ENA_OVERRUN_INT_ENA = 0x8
	// Position of ERR_PASSIVE_INT_ENA field.
	TWAI_INT_ENA_ERR_PASSIVE_INT_ENA_Pos = 0x5
	// Bit mask of ERR_PASSIVE_INT_ENA field.
	TWAI_INT_ENA_ERR_PASSIVE_INT_ENA_Msk = 0x20
	// Bit ERR_PASSIVE_INT_ENA.
	TWAI_INT_ENA_ERR_PASSIVE_INT_ENA = 0x20
	// Position of ARB_LOST_INT_ENA field.
	TWAI_INT_ENA_ARB_LOST_INT_ENA_Pos = 0x6
	// Bit mask of ARB_LOST_INT_ENA field.
	TWAI_INT_ENA_ARB_LOST_INT_ENA_Msk = 0x40
	// Bit ARB_LOST_INT_ENA.
	TWAI_INT_ENA_ARB_LOST_INT_ENA = 0x40
	// Position of BUS_ERR_INT_ENA field.
	TWAI_INT_ENA_BUS_ERR_INT_ENA_Pos = 0x7
	// Bit mask of BUS_ERR_INT_ENA field.
	TWAI_INT_ENA_BUS_ERR_INT_ENA_Msk = 0x80
	// Bit BUS_ERR_INT_ENA.
	TWAI_INT_ENA_BUS_ERR_INT_ENA = 0x80

	// BUS_TIMING_0: Bus Timing Register 0
	// Position of BAUD_PRESC field.
	TWAI_BUS_TIMING_0_BAUD_PRESC_Pos = 0x0
	// Bit mask of BAUD_PRESC field.
	TWAI_BUS_TIMING_0_BAUD_PRESC_Msk = 0x3f
	// Position of SYNC_JUMP_WIDTH field.
	TWAI_BUS_TIMING_0_SYNC_JUMP_WIDTH_Pos = 0x6
	// Bit mask of SYNC_JUMP_WIDTH field.
	TWAI_BUS_TIMING_0_SYNC_JUMP_WIDTH_Msk = 0xc0

	// BUS_TIMING_1: Bus Timing Register 1
	// Position of TIME_SEG1 field.
	TWAI_BUS_TIMING_1_TIME_SEG1_Pos = 0x0
	// Bit mask of TIME_SEG1 field.
	TWAI_BUS_TIMING_1_TIME_SEG1_Msk = 0xf
	// Position of TIME_SEG2 field.
	TWAI_BUS_TIMING_1_TIME_SEG2_Pos = 0x4
	// Bit mask of TIME_SEG2 field.
	TWAI_BUS_TIMING_1_TIME_SEG2_Msk = 0x70
	// Position of TIME_SAMP field.
	TWAI_BUS_TIMING_1_TIME_SAMP_Pos = 0x7
	// Bit mask of TIME_SAMP field.
	TWAI_BUS_TIMING_1_TIME_SAMP_Msk = 0x80
	// Bit TIME_SAMP.
	TWAI_BUS_TIMING_1_TIME_SAMP = 0x80

	// ARB_LOST_CAP: Arbitration Lost Capture Register
	// Position of ARB_LOST_CAP field.
	TWAI_ARB_LOST_CAP_ARB_LOST_CAP_Pos = 0x0
	// Bit mask of ARB_LOST_CAP field.
	TWAI_ARB_LOST_CAP_ARB_LOST_CAP_Msk = 0x1f

	// ERR_CODE_CAP: Error Code Capture Register
	// Position of ECC_SEGMENT field.
	TWAI_ERR_CODE_CAP_ECC_SEGMENT_Pos = 0x0
	// Bit mask of ECC_SEGMENT field.
	TWAI_ERR_CODE_CAP_ECC_SEGMENT_Msk = 0x1f
	// Position of ECC_DIRECTION field.
	TWAI_ERR_CODE_CAP_ECC_DIRECTION_Pos = 0x5
	// Bit mask of ECC_DIRECTION field.
	TWAI_ERR_CODE_CAP_ECC_DIRECTION_Msk = 0x20
	// Bit ECC_DIRECTION.
	TWAI_ERR_CODE_CAP_ECC_DIRECTION = 0x20
	// Position of ECC_TYPE field.
	TWAI_ERR_CODE_CAP_ECC_TYPE_Pos = 0x6
	// Bit mask of ECC_TYPE field.
	TWAI_ERR_CODE_CAP_ECC_TYPE_Msk = 0xc0

	// ERR_WARNING_LIMIT: Error Warning Limit Register
	// Position of ERR_WARNING_LIMIT field.
	TWAI_ERR_WARNING_LIMIT_ERR_WARNING_LIMIT_Pos = 0x0
	// Bit mask of ERR_WARNING_LIMIT field.
	TWAI_ERR_WARNING_LIMIT_ERR_WARNING_LIMIT_Msk = 0xff

	// RX_ERR_CNT: Receive Error Counter Register
	// Position of RX_ERR_CNT field.
	TWAI_RX_ERR_CNT_RX_ERR_CNT_Pos = 0x0
	// Bit mask of RX_ERR_CNT field.
	TWAI_RX_ERR_CNT_RX_ERR_CNT_Msk = 0xff

	// TX_ERR_CNT: Transmit Error Counter Register
	// Position of TX_ERR_CNT field.
	TWAI_TX_ERR_CNT_TX_ERR_CNT_Pos = 0x0
	// Bit mask of TX_ERR_CNT field.
	TWAI_TX_ERR_CNT_TX_ERR_CNT_Msk = 0xff

	// DATA_0: Data register 0
	// Position of TX_BYTE_0 field.
	TWAI_DATA_0_TX_BYTE_0_Pos = 0x0
	// Bit mask of TX_BYTE_0 field.
	TWAI_DATA_0_TX_BYTE_0_Msk = 0xff

	// DATA_1: Data register 1
	// Position of TX_BYTE_1 field.
	TWAI_DATA_1_TX_BYTE_1_Pos = 0x0
	// Bit mask of TX_BYTE_1 field.
	TWAI_DATA_1_TX_BYTE_1_Msk = 0xff

	// DATA_2: Data register 2
	// Position of TX_BYTE_2 field.
	TWAI_DATA_2_TX_BYTE_2_Pos = 0x0
	// Bit mask of TX_BYTE_2 field.
	TWAI_DATA_2_TX_BYTE_2_Msk = 0xff

	// DATA_3: Data register 3
	// Position of TX_BYTE_3 field.
	TWAI_DATA_3_TX_BYTE_3_Pos = 0x0
	// Bit mask of TX_BYTE_3 field.
	TWAI_DATA_3_TX_BYTE_3_Msk = 0xff

	// DATA_4: Data register 4
	// Position of TX_BYTE_4 field.
	TWAI_DATA_4_TX_BYTE_4_Pos = 0x0
	// Bit mask of TX_BYTE_4 field.
	TWAI_DATA_4_TX_BYTE_4_Msk = 0xff

	// DATA_5: Data register 5
	// Position of TX_BYTE_5 field.
	TWAI_DATA_5_TX_BYTE_5_Pos = 0x0
	// Bit mask of TX_BYTE_5 field.
	TWAI_DATA_5_TX_BYTE_5_Msk = 0xff

	// DATA_6: Data register 6
	// Position of TX_BYTE_6 field.
	TWAI_DATA_6_TX_BYTE_6_Pos = 0x0
	// Bit mask of TX_BYTE_6 field.
	TWAI_DATA_6_TX_BYTE_6_Msk = 0xff

	// DATA_7: Data register 7
	// Position of TX_BYTE_7 field.
	TWAI_DATA_7_TX_BYTE_7_Pos = 0x0
	// Bit mask of TX_BYTE_7 field.
	TWAI_DATA_7_TX_BYTE_7_Msk = 0xff

	// DATA_8: Data register 8
	// Position of TX_BYTE_8 field.
	TWAI_DATA_8_TX_BYTE_8_Pos = 0x0
	// Bit mask of TX_BYTE_8 field.
	TWAI_DATA_8_TX_BYTE_8_Msk = 0xff

	// DATA_9: Data register 9
	// Position of TX_BYTE_9 field.
	TWAI_DATA_9_TX_BYTE_9_Pos = 0x0
	// Bit mask of TX_BYTE_9 field.
	TWAI_DATA_9_TX_BYTE_9_Msk = 0xff

	// DATA_10: Data register 10
	// Position of TX_BYTE_10 field.
	TWAI_DATA_10_TX_BYTE_10_Pos = 0x0
	// Bit mask of TX_BYTE_10 field.
	TWAI_DATA_10_TX_BYTE_10_Msk = 0xff

	// DATA_11: Data register 11
	// Position of TX_BYTE_11 field.
	TWAI_DATA_11_TX_BYTE_11_Pos = 0x0
	// Bit mask of TX_BYTE_11 field.
	TWAI_DATA_11_TX_BYTE_11_Msk = 0xff

	// DATA_12: Data register 12
	// Position of TX_BYTE_12 field.
	TWAI_DATA_12_TX_BYTE_12_Pos = 0x0
	// Bit mask of TX_BYTE_12 field.
	TWAI_DATA_12_TX_BYTE_12_Msk = 0xff

	// RX_MESSAGE_CNT: Receive Message Counter Register
	// Position of RX_MESSAGE_COUNTER field.
	TWAI_RX_MESSAGE_CNT_RX_MESSAGE_COUNTER_Pos = 0x0
	// Bit mask of RX_MESSAGE_COUNTER field.
	TWAI_RX_MESSAGE_CNT_RX_MESSAGE_COUNTER_Msk = 0x7f

	// CLOCK_DIVIDER: Clock Divider register
	// Position of CD field.
	TWAI_CLOCK_DIVIDER_CD_Pos = 0x0
	// Bit mask of CD field.
	TWAI_CLOCK_DIVIDER_CD_Msk = 0xff
	// Position of CLOCK_OFF field.
	TWAI_CLOCK_DIVIDER_CLOCK_OFF_Pos = 0x8
	// Bit mask of CLOCK_OFF field.
	TWAI_CLOCK_DIVIDER_CLOCK_OFF_Msk = 0x100
	// Bit CLOCK_OFF.
	TWAI_CLOCK_DIVIDER_CLOCK_OFF = 0x100
)

// Constants for UART0: UART (Universal Asynchronous Receiver-Transmitter) Controller 0
const (
	// FIFO
	// Position of RXFIFO_RD_BYTE field.
	UART_FIFO_RXFIFO_RD_BYTE_Pos = 0x0
	// Bit mask of RXFIFO_RD_BYTE field.
	UART_FIFO_RXFIFO_RD_BYTE_Msk = 0xff

	// INT_RAW
	// Position of RXFIFO_FULL_INT_RAW field.
	UART_INT_RAW_RXFIFO_FULL_INT_RAW_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_RAW field.
	UART_INT_RAW_RXFIFO_FULL_INT_RAW_Msk = 0x1
	// Bit RXFIFO_FULL_INT_RAW.
	UART_INT_RAW_RXFIFO_FULL_INT_RAW = 0x1
	// Position of TXFIFO_EMPTY_INT_RAW field.
	UART_INT_RAW_TXFIFO_EMPTY_INT_RAW_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_RAW field.
	UART_INT_RAW_TXFIFO_EMPTY_INT_RAW_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_RAW.
	UART_INT_RAW_TXFIFO_EMPTY_INT_RAW = 0x2
	// Position of PARITY_ERR_INT_RAW field.
	UART_INT_RAW_PARITY_ERR_INT_RAW_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_RAW field.
	UART_INT_RAW_PARITY_ERR_INT_RAW_Msk = 0x4
	// Bit PARITY_ERR_INT_RAW.
	UART_INT_RAW_PARITY_ERR_INT_RAW = 0x4
	// Position of FRM_ERR_INT_RAW field.
	UART_INT_RAW_FRM_ERR_INT_RAW_Pos = 0x3
	// Bit mask of FRM_ERR_INT_RAW field.
	UART_INT_RAW_FRM_ERR_INT_RAW_Msk = 0x8
	// Bit FRM_ERR_INT_RAW.
	UART_INT_RAW_FRM_ERR_INT_RAW = 0x8
	// Position of RXFIFO_OVF_INT_RAW field.
	UART_INT_RAW_RXFIFO_OVF_INT_RAW_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_RAW field.
	UART_INT_RAW_RXFIFO_OVF_INT_RAW_Msk = 0x10
	// Bit RXFIFO_OVF_INT_RAW.
	UART_INT_RAW_RXFIFO_OVF_INT_RAW = 0x10
	// Position of DSR_CHG_INT_RAW field.
	UART_INT_RAW_DSR_CHG_INT_RAW_Pos = 0x5
	// Bit mask of DSR_CHG_INT_RAW field.
	UART_INT_RAW_DSR_CHG_INT_RAW_Msk = 0x20
	// Bit DSR_CHG_INT_RAW.
	UART_INT_RAW_DSR_CHG_INT_RAW = 0x20
	// Position of CTS_CHG_INT_RAW field.
	UART_INT_RAW_CTS_CHG_INT_RAW_Pos = 0x6
	// Bit mask of CTS_CHG_INT_RAW field.
	UART_INT_RAW_CTS_CHG_INT_RAW_Msk = 0x40
	// Bit CTS_CHG_INT_RAW.
	UART_INT_RAW_CTS_CHG_INT_RAW = 0x40
	// Position of BRK_DET_INT_RAW field.
	UART_INT_RAW_BRK_DET_INT_RAW_Pos = 0x7
	// Bit mask of BRK_DET_INT_RAW field.
	UART_INT_RAW_BRK_DET_INT_RAW_Msk = 0x80
	// Bit BRK_DET_INT_RAW.
	UART_INT_RAW_BRK_DET_INT_RAW = 0x80
	// Position of RXFIFO_TOUT_INT_RAW field.
	UART_INT_RAW_RXFIFO_TOUT_INT_RAW_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_RAW field.
	UART_INT_RAW_RXFIFO_TOUT_INT_RAW_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_RAW.
	UART_INT_RAW_RXFIFO_TOUT_INT_RAW = 0x100
	// Position of SW_XON_INT_RAW field.
	UART_INT_RAW_SW_XON_INT_RAW_Pos = 0x9
	// Bit mask of SW_XON_INT_RAW field.
	UART_INT_RAW_SW_XON_INT_RAW_Msk = 0x200
	// Bit SW_XON_INT_RAW.
	UART_INT_RAW_SW_XON_INT_RAW = 0x200
	// Position of SW_XOFF_INT_RAW field.
	UART_INT_RAW_SW_XOFF_INT_RAW_Pos = 0xa
	// Bit mask of SW_XOFF_INT_RAW field.
	UART_INT_RAW_SW_XOFF_INT_RAW_Msk = 0x400
	// Bit SW_XOFF_INT_RAW.
	UART_INT_RAW_SW_XOFF_INT_RAW = 0x400
	// Position of GLITCH_DET_INT_RAW field.
	UART_INT_RAW_GLITCH_DET_INT_RAW_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_RAW field.
	UART_INT_RAW_GLITCH_DET_INT_RAW_Msk = 0x800
	// Bit GLITCH_DET_INT_RAW.
	UART_INT_RAW_GLITCH_DET_INT_RAW = 0x800
	// Position of TX_BRK_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_DONE_INT_RAW_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_DONE_INT_RAW_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_RAW.
	UART_INT_RAW_TX_BRK_DONE_INT_RAW = 0x1000
	// Position of TX_BRK_IDLE_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_IDLE_DONE_INT_RAW_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_IDLE_DONE_INT_RAW_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_RAW.
	UART_INT_RAW_TX_BRK_IDLE_DONE_INT_RAW = 0x2000
	// Position of TX_DONE_INT_RAW field.
	UART_INT_RAW_TX_DONE_INT_RAW_Pos = 0xe
	// Bit mask of TX_DONE_INT_RAW field.
	UART_INT_RAW_TX_DONE_INT_RAW_Msk = 0x4000
	// Bit TX_DONE_INT_RAW.
	UART_INT_RAW_TX_DONE_INT_RAW = 0x4000
	// Position of RS485_PARITY_ERR_INT_RAW field.
	UART_INT_RAW_RS485_PARITY_ERR_INT_RAW_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_RAW field.
	UART_INT_RAW_RS485_PARITY_ERR_INT_RAW_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_RAW.
	UART_INT_RAW_RS485_PARITY_ERR_INT_RAW = 0x8000
	// Position of RS485_FRM_ERR_INT_RAW field.
	UART_INT_RAW_RS485_FRM_ERR_INT_RAW_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_RAW field.
	UART_INT_RAW_RS485_FRM_ERR_INT_RAW_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_RAW.
	UART_INT_RAW_RS485_FRM_ERR_INT_RAW = 0x10000
	// Position of RS485_CLASH_INT_RAW field.
	UART_INT_RAW_RS485_CLASH_INT_RAW_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_RAW field.
	UART_INT_RAW_RS485_CLASH_INT_RAW_Msk = 0x20000
	// Bit RS485_CLASH_INT_RAW.
	UART_INT_RAW_RS485_CLASH_INT_RAW = 0x20000
	// Position of AT_CMD_CHAR_DET_INT_RAW field.
	UART_INT_RAW_AT_CMD_CHAR_DET_INT_RAW_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_RAW field.
	UART_INT_RAW_AT_CMD_CHAR_DET_INT_RAW_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_RAW.
	UART_INT_RAW_AT_CMD_CHAR_DET_INT_RAW = 0x40000

	// INT_ST
	// Position of RXFIFO_FULL_INT_ST field.
	UART_INT_ST_RXFIFO_FULL_INT_ST_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ST field.
	UART_INT_ST_RXFIFO_FULL_INT_ST_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ST.
	UART_INT_ST_RXFIFO_FULL_INT_ST = 0x1
	// Position of TXFIFO_EMPTY_INT_ST field.
	UART_INT_ST_TXFIFO_EMPTY_INT_ST_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ST field.
	UART_INT_ST_TXFIFO_EMPTY_INT_ST_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ST.
	UART_INT_ST_TXFIFO_EMPTY_INT_ST = 0x2
	// Position of PARITY_ERR_INT_ST field.
	UART_INT_ST_PARITY_ERR_INT_ST_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_ST field.
	UART_INT_ST_PARITY_ERR_INT_ST_Msk = 0x4
	// Bit PARITY_ERR_INT_ST.
	UART_INT_ST_PARITY_ERR_INT_ST = 0x4
	// Position of FRM_ERR_INT_ST field.
	UART_INT_ST_FRM_ERR_INT_ST_Pos = 0x3
	// Bit mask of FRM_ERR_INT_ST field.
	UART_INT_ST_FRM_ERR_INT_ST_Msk = 0x8
	// Bit FRM_ERR_INT_ST.
	UART_INT_ST_FRM_ERR_INT_ST = 0x8
	// Position of RXFIFO_OVF_INT_ST field.
	UART_INT_ST_RXFIFO_OVF_INT_ST_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_ST field.
	UART_INT_ST_RXFIFO_OVF_INT_ST_Msk = 0x10
	// Bit RXFIFO_OVF_INT_ST.
	UART_INT_ST_RXFIFO_OVF_INT_ST = 0x10
	// Position of DSR_CHG_INT_ST field.
	UART_INT_ST_DSR_CHG_INT_ST_Pos = 0x5
	// Bit mask of DSR_CHG_INT_ST field.
	UART_INT_ST_DSR_CHG_INT_ST_Msk = 0x20
	// Bit DSR_CHG_INT_ST.
	UART_INT_ST_DSR_CHG_INT_ST = 0x20
	// Position of CTS_CHG_INT_ST field.
	UART_INT_ST_CTS_CHG_INT_ST_Pos = 0x6
	// Bit mask of CTS_CHG_INT_ST field.
	UART_INT_ST_CTS_CHG_INT_ST_Msk = 0x40
	// Bit CTS_CHG_INT_ST.
	UART_INT_ST_CTS_CHG_INT_ST = 0x40
	// Position of BRK_DET_INT_ST field.
	UART_INT_ST_BRK_DET_INT_ST_Pos = 0x7
	// Bit mask of BRK_DET_INT_ST field.
	UART_INT_ST_BRK_DET_INT_ST_Msk = 0x80
	// Bit BRK_DET_INT_ST.
	UART_INT_ST_BRK_DET_INT_ST = 0x80
	// Position of RXFIFO_TOUT_INT_ST field.
	UART_INT_ST_RXFIFO_TOUT_INT_ST_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_ST field.
	UART_INT_ST_RXFIFO_TOUT_INT_ST_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_ST.
	UART_INT_ST_RXFIFO_TOUT_INT_ST = 0x100
	// Position of SW_XON_INT_ST field.
	UART_INT_ST_SW_XON_INT_ST_Pos = 0x9
	// Bit mask of SW_XON_INT_ST field.
	UART_INT_ST_SW_XON_INT_ST_Msk = 0x200
	// Bit SW_XON_INT_ST.
	UART_INT_ST_SW_XON_INT_ST = 0x200
	// Position of SW_XOFF_INT_ST field.
	UART_INT_ST_SW_XOFF_INT_ST_Pos = 0xa
	// Bit mask of SW_XOFF_INT_ST field.
	UART_INT_ST_SW_XOFF_INT_ST_Msk = 0x400
	// Bit SW_XOFF_INT_ST.
	UART_INT_ST_SW_XOFF_INT_ST = 0x400
	// Position of GLITCH_DET_INT_ST field.
	UART_INT_ST_GLITCH_DET_INT_ST_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_ST field.
	UART_INT_ST_GLITCH_DET_INT_ST_Msk = 0x800
	// Bit GLITCH_DET_INT_ST.
	UART_INT_ST_GLITCH_DET_INT_ST = 0x800
	// Position of TX_BRK_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_DONE_INT_ST_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_DONE_INT_ST_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_ST.
	UART_INT_ST_TX_BRK_DONE_INT_ST = 0x1000
	// Position of TX_BRK_IDLE_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_IDLE_DONE_INT_ST_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_IDLE_DONE_INT_ST_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_ST.
	UART_INT_ST_TX_BRK_IDLE_DONE_INT_ST = 0x2000
	// Position of TX_DONE_INT_ST field.
	UART_INT_ST_TX_DONE_INT_ST_Pos = 0xe
	// Bit mask of TX_DONE_INT_ST field.
	UART_INT_ST_TX_DONE_INT_ST_Msk = 0x4000
	// Bit TX_DONE_INT_ST.
	UART_INT_ST_TX_DONE_INT_ST = 0x4000
	// Position of RS485_PARITY_ERR_INT_ST field.
	UART_INT_ST_RS485_PARITY_ERR_INT_ST_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_ST field.
	UART_INT_ST_RS485_PARITY_ERR_INT_ST_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_ST.
	UART_INT_ST_RS485_PARITY_ERR_INT_ST = 0x8000
	// Position of RS485_FRM_ERR_INT_ST field.
	UART_INT_ST_RS485_FRM_ERR_INT_ST_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_ST field.
	UART_INT_ST_RS485_FRM_ERR_INT_ST_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_ST.
	UART_INT_ST_RS485_FRM_ERR_INT_ST = 0x10000
	// Position of RS485_CLASH_INT_ST field.
	UART_INT_ST_RS485_CLASH_INT_ST_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_ST field.
	UART_INT_ST_RS485_CLASH_INT_ST_Msk = 0x20000
	// Bit RS485_CLASH_INT_ST.
	UART_INT_ST_RS485_CLASH_INT_ST = 0x20000
	// Position of AT_CMD_CHAR_DET_INT_ST field.
	UART_INT_ST_AT_CMD_CHAR_DET_INT_ST_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_ST field.
	UART_INT_ST_AT_CMD_CHAR_DET_INT_ST_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_ST.
	UART_INT_ST_AT_CMD_CHAR_DET_INT_ST = 0x40000

	// INT_ENA
	// Position of RXFIFO_FULL_INT_ENA field.
	UART_INT_ENA_RXFIFO_FULL_INT_ENA_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ENA field.
	UART_INT_ENA_RXFIFO_FULL_INT_ENA_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ENA.
	UART_INT_ENA_RXFIFO_FULL_INT_ENA = 0x1
	// Position of TXFIFO_EMPTY_INT_ENA field.
	UART_INT_ENA_TXFIFO_EMPTY_INT_ENA_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ENA field.
	UART_INT_ENA_TXFIFO_EMPTY_INT_ENA_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ENA.
	UART_INT_ENA_TXFIFO_EMPTY_INT_ENA = 0x2
	// Position of PARITY_ERR_INT_ENA field.
	UART_INT_ENA_PARITY_ERR_INT_ENA_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_ENA field.
	UART_INT_ENA_PARITY_ERR_INT_ENA_Msk = 0x4
	// Bit PARITY_ERR_INT_ENA.
	UART_INT_ENA_PARITY_ERR_INT_ENA = 0x4
	// Position of FRM_ERR_INT_ENA field.
	UART_INT_ENA_FRM_ERR_INT_ENA_Pos = 0x3
	// Bit mask of FRM_ERR_INT_ENA field.
	UART_INT_ENA_FRM_ERR_INT_ENA_Msk = 0x8
	// Bit FRM_ERR_INT_ENA.
	UART_INT_ENA_FRM_ERR_INT_ENA = 0x8
	// Position of RXFIFO_OVF_INT_ENA field.
	UART_INT_ENA_RXFIFO_OVF_INT_ENA_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_ENA field.
	UART_INT_ENA_RXFIFO_OVF_INT_ENA_Msk = 0x10
	// Bit RXFIFO_OVF_INT_ENA.
	UART_INT_ENA_RXFIFO_OVF_INT_ENA = 0x10
	// Position of DSR_CHG_INT_ENA field.
	UART_INT_ENA_DSR_CHG_INT_ENA_Pos = 0x5
	// Bit mask of DSR_CHG_INT_ENA field.
	UART_INT_ENA_DSR_CHG_INT_ENA_Msk = 0x20
	// Bit DSR_CHG_INT_ENA.
	UART_INT_ENA_DSR_CHG_INT_ENA = 0x20
	// Position of CTS_CHG_INT_ENA field.
	UART_INT_ENA_CTS_CHG_INT_ENA_Pos = 0x6
	// Bit mask of CTS_CHG_INT_ENA field.
	UART_INT_ENA_CTS_CHG_INT_ENA_Msk = 0x40
	// Bit CTS_CHG_INT_ENA.
	UART_INT_ENA_CTS_CHG_INT_ENA = 0x40
	// Position of BRK_DET_INT_ENA field.
	UART_INT_ENA_BRK_DET_INT_ENA_Pos = 0x7
	// Bit mask of BRK_DET_INT_ENA field.
	UART_INT_ENA_BRK_DET_INT_ENA_Msk = 0x80
	// Bit BRK_DET_INT_ENA.
	UART_INT_ENA_BRK_DET_INT_ENA = 0x80
	// Position of RXFIFO_TOUT_INT_ENA field.
	UART_INT_ENA_RXFIFO_TOUT_INT_ENA_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_ENA field.
	UART_INT_ENA_RXFIFO_TOUT_INT_ENA_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_ENA.
	UART_INT_ENA_RXFIFO_TOUT_INT_ENA = 0x100
	// Position of SW_XON_INT_ENA field.
	UART_INT_ENA_SW_XON_INT_ENA_Pos = 0x9
	// Bit mask of SW_XON_INT_ENA field.
	UART_INT_ENA_SW_XON_INT_ENA_Msk = 0x200
	// Bit SW_XON_INT_ENA.
	UART_INT_ENA_SW_XON_INT_ENA = 0x200
	// Position of SW_XOFF_INT_ENA field.
	UART_INT_ENA_SW_XOFF_INT_ENA_Pos = 0xa
	// Bit mask of SW_XOFF_INT_ENA field.
	UART_INT_ENA_SW_XOFF_INT_ENA_Msk = 0x400
	// Bit SW_XOFF_INT_ENA.
	UART_INT_ENA_SW_XOFF_INT_ENA = 0x400
	// Position of GLITCH_DET_INT_ENA field.
	UART_INT_ENA_GLITCH_DET_INT_ENA_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_ENA field.
	UART_INT_ENA_GLITCH_DET_INT_ENA_Msk = 0x800
	// Bit GLITCH_DET_INT_ENA.
	UART_INT_ENA_GLITCH_DET_INT_ENA = 0x800
	// Position of TX_BRK_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_DONE_INT_ENA_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_DONE_INT_ENA_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_ENA.
	UART_INT_ENA_TX_BRK_DONE_INT_ENA = 0x1000
	// Position of TX_BRK_IDLE_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_IDLE_DONE_INT_ENA_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_IDLE_DONE_INT_ENA_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_ENA.
	UART_INT_ENA_TX_BRK_IDLE_DONE_INT_ENA = 0x2000
	// Position of TX_DONE_INT_ENA field.
	UART_INT_ENA_TX_DONE_INT_ENA_Pos = 0xe
	// Bit mask of TX_DONE_INT_ENA field.
	UART_INT_ENA_TX_DONE_INT_ENA_Msk = 0x4000
	// Bit TX_DONE_INT_ENA.
	UART_INT_ENA_TX_DONE_INT_ENA = 0x4000
	// Position of RS485_PARITY_ERR_INT_ENA field.
	UART_INT_ENA_RS485_PARITY_ERR_INT_ENA_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_ENA field.
	UART_INT_ENA_RS485_PARITY_ERR_INT_ENA_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_ENA.
	UART_INT_ENA_RS485_PARITY_ERR_INT_ENA = 0x8000
	// Position of RS485_FRM_ERR_INT_ENA field.
	UART_INT_ENA_RS485_FRM_ERR_INT_ENA_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_ENA field.
	UART_INT_ENA_RS485_FRM_ERR_INT_ENA_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_ENA.
	UART_INT_ENA_RS485_FRM_ERR_INT_ENA = 0x10000
	// Position of RS485_CLASH_INT_ENA field.
	UART_INT_ENA_RS485_CLASH_INT_ENA_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_ENA field.
	UART_INT_ENA_RS485_CLASH_INT_ENA_Msk = 0x20000
	// Bit RS485_CLASH_INT_ENA.
	UART_INT_ENA_RS485_CLASH_INT_ENA = 0x20000
	// Position of AT_CMD_CHAR_DET_INT_ENA field.
	UART_INT_ENA_AT_CMD_CHAR_DET_INT_ENA_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_ENA field.
	UART_INT_ENA_AT_CMD_CHAR_DET_INT_ENA_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_ENA.
	UART_INT_ENA_AT_CMD_CHAR_DET_INT_ENA = 0x40000

	// INT_CLR
	// Position of RXFIFO_FULL_INT_CLR field.
	UART_INT_CLR_RXFIFO_FULL_INT_CLR_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_CLR field.
	UART_INT_CLR_RXFIFO_FULL_INT_CLR_Msk = 0x1
	// Bit RXFIFO_FULL_INT_CLR.
	UART_INT_CLR_RXFIFO_FULL_INT_CLR = 0x1
	// Position of TXFIFO_EMPTY_INT_CLR field.
	UART_INT_CLR_TXFIFO_EMPTY_INT_CLR_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_CLR field.
	UART_INT_CLR_TXFIFO_EMPTY_INT_CLR_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_CLR.
	UART_INT_CLR_TXFIFO_EMPTY_INT_CLR = 0x2
	// Position of PARITY_ERR_INT_CLR field.
	UART_INT_CLR_PARITY_ERR_INT_CLR_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_CLR field.
	UART_INT_CLR_PARITY_ERR_INT_CLR_Msk = 0x4
	// Bit PARITY_ERR_INT_CLR.
	UART_INT_CLR_PARITY_ERR_INT_CLR = 0x4
	// Position of FRM_ERR_INT_CLR field.
	UART_INT_CLR_FRM_ERR_INT_CLR_Pos = 0x3
	// Bit mask of FRM_ERR_INT_CLR field.
	UART_INT_CLR_FRM_ERR_INT_CLR_Msk = 0x8
	// Bit FRM_ERR_INT_CLR.
	UART_INT_CLR_FRM_ERR_INT_CLR = 0x8
	// Position of RXFIFO_OVF_INT_CLR field.
	UART_INT_CLR_RXFIFO_OVF_INT_CLR_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_CLR field.
	UART_INT_CLR_RXFIFO_OVF_INT_CLR_Msk = 0x10
	// Bit RXFIFO_OVF_INT_CLR.
	UART_INT_CLR_RXFIFO_OVF_INT_CLR = 0x10
	// Position of DSR_CHG_INT_CLR field.
	UART_INT_CLR_DSR_CHG_INT_CLR_Pos = 0x5
	// Bit mask of DSR_CHG_INT_CLR field.
	UART_INT_CLR_DSR_CHG_INT_CLR_Msk = 0x20
	// Bit DSR_CHG_INT_CLR.
	UART_INT_CLR_DSR_CHG_INT_CLR = 0x20
	// Position of CTS_CHG_INT_CLR field.
	UART_INT_CLR_CTS_CHG_INT_CLR_Pos = 0x6
	// Bit mask of CTS_CHG_INT_CLR field.
	UART_INT_CLR_CTS_CHG_INT_CLR_Msk = 0x40
	// Bit CTS_CHG_INT_CLR.
	UART_INT_CLR_CTS_CHG_INT_CLR = 0x40
	// Position of BRK_DET_INT_CLR field.
	UART_INT_CLR_BRK_DET_INT_CLR_Pos = 0x7
	// Bit mask of BRK_DET_INT_CLR field.
	UART_INT_CLR_BRK_DET_INT_CLR_Msk = 0x80
	// Bit BRK_DET_INT_CLR.
	UART_INT_CLR_BRK_DET_INT_CLR = 0x80
	// Position of RXFIFO_TOUT_INT_CLR field.
	UART_INT_CLR_RXFIFO_TOUT_INT_CLR_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_CLR field.
	UART_INT_CLR_RXFIFO_TOUT_INT_CLR_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_CLR.
	UART_INT_CLR_RXFIFO_TOUT_INT_CLR = 0x100
	// Position of SW_XON_INT_CLR field.
	UART_INT_CLR_SW_XON_INT_CLR_Pos = 0x9
	// Bit mask of SW_XON_INT_CLR field.
	UART_INT_CLR_SW_XON_INT_CLR_Msk = 0x200
	// Bit SW_XON_INT_CLR.
	UART_INT_CLR_SW_XON_INT_CLR = 0x200
	// Position of SW_XOFF_INT_CLR field.
	UART_INT_CLR_SW_XOFF_INT_CLR_Pos = 0xa
	// Bit mask of SW_XOFF_INT_CLR field.
	UART_INT_CLR_SW_XOFF_INT_CLR_Msk = 0x400
	// Bit SW_XOFF_INT_CLR.
	UART_INT_CLR_SW_XOFF_INT_CLR = 0x400
	// Position of GLITCH_DET_INT_CLR field.
	UART_INT_CLR_GLITCH_DET_INT_CLR_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_CLR field.
	UART_INT_CLR_GLITCH_DET_INT_CLR_Msk = 0x800
	// Bit GLITCH_DET_INT_CLR.
	UART_INT_CLR_GLITCH_DET_INT_CLR = 0x800
	// Position of TX_BRK_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_DONE_INT_CLR_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_DONE_INT_CLR_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_CLR.
	UART_INT_CLR_TX_BRK_DONE_INT_CLR = 0x1000
	// Position of TX_BRK_IDLE_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_IDLE_DONE_INT_CLR_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_IDLE_DONE_INT_CLR_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_CLR.
	UART_INT_CLR_TX_BRK_IDLE_DONE_INT_CLR = 0x2000
	// Position of TX_DONE_INT_CLR field.
	UART_INT_CLR_TX_DONE_INT_CLR_Pos = 0xe
	// Bit mask of TX_DONE_INT_CLR field.
	UART_INT_CLR_TX_DONE_INT_CLR_Msk = 0x4000
	// Bit TX_DONE_INT_CLR.
	UART_INT_CLR_TX_DONE_INT_CLR = 0x4000
	// Position of RS485_PARITY_ERR_INT_CLR field.
	UART_INT_CLR_RS485_PARITY_ERR_INT_CLR_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_CLR field.
	UART_INT_CLR_RS485_PARITY_ERR_INT_CLR_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_CLR.
	UART_INT_CLR_RS485_PARITY_ERR_INT_CLR = 0x8000
	// Position of RS485_FRM_ERR_INT_CLR field.
	UART_INT_CLR_RS485_FRM_ERR_INT_CLR_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_CLR field.
	UART_INT_CLR_RS485_FRM_ERR_INT_CLR_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_CLR.
	UART_INT_CLR_RS485_FRM_ERR_INT_CLR = 0x10000
	// Position of RS485_CLASH_INT_CLR field.
	UART_INT_CLR_RS485_CLASH_INT_CLR_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_CLR field.
	UART_INT_CLR_RS485_CLASH_INT_CLR_Msk = 0x20000
	// Bit RS485_CLASH_INT_CLR.
	UART_INT_CLR_RS485_CLASH_INT_CLR = 0x20000
	// Position of AT_CMD_CHAR_DET_INT_CLR field.
	UART_INT_CLR_AT_CMD_CHAR_DET_INT_CLR_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_CLR field.
	UART_INT_CLR_AT_CMD_CHAR_DET_INT_CLR_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_CLR.
	UART_INT_CLR_AT_CMD_CHAR_DET_INT_CLR = 0x40000

	// CLKDIV
	// Position of CLKDIV field.
	UART_CLKDIV_CLKDIV_Pos = 0x0
	// Bit mask of CLKDIV field.
	UART_CLKDIV_CLKDIV_Msk = 0xfffff
	// Position of FRAG field.
	UART_CLKDIV_FRAG_Pos = 0x14
	// Bit mask of FRAG field.
	UART_CLKDIV_FRAG_Msk = 0xf00000

	// AUTOBAUD
	// Position of EN field.
	UART_AUTOBAUD_EN_Pos = 0x0
	// Bit mask of EN field.
	UART_AUTOBAUD_EN_Msk = 0x1
	// Bit EN.
	UART_AUTOBAUD_EN = 0x1
	// Position of GLITCH_FILT field.
	UART_AUTOBAUD_GLITCH_FILT_Pos = 0x8
	// Bit mask of GLITCH_FILT field.
	UART_AUTOBAUD_GLITCH_FILT_Msk = 0xff00

	// STATUS
	// Position of RXFIFO_CNT field.
	UART_STATUS_RXFIFO_CNT_Pos = 0x0
	// Bit mask of RXFIFO_CNT field.
	UART_STATUS_RXFIFO_CNT_Msk = 0xff
	// Position of ST_URX_OUT field.
	UART_STATUS_ST_URX_OUT_Pos = 0x8
	// Bit mask of ST_URX_OUT field.
	UART_STATUS_ST_URX_OUT_Msk = 0xf00
	// Position of DSRN field.
	UART_STATUS_DSRN_Pos = 0xd
	// Bit mask of DSRN field.
	UART_STATUS_DSRN_Msk = 0x2000
	// Bit DSRN.
	UART_STATUS_DSRN = 0x2000
	// Position of CTSN field.
	UART_STATUS_CTSN_Pos = 0xe
	// Bit mask of CTSN field.
	UART_STATUS_CTSN_Msk = 0x4000
	// Bit CTSN.
	UART_STATUS_CTSN = 0x4000
	// Position of RXD field.
	UART_STATUS_RXD_Pos = 0xf
	// Bit mask of RXD field.
	UART_STATUS_RXD_Msk = 0x8000
	// Bit RXD.
	UART_STATUS_RXD = 0x8000
	// Position of TXFIFO_CNT field.
	UART_STATUS_TXFIFO_CNT_Pos = 0x10
	// Bit mask of TXFIFO_CNT field.
	UART_STATUS_TXFIFO_CNT_Msk = 0xff0000
	// Position of ST_UTX_OUT field.
	UART_STATUS_ST_UTX_OUT_Pos = 0x18
	// Bit mask of ST_UTX_OUT field.
	UART_STATUS_ST_UTX_OUT_Msk = 0xf000000
	// Position of DTRN field.
	UART_STATUS_DTRN_Pos = 0x1d
	// Bit mask of DTRN field.
	UART_STATUS_DTRN_Msk = 0x20000000
	// Bit DTRN.
	UART_STATUS_DTRN = 0x20000000
	// Position of RTSN field.
	UART_STATUS_RTSN_Pos = 0x1e
	// Bit mask of RTSN field.
	UART_STATUS_RTSN_Msk = 0x40000000
	// Bit RTSN.
	UART_STATUS_RTSN = 0x40000000
	// Position of TXD field.
	UART_STATUS_TXD_Pos = 0x1f
	// Bit mask of TXD field.
	UART_STATUS_TXD_Msk = 0x80000000
	// Bit TXD.
	UART_STATUS_TXD = 0x80000000

	// CONF0
	// Position of PARITY field.
	UART_CONF0_PARITY_Pos = 0x0
	// Bit mask of PARITY field.
	UART_CONF0_PARITY_Msk = 0x1
	// Bit PARITY.
	UART_CONF0_PARITY = 0x1
	// Position of PARITY_EN field.
	UART_CONF0_PARITY_EN_Pos = 0x1
	// Bit mask of PARITY_EN field.
	UART_CONF0_PARITY_EN_Msk = 0x2
	// Bit PARITY_EN.
	UART_CONF0_PARITY_EN = 0x2
	// Position of BIT_NUM field.
	UART_CONF0_BIT_NUM_Pos = 0x2
	// Bit mask of BIT_NUM field.
	UART_CONF0_BIT_NUM_Msk = 0xc
	// Position of STOP_BIT_NUM field.
	UART_CONF0_STOP_BIT_NUM_Pos = 0x4
	// Bit mask of STOP_BIT_NUM field.
	UART_CONF0_STOP_BIT_NUM_Msk = 0x30
	// Position of SW_RTS field.
	UART_CONF0_SW_RTS_Pos = 0x6
	// Bit mask of SW_RTS field.
	UART_CONF0_SW_RTS_Msk = 0x40
	// Bit SW_RTS.
	UART_CONF0_SW_RTS = 0x40
	// Position of SW_DTR field.
	UART_CONF0_SW_DTR_Pos = 0x7
	// Bit mask of SW_DTR field.
	UART_CONF0_SW_DTR_Msk = 0x80
	// Bit SW_DTR.
	UART_CONF0_SW_DTR = 0x80
	// Position of TXD_BRK field.
	UART_CONF0_TXD_BRK_Pos = 0x8
	// Bit mask of TXD_BRK field.
	UART_CONF0_TXD_BRK_Msk = 0x100
	// Bit TXD_BRK.
	UART_CONF0_TXD_BRK = 0x100
	// Position of IRDA_DPLX field.
	UART_CONF0_IRDA_DPLX_Pos = 0x9
	// Bit mask of IRDA_DPLX field.
	UART_CONF0_IRDA_DPLX_Msk = 0x200
	// Bit IRDA_DPLX.
	UART_CONF0_IRDA_DPLX = 0x200
	// Position of IRDA_TX_EN field.
	UART_CONF0_IRDA_TX_EN_Pos = 0xa
	// Bit mask of IRDA_TX_EN field.
	UART_CONF0_IRDA_TX_EN_Msk = 0x400
	// Bit IRDA_TX_EN.
	UART_CONF0_IRDA_TX_EN = 0x400
	// Position of IRDA_WCTL field.
	UART_CONF0_IRDA_WCTL_Pos = 0xb
	// Bit mask of IRDA_WCTL field.
	UART_CONF0_IRDA_WCTL_Msk = 0x800
	// Bit IRDA_WCTL.
	UART_CONF0_IRDA_WCTL = 0x800
	// Position of IRDA_TX_INV field.
	UART_CONF0_IRDA_TX_INV_Pos = 0xc
	// Bit mask of IRDA_TX_INV field.
	UART_CONF0_IRDA_TX_INV_Msk = 0x1000
	// Bit IRDA_TX_INV.
	UART_CONF0_IRDA_TX_INV = 0x1000
	// Position of IRDA_RX_INV field.
	UART_CONF0_IRDA_RX_INV_Pos = 0xd
	// Bit mask of IRDA_RX_INV field.
	UART_CONF0_IRDA_RX_INV_Msk = 0x2000
	// Bit IRDA_RX_INV.
	UART_CONF0_IRDA_RX_INV = 0x2000
	// Position of LOOPBACK field.
	UART_CONF0_LOOPBACK_Pos = 0xe
	// Bit mask of LOOPBACK field.
	UART_CONF0_LOOPBACK_Msk = 0x4000
	// Bit LOOPBACK.
	UART_CONF0_LOOPBACK = 0x4000
	// Position of TX_FLOW_EN field.
	UART_CONF0_TX_FLOW_EN_Pos = 0xf
	// Bit mask of TX_FLOW_EN field.
	UART_CONF0_TX_FLOW_EN_Msk = 0x8000
	// Bit TX_FLOW_EN.
	UART_CONF0_TX_FLOW_EN = 0x8000
	// Position of IRDA_EN field.
	UART_CONF0_IRDA_EN_Pos = 0x10
	// Bit mask of IRDA_EN field.
	UART_CONF0_IRDA_EN_Msk = 0x10000
	// Bit IRDA_EN.
	UART_CONF0_IRDA_EN = 0x10000
	// Position of RXFIFO_RST field.
	UART_CONF0_RXFIFO_RST_Pos = 0x11
	// Bit mask of RXFIFO_RST field.
	UART_CONF0_RXFIFO_RST_Msk = 0x20000
	// Bit RXFIFO_RST.
	UART_CONF0_RXFIFO_RST = 0x20000
	// Position of TXFIFO_RST field.
	UART_CONF0_TXFIFO_RST_Pos = 0x12
	// Bit mask of TXFIFO_RST field.
	UART_CONF0_TXFIFO_RST_Msk = 0x40000
	// Bit TXFIFO_RST.
	UART_CONF0_TXFIFO_RST = 0x40000
	// Position of RXD_INV field.
	UART_CONF0_RXD_INV_Pos = 0x13
	// Bit mask of RXD_INV field.
	UART_CONF0_RXD_INV_Msk = 0x80000
	// Bit RXD_INV.
	UART_CONF0_RXD_INV = 0x80000
	// Position of CTS_INV field.
	UART_CONF0_CTS_INV_Pos = 0x14
	// Bit mask of CTS_INV field.
	UART_CONF0_CTS_INV_Msk = 0x100000
	// Bit CTS_INV.
	UART_CONF0_CTS_INV = 0x100000
	// Position of DSR_INV field.
	UART_CONF0_DSR_INV_Pos = 0x15
	// Bit mask of DSR_INV field.
	UART_CONF0_DSR_INV_Msk = 0x200000
	// Bit DSR_INV.
	UART_CONF0_DSR_INV = 0x200000
	// Position of TXD_INV field.
	UART_CONF0_TXD_INV_Pos = 0x16
	// Bit mask of TXD_INV field.
	UART_CONF0_TXD_INV_Msk = 0x400000
	// Bit TXD_INV.
	UART_CONF0_TXD_INV = 0x400000
	// Position of RTS_INV field.
	UART_CONF0_RTS_INV_Pos = 0x17
	// Bit mask of RTS_INV field.
	UART_CONF0_RTS_INV_Msk = 0x800000
	// Bit RTS_INV.
	UART_CONF0_RTS_INV = 0x800000
	// Position of DTR_INV field.
	UART_CONF0_DTR_INV_Pos = 0x18
	// Bit mask of DTR_INV field.
	UART_CONF0_DTR_INV_Msk = 0x1000000
	// Bit DTR_INV.
	UART_CONF0_DTR_INV = 0x1000000
	// Position of CLK_EN field.
	UART_CONF0_CLK_EN_Pos = 0x19
	// Bit mask of CLK_EN field.
	UART_CONF0_CLK_EN_Msk = 0x2000000
	// Bit CLK_EN.
	UART_CONF0_CLK_EN = 0x2000000
	// Position of ERR_WR_MASK field.
	UART_CONF0_ERR_WR_MASK_Pos = 0x1a
	// Bit mask of ERR_WR_MASK field.
	UART_CONF0_ERR_WR_MASK_Msk = 0x4000000
	// Bit ERR_WR_MASK.
	UART_CONF0_ERR_WR_MASK = 0x4000000
	// Position of TICK_REF_ALWAYS_ON field.
	UART_CONF0_TICK_REF_ALWAYS_ON_Pos = 0x1b
	// Bit mask of TICK_REF_ALWAYS_ON field.
	UART_CONF0_TICK_REF_ALWAYS_ON_Msk = 0x8000000
	// Bit TICK_REF_ALWAYS_ON.
	UART_CONF0_TICK_REF_ALWAYS_ON = 0x8000000

	// CONF1
	// Position of RXFIFO_FULL_THRHD field.
	UART_CONF1_RXFIFO_FULL_THRHD_Pos = 0x0
	// Bit mask of RXFIFO_FULL_THRHD field.
	UART_CONF1_RXFIFO_FULL_THRHD_Msk = 0x7f
	// Position of TXFIFO_EMPTY_THRHD field.
	UART_CONF1_TXFIFO_EMPTY_THRHD_Pos = 0x8
	// Bit mask of TXFIFO_EMPTY_THRHD field.
	UART_CONF1_TXFIFO_EMPTY_THRHD_Msk = 0x7f00
	// Position of RX_FLOW_THRHD field.
	UART_CONF1_RX_FLOW_THRHD_Pos = 0x10
	// Bit mask of RX_FLOW_THRHD field.
	UART_CONF1_RX_FLOW_THRHD_Msk = 0x7f0000
	// Position of RX_FLOW_EN field.
	UART_CONF1_RX_FLOW_EN_Pos = 0x17
	// Bit mask of RX_FLOW_EN field.
	UART_CONF1_RX_FLOW_EN_Msk = 0x800000
	// Bit RX_FLOW_EN.
	UART_CONF1_RX_FLOW_EN = 0x800000
	// Position of RX_TOUT_THRHD field.
	UART_CONF1_RX_TOUT_THRHD_Pos = 0x18
	// Bit mask of RX_TOUT_THRHD field.
	UART_CONF1_RX_TOUT_THRHD_Msk = 0x7f000000
	// Position of RX_TOUT_EN field.
	UART_CONF1_RX_TOUT_EN_Pos = 0x1f
	// Bit mask of RX_TOUT_EN field.
	UART_CONF1_RX_TOUT_EN_Msk = 0x80000000
	// Bit RX_TOUT_EN.
	UART_CONF1_RX_TOUT_EN = 0x80000000

	// LOWPULSE
	// Position of MIN_CNT field.
	UART_LOWPULSE_MIN_CNT_Pos = 0x0
	// Bit mask of MIN_CNT field.
	UART_LOWPULSE_MIN_CNT_Msk = 0xfffff

	// HIGHPULSE
	// Position of MIN_CNT field.
	UART_HIGHPULSE_MIN_CNT_Pos = 0x0
	// Bit mask of MIN_CNT field.
	UART_HIGHPULSE_MIN_CNT_Msk = 0xfffff

	// RXD_CNT
	// Position of RXD_EDGE_CNT field.
	UART_RXD_CNT_RXD_EDGE_CNT_Pos = 0x0
	// Bit mask of RXD_EDGE_CNT field.
	UART_RXD_CNT_RXD_EDGE_CNT_Msk = 0x3ff

	// FLOW_CONF
	// Position of SW_FLOW_CON_EN field.
	UART_FLOW_CONF_SW_FLOW_CON_EN_Pos = 0x0
	// Bit mask of SW_FLOW_CON_EN field.
	UART_FLOW_CONF_SW_FLOW_CON_EN_Msk = 0x1
	// Bit SW_FLOW_CON_EN.
	UART_FLOW_CONF_SW_FLOW_CON_EN = 0x1
	// Position of XONOFF_DEL field.
	UART_FLOW_CONF_XONOFF_DEL_Pos = 0x1
	// Bit mask of XONOFF_DEL field.
	UART_FLOW_CONF_XONOFF_DEL_Msk = 0x2
	// Bit XONOFF_DEL.
	UART_FLOW_CONF_XONOFF_DEL = 0x2
	// Position of FORCE_XON field.
	UART_FLOW_CONF_FORCE_XON_Pos = 0x2
	// Bit mask of FORCE_XON field.
	UART_FLOW_CONF_FORCE_XON_Msk = 0x4
	// Bit FORCE_XON.
	UART_FLOW_CONF_FORCE_XON = 0x4
	// Position of FORCE_XOFF field.
	UART_FLOW_CONF_FORCE_XOFF_Pos = 0x3
	// Bit mask of FORCE_XOFF field.
	UART_FLOW_CONF_FORCE_XOFF_Msk = 0x8
	// Bit FORCE_XOFF.
	UART_FLOW_CONF_FORCE_XOFF = 0x8
	// Position of SEND_XON field.
	UART_FLOW_CONF_SEND_XON_Pos = 0x4
	// Bit mask of SEND_XON field.
	UART_FLOW_CONF_SEND_XON_Msk = 0x10
	// Bit SEND_XON.
	UART_FLOW_CONF_SEND_XON = 0x10
	// Position of SEND_XOFF field.
	UART_FLOW_CONF_SEND_XOFF_Pos = 0x5
	// Bit mask of SEND_XOFF field.
	UART_FLOW_CONF_SEND_XOFF_Msk = 0x20
	// Bit SEND_XOFF.
	UART_FLOW_CONF_SEND_XOFF = 0x20

	// SLEEP_CONF
	// Position of ACTIVE_THRESHOLD field.
	UART_SLEEP_CONF_ACTIVE_THRESHOLD_Pos = 0x0
	// Bit mask of ACTIVE_THRESHOLD field.
	UART_SLEEP_CONF_ACTIVE_THRESHOLD_Msk = 0x3ff

	// SWFC_CONF
	// Position of XON_THRESHOLD field.
	UART_SWFC_CONF_XON_THRESHOLD_Pos = 0x0
	// Bit mask of XON_THRESHOLD field.
	UART_SWFC_CONF_XON_THRESHOLD_Msk = 0xff
	// Position of XOFF_THRESHOLD field.
	UART_SWFC_CONF_XOFF_THRESHOLD_Pos = 0x8
	// Bit mask of XOFF_THRESHOLD field.
	UART_SWFC_CONF_XOFF_THRESHOLD_Msk = 0xff00
	// Position of XON_CHAR field.
	UART_SWFC_CONF_XON_CHAR_Pos = 0x10
	// Bit mask of XON_CHAR field.
	UART_SWFC_CONF_XON_CHAR_Msk = 0xff0000
	// Position of XOFF_CHAR field.
	UART_SWFC_CONF_XOFF_CHAR_Pos = 0x18
	// Bit mask of XOFF_CHAR field.
	UART_SWFC_CONF_XOFF_CHAR_Msk = 0xff000000

	// IDLE_CONF
	// Position of RX_IDLE_THRHD field.
	UART_IDLE_CONF_RX_IDLE_THRHD_Pos = 0x0
	// Bit mask of RX_IDLE_THRHD field.
	UART_IDLE_CONF_RX_IDLE_THRHD_Msk = 0x3ff
	// Position of TX_IDLE_NUM field.
	UART_IDLE_CONF_TX_IDLE_NUM_Pos = 0xa
	// Bit mask of TX_IDLE_NUM field.
	UART_IDLE_CONF_TX_IDLE_NUM_Msk = 0xffc00
	// Position of TX_BRK_NUM field.
	UART_IDLE_CONF_TX_BRK_NUM_Pos = 0x14
	// Bit mask of TX_BRK_NUM field.
	UART_IDLE_CONF_TX_BRK_NUM_Msk = 0xff00000

	// RS485_CONF
	// Position of RS485_EN field.
	UART_RS485_CONF_RS485_EN_Pos = 0x0
	// Bit mask of RS485_EN field.
	UART_RS485_CONF_RS485_EN_Msk = 0x1
	// Bit RS485_EN.
	UART_RS485_CONF_RS485_EN = 0x1
	// Position of DL0_EN field.
	UART_RS485_CONF_DL0_EN_Pos = 0x1
	// Bit mask of DL0_EN field.
	UART_RS485_CONF_DL0_EN_Msk = 0x2
	// Bit DL0_EN.
	UART_RS485_CONF_DL0_EN = 0x2
	// Position of DL1_EN field.
	UART_RS485_CONF_DL1_EN_Pos = 0x2
	// Bit mask of DL1_EN field.
	UART_RS485_CONF_DL1_EN_Msk = 0x4
	// Bit DL1_EN.
	UART_RS485_CONF_DL1_EN = 0x4
	// Position of RS485TX_RX_EN field.
	UART_RS485_CONF_RS485TX_RX_EN_Pos = 0x3
	// Bit mask of RS485TX_RX_EN field.
	UART_RS485_CONF_RS485TX_RX_EN_Msk = 0x8
	// Bit RS485TX_RX_EN.
	UART_RS485_CONF_RS485TX_RX_EN = 0x8
	// Position of RS485RXBY_TX_EN field.
	UART_RS485_CONF_RS485RXBY_TX_EN_Pos = 0x4
	// Bit mask of RS485RXBY_TX_EN field.
	UART_RS485_CONF_RS485RXBY_TX_EN_Msk = 0x10
	// Bit RS485RXBY_TX_EN.
	UART_RS485_CONF_RS485RXBY_TX_EN = 0x10
	// Position of RS485_RX_DLY_NUM field.
	UART_RS485_CONF_RS485_RX_DLY_NUM_Pos = 0x5
	// Bit mask of RS485_RX_DLY_NUM field.
	UART_RS485_CONF_RS485_RX_DLY_NUM_Msk = 0x20
	// Bit RS485_RX_DLY_NUM.
	UART_RS485_CONF_RS485_RX_DLY_NUM = 0x20
	// Position of RS485_TX_DLY_NUM field.
	UART_RS485_CONF_RS485_TX_DLY_NUM_Pos = 0x6
	// Bit mask of RS485_TX_DLY_NUM field.
	UART_RS485_CONF_RS485_TX_DLY_NUM_Msk = 0x3c0

	// AT_CMD_PRECNT
	// Position of PRE_IDLE_NUM field.
	UART_AT_CMD_PRECNT_PRE_IDLE_NUM_Pos = 0x0
	// Bit mask of PRE_IDLE_NUM field.
	UART_AT_CMD_PRECNT_PRE_IDLE_NUM_Msk = 0xffffff

	// AT_CMD_POSTCNT
	// Position of POST_IDLE_NUM field.
	UART_AT_CMD_POSTCNT_POST_IDLE_NUM_Pos = 0x0
	// Bit mask of POST_IDLE_NUM field.
	UART_AT_CMD_POSTCNT_POST_IDLE_NUM_Msk = 0xffffff

	// AT_CMD_GAPTOUT
	// Position of RX_GAP_TOUT field.
	UART_AT_CMD_GAPTOUT_RX_GAP_TOUT_Pos = 0x0
	// Bit mask of RX_GAP_TOUT field.
	UART_AT_CMD_GAPTOUT_RX_GAP_TOUT_Msk = 0xffffff

	// AT_CMD_CHAR
	// Position of AT_CMD_CHAR field.
	UART_AT_CMD_CHAR_AT_CMD_CHAR_Pos = 0x0
	// Bit mask of AT_CMD_CHAR field.
	UART_AT_CMD_CHAR_AT_CMD_CHAR_Msk = 0xff
	// Position of CHAR_NUM field.
	UART_AT_CMD_CHAR_CHAR_NUM_Pos = 0x8
	// Bit mask of CHAR_NUM field.
	UART_AT_CMD_CHAR_CHAR_NUM_Msk = 0xff00

	// MEM_CONF
	// Position of MEM_PD field.
	UART_MEM_CONF_MEM_PD_Pos = 0x0
	// Bit mask of MEM_PD field.
	UART_MEM_CONF_MEM_PD_Msk = 0x1
	// Bit MEM_PD.
	UART_MEM_CONF_MEM_PD = 0x1
	// Position of RX_SIZE field.
	UART_MEM_CONF_RX_SIZE_Pos = 0x3
	// Bit mask of RX_SIZE field.
	UART_MEM_CONF_RX_SIZE_Msk = 0x78
	// Position of TX_SIZE field.
	UART_MEM_CONF_TX_SIZE_Pos = 0x7
	// Bit mask of TX_SIZE field.
	UART_MEM_CONF_TX_SIZE_Msk = 0x780
	// Position of RX_FLOW_THRHD_H3 field.
	UART_MEM_CONF_RX_FLOW_THRHD_H3_Pos = 0xf
	// Bit mask of RX_FLOW_THRHD_H3 field.
	UART_MEM_CONF_RX_FLOW_THRHD_H3_Msk = 0x38000
	// Position of RX_TOUT_THRHD_H3 field.
	UART_MEM_CONF_RX_TOUT_THRHD_H3_Pos = 0x12
	// Bit mask of RX_TOUT_THRHD_H3 field.
	UART_MEM_CONF_RX_TOUT_THRHD_H3_Msk = 0x1c0000
	// Position of XON_THRESHOLD_H2 field.
	UART_MEM_CONF_XON_THRESHOLD_H2_Pos = 0x15
	// Bit mask of XON_THRESHOLD_H2 field.
	UART_MEM_CONF_XON_THRESHOLD_H2_Msk = 0x600000
	// Position of XOFF_THRESHOLD_H2 field.
	UART_MEM_CONF_XOFF_THRESHOLD_H2_Pos = 0x17
	// Bit mask of XOFF_THRESHOLD_H2 field.
	UART_MEM_CONF_XOFF_THRESHOLD_H2_Msk = 0x1800000
	// Position of RX_MEM_FULL_THRHD field.
	UART_MEM_CONF_RX_MEM_FULL_THRHD_Pos = 0x19
	// Bit mask of RX_MEM_FULL_THRHD field.
	UART_MEM_CONF_RX_MEM_FULL_THRHD_Msk = 0xe000000
	// Position of TX_MEM_EMPTY_THRHD field.
	UART_MEM_CONF_TX_MEM_EMPTY_THRHD_Pos = 0x1c
	// Bit mask of TX_MEM_EMPTY_THRHD field.
	UART_MEM_CONF_TX_MEM_EMPTY_THRHD_Msk = 0x70000000

	// MEM_TX_STATUS
	// Position of MEM_TX_STATUS field.
	UART_MEM_TX_STATUS_MEM_TX_STATUS_Pos = 0x0
	// Bit mask of MEM_TX_STATUS field.
	UART_MEM_TX_STATUS_MEM_TX_STATUS_Msk = 0xffffff

	// MEM_RX_STATUS
	// Position of MEM_RX_STATUS field.
	UART_MEM_RX_STATUS_MEM_RX_STATUS_Pos = 0x0
	// Bit mask of MEM_RX_STATUS field.
	UART_MEM_RX_STATUS_MEM_RX_STATUS_Msk = 0xffffff
	// Position of MEM_RX_RD_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_RD_ADDR_Pos = 0x2
	// Bit mask of MEM_RX_RD_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_RD_ADDR_Msk = 0x1ffc
	// Position of MEM_RX_WR_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_WR_ADDR_Pos = 0xd
	// Bit mask of MEM_RX_WR_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_WR_ADDR_Msk = 0xffe000

	// MEM_CNT_STATUS
	// Position of RX_MEM_CNT field.
	UART_MEM_CNT_STATUS_RX_MEM_CNT_Pos = 0x0
	// Bit mask of RX_MEM_CNT field.
	UART_MEM_CNT_STATUS_RX_MEM_CNT_Msk = 0x7
	// Position of TX_MEM_CNT field.
	UART_MEM_CNT_STATUS_TX_MEM_CNT_Pos = 0x3
	// Bit mask of TX_MEM_CNT field.
	UART_MEM_CNT_STATUS_TX_MEM_CNT_Msk = 0x38

	// POSPULSE
	// Position of POSEDGE_MIN_CNT field.
	UART_POSPULSE_POSEDGE_MIN_CNT_Pos = 0x0
	// Bit mask of POSEDGE_MIN_CNT field.
	UART_POSPULSE_POSEDGE_MIN_CNT_Msk = 0xfffff

	// NEGPULSE
	// Position of NEGEDGE_MIN_CNT field.
	UART_NEGPULSE_NEGEDGE_MIN_CNT_Pos = 0x0
	// Bit mask of NEGEDGE_MIN_CNT field.
	UART_NEGPULSE_NEGEDGE_MIN_CNT_Msk = 0xfffff

	// DATE
	// Position of DATE field.
	UART_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	UART_DATE_DATE_Msk = 0xffffffff

	// ID
	// Position of ID field.
	UART_ID_ID_Pos = 0x0
	// Bit mask of ID field.
	UART_ID_ID_Msk = 0xffffffff
)

// Constants for UHCI0: Universal Host Controller Interface 0
const (
	// CONF0
	// Position of IN_RST field.
	UHCI_CONF0_IN_RST_Pos = 0x0
	// Bit mask of IN_RST field.
	UHCI_CONF0_IN_RST_Msk = 0x1
	// Bit IN_RST.
	UHCI_CONF0_IN_RST = 0x1
	// Position of OUT_RST field.
	UHCI_CONF0_OUT_RST_Pos = 0x1
	// Bit mask of OUT_RST field.
	UHCI_CONF0_OUT_RST_Msk = 0x2
	// Bit OUT_RST.
	UHCI_CONF0_OUT_RST = 0x2
	// Position of AHBM_FIFO_RST field.
	UHCI_CONF0_AHBM_FIFO_RST_Pos = 0x2
	// Bit mask of AHBM_FIFO_RST field.
	UHCI_CONF0_AHBM_FIFO_RST_Msk = 0x4
	// Bit AHBM_FIFO_RST.
	UHCI_CONF0_AHBM_FIFO_RST = 0x4
	// Position of AHBM_RST field.
	UHCI_CONF0_AHBM_RST_Pos = 0x3
	// Bit mask of AHBM_RST field.
	UHCI_CONF0_AHBM_RST_Msk = 0x8
	// Bit AHBM_RST.
	UHCI_CONF0_AHBM_RST = 0x8
	// Position of IN_LOOP_TEST field.
	UHCI_CONF0_IN_LOOP_TEST_Pos = 0x4
	// Bit mask of IN_LOOP_TEST field.
	UHCI_CONF0_IN_LOOP_TEST_Msk = 0x10
	// Bit IN_LOOP_TEST.
	UHCI_CONF0_IN_LOOP_TEST = 0x10
	// Position of OUT_LOOP_TEST field.
	UHCI_CONF0_OUT_LOOP_TEST_Pos = 0x5
	// Bit mask of OUT_LOOP_TEST field.
	UHCI_CONF0_OUT_LOOP_TEST_Msk = 0x20
	// Bit OUT_LOOP_TEST.
	UHCI_CONF0_OUT_LOOP_TEST = 0x20
	// Position of OUT_AUTO_WRBACK field.
	UHCI_CONF0_OUT_AUTO_WRBACK_Pos = 0x6
	// Bit mask of OUT_AUTO_WRBACK field.
	UHCI_CONF0_OUT_AUTO_WRBACK_Msk = 0x40
	// Bit OUT_AUTO_WRBACK.
	UHCI_CONF0_OUT_AUTO_WRBACK = 0x40
	// Position of OUT_NO_RESTART_CLR field.
	UHCI_CONF0_OUT_NO_RESTART_CLR_Pos = 0x7
	// Bit mask of OUT_NO_RESTART_CLR field.
	UHCI_CONF0_OUT_NO_RESTART_CLR_Msk = 0x80
	// Bit OUT_NO_RESTART_CLR.
	UHCI_CONF0_OUT_NO_RESTART_CLR = 0x80
	// Position of OUT_EOF_MODE field.
	UHCI_CONF0_OUT_EOF_MODE_Pos = 0x8
	// Bit mask of OUT_EOF_MODE field.
	UHCI_CONF0_OUT_EOF_MODE_Msk = 0x100
	// Bit OUT_EOF_MODE.
	UHCI_CONF0_OUT_EOF_MODE = 0x100
	// Position of UART0_CE field.
	UHCI_CONF0_UART0_CE_Pos = 0x9
	// Bit mask of UART0_CE field.
	UHCI_CONF0_UART0_CE_Msk = 0x200
	// Bit UART0_CE.
	UHCI_CONF0_UART0_CE = 0x200
	// Position of UART1_CE field.
	UHCI_CONF0_UART1_CE_Pos = 0xa
	// Bit mask of UART1_CE field.
	UHCI_CONF0_UART1_CE_Msk = 0x400
	// Bit UART1_CE.
	UHCI_CONF0_UART1_CE = 0x400
	// Position of UART2_CE field.
	UHCI_CONF0_UART2_CE_Pos = 0xb
	// Bit mask of UART2_CE field.
	UHCI_CONF0_UART2_CE_Msk = 0x800
	// Bit UART2_CE.
	UHCI_CONF0_UART2_CE = 0x800
	// Position of OUTDSCR_BURST_EN field.
	UHCI_CONF0_OUTDSCR_BURST_EN_Pos = 0xc
	// Bit mask of OUTDSCR_BURST_EN field.
	UHCI_CONF0_OUTDSCR_BURST_EN_Msk = 0x1000
	// Bit OUTDSCR_BURST_EN.
	UHCI_CONF0_OUTDSCR_BURST_EN = 0x1000
	// Position of INDSCR_BURST_EN field.
	UHCI_CONF0_INDSCR_BURST_EN_Pos = 0xd
	// Bit mask of INDSCR_BURST_EN field.
	UHCI_CONF0_INDSCR_BURST_EN_Msk = 0x2000
	// Bit INDSCR_BURST_EN.
	UHCI_CONF0_INDSCR_BURST_EN = 0x2000
	// Position of OUT_DATA_BURST_EN field.
	UHCI_CONF0_OUT_DATA_BURST_EN_Pos = 0xe
	// Bit mask of OUT_DATA_BURST_EN field.
	UHCI_CONF0_OUT_DATA_BURST_EN_Msk = 0x4000
	// Bit OUT_DATA_BURST_EN.
	UHCI_CONF0_OUT_DATA_BURST_EN = 0x4000
	// Position of MEM_TRANS_EN field.
	UHCI_CONF0_MEM_TRANS_EN_Pos = 0xf
	// Bit mask of MEM_TRANS_EN field.
	UHCI_CONF0_MEM_TRANS_EN_Msk = 0x8000
	// Bit MEM_TRANS_EN.
	UHCI_CONF0_MEM_TRANS_EN = 0x8000
	// Position of SEPER_EN field.
	UHCI_CONF0_SEPER_EN_Pos = 0x10
	// Bit mask of SEPER_EN field.
	UHCI_CONF0_SEPER_EN_Msk = 0x10000
	// Bit SEPER_EN.
	UHCI_CONF0_SEPER_EN = 0x10000
	// Position of HEAD_EN field.
	UHCI_CONF0_HEAD_EN_Pos = 0x11
	// Bit mask of HEAD_EN field.
	UHCI_CONF0_HEAD_EN_Msk = 0x20000
	// Bit HEAD_EN.
	UHCI_CONF0_HEAD_EN = 0x20000
	// Position of CRC_REC_EN field.
	UHCI_CONF0_CRC_REC_EN_Pos = 0x12
	// Bit mask of CRC_REC_EN field.
	UHCI_CONF0_CRC_REC_EN_Msk = 0x40000
	// Bit CRC_REC_EN.
	UHCI_CONF0_CRC_REC_EN = 0x40000
	// Position of UART_IDLE_EOF_EN field.
	UHCI_CONF0_UART_IDLE_EOF_EN_Pos = 0x13
	// Bit mask of UART_IDLE_EOF_EN field.
	UHCI_CONF0_UART_IDLE_EOF_EN_Msk = 0x80000
	// Bit UART_IDLE_EOF_EN.
	UHCI_CONF0_UART_IDLE_EOF_EN = 0x80000
	// Position of LEN_EOF_EN field.
	UHCI_CONF0_LEN_EOF_EN_Pos = 0x14
	// Bit mask of LEN_EOF_EN field.
	UHCI_CONF0_LEN_EOF_EN_Msk = 0x100000
	// Bit LEN_EOF_EN.
	UHCI_CONF0_LEN_EOF_EN = 0x100000
	// Position of ENCODE_CRC_EN field.
	UHCI_CONF0_ENCODE_CRC_EN_Pos = 0x15
	// Bit mask of ENCODE_CRC_EN field.
	UHCI_CONF0_ENCODE_CRC_EN_Msk = 0x200000
	// Bit ENCODE_CRC_EN.
	UHCI_CONF0_ENCODE_CRC_EN = 0x200000
	// Position of CLK_EN field.
	UHCI_CONF0_CLK_EN_Pos = 0x16
	// Bit mask of CLK_EN field.
	UHCI_CONF0_CLK_EN_Msk = 0x400000
	// Bit CLK_EN.
	UHCI_CONF0_CLK_EN = 0x400000
	// Position of UART_RX_BRK_EOF_EN field.
	UHCI_CONF0_UART_RX_BRK_EOF_EN_Pos = 0x17
	// Bit mask of UART_RX_BRK_EOF_EN field.
	UHCI_CONF0_UART_RX_BRK_EOF_EN_Msk = 0x800000
	// Bit UART_RX_BRK_EOF_EN.
	UHCI_CONF0_UART_RX_BRK_EOF_EN = 0x800000

	// INT_RAW
	// Position of RX_START_INT_RAW field.
	UHCI_INT_RAW_RX_START_INT_RAW_Pos = 0x0
	// Bit mask of RX_START_INT_RAW field.
	UHCI_INT_RAW_RX_START_INT_RAW_Msk = 0x1
	// Bit RX_START_INT_RAW.
	UHCI_INT_RAW_RX_START_INT_RAW = 0x1
	// Position of TX_START_INT_RAW field.
	UHCI_INT_RAW_TX_START_INT_RAW_Pos = 0x1
	// Bit mask of TX_START_INT_RAW field.
	UHCI_INT_RAW_TX_START_INT_RAW_Msk = 0x2
	// Bit TX_START_INT_RAW.
	UHCI_INT_RAW_TX_START_INT_RAW = 0x2
	// Position of RX_HUNG_INT_RAW field.
	UHCI_INT_RAW_RX_HUNG_INT_RAW_Pos = 0x2
	// Bit mask of RX_HUNG_INT_RAW field.
	UHCI_INT_RAW_RX_HUNG_INT_RAW_Msk = 0x4
	// Bit RX_HUNG_INT_RAW.
	UHCI_INT_RAW_RX_HUNG_INT_RAW = 0x4
	// Position of TX_HUNG_INT_RAW field.
	UHCI_INT_RAW_TX_HUNG_INT_RAW_Pos = 0x3
	// Bit mask of TX_HUNG_INT_RAW field.
	UHCI_INT_RAW_TX_HUNG_INT_RAW_Msk = 0x8
	// Bit TX_HUNG_INT_RAW.
	UHCI_INT_RAW_TX_HUNG_INT_RAW = 0x8
	// Position of IN_DONE_INT_RAW field.
	UHCI_INT_RAW_IN_DONE_INT_RAW_Pos = 0x4
	// Bit mask of IN_DONE_INT_RAW field.
	UHCI_INT_RAW_IN_DONE_INT_RAW_Msk = 0x10
	// Bit IN_DONE_INT_RAW.
	UHCI_INT_RAW_IN_DONE_INT_RAW = 0x10
	// Position of IN_SUC_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_SUC_EOF_INT_RAW_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_SUC_EOF_INT_RAW_Msk = 0x20
	// Bit IN_SUC_EOF_INT_RAW.
	UHCI_INT_RAW_IN_SUC_EOF_INT_RAW = 0x20
	// Position of IN_ERR_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_ERR_EOF_INT_RAW_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_ERR_EOF_INT_RAW_Msk = 0x40
	// Bit IN_ERR_EOF_INT_RAW.
	UHCI_INT_RAW_IN_ERR_EOF_INT_RAW = 0x40
	// Position of OUT_DONE_INT_RAW field.
	UHCI_INT_RAW_OUT_DONE_INT_RAW_Pos = 0x7
	// Bit mask of OUT_DONE_INT_RAW field.
	UHCI_INT_RAW_OUT_DONE_INT_RAW_Msk = 0x80
	// Bit OUT_DONE_INT_RAW.
	UHCI_INT_RAW_OUT_DONE_INT_RAW = 0x80
	// Position of OUT_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_EOF_INT_RAW_Pos = 0x8
	// Bit mask of OUT_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_EOF_INT_RAW_Msk = 0x100
	// Bit OUT_EOF_INT_RAW.
	UHCI_INT_RAW_OUT_EOF_INT_RAW = 0x100
	// Position of IN_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_ERR_INT_RAW_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_ERR_INT_RAW_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_RAW.
	UHCI_INT_RAW_IN_DSCR_ERR_INT_RAW = 0x200
	// Position of OUT_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_OUT_DSCR_ERR_INT_RAW_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_OUT_DSCR_ERR_INT_RAW_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_RAW.
	UHCI_INT_RAW_OUT_DSCR_ERR_INT_RAW = 0x400
	// Position of IN_DSCR_EMPTY_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_RAW.
	UHCI_INT_RAW_IN_DSCR_EMPTY_INT_RAW = 0x800
	// Position of OUTLINK_EOF_ERR_INT_RAW field.
	UHCI_INT_RAW_OUTLINK_EOF_ERR_INT_RAW_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_RAW field.
	UHCI_INT_RAW_OUTLINK_EOF_ERR_INT_RAW_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_RAW.
	UHCI_INT_RAW_OUTLINK_EOF_ERR_INT_RAW = 0x1000
	// Position of OUT_TOTAL_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_RAW.
	UHCI_INT_RAW_OUT_TOTAL_EOF_INT_RAW = 0x2000
	// Position of SEND_S_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_S_Q_INT_RAW_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_S_Q_INT_RAW_Msk = 0x4000
	// Bit SEND_S_Q_INT_RAW.
	UHCI_INT_RAW_SEND_S_Q_INT_RAW = 0x4000
	// Position of SEND_A_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_A_Q_INT_RAW_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_A_Q_INT_RAW_Msk = 0x8000
	// Bit SEND_A_Q_INT_RAW.
	UHCI_INT_RAW_SEND_A_Q_INT_RAW = 0x8000
	// Position of DMA_INFIFO_FULL_WM_INT_RAW field.
	UHCI_INT_RAW_DMA_INFIFO_FULL_WM_INT_RAW_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_RAW field.
	UHCI_INT_RAW_DMA_INFIFO_FULL_WM_INT_RAW_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_RAW.
	UHCI_INT_RAW_DMA_INFIFO_FULL_WM_INT_RAW = 0x10000

	// INT_ST
	// Position of RX_START_INT_ST field.
	UHCI_INT_ST_RX_START_INT_ST_Pos = 0x0
	// Bit mask of RX_START_INT_ST field.
	UHCI_INT_ST_RX_START_INT_ST_Msk = 0x1
	// Bit RX_START_INT_ST.
	UHCI_INT_ST_RX_START_INT_ST = 0x1
	// Position of TX_START_INT_ST field.
	UHCI_INT_ST_TX_START_INT_ST_Pos = 0x1
	// Bit mask of TX_START_INT_ST field.
	UHCI_INT_ST_TX_START_INT_ST_Msk = 0x2
	// Bit TX_START_INT_ST.
	UHCI_INT_ST_TX_START_INT_ST = 0x2
	// Position of RX_HUNG_INT_ST field.
	UHCI_INT_ST_RX_HUNG_INT_ST_Pos = 0x2
	// Bit mask of RX_HUNG_INT_ST field.
	UHCI_INT_ST_RX_HUNG_INT_ST_Msk = 0x4
	// Bit RX_HUNG_INT_ST.
	UHCI_INT_ST_RX_HUNG_INT_ST = 0x4
	// Position of TX_HUNG_INT_ST field.
	UHCI_INT_ST_TX_HUNG_INT_ST_Pos = 0x3
	// Bit mask of TX_HUNG_INT_ST field.
	UHCI_INT_ST_TX_HUNG_INT_ST_Msk = 0x8
	// Bit TX_HUNG_INT_ST.
	UHCI_INT_ST_TX_HUNG_INT_ST = 0x8
	// Position of IN_DONE_INT_ST field.
	UHCI_INT_ST_IN_DONE_INT_ST_Pos = 0x4
	// Bit mask of IN_DONE_INT_ST field.
	UHCI_INT_ST_IN_DONE_INT_ST_Msk = 0x10
	// Bit IN_DONE_INT_ST.
	UHCI_INT_ST_IN_DONE_INT_ST = 0x10
	// Position of IN_SUC_EOF_INT_ST field.
	UHCI_INT_ST_IN_SUC_EOF_INT_ST_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ST field.
	UHCI_INT_ST_IN_SUC_EOF_INT_ST_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ST.
	UHCI_INT_ST_IN_SUC_EOF_INT_ST = 0x20
	// Position of IN_ERR_EOF_INT_ST field.
	UHCI_INT_ST_IN_ERR_EOF_INT_ST_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_ST field.
	UHCI_INT_ST_IN_ERR_EOF_INT_ST_Msk = 0x40
	// Bit IN_ERR_EOF_INT_ST.
	UHCI_INT_ST_IN_ERR_EOF_INT_ST = 0x40
	// Position of OUT_DONE_INT_ST field.
	UHCI_INT_ST_OUT_DONE_INT_ST_Pos = 0x7
	// Bit mask of OUT_DONE_INT_ST field.
	UHCI_INT_ST_OUT_DONE_INT_ST_Msk = 0x80
	// Bit OUT_DONE_INT_ST.
	UHCI_INT_ST_OUT_DONE_INT_ST = 0x80
	// Position of OUT_EOF_INT_ST field.
	UHCI_INT_ST_OUT_EOF_INT_ST_Pos = 0x8
	// Bit mask of OUT_EOF_INT_ST field.
	UHCI_INT_ST_OUT_EOF_INT_ST_Msk = 0x100
	// Bit OUT_EOF_INT_ST.
	UHCI_INT_ST_OUT_EOF_INT_ST = 0x100
	// Position of IN_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_IN_DSCR_ERR_INT_ST_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_IN_DSCR_ERR_INT_ST_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_ST.
	UHCI_INT_ST_IN_DSCR_ERR_INT_ST = 0x200
	// Position of OUT_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_OUT_DSCR_ERR_INT_ST_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_OUT_DSCR_ERR_INT_ST_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_ST.
	UHCI_INT_ST_OUT_DSCR_ERR_INT_ST = 0x400
	// Position of IN_DSCR_EMPTY_INT_ST field.
	UHCI_INT_ST_IN_DSCR_EMPTY_INT_ST_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_ST field.
	UHCI_INT_ST_IN_DSCR_EMPTY_INT_ST_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_ST.
	UHCI_INT_ST_IN_DSCR_EMPTY_INT_ST = 0x800
	// Position of OUTLINK_EOF_ERR_INT_ST field.
	UHCI_INT_ST_OUTLINK_EOF_ERR_INT_ST_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_ST field.
	UHCI_INT_ST_OUTLINK_EOF_ERR_INT_ST_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_ST.
	UHCI_INT_ST_OUTLINK_EOF_ERR_INT_ST = 0x1000
	// Position of OUT_TOTAL_EOF_INT_ST field.
	UHCI_INT_ST_OUT_TOTAL_EOF_INT_ST_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_ST field.
	UHCI_INT_ST_OUT_TOTAL_EOF_INT_ST_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_ST.
	UHCI_INT_ST_OUT_TOTAL_EOF_INT_ST = 0x2000
	// Position of SEND_S_Q_INT_ST field.
	UHCI_INT_ST_SEND_S_Q_INT_ST_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_ST field.
	UHCI_INT_ST_SEND_S_Q_INT_ST_Msk = 0x4000
	// Bit SEND_S_Q_INT_ST.
	UHCI_INT_ST_SEND_S_Q_INT_ST = 0x4000
	// Position of SEND_A_Q_INT_ST field.
	UHCI_INT_ST_SEND_A_Q_INT_ST_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_ST field.
	UHCI_INT_ST_SEND_A_Q_INT_ST_Msk = 0x8000
	// Bit SEND_A_Q_INT_ST.
	UHCI_INT_ST_SEND_A_Q_INT_ST = 0x8000
	// Position of DMA_INFIFO_FULL_WM_INT_ST field.
	UHCI_INT_ST_DMA_INFIFO_FULL_WM_INT_ST_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_ST field.
	UHCI_INT_ST_DMA_INFIFO_FULL_WM_INT_ST_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_ST.
	UHCI_INT_ST_DMA_INFIFO_FULL_WM_INT_ST = 0x10000

	// INT_ENA
	// Position of RX_START_INT_ENA field.
	UHCI_INT_ENA_RX_START_INT_ENA_Pos = 0x0
	// Bit mask of RX_START_INT_ENA field.
	UHCI_INT_ENA_RX_START_INT_ENA_Msk = 0x1
	// Bit RX_START_INT_ENA.
	UHCI_INT_ENA_RX_START_INT_ENA = 0x1
	// Position of TX_START_INT_ENA field.
	UHCI_INT_ENA_TX_START_INT_ENA_Pos = 0x1
	// Bit mask of TX_START_INT_ENA field.
	UHCI_INT_ENA_TX_START_INT_ENA_Msk = 0x2
	// Bit TX_START_INT_ENA.
	UHCI_INT_ENA_TX_START_INT_ENA = 0x2
	// Position of RX_HUNG_INT_ENA field.
	UHCI_INT_ENA_RX_HUNG_INT_ENA_Pos = 0x2
	// Bit mask of RX_HUNG_INT_ENA field.
	UHCI_INT_ENA_RX_HUNG_INT_ENA_Msk = 0x4
	// Bit RX_HUNG_INT_ENA.
	UHCI_INT_ENA_RX_HUNG_INT_ENA = 0x4
	// Position of TX_HUNG_INT_ENA field.
	UHCI_INT_ENA_TX_HUNG_INT_ENA_Pos = 0x3
	// Bit mask of TX_HUNG_INT_ENA field.
	UHCI_INT_ENA_TX_HUNG_INT_ENA_Msk = 0x8
	// Bit TX_HUNG_INT_ENA.
	UHCI_INT_ENA_TX_HUNG_INT_ENA = 0x8
	// Position of IN_DONE_INT_ENA field.
	UHCI_INT_ENA_IN_DONE_INT_ENA_Pos = 0x4
	// Bit mask of IN_DONE_INT_ENA field.
	UHCI_INT_ENA_IN_DONE_INT_ENA_Msk = 0x10
	// Bit IN_DONE_INT_ENA.
	UHCI_INT_ENA_IN_DONE_INT_ENA = 0x10
	// Position of IN_SUC_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_SUC_EOF_INT_ENA_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_SUC_EOF_INT_ENA_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ENA.
	UHCI_INT_ENA_IN_SUC_EOF_INT_ENA = 0x20
	// Position of IN_ERR_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_ERR_EOF_INT_ENA_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_ERR_EOF_INT_ENA_Msk = 0x40
	// Bit IN_ERR_EOF_INT_ENA.
	UHCI_INT_ENA_IN_ERR_EOF_INT_ENA = 0x40
	// Position of OUT_DONE_INT_ENA field.
	UHCI_INT_ENA_OUT_DONE_INT_ENA_Pos = 0x7
	// Bit mask of OUT_DONE_INT_ENA field.
	UHCI_INT_ENA_OUT_DONE_INT_ENA_Msk = 0x80
	// Bit OUT_DONE_INT_ENA.
	UHCI_INT_ENA_OUT_DONE_INT_ENA = 0x80
	// Position of OUT_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_EOF_INT_ENA_Pos = 0x8
	// Bit mask of OUT_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_EOF_INT_ENA_Msk = 0x100
	// Bit OUT_EOF_INT_ENA.
	UHCI_INT_ENA_OUT_EOF_INT_ENA = 0x100
	// Position of IN_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_ERR_INT_ENA_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_ERR_INT_ENA_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_ENA.
	UHCI_INT_ENA_IN_DSCR_ERR_INT_ENA = 0x200
	// Position of OUT_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_OUT_DSCR_ERR_INT_ENA_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_OUT_DSCR_ERR_INT_ENA_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_ENA.
	UHCI_INT_ENA_OUT_DSCR_ERR_INT_ENA = 0x400
	// Position of IN_DSCR_EMPTY_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_ENA.
	UHCI_INT_ENA_IN_DSCR_EMPTY_INT_ENA = 0x800
	// Position of OUTLINK_EOF_ERR_INT_ENA field.
	UHCI_INT_ENA_OUTLINK_EOF_ERR_INT_ENA_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_ENA field.
	UHCI_INT_ENA_OUTLINK_EOF_ERR_INT_ENA_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_ENA.
	UHCI_INT_ENA_OUTLINK_EOF_ERR_INT_ENA = 0x1000
	// Position of OUT_TOTAL_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_ENA.
	UHCI_INT_ENA_OUT_TOTAL_EOF_INT_ENA = 0x2000
	// Position of SEND_S_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_S_Q_INT_ENA_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_S_Q_INT_ENA_Msk = 0x4000
	// Bit SEND_S_Q_INT_ENA.
	UHCI_INT_ENA_SEND_S_Q_INT_ENA = 0x4000
	// Position of SEND_A_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_A_Q_INT_ENA_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_A_Q_INT_ENA_Msk = 0x8000
	// Bit SEND_A_Q_INT_ENA.
	UHCI_INT_ENA_SEND_A_Q_INT_ENA = 0x8000
	// Position of DMA_INFIFO_FULL_WM_INT_ENA field.
	UHCI_INT_ENA_DMA_INFIFO_FULL_WM_INT_ENA_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_ENA field.
	UHCI_INT_ENA_DMA_INFIFO_FULL_WM_INT_ENA_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_ENA.
	UHCI_INT_ENA_DMA_INFIFO_FULL_WM_INT_ENA = 0x10000

	// INT_CLR
	// Position of RX_START_INT_CLR field.
	UHCI_INT_CLR_RX_START_INT_CLR_Pos = 0x0
	// Bit mask of RX_START_INT_CLR field.
	UHCI_INT_CLR_RX_START_INT_CLR_Msk = 0x1
	// Bit RX_START_INT_CLR.
	UHCI_INT_CLR_RX_START_INT_CLR = 0x1
	// Position of TX_START_INT_CLR field.
	UHCI_INT_CLR_TX_START_INT_CLR_Pos = 0x1
	// Bit mask of TX_START_INT_CLR field.
	UHCI_INT_CLR_TX_START_INT_CLR_Msk = 0x2
	// Bit TX_START_INT_CLR.
	UHCI_INT_CLR_TX_START_INT_CLR = 0x2
	// Position of RX_HUNG_INT_CLR field.
	UHCI_INT_CLR_RX_HUNG_INT_CLR_Pos = 0x2
	// Bit mask of RX_HUNG_INT_CLR field.
	UHCI_INT_CLR_RX_HUNG_INT_CLR_Msk = 0x4
	// Bit RX_HUNG_INT_CLR.
	UHCI_INT_CLR_RX_HUNG_INT_CLR = 0x4
	// Position of TX_HUNG_INT_CLR field.
	UHCI_INT_CLR_TX_HUNG_INT_CLR_Pos = 0x3
	// Bit mask of TX_HUNG_INT_CLR field.
	UHCI_INT_CLR_TX_HUNG_INT_CLR_Msk = 0x8
	// Bit TX_HUNG_INT_CLR.
	UHCI_INT_CLR_TX_HUNG_INT_CLR = 0x8
	// Position of IN_DONE_INT_CLR field.
	UHCI_INT_CLR_IN_DONE_INT_CLR_Pos = 0x4
	// Bit mask of IN_DONE_INT_CLR field.
	UHCI_INT_CLR_IN_DONE_INT_CLR_Msk = 0x10
	// Bit IN_DONE_INT_CLR.
	UHCI_INT_CLR_IN_DONE_INT_CLR = 0x10
	// Position of IN_SUC_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_SUC_EOF_INT_CLR_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_SUC_EOF_INT_CLR_Msk = 0x20
	// Bit IN_SUC_EOF_INT_CLR.
	UHCI_INT_CLR_IN_SUC_EOF_INT_CLR = 0x20
	// Position of IN_ERR_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_ERR_EOF_INT_CLR_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_ERR_EOF_INT_CLR_Msk = 0x40
	// Bit IN_ERR_EOF_INT_CLR.
	UHCI_INT_CLR_IN_ERR_EOF_INT_CLR = 0x40
	// Position of OUT_DONE_INT_CLR field.
	UHCI_INT_CLR_OUT_DONE_INT_CLR_Pos = 0x7
	// Bit mask of OUT_DONE_INT_CLR field.
	UHCI_INT_CLR_OUT_DONE_INT_CLR_Msk = 0x80
	// Bit OUT_DONE_INT_CLR.
	UHCI_INT_CLR_OUT_DONE_INT_CLR = 0x80
	// Position of OUT_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_EOF_INT_CLR_Pos = 0x8
	// Bit mask of OUT_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_EOF_INT_CLR_Msk = 0x100
	// Bit OUT_EOF_INT_CLR.
	UHCI_INT_CLR_OUT_EOF_INT_CLR = 0x100
	// Position of IN_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_ERR_INT_CLR_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_ERR_INT_CLR_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_CLR.
	UHCI_INT_CLR_IN_DSCR_ERR_INT_CLR = 0x200
	// Position of OUT_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_OUT_DSCR_ERR_INT_CLR_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_OUT_DSCR_ERR_INT_CLR_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_CLR.
	UHCI_INT_CLR_OUT_DSCR_ERR_INT_CLR = 0x400
	// Position of IN_DSCR_EMPTY_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_CLR.
	UHCI_INT_CLR_IN_DSCR_EMPTY_INT_CLR = 0x800
	// Position of OUTLINK_EOF_ERR_INT_CLR field.
	UHCI_INT_CLR_OUTLINK_EOF_ERR_INT_CLR_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_CLR field.
	UHCI_INT_CLR_OUTLINK_EOF_ERR_INT_CLR_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_CLR.
	UHCI_INT_CLR_OUTLINK_EOF_ERR_INT_CLR = 0x1000
	// Position of OUT_TOTAL_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_CLR.
	UHCI_INT_CLR_OUT_TOTAL_EOF_INT_CLR = 0x2000
	// Position of SEND_S_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_S_Q_INT_CLR_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_S_Q_INT_CLR_Msk = 0x4000
	// Bit SEND_S_Q_INT_CLR.
	UHCI_INT_CLR_SEND_S_Q_INT_CLR = 0x4000
	// Position of SEND_A_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_A_Q_INT_CLR_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_A_Q_INT_CLR_Msk = 0x8000
	// Bit SEND_A_Q_INT_CLR.
	UHCI_INT_CLR_SEND_A_Q_INT_CLR = 0x8000
	// Position of DMA_INFIFO_FULL_WM_INT_CLR field.
	UHCI_INT_CLR_DMA_INFIFO_FULL_WM_INT_CLR_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_CLR field.
	UHCI_INT_CLR_DMA_INFIFO_FULL_WM_INT_CLR_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_CLR.
	UHCI_INT_CLR_DMA_INFIFO_FULL_WM_INT_CLR = 0x10000

	// DMA_OUT_STATUS
	// Position of OUT_FULL field.
	UHCI_DMA_OUT_STATUS_OUT_FULL_Pos = 0x0
	// Bit mask of OUT_FULL field.
	UHCI_DMA_OUT_STATUS_OUT_FULL_Msk = 0x1
	// Bit OUT_FULL.
	UHCI_DMA_OUT_STATUS_OUT_FULL = 0x1
	// Position of OUT_EMPTY field.
	UHCI_DMA_OUT_STATUS_OUT_EMPTY_Pos = 0x1
	// Bit mask of OUT_EMPTY field.
	UHCI_DMA_OUT_STATUS_OUT_EMPTY_Msk = 0x2
	// Bit OUT_EMPTY.
	UHCI_DMA_OUT_STATUS_OUT_EMPTY = 0x2

	// DMA_OUT_PUSH
	// Position of OUTFIFO_WDATA field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_WDATA_Pos = 0x0
	// Bit mask of OUTFIFO_WDATA field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_WDATA_Msk = 0x1ff
	// Position of OUTFIFO_PUSH field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_PUSH_Pos = 0x10
	// Bit mask of OUTFIFO_PUSH field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_PUSH_Msk = 0x10000
	// Bit OUTFIFO_PUSH.
	UHCI_DMA_OUT_PUSH_OUTFIFO_PUSH = 0x10000

	// DMA_IN_STATUS
	// Position of IN_FULL field.
	UHCI_DMA_IN_STATUS_IN_FULL_Pos = 0x0
	// Bit mask of IN_FULL field.
	UHCI_DMA_IN_STATUS_IN_FULL_Msk = 0x1
	// Bit IN_FULL.
	UHCI_DMA_IN_STATUS_IN_FULL = 0x1
	// Position of IN_EMPTY field.
	UHCI_DMA_IN_STATUS_IN_EMPTY_Pos = 0x1
	// Bit mask of IN_EMPTY field.
	UHCI_DMA_IN_STATUS_IN_EMPTY_Msk = 0x2
	// Bit IN_EMPTY.
	UHCI_DMA_IN_STATUS_IN_EMPTY = 0x2
	// Position of RX_ERR_CAUSE field.
	UHCI_DMA_IN_STATUS_RX_ERR_CAUSE_Pos = 0x4
	// Bit mask of RX_ERR_CAUSE field.
	UHCI_DMA_IN_STATUS_RX_ERR_CAUSE_Msk = 0x70

	// DMA_IN_POP
	// Position of INFIFO_RDATA field.
	UHCI_DMA_IN_POP_INFIFO_RDATA_Pos = 0x0
	// Bit mask of INFIFO_RDATA field.
	UHCI_DMA_IN_POP_INFIFO_RDATA_Msk = 0xfff
	// Position of INFIFO_POP field.
	UHCI_DMA_IN_POP_INFIFO_POP_Pos = 0x10
	// Bit mask of INFIFO_POP field.
	UHCI_DMA_IN_POP_INFIFO_POP_Msk = 0x10000
	// Bit INFIFO_POP.
	UHCI_DMA_IN_POP_INFIFO_POP = 0x10000

	// DMA_OUT_LINK
	// Position of OUTLINK_ADDR field.
	UHCI_DMA_OUT_LINK_OUTLINK_ADDR_Pos = 0x0
	// Bit mask of OUTLINK_ADDR field.
	UHCI_DMA_OUT_LINK_OUTLINK_ADDR_Msk = 0xfffff
	// Position of OUTLINK_STOP field.
	UHCI_DMA_OUT_LINK_OUTLINK_STOP_Pos = 0x1c
	// Bit mask of OUTLINK_STOP field.
	UHCI_DMA_OUT_LINK_OUTLINK_STOP_Msk = 0x10000000
	// Bit OUTLINK_STOP.
	UHCI_DMA_OUT_LINK_OUTLINK_STOP = 0x10000000
	// Position of OUTLINK_START field.
	UHCI_DMA_OUT_LINK_OUTLINK_START_Pos = 0x1d
	// Bit mask of OUTLINK_START field.
	UHCI_DMA_OUT_LINK_OUTLINK_START_Msk = 0x20000000
	// Bit OUTLINK_START.
	UHCI_DMA_OUT_LINK_OUTLINK_START = 0x20000000
	// Position of OUTLINK_RESTART field.
	UHCI_DMA_OUT_LINK_OUTLINK_RESTART_Pos = 0x1e
	// Bit mask of OUTLINK_RESTART field.
	UHCI_DMA_OUT_LINK_OUTLINK_RESTART_Msk = 0x40000000
	// Bit OUTLINK_RESTART.
	UHCI_DMA_OUT_LINK_OUTLINK_RESTART = 0x40000000
	// Position of OUTLINK_PARK field.
	UHCI_DMA_OUT_LINK_OUTLINK_PARK_Pos = 0x1f
	// Bit mask of OUTLINK_PARK field.
	UHCI_DMA_OUT_LINK_OUTLINK_PARK_Msk = 0x80000000
	// Bit OUTLINK_PARK.
	UHCI_DMA_OUT_LINK_OUTLINK_PARK = 0x80000000

	// DMA_IN_LINK
	// Position of INLINK_ADDR field.
	UHCI_DMA_IN_LINK_INLINK_ADDR_Pos = 0x0
	// Bit mask of INLINK_ADDR field.
	UHCI_DMA_IN_LINK_INLINK_ADDR_Msk = 0xfffff
	// Position of INLINK_AUTO_RET field.
	UHCI_DMA_IN_LINK_INLINK_AUTO_RET_Pos = 0x14
	// Bit mask of INLINK_AUTO_RET field.
	UHCI_DMA_IN_LINK_INLINK_AUTO_RET_Msk = 0x100000
	// Bit INLINK_AUTO_RET.
	UHCI_DMA_IN_LINK_INLINK_AUTO_RET = 0x100000
	// Position of INLINK_STOP field.
	UHCI_DMA_IN_LINK_INLINK_STOP_Pos = 0x1c
	// Bit mask of INLINK_STOP field.
	UHCI_DMA_IN_LINK_INLINK_STOP_Msk = 0x10000000
	// Bit INLINK_STOP.
	UHCI_DMA_IN_LINK_INLINK_STOP = 0x10000000
	// Position of INLINK_START field.
	UHCI_DMA_IN_LINK_INLINK_START_Pos = 0x1d
	// Bit mask of INLINK_START field.
	UHCI_DMA_IN_LINK_INLINK_START_Msk = 0x20000000
	// Bit INLINK_START.
	UHCI_DMA_IN_LINK_INLINK_START = 0x20000000
	// Position of INLINK_RESTART field.
	UHCI_DMA_IN_LINK_INLINK_RESTART_Pos = 0x1e
	// Bit mask of INLINK_RESTART field.
	UHCI_DMA_IN_LINK_INLINK_RESTART_Msk = 0x40000000
	// Bit INLINK_RESTART.
	UHCI_DMA_IN_LINK_INLINK_RESTART = 0x40000000
	// Position of INLINK_PARK field.
	UHCI_DMA_IN_LINK_INLINK_PARK_Pos = 0x1f
	// Bit mask of INLINK_PARK field.
	UHCI_DMA_IN_LINK_INLINK_PARK_Msk = 0x80000000
	// Bit INLINK_PARK.
	UHCI_DMA_IN_LINK_INLINK_PARK = 0x80000000

	// CONF1
	// Position of CHECK_SUM_EN field.
	UHCI_CONF1_CHECK_SUM_EN_Pos = 0x0
	// Bit mask of CHECK_SUM_EN field.
	UHCI_CONF1_CHECK_SUM_EN_Msk = 0x1
	// Bit CHECK_SUM_EN.
	UHCI_CONF1_CHECK_SUM_EN = 0x1
	// Position of CHECK_SEQ_EN field.
	UHCI_CONF1_CHECK_SEQ_EN_Pos = 0x1
	// Bit mask of CHECK_SEQ_EN field.
	UHCI_CONF1_CHECK_SEQ_EN_Msk = 0x2
	// Bit CHECK_SEQ_EN.
	UHCI_CONF1_CHECK_SEQ_EN = 0x2
	// Position of CRC_DISABLE field.
	UHCI_CONF1_CRC_DISABLE_Pos = 0x2
	// Bit mask of CRC_DISABLE field.
	UHCI_CONF1_CRC_DISABLE_Msk = 0x4
	// Bit CRC_DISABLE.
	UHCI_CONF1_CRC_DISABLE = 0x4
	// Position of SAVE_HEAD field.
	UHCI_CONF1_SAVE_HEAD_Pos = 0x3
	// Bit mask of SAVE_HEAD field.
	UHCI_CONF1_SAVE_HEAD_Msk = 0x8
	// Bit SAVE_HEAD.
	UHCI_CONF1_SAVE_HEAD = 0x8
	// Position of TX_CHECK_SUM_RE field.
	UHCI_CONF1_TX_CHECK_SUM_RE_Pos = 0x4
	// Bit mask of TX_CHECK_SUM_RE field.
	UHCI_CONF1_TX_CHECK_SUM_RE_Msk = 0x10
	// Bit TX_CHECK_SUM_RE.
	UHCI_CONF1_TX_CHECK_SUM_RE = 0x10
	// Position of TX_ACK_NUM_RE field.
	UHCI_CONF1_TX_ACK_NUM_RE_Pos = 0x5
	// Bit mask of TX_ACK_NUM_RE field.
	UHCI_CONF1_TX_ACK_NUM_RE_Msk = 0x20
	// Bit TX_ACK_NUM_RE.
	UHCI_CONF1_TX_ACK_NUM_RE = 0x20
	// Position of CHECK_OWNER field.
	UHCI_CONF1_CHECK_OWNER_Pos = 0x6
	// Bit mask of CHECK_OWNER field.
	UHCI_CONF1_CHECK_OWNER_Msk = 0x40
	// Bit CHECK_OWNER.
	UHCI_CONF1_CHECK_OWNER = 0x40
	// Position of WAIT_SW_START field.
	UHCI_CONF1_WAIT_SW_START_Pos = 0x7
	// Bit mask of WAIT_SW_START field.
	UHCI_CONF1_WAIT_SW_START_Msk = 0x80
	// Bit WAIT_SW_START.
	UHCI_CONF1_WAIT_SW_START = 0x80
	// Position of SW_START field.
	UHCI_CONF1_SW_START_Pos = 0x8
	// Bit mask of SW_START field.
	UHCI_CONF1_SW_START_Msk = 0x100
	// Bit SW_START.
	UHCI_CONF1_SW_START = 0x100
	// Position of DMA_INFIFO_FULL_THRS field.
	UHCI_CONF1_DMA_INFIFO_FULL_THRS_Pos = 0x9
	// Bit mask of DMA_INFIFO_FULL_THRS field.
	UHCI_CONF1_DMA_INFIFO_FULL_THRS_Msk = 0x1ffe00

	// STATE0
	// Position of STATE0 field.
	UHCI_STATE0_STATE0_Pos = 0x0
	// Bit mask of STATE0 field.
	UHCI_STATE0_STATE0_Msk = 0xffffffff

	// STATE1
	// Position of STATE1 field.
	UHCI_STATE1_STATE1_Pos = 0x0
	// Bit mask of STATE1 field.
	UHCI_STATE1_STATE1_Msk = 0xffffffff

	// DMA_OUT_EOF_DES_ADDR
	// Position of OUT_EOF_DES_ADDR field.
	UHCI_DMA_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_DES_ADDR field.
	UHCI_DMA_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Msk = 0xffffffff

	// DMA_IN_SUC_EOF_DES_ADDR
	// Position of IN_SUC_EOF_DES_ADDR field.
	UHCI_DMA_IN_SUC_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of IN_SUC_EOF_DES_ADDR field.
	UHCI_DMA_IN_SUC_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// DMA_IN_ERR_EOF_DES_ADDR
	// Position of IN_ERR_EOF_DES_ADDR field.
	UHCI_DMA_IN_ERR_EOF_DES_ADDR_IN_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of IN_ERR_EOF_DES_ADDR field.
	UHCI_DMA_IN_ERR_EOF_DES_ADDR_IN_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// DMA_OUT_EOF_BFR_DES_ADDR
	// Position of OUT_EOF_BFR_DES_ADDR field.
	UHCI_DMA_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_BFR_DES_ADDR field.
	UHCI_DMA_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// AHB_TEST
	// Position of AHB_TESTMODE field.
	UHCI_AHB_TEST_AHB_TESTMODE_Pos = 0x0
	// Bit mask of AHB_TESTMODE field.
	UHCI_AHB_TEST_AHB_TESTMODE_Msk = 0x7
	// Position of AHB_TESTADDR field.
	UHCI_AHB_TEST_AHB_TESTADDR_Pos = 0x4
	// Bit mask of AHB_TESTADDR field.
	UHCI_AHB_TEST_AHB_TESTADDR_Msk = 0x30

	// DMA_IN_DSCR
	// Position of INLINK_DSCR field.
	UHCI_DMA_IN_DSCR_INLINK_DSCR_Pos = 0x0
	// Bit mask of INLINK_DSCR field.
	UHCI_DMA_IN_DSCR_INLINK_DSCR_Msk = 0xffffffff

	// DMA_IN_DSCR_BF0
	// Position of INLINK_DSCR_BF0 field.
	UHCI_DMA_IN_DSCR_BF0_INLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF0 field.
	UHCI_DMA_IN_DSCR_BF0_INLINK_DSCR_BF0_Msk = 0xffffffff

	// DMA_IN_DSCR_BF1
	// Position of INLINK_DSCR_BF1 field.
	UHCI_DMA_IN_DSCR_BF1_INLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF1 field.
	UHCI_DMA_IN_DSCR_BF1_INLINK_DSCR_BF1_Msk = 0xffffffff

	// DMA_OUT_DSCR
	// Position of OUTLINK_DSCR field.
	UHCI_DMA_OUT_DSCR_OUTLINK_DSCR_Pos = 0x0
	// Bit mask of OUTLINK_DSCR field.
	UHCI_DMA_OUT_DSCR_OUTLINK_DSCR_Msk = 0xffffffff

	// DMA_OUT_DSCR_BF0
	// Position of OUTLINK_DSCR_BF0 field.
	UHCI_DMA_OUT_DSCR_BF0_OUTLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF0 field.
	UHCI_DMA_OUT_DSCR_BF0_OUTLINK_DSCR_BF0_Msk = 0xffffffff

	// DMA_OUT_DSCR_BF1
	// Position of OUTLINK_DSCR_BF1 field.
	UHCI_DMA_OUT_DSCR_BF1_OUTLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF1 field.
	UHCI_DMA_OUT_DSCR_BF1_OUTLINK_DSCR_BF1_Msk = 0xffffffff

	// ESCAPE_CONF
	// Position of TX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_C0_ESC_EN_Pos = 0x0
	// Bit mask of TX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_C0_ESC_EN_Msk = 0x1
	// Bit TX_C0_ESC_EN.
	UHCI_ESCAPE_CONF_TX_C0_ESC_EN = 0x1
	// Position of TX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_DB_ESC_EN_Pos = 0x1
	// Bit mask of TX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_DB_ESC_EN_Msk = 0x2
	// Bit TX_DB_ESC_EN.
	UHCI_ESCAPE_CONF_TX_DB_ESC_EN = 0x2
	// Position of TX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_11_ESC_EN_Pos = 0x2
	// Bit mask of TX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_11_ESC_EN_Msk = 0x4
	// Bit TX_11_ESC_EN.
	UHCI_ESCAPE_CONF_TX_11_ESC_EN = 0x4
	// Position of TX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_13_ESC_EN_Pos = 0x3
	// Bit mask of TX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_13_ESC_EN_Msk = 0x8
	// Bit TX_13_ESC_EN.
	UHCI_ESCAPE_CONF_TX_13_ESC_EN = 0x8
	// Position of RX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_C0_ESC_EN_Pos = 0x4
	// Bit mask of RX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_C0_ESC_EN_Msk = 0x10
	// Bit RX_C0_ESC_EN.
	UHCI_ESCAPE_CONF_RX_C0_ESC_EN = 0x10
	// Position of RX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_DB_ESC_EN_Pos = 0x5
	// Bit mask of RX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_DB_ESC_EN_Msk = 0x20
	// Bit RX_DB_ESC_EN.
	UHCI_ESCAPE_CONF_RX_DB_ESC_EN = 0x20
	// Position of RX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_11_ESC_EN_Pos = 0x6
	// Bit mask of RX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_11_ESC_EN_Msk = 0x40
	// Bit RX_11_ESC_EN.
	UHCI_ESCAPE_CONF_RX_11_ESC_EN = 0x40
	// Position of RX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_13_ESC_EN_Pos = 0x7
	// Bit mask of RX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_13_ESC_EN_Msk = 0x80
	// Bit RX_13_ESC_EN.
	UHCI_ESCAPE_CONF_RX_13_ESC_EN = 0x80

	// HUNG_CONF
	// Position of TXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_Pos = 0x0
	// Bit mask of TXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_Msk = 0xff
	// Position of TXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_SHIFT_Pos = 0x8
	// Bit mask of TXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_SHIFT_Msk = 0x700
	// Position of TXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_ENA_Pos = 0xb
	// Bit mask of TXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_ENA_Msk = 0x800
	// Bit TXFIFO_TIMEOUT_ENA.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_ENA = 0x800
	// Position of RXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_Pos = 0xc
	// Bit mask of RXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_Msk = 0xff000
	// Position of RXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_SHIFT_Pos = 0x14
	// Bit mask of RXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_SHIFT_Msk = 0x700000
	// Position of RXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_ENA_Pos = 0x17
	// Bit mask of RXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_ENA_Msk = 0x800000
	// Bit RXFIFO_TIMEOUT_ENA.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_ENA = 0x800000

	// RX_HEAD
	// Position of RX_HEAD field.
	UHCI_RX_HEAD_RX_HEAD_Pos = 0x0
	// Bit mask of RX_HEAD field.
	UHCI_RX_HEAD_RX_HEAD_Msk = 0xffffffff

	// QUICK_SENT
	// Position of SINGLE_SEND_NUM field.
	UHCI_QUICK_SENT_SINGLE_SEND_NUM_Pos = 0x0
	// Bit mask of SINGLE_SEND_NUM field.
	UHCI_QUICK_SENT_SINGLE_SEND_NUM_Msk = 0x7
	// Position of SINGLE_SEND_EN field.
	UHCI_QUICK_SENT_SINGLE_SEND_EN_Pos = 0x3
	// Bit mask of SINGLE_SEND_EN field.
	UHCI_QUICK_SENT_SINGLE_SEND_EN_Msk = 0x8
	// Bit SINGLE_SEND_EN.
	UHCI_QUICK_SENT_SINGLE_SEND_EN = 0x8
	// Position of ALWAYS_SEND_NUM field.
	UHCI_QUICK_SENT_ALWAYS_SEND_NUM_Pos = 0x4
	// Bit mask of ALWAYS_SEND_NUM field.
	UHCI_QUICK_SENT_ALWAYS_SEND_NUM_Msk = 0x70
	// Position of ALWAYS_SEND_EN field.
	UHCI_QUICK_SENT_ALWAYS_SEND_EN_Pos = 0x7
	// Bit mask of ALWAYS_SEND_EN field.
	UHCI_QUICK_SENT_ALWAYS_SEND_EN_Msk = 0x80
	// Bit ALWAYS_SEND_EN.
	UHCI_QUICK_SENT_ALWAYS_SEND_EN = 0x80

	// Q0_WORD0
	// Position of SEND_Q0_WORD0 field.
	UHCI_Q0_WORD0_SEND_Q0_WORD0_Pos = 0x0
	// Bit mask of SEND_Q0_WORD0 field.
	UHCI_Q0_WORD0_SEND_Q0_WORD0_Msk = 0xffffffff

	// Q0_WORD1
	// Position of SEND_Q0_WORD1 field.
	UHCI_Q0_WORD1_SEND_Q0_WORD1_Pos = 0x0
	// Bit mask of SEND_Q0_WORD1 field.
	UHCI_Q0_WORD1_SEND_Q0_WORD1_Msk = 0xffffffff

	// Q1_WORD0
	// Position of SEND_Q1_WORD0 field.
	UHCI_Q1_WORD0_SEND_Q1_WORD0_Pos = 0x0
	// Bit mask of SEND_Q1_WORD0 field.
	UHCI_Q1_WORD0_SEND_Q1_WORD0_Msk = 0xffffffff

	// Q1_WORD1
	// Position of SEND_Q1_WORD1 field.
	UHCI_Q1_WORD1_SEND_Q1_WORD1_Pos = 0x0
	// Bit mask of SEND_Q1_WORD1 field.
	UHCI_Q1_WORD1_SEND_Q1_WORD1_Msk = 0xffffffff

	// Q2_WORD0
	// Position of SEND_Q2_WORD0 field.
	UHCI_Q2_WORD0_SEND_Q2_WORD0_Pos = 0x0
	// Bit mask of SEND_Q2_WORD0 field.
	UHCI_Q2_WORD0_SEND_Q2_WORD0_Msk = 0xffffffff

	// Q2_WORD1
	// Position of SEND_Q2_WORD1 field.
	UHCI_Q2_WORD1_SEND_Q2_WORD1_Pos = 0x0
	// Bit mask of SEND_Q2_WORD1 field.
	UHCI_Q2_WORD1_SEND_Q2_WORD1_Msk = 0xffffffff

	// Q3_WORD0
	// Position of SEND_Q3_WORD0 field.
	UHCI_Q3_WORD0_SEND_Q3_WORD0_Pos = 0x0
	// Bit mask of SEND_Q3_WORD0 field.
	UHCI_Q3_WORD0_SEND_Q3_WORD0_Msk = 0xffffffff

	// Q3_WORD1
	// Position of SEND_Q3_WORD1 field.
	UHCI_Q3_WORD1_SEND_Q3_WORD1_Pos = 0x0
	// Bit mask of SEND_Q3_WORD1 field.
	UHCI_Q3_WORD1_SEND_Q3_WORD1_Msk = 0xffffffff

	// Q4_WORD0
	// Position of SEND_Q4_WORD0 field.
	UHCI_Q4_WORD0_SEND_Q4_WORD0_Pos = 0x0
	// Bit mask of SEND_Q4_WORD0 field.
	UHCI_Q4_WORD0_SEND_Q4_WORD0_Msk = 0xffffffff

	// Q4_WORD1
	// Position of SEND_Q4_WORD1 field.
	UHCI_Q4_WORD1_SEND_Q4_WORD1_Pos = 0x0
	// Bit mask of SEND_Q4_WORD1 field.
	UHCI_Q4_WORD1_SEND_Q4_WORD1_Msk = 0xffffffff

	// Q5_WORD0
	// Position of SEND_Q5_WORD0 field.
	UHCI_Q5_WORD0_SEND_Q5_WORD0_Pos = 0x0
	// Bit mask of SEND_Q5_WORD0 field.
	UHCI_Q5_WORD0_SEND_Q5_WORD0_Msk = 0xffffffff

	// Q5_WORD1
	// Position of SEND_Q5_WORD1 field.
	UHCI_Q5_WORD1_SEND_Q5_WORD1_Pos = 0x0
	// Bit mask of SEND_Q5_WORD1 field.
	UHCI_Q5_WORD1_SEND_Q5_WORD1_Msk = 0xffffffff

	// Q6_WORD0
	// Position of SEND_Q6_WORD0 field.
	UHCI_Q6_WORD0_SEND_Q6_WORD0_Pos = 0x0
	// Bit mask of SEND_Q6_WORD0 field.
	UHCI_Q6_WORD0_SEND_Q6_WORD0_Msk = 0xffffffff

	// Q6_WORD1
	// Position of SEND_Q6_WORD1 field.
	UHCI_Q6_WORD1_SEND_Q6_WORD1_Pos = 0x0
	// Bit mask of SEND_Q6_WORD1 field.
	UHCI_Q6_WORD1_SEND_Q6_WORD1_Msk = 0xffffffff

	// ESC_CONF0
	// Position of SEPER_CHAR field.
	UHCI_ESC_CONF0_SEPER_CHAR_Pos = 0x0
	// Bit mask of SEPER_CHAR field.
	UHCI_ESC_CONF0_SEPER_CHAR_Msk = 0xff
	// Position of SEPER_ESC_CHAR0 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR0_Pos = 0x8
	// Bit mask of SEPER_ESC_CHAR0 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR0_Msk = 0xff00
	// Position of SEPER_ESC_CHAR1 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR1_Pos = 0x10
	// Bit mask of SEPER_ESC_CHAR1 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR1_Msk = 0xff0000

	// ESC_CONF1
	// Position of ESC_SEQ0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_Pos = 0x0
	// Bit mask of ESC_SEQ0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_Msk = 0xff
	// Position of ESC_SEQ0_CHAR0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR0_Pos = 0x8
	// Bit mask of ESC_SEQ0_CHAR0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR0_Msk = 0xff00
	// Position of ESC_SEQ0_CHAR1 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR1_Pos = 0x10
	// Bit mask of ESC_SEQ0_CHAR1 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR1_Msk = 0xff0000

	// ESC_CONF2
	// Position of ESC_SEQ1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_Pos = 0x0
	// Bit mask of ESC_SEQ1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_Msk = 0xff
	// Position of ESC_SEQ1_CHAR0 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR0_Pos = 0x8
	// Bit mask of ESC_SEQ1_CHAR0 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR0_Msk = 0xff00
	// Position of ESC_SEQ1_CHAR1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR1_Pos = 0x10
	// Bit mask of ESC_SEQ1_CHAR1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR1_Msk = 0xff0000

	// ESC_CONF3
	// Position of ESC_SEQ2 field.
	UHCI_ESC_CONF3_ESC_SEQ2_Pos = 0x0
	// Bit mask of ESC_SEQ2 field.
	UHCI_ESC_CONF3_ESC_SEQ2_Msk = 0xff
	// Position of ESC_SEQ2_CHAR0 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR0_Pos = 0x8
	// Bit mask of ESC_SEQ2_CHAR0 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR0_Msk = 0xff00
	// Position of ESC_SEQ2_CHAR1 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR1_Pos = 0x10
	// Bit mask of ESC_SEQ2_CHAR1 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR1_Msk = 0xff0000

	// PKT_THRES
	// Position of PKT_THRS field.
	UHCI_PKT_THRES_PKT_THRS_Pos = 0x0
	// Bit mask of PKT_THRS field.
	UHCI_PKT_THRES_PKT_THRS_Msk = 0x1fff

	// DATE
	// Position of DATE field.
	UHCI_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	UHCI_DATE_DATE_Msk = 0xffffffff
)
